<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Front Page on</title><link>https://minuk.dev/wiki/</link><description>Recent content in Front Page on</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Mon, 13 Jan 2025 00:27:28 +0900</lastBuildDate><atom:link href="https://minuk.dev/wiki/index.xml" rel="self" type="application/rss+xml"/><item><title>2025-01-13</title><link>https://minuk.dev/wiki/daily/2025-01-13/</link><pubDate>Mon, 13 Jan 2025 00:14:58 +0900</pubDate><guid>https://minuk.dev/wiki/daily/2025-01-13/</guid><description>&lt;p>![[Drawing 2025-01-13 00.26.22.excalidraw]]&lt;/p></description></item><item><title>Kubernetes Community Day 2024</title><link>https://minuk.dev/wiki/kubernetes-community-day-korea/</link><pubDate>Tue, 24 Sep 2024 13:36:50 +0900</pubDate><guid>https://minuk.dev/wiki/kubernetes-community-day-korea/</guid><description>&lt;h2 id="kubernetes-kafka">Kubernetes Kafka&lt;/h2>
&lt;ul>
&lt;li>신한카드 사례&lt;/li>
&lt;li>Strimizi &amp;amp; Kafka:
&lt;ul>
&lt;li>왜 Kafka 를 kubernetes 에 올리냐?:
&lt;ul>
&lt;li>kubernetes 의 선언형 API&lt;/li>
&lt;li>Kafka 의 설치와 운영 난이도&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Strimzi: Kafka on Kuberntes in a few minutes&lt;/li>
&lt;li>Kubernetes Operator 패턴으로 설치:
&lt;ul>
&lt;li>Helm 차트에서 Operator 로 넘어가는 중&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>KafkaConnect 로 배포하면 build 를 사용해서 원하는 Connect 와 조합해서 올리는 편함이 있다.&lt;/li>
&lt;li>Kafka 주변도구:
&lt;ul>
&lt;li>Kafka UI&lt;/li>
&lt;li>Apicurio Registry&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>새롭게 배운거: ODD(Open Data Discovery) Platform, Kafka Exporter 가 선호된다,&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kafka 주변 도구&lt;/li>
&lt;li>Kafka 모니터링&lt;/li>
&lt;/ul>
&lt;h2 id="ha-kafka">HA Kafka&lt;/h2>
&lt;ul>
&lt;li>LoxiLB (CNCF Sandbox)&lt;/li>
&lt;li>NetLOX:
&lt;ul>
&lt;li>eBPF 재단 5G 에지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>당했다. 나는 HA 와 Multi-AZ 와 Multi-Region 을 들으러 왔는데, LoxiLB 이야기가 너무 많이 나온다&amp;hellip;.&lt;/li>
&lt;/ul></description></item><item><title>Observability Engineering</title><link>https://minuk.dev/wiki/observability-engineering-kr/</link><pubDate>Sun, 18 Aug 2024 23:12:23 +0900</pubDate><guid>https://minuk.dev/wiki/observability-engineering-kr/</guid><description>뎅브옵스 엔지니어를 위한 실전 관찰 가능성 엔지니어링</description></item><item><title>Learning OpenTelemetry</title><link>https://minuk.dev/wiki/learning-opentelemetry/</link><pubDate>Sat, 11 May 2024 01:31:18 +0900</pubDate><guid>https://minuk.dev/wiki/learning-opentelemetry/</guid><description>&lt;h1 id="learning-opentelemetry">Learning OpenTelemetry&lt;/h1>
&lt;ul>
&lt;li>Setting Up and Operating a Modern Observability System&lt;/li>
&lt;/ul>
&lt;h2 id="chapter-1-the-state-of-modern-observability">Chapter 1. The State of Modern Observability&lt;/h2>
&lt;h3 id="the-times-they-are-a-changin">The Times They Are A-Changin'&lt;/h3>
&lt;h3 id="observability-key-terms-to-know">Observability: Key Terms to Know&lt;/h3>
&lt;ul>
&lt;li>Resources:
&lt;ul>
&lt;li>Physical compoenents: servers, containers, processes, RAM, CPU, and network cards.&lt;/li>
&lt;li>Logical components: clients, applications, API endpoints, databases, and load balancers&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Transactions:
&lt;ul>
&lt;li>These are requests that orchestrate and utilize the resources the system needs to do work on behalf of the user.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>User telemetry&lt;/li>
&lt;li>Performance telemetry&lt;/li>
&lt;li>Signal:
&lt;ul>
&lt;li>Events logs&lt;/li>
&lt;li>System metrics&lt;/li>
&lt;li>etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>instrumentation: code that emits telemetry data&lt;/li>
&lt;li>transmission system: sending the data over the network to an analysis tool&lt;/li>
&lt;li>telemetry + analysis = observability&lt;/li>
&lt;/ul>
&lt;h3 id="a-breif-history-of-telemetry">A Breif History of Telemetry&lt;/h3>
&lt;h3 id="the-three-browser-tabs-of-observability">The Three Browser Tabs of Observability&lt;/h3>
&lt;ul>
&lt;li>logs&lt;/li>
&lt;li>metrics&lt;/li>
&lt;li>tracing&lt;/li>
&lt;li>A pillar of observability:
&lt;ul>
&lt;li>Instrumentation&lt;/li>
&lt;li>Data format&lt;/li>
&lt;li>Data transmission&lt;/li>
&lt;li>Storage and analysis&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="emerging-complications">Emerging Complications&lt;/h3>
&lt;ul>
&lt;li>Most production problems emerge from the way many concurrent transcations interact.&lt;/li>
&lt;/ul>
&lt;h3 id="the-three-pillars-were-an-accident">The Three Pillars Were an Accident&lt;/h3>
&lt;ul>
&lt;li>Useful observations do not come from looking at data in isolation.&lt;/li>
&lt;/ul>
&lt;h3 id="a-single-braid-of-data">A Single Braid of Data&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Human investigation:&lt;/p></description></item><item><title>prometheus-native-histograms-in-proudction</title><link>https://minuk.dev/wiki/prometheus-native-histograms-in-production/</link><pubDate>Mon, 04 Sep 2023 01:05:34 +0900</pubDate><guid>https://minuk.dev/wiki/prometheus-native-histograms-in-production/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=TgINvIK9SYc&amp;amp;list=PLj6h78yzYM2ORxwcjTn4RLAOQOYjvQ2A3&amp;amp;index=6">https://www.youtube.com/watch?v=TgINvIK9SYc&amp;amp;list=PLj6h78yzYM2ORxwcjTn4RLAOQOYjvQ2A3&amp;amp;index=6&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="disclaimer">Disclaimer&lt;/h2>
&lt;ul>
&lt;li>Native Histograms are an experimental feature!&lt;/li>
&lt;li>Everything described here can stil lchange!&lt;/li>
&lt;li>Things might break or behave weirdly!&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="prometheus%20--enable-feature=native-histograms">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>prometheus --enable-feature&lt;span style="color:#f92672">=&lt;/span>native-histograms&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="wishlist">Wishlist&lt;/h2>
&lt;ul>
&lt;li>Everything that works well now should continue to work well.&lt;/li>
&lt;li>I never want to configure buckets again.&lt;/li>
&lt;li>All histograms should always be aggregatable with each other, across time and space.&lt;/li>
&lt;li>I want accurate quantile and percentage estimations across the whole range of observations.&lt;/li>
&lt;li>I want all of that at a lower cost thant current histograms so that I can finally partition histograms at will.&lt;/li>
&lt;/ul>
&lt;h2 id="1-resource-consumption-of-the-instrumented-binary">1. Resource consumption of the instrumented binary&lt;/h2>
&lt;h2 id="2-frequency-of-resets-and-resolution-reduction">2. Frequency of resets and resolution reduction&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Scraping 15 instances of the cloud-backend-gateway.&lt;/p></description></item><item><title>Making Sense of Your Vital Signals - The Future of Pod and Containers Monitoring</title><link>https://minuk.dev/wiki/making-sense-of-your-vital-signals-the-future-of-pod-and-containers-monitoring/</link><pubDate>Sun, 27 Aug 2023 15:49:49 +0900</pubDate><guid>https://minuk.dev/wiki/making-sense-of-your-vital-signals-the-future-of-pod-and-containers-monitoring/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/program/schedule/">https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/program/schedule/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=w6PeNpPhIF8&amp;amp;t=1s&amp;amp;ab_channel=CNCF%5BCloudNativeComputingFoundation%5D">https://www.youtube.com/watch?v=w6PeNpPhIF8&amp;amp;t=1s&amp;amp;ab_channel=CNCF%5BCloudNativeComputingFoundation%5D&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="you-were-paged-why">You were paged! Why!?&lt;/h2>
&lt;ul>
&lt;li>Observability:
&lt;ul>
&lt;li>Understand resource usage, changes with deployments, rollouts&lt;/li>
&lt;li>Identify issues and unexpected behavior with applications&lt;/li>
&lt;li>Alerting on unexpected conditions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SLO/SLIs&lt;/li>
&lt;li>Node stability:
&lt;ul>
&lt;li>Kubelet subcomponents:
&lt;ul>
&lt;li>(e.g. eviction manager) depend on metrics to understand which pods to evict:
&lt;ul>
&lt;li>e.g. pod that over consumes ephemeral storage will be evicted&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="theres-a-lot-of-metrics-in-k8s">There&amp;rsquo;s a lot of metrics in k8s&amp;hellip;&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Node Level Metrics (i.e. node-exporter)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Kubernetes component metrics (e.g. api-server, controller manager, scheduler, kubelet etc)&lt;/p></description></item><item><title>Defining A Common Observability Query Language and Other observability TAG Updates</title><link>https://minuk.dev/wiki/defining-a-common-observability-query-language-and-other-observability-tag-updates/</link><pubDate>Sun, 27 Aug 2023 14:41:29 +0900</pubDate><guid>https://minuk.dev/wiki/defining-a-common-observability-query-language-and-other-observability-tag-updates/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=9mchgI3mr_8&amp;amp;list=PLj6h78yzYM2PyrvCoOii4rAopBswfz1p7&amp;amp;index=55&amp;amp;ab_channel=CNCF%5BCloudNativeComputingFoundation%5D">Original Link&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kccnceu2023.sched.com/event/1Ipz2/defining-a-common-observability-query-language-and-other-observability-tag-updates-alolita-sharma-matt-young-apple?iframe=no&amp;amp;w=100%25&amp;amp;sidebar=yes&amp;amp;bg=no">https://kccnceu2023.sched.com/event/1Ipz2/defining-a-common-observability-query-language-and-other-observability-tag-updates-alolita-sharma-matt-young-apple?iframe=no&amp;amp;w=100%&amp;amp;sidebar=yes&amp;amp;bg=no&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="cncf-observability-project-landscape">CNCF Observability Project Landscape&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Graduated Projectes:&lt;/p>
&lt;ul>
&lt;li>fluentd&lt;/li>
&lt;li>jeager&lt;/li>
&lt;li>prometheus&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Incubating Projects:&lt;/p>
&lt;ul>
&lt;li>chaos mesh&lt;/li>
&lt;li>openmetrics&lt;/li>
&lt;li>opentelemetry&lt;/li>
&lt;li>cortex&lt;/li>
&lt;li>litmux&lt;/li>
&lt;li>thanos&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Sandbox Projects:&lt;/p>
&lt;ul>
&lt;li>chaosblade&lt;/li>
&lt;li>Pixie&lt;/li>
&lt;li>fonio&lt;/li>
&lt;li>skooner&lt;/li>
&lt;li>kuberhealthy&lt;/li>
&lt;li>trickster&lt;/li>
&lt;li>opencost&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="otag-initiatives-workgroups-activities">OTAG Initiatives, Workgroups, Activities&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Initiatives:&lt;/p>
&lt;ul>
&lt;li>Observability query language standardization&lt;/li>
&lt;li>Continuous cost measurement and optimization&lt;/li>
&lt;li>Profilling in Open Telemetry&lt;/li>
&lt;li>Graphs in Observability&lt;/li>
&lt;li>Exceptions as another telemetry data type&lt;/li>
&lt;li>Correlation across telemetry data signals&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://opentelemetry.io/blog/2022/why-and-how-ebay-pivoted-to-opentelemetry/">https://opentelemetry.io/blog/2022/why-and-how-ebay-pivoted-to-opentelemetry/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://px.dev/">https://px.dev/&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="profiling-support-in-opentelemetry">Profiling support in OpenTelemetry&lt;/h2>
&lt;ul>
&lt;li>Profiling support in Opentelemetry:
&lt;ul>
&lt;li>Update by Ryan Perry (Jan 2023)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="observability-query-language-standardization">Observability Query Language Standardization&lt;/h2>
&lt;ul>
&lt;li>Started as a request at Open Telemetry Community Meeting at Kubecon NA 2022 in Detroit:
&lt;ul>
&lt;li>OpenTelemetry project recommendation to continue query specification discussions in OTAG
This discussion has been requestsed by several end-users( e.g. EBay, Netflix, Apple)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Workgroup charter discussed and finalkized in CNCF Observability TAG&lt;/li>
&lt;li>Workgroup creation request for approval from TOC is currently under consideration&lt;/li>
&lt;li>Get Involved. See the following links:
&lt;ul>
&lt;li>&lt;a href="https://github.com/cncf/tag-observability/blob/main/working-groups/query-standardization.md">https://github.com/cncf/tag-observability/blob/main/working-groups/query-standardization.md&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="observability-query-language-stadnardization">Observability Query Language Stadnardization&lt;/h2>
&lt;ul>
&lt;li>Benefits:
&lt;ul>
&lt;li>Portability for end users&lt;/li>
&lt;li>Correlate various telemetry data types&lt;/li>
&lt;li>Reduce developer and operations toil&lt;/li>
&lt;li>Federated veiw regardless of data location&lt;/li>
&lt;li>Let vendors focus on unique features&lt;/li>
&lt;li>Lower migration and acquisition costs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Goals:
&lt;ul>
&lt;li>Compile a list of end user use cases&lt;/li>
&lt;li>Research existing QLs&lt;/li>
&lt;li>Recommend semantics, models and behaviors for a standard:
&lt;ul>
&lt;li>Follow-up groups/projects would implement recommendations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Help Needed:
&lt;ul>
&lt;li>Provides uses cases
Document languages and semantics
Work together towards a standard&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="qa">Q&amp;amp;A&lt;/h2>
&lt;ul>
&lt;li>There are various types in tsdb, how can I define how to sort the results when querying:
&lt;ul>
&lt;li>Details about the implementation, there are various languages right now, and there are some that are not open source, so we still have to come up with a proposal to know.&lt;/li>
&lt;li>(Personal thought) I thought the question was ambiguous to answer, so the answer is bound to be ambiguous accordingly. I wonder if it was a question with too standard content and an answer with standard content.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="personal-impression">Personal Impression&lt;/h2>
&lt;ul>
&lt;li>There are a lot of links in the presentation. But, there is no link to access it. It made me spend a lot of time to find the links.&lt;/li>
&lt;li>It is just a good video to follow the recent observability&amp;rsquo;s trend.:
&lt;ul>
&lt;li>Many observability tools are separated.&lt;/li>
&lt;li>And too many developers are suffered by repeated implementation and makes a mistake again.&lt;/li>
&lt;li>So, observability query languages should be defined nowadays.&lt;/li>
&lt;li>IMO, promql is a de-facto standard for metrics.
&lt;ul>
&lt;li>There are not a standard for log &amp;amp; trace.&lt;/li>
&lt;li>But, cncf &amp;amp; opentelemetry are very closed to grafana.&lt;/li>
&lt;li>logql &amp;amp; traceql are strong candidates because of it.&lt;/li>
&lt;li>I believe they are not kind to user, so I worry.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Beyond Tracing - What do we do with all this data</title><link>https://minuk.dev/wiki/beyond-tracing-what-do-we-do-with-all-this-data/</link><pubDate>Mon, 06 Mar 2023 02:28:31 +0900</pubDate><guid>https://minuk.dev/wiki/beyond-tracing-what-do-we-do-with-all-this-data/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=zVHHeO8tAWQ">https://www.youtube.com/watch?v=zVHHeO8tAWQ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;ul>
&lt;li>Metrics-generator&lt;/li>
&lt;li>Parquet&lt;/li>
&lt;li>TraceQL&lt;/li>
&lt;/ul>
&lt;h2 id="matrics-generator">Matrics-generator&lt;/h2>
&lt;h3 id="why-metrics-if-you-have-traces">Why metrics if you have traces?&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Transcation-oriented : Highly structured&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Service-oriented : Aggregated, historical&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Span metrics:&lt;/p>
&lt;ul>
&lt;li>Rate, Error, Duration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Service graph metrics:&lt;/p>
&lt;ul>
&lt;li>Extract service topology&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tempo Launched at Oct 2022&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tempo 1.0 Jun 2021&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Search over recent data Nov 2021&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Full backend search Jan 2022&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parquet storage format Dec 2021&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-parquet">What is Parquet?&lt;/h2>
&lt;ul>
&lt;li>Apache Parquet is an opensource, column-oriented data file format designed for efficient data storage and retrieval.&lt;/li>
&lt;li>What dos this mean?:
&lt;ul>
&lt;li>Tempo can store and access data more efficiently&lt;/li>
&lt;li>So can you - arege ecosystem of tools&lt;/li>
&lt;li>No new infrastructure - just a new file format&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="schema">Schema&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="TraceID%0aDuration%0a%20%20Span%20#1%0a%20%20%20%20Name%0a%20%20%20%20ServiceName%0a%20%20%20%20Tag%20#1%0a%20%20%20%20Tag%20#2%0a%20%20%20%20.%0a%20%20%20%20Duration%0a%20%20Span%20#2%0a%20%20%20%20Name%0a%20%20%20%20ServiceName%0a%20%20%20%20Tag%20#1%0a%20%20%20%20Event#1%0a%20%20%20%20.%0a%20%20%20%20Duration">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>TraceID
Duration
 Span #1
 Name
 ServiceName
 Tag #1
 Tag #2
 .
 Duration
 Span #2
 Name
 ServiceName
 Tag #1
 Event#1
 .
 Duration&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>Encodings:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>traceID into dictionary&lt;/li>
&lt;li>duration into delta&lt;/li>
&lt;li>tags into dictionary&lt;/li>
&lt;li>events into snappy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>FindTraceByID&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>Attribute search:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>cluster=&amp;quot;foo&amp;quot;, namespace=&amp;quot;bar&amp;quot;&lt;/code>&lt;/li>
&lt;li>It uses their tags&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>Felxible schema:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>easily add new column (e.g. cluster, http.url)&lt;/li>
&lt;li>This feature makes us easily find tracing data using custom columns.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="inside-a-block">Inside a block&lt;/h3>
&lt;ul>
&lt;li>Parquet:
&lt;ul>
&lt;li>Open file format - use existing tools&lt;/li>
&lt;li>&lt;code>parquet-tools head data.parquet&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="traceql">TraceQL&lt;/h2>
&lt;h3 id="selecting-traces---basics">Selecting Traces - Basics&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%7b%20duration%20%3e%202s%20%7d%0a%7b%20name%20=%20%22GET%20/:endpoint%22%20%7d%0a%7b%20.http.status%20=%20200%20%7d%0a%7b%20span.http.url%20=~%20%22/api/v1/.*%22%20%7d%0a%7b%20resource.namespace%20=%20%22prod%22%20%7d%0a%7b%20.http.url=%22/:endpoint%22%20&amp;amp;&amp;amp;%20.http.status%20=%20200%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>{ duration &amp;gt; 2s }
{ name = &amp;#34;GET /:endpoint&amp;#34; }
{ .http.status = 200 }
{ span.http.url =~ &amp;#34;/api/v1/.*&amp;#34; }
{ resource.namespace = &amp;#34;prod&amp;#34; }
{ .http.url=&amp;#34;/:endpoint&amp;#34; &amp;amp;&amp;amp; .http.status = 200 }&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h3 id="traceql---aggregates">TraceQL - Aggregates&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%7b%20.db.system%20=%20%22postgres%22%20%7d%20%7c%20cound%28%29%20%3e%203%20%7d%0a%7b%20name%20=%20%22dns.lookup%22%20%7d%20%7c%20avg%28duration%29%20%3e%20500ms%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>{ .db.system = &amp;#34;postgres&amp;#34; } | cound() &amp;gt; 3 }
{ name = &amp;#34;dns.lookup&amp;#34; } | avg(duration) &amp;gt; 500ms }&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h3 id="traceql---pipelines-of-spansets">TraceQL - Pipelines of Spansets&lt;/h3>
&lt;h3 id="selecting-traces---structural">Selecting Traces - Structural&lt;/h3>
&lt;h3 id="traceql---structural">TraceQL - Structural&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%7b%20.service.name%20=%20%22foo%22%20%7d%20%3e%3e%20%7b.service.name%20=%20%22bar%22%20%7d%0a%7b%20name%20=%20%22tcp.connect%22%20%7d%20~%20%7b%20name%20=%20%22dns.lookup%22%20%7d%0a%7b%20.service.name%20!=%20parent.service.name%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>{ .service.name = &amp;#34;foo&amp;#34; } &amp;gt;&amp;gt; {.service.name = &amp;#34;bar&amp;#34; }
{ name = &amp;#34;tcp.connect&amp;#34; } ~ { name = &amp;#34;dns.lookup&amp;#34; }
{ .service.name != parent.service.name }&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="personal-notes">Personal Notes&lt;/h2>
&lt;ul>
&lt;li>How to connect metircs and tracing graph? Is only the traceId enough to do it?:
&lt;ul>
&lt;li>For now, prometheus is well known as a troublesome because of its structure which cannot be horizontally scaled.&lt;/li>
&lt;li>To solve this problem, lots of companies use Thanos with low resolution.&lt;/li>
&lt;li>In this situation, tracing information is newly occurred data to save it.&lt;/li>
&lt;li>In my opinion, it is needed to be examined especially in the sight of storage like retention &amp;amp; resolution. Because it is linked to metrics which can be stored with short retention and low resolution.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>grafanacon</title><link>https://minuk.dev/wiki/grafanacon/</link><pubDate>Mon, 06 Mar 2023 02:26:29 +0900</pubDate><guid>https://minuk.dev/wiki/grafanacon/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>grafanacon2022 : &lt;a href="https://grafana.com/about/events/grafanacon/2022/">https://grafana.com/about/events/grafanacon/2022/&lt;/a>&lt;/li>
&lt;li>youtube playlists : &lt;a href="https://www.youtube.com/playlist?list=PLDGkOdUX1Ujr0fY5Fv4bT8i0MURQArPwI">https://www.youtube.com/playlist?list=PLDGkOdUX1Ujr0fY5Fv4bT8i0MURQArPwI&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="notes">Notes&lt;/h2>
&lt;ul>
&lt;li>[[beyond-tracing-what-do-we-do-with-all-this-data]]&lt;/li>
&lt;/ul></description></item><item><title>Observability Engineering</title><link>https://minuk.dev/wiki/observability-engineering/</link><pubDate>Mon, 20 Feb 2023 22:40:32 +0900</pubDate><guid>https://minuk.dev/wiki/observability-engineering/</guid><description>&lt;h1 id="part-i-the-path-to-observability">Part I. The Path to Observability&lt;/h1>
&lt;h2 id="chapter-1-what-is-observability">Chapter 1. What Is Observability?&lt;/h2>
&lt;h3 id="the-mathematical-definition-of-observability">The Mathematical Definition of Observability&lt;/h3>
&lt;ul>
&lt;li>Observability : a measure of how well internal states of a system can be inferred from knowledge of its external outputs.&lt;/li>
&lt;/ul>
&lt;h3 id="applying-observability-to-software-systems">Applying Observability to Software Systems&lt;/h3>
&lt;ul>
&lt;li>Understand the inner workings of your application&lt;/li>
&lt;li>Understand any stem state your application may have gotten itself into, even new ones you have never seen before and couldn&amp;rsquo;t have predicted&lt;/li>
&lt;li>Understand the innner workings and system state solely by observing and interrogating with external tools&lt;/li>
&lt;li>Understand the internal state without shipping any new custom code to handle it (because that implies you needed prior knowledge to explain it)&lt;/li>
&lt;/ul>
&lt;h3 id="why-observability-matters-now">Why Observability Matters Now&lt;/h3>
&lt;ul>
&lt;li>With monitoring, software developers can&amp;rsquo;t fully see their systems. They squint at the systems.&lt;/li>
&lt;/ul>
&lt;h4 id="is-this-really-the-best-way">Is This Really the Best Way?&lt;/h4>
&lt;ul>
&lt;li>As an industry, we generally don&amp;rsquo;t question whether we should do it, but how.&lt;/li>
&lt;li>More abstract and more complex system&lt;/li>
&lt;/ul>
&lt;h4 id="why-are-metrics-and-monitoring-not-enough">Why Are Metrics and Monitoring Not Enough?&lt;/h4>
&lt;ul>
&lt;li>Traditional:
&lt;ul>
&lt;li>Monolith&lt;/li>
&lt;li>1 stateful (database)&lt;/li>
&lt;li>low-level permission&lt;/li>
&lt;li>controllable containers, VMs, bare metals&lt;/li>
&lt;li>static, long-running&lt;/li>
&lt;li>only can examine after problems occurred.&lt;/li>
&lt;li>dashboard &amp;amp; telemetry serve for only ops engineers.&lt;/li>
&lt;li>block-box applications&lt;/li>
&lt;li>focus on uptime &amp;amp; failure prevention&lt;/li>
&lt;li>limited or small number of dimensions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>But, now:
&lt;ul>
&lt;li>many service&lt;/li>
&lt;li>polyglot persistence&lt;/li>
&lt;li>extremely dynamic infrastructure&lt;/li>
&lt;li>many far-flung and loosely couped services&lt;/li>
&lt;li>uncontrollable&lt;/li>
&lt;li>not only ops engineers, but also others&lt;/li>
&lt;li>automatic instrumentation for complex systems&lt;/li>
&lt;li>focus on reliability &amp;amp; toleration&lt;/li>
&lt;li>unlimited number of dimensions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="debugging-with-metrics-versus-observability">Debugging with Metrics Versus Observability&lt;/h3>
&lt;ul>
&lt;li>Debugging with metrics requires you to connect dozens of disconnected metrics that were recorded over the course of executing any one particular request, across any number of service or machines, to infer what might have occurred over the various hops needed for its fulfillment.&lt;/li>
&lt;li>Monitoring is for the known-kunknowns, but observability is for the unknown-unknowns.&lt;/li>
&lt;/ul>
&lt;h3 id="the-role-of-cardinality">The Role of Cardinality&lt;/h3>
&lt;ul>
&lt;li>Cardinality matters for observability, because high-cardinality information is almost always the most useful in identifying data for debugging or understanding a system.&lt;/li>
&lt;li>Unfortunately, metrics-based tooling systems can deal with only low-cardinality dimensions at any reasonable scale.&lt;/li>
&lt;/ul>
&lt;h3 id="the-role-of-dimensionality">The Role of Dimensionality&lt;/h3>
&lt;ul>
&lt;li>Cardinality: The uniqueness of the value within your data&lt;/li>
&lt;li>Dimensionality: The number of keys within that data&lt;/li>
&lt;/ul>
&lt;h2 id="debugging-with-observability">Debugging with Observability&lt;/h2>
&lt;ul>
&lt;li>Observability tools encourage developers to gather rich telemetry for every possible event that could occur, passing along the full context of any given request and storing it for possible use at some point down the line.&lt;/li>
&lt;li>Observability tools are specifically designed to query aginst high-cardinality, high-dimensionality data.&lt;/li>
&lt;/ul>
&lt;h2 id="observability-is-for-modern-systems">Observability Is for Modern Systems&lt;/h2>
&lt;h1 id="chapter-2-how-debugging-practices-differ-between-observability-and-monitoring">Chapter 2. How Debugging Practices Differ Between Observability and Monitoring&lt;/h1>
&lt;ul>
&lt;li>Traditional monitoring:
&lt;ul>
&lt;li>checking system conditions against known thresholds&lt;/li>
&lt;li>reactive approach&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Observability tools:
&lt;ul>
&lt;li>enabling iterative exploratory investigations&lt;/li>
&lt;li>proactive approch to identifying any failure mode, whether known or unknown&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="how-monitoring-data-is-used-for-debugging">How Monitoring Data Is Used for Debugging&lt;/h2>
&lt;ul>
&lt;li>Two main consumers of monitoring data:
&lt;ul>
&lt;li>machine: alert&lt;/li>
&lt;li>human: dashboard&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="troubleshooting-behaviors-when-using-dashboards">Troubleshooting Behaviors When Using Dashboards&lt;/h3>
&lt;ul>
&lt;li>Seeing that pattern, you quickly pull up the dashboard for the caching component of your system to confirm your suspicion.&lt;/li>
&lt;/ul>
&lt;h4 id="the-limitations-of-troubleshooting-by-intuition">The Limitations of Troubleshooting by Intuition&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>Example 1: Insufficient correlation:&lt;/p></description></item><item><title>rust</title><link>https://minuk.dev/wiki/rust/</link><pubDate>Sun, 12 Feb 2023 16:52:36 +0900</pubDate><guid>https://minuk.dev/wiki/rust/</guid><description>&lt;h2 id="공부-자료">공부 자료&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://google.github.io/comprehensive-rust/welcome.html">Comprehensive Rust&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="혼자-정리">혼자 정리&lt;/h2>
&lt;h3 id="hello-world">Hello World!&lt;/h3>
&lt;ul>
&lt;li>Functions are introduced with &lt;code>fn&lt;/code>.&lt;/li>
&lt;li>Blocks are delimited by curly braces like in C and C++.&lt;/li>
&lt;li>The &lt;code>main&lt;/code> function is the entry point of the program.&lt;/li>
&lt;li>Rust has hygienic macros, &lt;code>println!&lt;/code> is an example of this.&lt;/li>
&lt;li>Rust strings are UTF-8 encoded and can contain any Unicode character.&lt;/li>
&lt;/ul>
&lt;h3 id="small-example">Small Example&lt;/h3>
&lt;h3 id="why-rust">Why Rust?&lt;/h3>
&lt;ul>
&lt;li>Compile time memory safety.&lt;/li>
&lt;li>Lack of undeinfed runtime behavior.&lt;/li>
&lt;li>Modern language features.&lt;/li>
&lt;/ul>
&lt;h3 id="compile-time-guarantees">Compile Time Guarantees&lt;/h3>
&lt;ul>
&lt;li>Static memory mangement at compile time:
&lt;ul>
&lt;li>No uninitialized variables.&lt;/li>
&lt;li>No memory leaks (mostly):
&lt;ul>
&lt;li>&lt;code>Box::leak&lt;/code>&lt;/li>
&lt;li>&lt;code>std::mem::forget&lt;/code>&lt;/li>
&lt;li>reference cycle with &lt;code>Rc&lt;/code> or &lt;code>Arc&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>No double-frees.&lt;/li>
&lt;li>No use-after-free.&lt;/li>
&lt;li>No &lt;code>NULL&lt;/code> pointers.&lt;/li>
&lt;li>No forgotten locked mutexes.&lt;/li>
&lt;li>No data races between threads.&lt;/li>
&lt;li>No iterator invalidation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="runtime-guarantees">Runtime Guarantees&lt;/h3>
&lt;ul>
&lt;li>No undefined behavior at runtime:
&lt;ul>
&lt;li>Array access is bounds checked.&lt;/li>
&lt;li>Integer overflow is defined.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="references">References&lt;/h3>
&lt;ul>
&lt;li>Rust will auto-derefernece in some cases, in particular when invoking methods (try &lt;code>ref_x.count_ones()&lt;/code>).&lt;/li>
&lt;/ul>
&lt;h3 id="dangling-references">Dangling References&lt;/h3>
&lt;h3 id="slices">Slices&lt;/h3>
&lt;ul>
&lt;li>If the slice starts at index 0, Rust&amp;rsquo;s range syntax allows us to drop the starting index, meaning that &lt;code>&amp;amp;a[0..a.len()]&lt;/code> and &lt;code>a[..a.len()]&lt;/code> are identical.&lt;/li>
&lt;li>The same is true for the last index, so &lt;code>&amp;amp;a[2..a.len()]&lt;/code> and &lt;code>&amp;amp;a[2..]&lt;/code> are identical.&lt;/li>
&lt;li>To easily create a slice of the full array, we can therefore use &lt;code>&amp;amp;a[..]&lt;/code>.&lt;/li>
&lt;li>Slices always borrow from another object.&lt;/li>
&lt;/ul>
&lt;h3 id="string-vs-str">String vs str&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;amp;str&lt;/code> introduces a string slice, which is an immutable reference to UTF-8 encoded string data stored in a block of memory. String literals are stored in the probram&amp;rsquo;s binary.&lt;/li>
&lt;li>Rust&amp;rsquo;s string type is a wrapper around a vector of bytes. As with a &lt;code>Vec&amp;lt;T&amp;gt;&lt;/code>, it is owned.&lt;/li>
&lt;li>As with many other types &lt;code>String::from()&lt;/code> creates a string from a string literal; &lt;code>String::new()&lt;/code> creates a new empty string, to which string data can be added using the &lt;code>push()&lt;/code> and &lt;code>push_str()&lt;/code> methods.&lt;/li>
&lt;li>The &lt;code>format!()&lt;/code> macro is a convenient way to generate an owned string from dynacmi values. It accepts the same format specification as &lt;code>println!()&lt;/code>.&lt;/li>
&lt;li>You can borrow &lt;code>&amp;amp;str&lt;/code> slices from &lt;code>String&lt;/code> via &lt;code>&amp;amp;&lt;/code> and optionally range selection.&lt;/li>
&lt;li>For C++ programeers: think of &lt;code>&amp;amp;str&lt;/code> as &lt;code>const char*&lt;/code> from C++, but the one that always points to a valid string in memory. Rust &lt;code>String&lt;/code> is a rough equivalent of &lt;code>std::string&lt;/code> from C++&lt;/li>
&lt;/ul>
&lt;h3 id="functions">Functions&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fizzbuzz_to(&lt;span style="color:#ae81ff">20&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_divisible_by&lt;/span>(lhs: &lt;span style="color:#66d9ef">u32&lt;/span>, rhs: &lt;span style="color:#66d9ef">u32&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> rhs &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lhs &lt;span style="color:#f92672">%&lt;/span> rhs &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fizzbuzz&lt;/span>(n: &lt;span style="color:#66d9ef">u32&lt;/span>) -&amp;gt; () {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> (is_divisible_by(n, &lt;span style="color:#ae81ff">3&lt;/span>), is_divisible_by(n, &lt;span style="color:#ae81ff">5&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;fizzbuzz&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;fizz&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;buzz&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> println!(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{n}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">fizzbuzz_to&lt;/span>(n: &lt;span style="color:#66d9ef">u32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">..=&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fizzbuzz(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="mtehods">Mtehods&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Rectangel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> width: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> height: &lt;span style="color:#66d9ef">u32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Rectangle {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">area&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">u32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.width &lt;span style="color:#f92672">*&lt;/span> self.height
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">inc_width&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, delta: &lt;span style="color:#66d9ef">u32&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.width &lt;span style="color:#f92672">+=&lt;/span> delta;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> rect &lt;span style="color:#f92672">=&lt;/span> Rectangle { width: &lt;span style="color:#ae81ff">10&lt;/span>, height: &lt;span style="color:#ae81ff">5&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;old area: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, rect.area());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rect.inc_widtH(&lt;span style="color:#ae81ff">5&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println!(&lt;span style="color:#e6db74">&amp;#34;new area: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, rect.area());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="function-overloading">Function Overloading&lt;/h3>
&lt;ul>
&lt;li>Overloading is nott supported:
&lt;ul>
&lt;li>Each function has a single implementation:
&lt;ul>
&lt;li>Always takes a fixed number of parameters.&lt;/li>
&lt;li>Always takes a single set of parameter types.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Default values are not supported:
&lt;ul>
&lt;li>All call sites have thet same number of arguments.&lt;/li>
&lt;li>Macros are sometimes used as an alternative.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="static-and-constant-variables">Static and Constant Variables&lt;/h3>
&lt;ul>
&lt;li>Mention that &lt;code>const&lt;/code> behaves semantically similar to C++&amp;rsquo;s &lt;code>constexpr&lt;/code>.&lt;/li>
&lt;li>&lt;code>static&lt;/code>, on the other hand, is much mor simiar to a const or mutable global variable in C++.&lt;/li>
&lt;li>It isn&amp;rsquo;t super common that one would need a runtime evaluated constant, but it is helpful and safer than using a static.&lt;/li>
&lt;/ul>
&lt;h3 id="scopes-and-shadowing">Scopes and Shadowing&lt;/h3>
&lt;ul>
&lt;li>Definition: Shadoing is different from mutation, becauser after shadowing both varible&amp;rsquo;s memory locations exist at the same time. Both are available under the same name, depending where you use it in the code.&lt;/li>
&lt;li>Shadowing looks obscure at first, but is convenient for holding on to values after &lt;code>.unwrap()&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="memory-management">Memory Management&lt;/h3>
&lt;ul>
&lt;li>Full control and safety via compile time enforcement of correct memory management.&lt;/li>
&lt;/ul>
&lt;h3 id="the-stack-vs-the-heap">The Stack vs The Heap&lt;/h3>
&lt;ul>
&lt;li>Stack: Continuous area of memory for local variables.:
&lt;ul>
&lt;li>Values have fixed sizes known at compile time.&lt;/li>
&lt;li>Extremely fast: just move a stack pointer.&lt;/li>
&lt;li>Easy to manage: follows function calls.&lt;/li>
&lt;li>Great memory locality.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Heap: Storage of values outside of function calls.:
&lt;ul>
&lt;li>Values have dynamic sizes determined at runtime.&lt;/li>
&lt;li>Slightly slower than the stack: some book-keeping needed.&lt;/li>
&lt;li>No guarantee of memory locality.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="memory-management-in-rust">Memory Management in Rust&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Memory management in Rust is a mix:&lt;/p></description></item><item><title>opentelemetry metrics deep dive</title><link>https://minuk.dev/wiki/opentelemetry-metrics-deep-dive/</link><pubDate>Sun, 08 Jan 2023 06:16:05 +0900</pubDate><guid>https://minuk.dev/wiki/opentelemetry-metrics-deep-dive/</guid><description>&lt;h2 id="original">Original&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://youtu.be/L-Ss8PtWlRA">Youtube link&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="1-goals--timeline">1. Goals &amp;amp; timeline&lt;/h2>
&lt;h3 id="goals-who-is-this-for">Goals: Who is this for?&lt;/h3>
&lt;ul>
&lt;li>Platform engineer: install SDKs and colelctors, configure resources, metrics receivers, export pipelines&lt;/li>
&lt;li>Software engineer: use metrics APIs, write instrumentations pkgs&lt;/li>
&lt;li>End user: observe and monitor!&lt;/li>
&lt;/ul>
&lt;h3 id="goals-vendor-netural">Goals: Vendor-netural&lt;/h3>
&lt;ul>
&lt;li>OpenTelemetry mandates a strong separation of the API, the SDK, and exporters&lt;/li>
&lt;li>Decoupling these avoids vendor &amp;ldquo;lock-in&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h3 id="goals-open-source--observaibility">Goals: Open-source &amp;amp; observaibility&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>First-class support for open-source ecosystems&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Community devloped.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Jaeger : Open Metrics&lt;/p></description></item><item><title>armeria</title><link>https://minuk.dev/wiki/armeria/</link><pubDate>Sun, 01 Jan 2023 22:30:50 +0900</pubDate><guid>https://minuk.dev/wiki/armeria/</guid><description>armeria 공부하면서 삽질한 내용 + 코드 더미</description></item><item><title>kotlin</title><link>https://minuk.dev/wiki/kotlin/</link><pubDate>Fri, 23 Dec 2022 01:53:21 +0900</pubDate><guid>https://minuk.dev/wiki/kotlin/</guid><description>&lt;h2 id="variable">Variable&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> answer: Int = &lt;span style="color:#ae81ff">42&lt;/span> &lt;span style="color:#75715e">// value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> answer: Int = &lt;span style="color:#ae81ff">42&lt;/span> &lt;span style="color:#75715e">// variable&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(args: Array&amp;lt;String&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> name = &lt;span style="color:#66d9ef">if&lt;/span> (args.size &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>) args[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Kotlin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;Hello, &lt;/span>&lt;span style="color:#e6db74">$name&lt;/span>&lt;span style="color:#e6db74">!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> name: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> isMarried: Boolean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> person = Person(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> height: Int, &lt;span style="color:#66d9ef">val&lt;/span> width: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> isSquared: Boolean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> height &lt;span style="color:#f92672">==&lt;/span> width
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RED, ORANGE, YELLOW
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> r: Int, &lt;span style="color:#66d9ef">val&lt;/span> g: Int, &lt;span style="color:#66d9ef">val&lt;/span> b: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RED(&lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ORANGE(&lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">165&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> YELLOW(&lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">255&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">rgb&lt;/span>() = (r * &lt;span style="color:#ae81ff">256&lt;/span> + g) * &lt;span style="color:#ae81ff">256&lt;/span> + b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">mix&lt;/span>(c1: Color, c2: Color) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">when&lt;/span> (setOf(c1, c2)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setOf(RED, YELLOW) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> ORANGE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> setOf(YELLOW, BLUE) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> GREEN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">throw&lt;/span> Exception(&lt;span style="color:#e6db74">&amp;#34;Dirty color&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Expr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Num&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> value: Int) : Expr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Sum&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> left: Expr, &lt;span style="color:#66d9ef">val&lt;/span> right: Expr) : Expr
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">eval&lt;/span>(e: Expr) : Int =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">when&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">is&lt;/span> Num &lt;span style="color:#f92672">-&amp;gt;&lt;/span> e.&lt;span style="color:#66d9ef">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">is&lt;/span> Sum &lt;span style="color:#f92672">-&amp;gt;&lt;/span> eval(e.right) + eval(e.left)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">throw&lt;/span> IllegalArgumentException(&lt;span style="color:#e6db74">&amp;#34;Unknown expression&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="for%20%28i%20in%201..100%29%20%7b%0a%20%20println%28i%29%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">1.&lt;/span>.&lt;span style="color:#ae81ff">100&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="val%20binaryReps%20=%20TreeMap%3cChar,%20String%3e%28%29%0afor%20%28c%20in%20%27A%27..%27F%27%29%20%7b%0a%20%20val%20binary%20=%20Integer.toBinaryString%28c.toInt%28%29%29%0a%20%20binaryReps[c]%20=%20binary%0a%7d%0a%0afor%20%28%28letter,%20binary%29%20in%20binaryReps%29%20%7b%0a%20%20println%28%22$ltter%20=%20$binary%22%29%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> binaryReps = TreeMap&amp;lt;Char, String&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (c &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#e6db74">&amp;#39;F&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> binary = &lt;span style="color:#a6e22e">Integer&lt;/span>.toBinaryString(c.toInt())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> binaryReps[c] = binary
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> ((letter, binary) &lt;span style="color:#66d9ef">in&lt;/span> binaryReps) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">$ltter&lt;/span>&lt;span style="color:#e6db74"> = &lt;/span>&lt;span style="color:#e6db74">$binary&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> isLetter(c: Char) = c &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#e6db74">&amp;#39;z&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> c &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Z&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(isLetter(&lt;span style="color:#e6db74">&amp;#39;q&amp;#39;&lt;/span>))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">readNumber&lt;/span>(reader: BufferdReader): Int? {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> line = reader.readLine()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Integer&lt;/span>.parseInt(line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (e: NumberFormatException) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reter.close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">T&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">joinToString&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> collection: Collection&amp;lt;T&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> separator: String = &lt;span style="color:#e6db74">&amp;#34;, &amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prefix: String = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> postfix: String = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>): String&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="const%20val%20UNIX_LINE_SEPARATOR%20=%20%22%5cn%22%0a//%20public%20static%20final%20String%20UNIX_LINE_SEPARATOR%20=%20%22%5cn%22;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> UNIX_LINE_SEPARATOR = &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// public static final String UNIX_LINE_SEPARATOR = &amp;#34;\n&amp;#34;;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">String&lt;/span>.lastChar(): Char = &lt;span style="color:#66d9ef">get&lt;/span>(length - &lt;span style="color:#ae81ff">1&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Clickable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">click&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">showOff&lt;/span>() = println(&lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m clickable!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Focusable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">setFocus&lt;/span>(b: Boolean) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;I &lt;/span>&lt;span style="color:#e6db74">$if&lt;/span>&lt;span style="color:#e6db74"> (b) &amp;#34;&lt;/span>got&lt;span style="color:#e6db74">&amp;#34; else &amp;#34;&lt;/span>lost&lt;span style="color:#e6db74">&amp;#34;} focus.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">showOff&lt;/span>() = println(&lt;span style="color:#e6db74">&amp;#34;I&amp;#39;m focusable!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Button&lt;/span>: Clickable, Focusable {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">click&lt;/span>() = println(&lt;span style="color:#e6db74">&amp;#34;I was clicked&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">showOff&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>&amp;lt;Clickable&amp;gt;.showOff()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>&amp;lt;Focusable&amp;gt;.showOff()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Expr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Num&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> value: Int) : Expr()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Sum&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> left: Expr, &lt;span style="color:#66d9ef">val&lt;/span> right: Expr) : Expr()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">eval&lt;/span>(e: Expr): Int =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">when&lt;/span> (e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#a6e22e">Expr&lt;/span>.Num &lt;span style="color:#f92672">-&amp;gt;&lt;/span> e.&lt;span style="color:#66d9ef">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#a6e22e">Expr&lt;/span>.Sum &lt;span style="color:#f92672">-&amp;gt;&lt;/span> eval(e.right) + eval(e.left)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">constructor&lt;/span>(_nickname: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> nickname: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nickname = _nickname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> (_nickname: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> nickname = _nickname
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> nickname: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> nickname: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> isSubscribed: Boolean = &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">open&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> nickname: String) { &lt;span style="color:#f92672">..&lt;/span>. }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TwitterUser&lt;/span>(nickname: String) : User(nickname) { &lt;span style="color:#f92672">..&lt;/span>. }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">open&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">View&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(ctx: Context) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(ctx: Context, attr: AttributeSet) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyButton&lt;/span> : View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(ctx: Context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#66d9ef">this&lt;/span>(ctx, MY_STYLE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(ctx: Context, attr: AttributeSet)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : &lt;span style="color:#66d9ef">super&lt;/span>(ctx, attr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String, &lt;span style="color:#66d9ef">val&lt;/span> postalCode: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">equals&lt;/span>(other: Any?): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (other &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">||&lt;/span> other &lt;span style="color:#f92672">!is&lt;/span> Client)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> name &lt;span style="color:#f92672">==&lt;/span> other.name &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> postalCode &lt;span style="color:#f92672">==&lt;/span> other.postalCode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">hashCode&lt;/span>(): Int = name.hashCode() * &lt;span style="color:#ae81ff">31&lt;/span> + postalCode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> client1 = Client(&lt;span style="color:#e6db74">&amp;#34;John&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4122&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> client2 = Client(&lt;span style="color:#e6db74">&amp;#34;John&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4122&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(client1 &lt;span style="color:#f92672">==&lt;/span> client2) &lt;span style="color:#75715e">// true (called equals)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>println(client1 &lt;span style="color:#f92672">===&lt;/span> client2) &lt;span style="color:#75715e">// false&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DelegatingCollection&lt;/span>&amp;lt;T&amp;gt; (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> innerList: Collection&amp;lt;T&amp;gt; = ArrayList&amp;lt;T&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) : Collection&amp;lt;T&amp;gt; &lt;span style="color:#66d9ef">by&lt;/span> innerList {}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CountingSet&lt;/span>&amp;lt;T&amp;gt;(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> innerSet: MutableCollection&amp;lt;T&amp;gt; = HashSet&amp;lt;T&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) : MutableCollection&amp;lt;T&amp;gt; &lt;span style="color:#66d9ef">by&lt;/span> innerSet {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> objectsAdded = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(element: T): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> objectsAdded&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> innserSet.add(element)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">addAll&lt;/span>(c: Collection&amp;lt;T&amp;gt;): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> objectsAdded &lt;span style="color:#f92672">+=&lt;/span> c.size
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> innerSet.addAll(c)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#a6e22e">CaseInsenitiveFileComparator&lt;/span>: Comparator&amp;lt;File&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">compare&lt;/span>(file1: File, file2: File): Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> file1.path.compareTo(file2.path,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ignoreCase = &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(&lt;span style="color:#a6e22e">CaseInsensitiveFileComparator&lt;/span>.compare(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File(&lt;span style="color:#e6db74">&amp;#34;/User&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File(&lt;span style="color:#e6db74">&amp;#34;/user&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="class%20A%20%7b%0a%20%20companion%20object%20%7b%0a%20%20%20%20fun%20bar%28%29%20%7b%0a%20%20%20%20%20%20println%28%22Companion%20object%20called%22%29%0a%20%20%20%20%7d%0a%20%20%7d%0a%7d%0aA.bar%28%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">companion&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;Companion object called&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">A&lt;/span>.bar()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#66d9ef">private&lt;/span> consturctor(&lt;span style="color:#66d9ef">val&lt;/span> nickname: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">companion&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">newSubscribingUser&lt;/span>(email: String) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(email.substringBefore(&lt;span style="color:#e6db74">&amp;#39;@&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">newFacebookUser&lt;/span>(accountId: Int) =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User(getFacebookName(accountId))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">companion&lt;/span> &lt;span style="color:#66d9ef">object&lt;/span> Loader {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">fromJSON&lt;/span>(jsonText: String): Person = &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person = &lt;span style="color:#a6e22e">Person&lt;/span>.&lt;span style="color:#a6e22e">Loader&lt;/span>.fromJSON(&lt;span style="color:#e6db74">&amp;#34;{name: &amp;#39;Dmitry&amp;#39;}&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> sum = { x: Int, y: Int &lt;span style="color:#f92672">-&amp;gt;&lt;/span> x + y }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(sum(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>)) &lt;span style="color:#75715e">// 3&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> people = listOf(Person(&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">29&lt;/span>), Person(&lt;span style="color:#e6db74">&amp;#34;bob&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">31&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(people.maxBy() { p: Person &lt;span style="color:#f92672">-&amp;gt;&lt;/span> p.age })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(people.maxBy({ p: Person &lt;span style="color:#f92672">-&amp;gt;&lt;/span> p.age })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(people.maxBy { p: Person &lt;span style="color:#f92672">-&amp;gt;&lt;/span> p.age })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(people.maxBy { &lt;span style="color:#66d9ef">it&lt;/span>.age })&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="val%20list%20=%20listOf%281,%202,%203,%204%29%0aprintln%28list.filter%20%7b%20it%20%25%202%20==%200%20%7d%29%0aprintln%28list.map%20%7b%20it%20*%20it%20%7d%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> list = listOf(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(list.filter { &lt;span style="color:#66d9ef">it&lt;/span> % &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(list.map { &lt;span style="color:#66d9ef">it&lt;/span> * &lt;span style="color:#66d9ef">it&lt;/span> })&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> canBeInClub27 = { p: Person &lt;span style="color:#f92672">-&amp;gt;&lt;/span> p.age &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">27&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> people = listOf(Person(&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">27&lt;/span>), Person(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">31&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(people.all(canBeInClub27)) &lt;span style="color:#75715e">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>println(people.any(canBeInClub27)) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>println(peopl.count(canBeInClub27)) &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>println(people.find(canBeInClub27)) &lt;span style="color:#75715e">// Person(name=Alice, age=27)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="println%28people.groupBy%20%7b%20it.%20age%20%7d%29%0a//%20%7b29=[Person%28name=Bob,%20age=29%29],%2031=[Person%28name=Alice,%20age=31%29]%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>println(people.groupBy { &lt;span style="color:#66d9ef">it&lt;/span>. age })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// {29=[Person(name=Bob, age=29)], 31=[Person(name=Alice, age=31)]}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="val%20strings%20=%20listOf%28%22abc%22,%20%22def%22%29%0aprintln%28strings.flatMap%20%7b%20it.toList%28%29%20%7d%29%0a//%20[a,%20b,%20c,%20d,%20e,%20f]">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> strings = listOf(&lt;span style="color:#e6db74">&amp;#34;abc&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;def&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(strings.flatMap { &lt;span style="color:#66d9ef">it&lt;/span>.toList() })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// [a, b, c, d, e, f]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>people.asSequence()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(Person&lt;span style="color:#f92672">::&lt;/span>name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .filter { &lt;span style="color:#66d9ef">it&lt;/span>.startsWith(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .toList()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">alphabet&lt;/span>(): String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> stringBuilder = StringBuilder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> with(stringBuilder) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (letter &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Z&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.append(letter)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> append(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Now I know the alphabet!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.toString()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">alphabet&lt;/span>() = StringBuilder().apply {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (letter &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A&amp;#39;&lt;/span>&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#e6db74">&amp;#39;Z&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> append(&lt;span style="color:#e6db74">&amp;#34;letter&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> append(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">Now I know the alphabet!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}.toString()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">strLenSafe&lt;/span>(s: String?): Int =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (s &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) s.length &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">printAllCaps&lt;/span>(s: String?) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> allCaps: String? = s&lt;span style="color:#f92672">?.&lt;/span>toUpperCase()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(allCaps)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Address&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> streetAddress: String, &lt;span style="color:#66d9ef">val&lt;/span> zipCode: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> city: String, vall country: String)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Company&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String, &lt;span style="color:#66d9ef">val&lt;/span> address: Address?)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String, &lt;span style="color:#66d9ef">val&lt;/span> company: Company?)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>.countryName(): String {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> country = &lt;span style="color:#66d9ef">this&lt;/span>.company&lt;span style="color:#f92672">?.&lt;/span>address&lt;span style="color:#f92672">?.&lt;/span>country
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (country &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) country &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Unknown&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>(s: String?) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> t: String = s &lt;span style="color:#f92672">?:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> firstName: String, &lt;span style="color:#66d9ef">val&lt;/span> lastName: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">equals&lt;/span>(o: Any?): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> otherPerson = o &lt;span style="color:#66d9ef">as&lt;/span>? Person &lt;span style="color:#f92672">?:&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> otherPerson.firstName &lt;span style="color:#f92672">==&lt;/span> firstName &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> otherPerson.lastName &lt;span style="color:#f92672">==&lt;/span> lastName
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">hashCode&lt;/span>(): Int =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> firstName.hashCode() * &lt;span style="color:#ae81ff">37&lt;/span> + lastName.hashCode()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">ignoreNulls&lt;/span>(s: String?) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> sNotNull: String = s&lt;span style="color:#f92672">!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(sNotNull.length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">sendEmailTo&lt;/span>(email: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;Sending email to &lt;/span>&lt;span style="color:#e6db74">$email&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> email: String? = &lt;span style="color:#e6db74">&amp;#34;yole@example.com&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>email&lt;span style="color:#f92672">?.&lt;/span>let { sendEmailTo(&lt;span style="color:#66d9ef">it&lt;/span>) }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">T&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">printHashCode&lt;/span>(t: T) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(t&lt;span style="color:#f92672">?.&lt;/span>hashCode())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>printHashCode(&lt;span style="color:#66d9ef">null&lt;/span>) &lt;span style="color:#75715e">// T = Any?&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Processor&lt;/span>&amp;lt;T&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>(): T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NoResultProcessor&lt;/span>: Processor&amp;lt;Unit&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// does not need to return
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">fail&lt;/span>(message: String): Nothgin {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> IllegalStateException(message)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">T&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">copyElements&lt;/span>(source: Collection&amp;lt;T&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target: MutableCollection&amp;lt;T&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (item &lt;span style="color:#66d9ef">in&lt;/span> source) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target.add(item)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>List&lt;/code> : &lt;code>listOf&lt;/code> : &lt;code>mutableListOf&lt;/code>, &lt;code>arrayListOf&lt;/code>&lt;/li>
&lt;li>&lt;code>Set&lt;/code> : &lt;code>setOf&lt;/code> : &lt;code>mutableSetOf&lt;/code>, &lt;code>hashSetOf&lt;/code>, &lt;code>linkedSetOf&lt;/code>, &lt;code>sortedSetOf&lt;/code>&lt;/li>
&lt;li>&lt;code>Map&lt;/code> : &lt;code>mapOf&lt;/code> : &lt;code>mutableMapOf&lt;/code>, &lt;code>hashMapOf&lt;/code>, &lt;code>linkedMapOf&lt;/code>, &lt;code>sortedMapOf&lt;/code>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> x: Int, &lt;span style="color:#66d9ef">val&lt;/span> y: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">plus&lt;/span>(other: Point): Point {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Point(x + other.x, y + other.y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p1 = Point(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p2 = Point(&lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">40&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(p1 + p2) &lt;span style="color:#75715e">// Point(x=40, y=60)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">T&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">MutableCollection&lt;/span>&amp;lt;T&amp;gt;.plusAssign(element: T) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.add(element)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>.unaryMinus(): Point {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Point(-x, -y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p = Point(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(-p)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> firstName: String, &lt;span style="color:#66d9ef">val&lt;/span> lastName: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) : Comparable&amp;lt;Person&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">compareTo&lt;/span>(other: Person): Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> compareValuesBy(&lt;span style="color:#66d9ef">this&lt;/span>, other,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person&lt;span style="color:#f92672">::&lt;/span>lastName, Person&lt;span style="color:#f92672">::&lt;/span>firstName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p1 = Person(&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Smith&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p2 = Person(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Johnson&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(p1 &amp;lt; p2)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>(index: Int): Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">when&lt;/span>(index) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> IndexOutOfBoundsException(&lt;span style="color:#e6db74">&amp;#34;Invalid coordinate &lt;/span>&lt;span style="color:#e6db74">$index&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p = Point(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(p[&lt;span style="color:#ae81ff">1&lt;/span>])&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MutablePoint&lt;/span>(&lt;span style="color:#66d9ef">var&lt;/span> x: Int, &lt;span style="color:#66d9ef">var&lt;/span> y: Int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">MutablePoint&lt;/span>.&lt;span style="color:#66d9ef">set&lt;/span>(index: Index, &lt;span style="color:#66d9ef">value&lt;/span>: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">when&lt;/span>(index) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> x = &lt;span style="color:#66d9ef">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span> y = &lt;span style="color:#66d9ef">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> IndexOutOfBoundsException(&lt;span style="color:#e6db74">&amp;#34;Invalid coordinate &lt;/span>&lt;span style="color:#e6db74">$index&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p = MutablePoint(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p[&lt;span style="color:#ae81ff">1&lt;/span>] = &lt;span style="color:#ae81ff">42&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> upperLeft: Point, &lt;span style="color:#66d9ef">val&lt;/span> lowerRight: Point)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">Rectangle&lt;/span>.contains(p: Point): Boolean {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> p.x &lt;span style="color:#66d9ef">in&lt;/span> upperLeft.x until lowerRight.x &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.y &lt;span style="color:#66d9ef">in&lt;/span> upperLeft.y until lowerRight.y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> rect = Rectangle(Point(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>), Point(&lt;span style="color:#ae81ff">50&lt;/span>, &lt;span style="color:#ae81ff">50&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(Point(&lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>) &lt;span style="color:#66d9ef">in&lt;/span> rect)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//%20operator%20fun%20%3cT:%20Comparable%3cT%3e%3e%20T.rangeTo%28that:%20T%29:%20ClosedRange%3cT%3e%0aval%20now%20=%20LocalDate.now%28%29%0aval%20vacation%20=%20now..now.plusDays%2810%29%0aprintln%28now.plusWeeks%281%29%20in%20vacation%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// operator fun &amp;lt;T: Comparable&amp;lt;T&amp;gt;&amp;gt; T.rangeTo(that: T): ClosedRange&amp;lt;T&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">val&lt;/span> now = &lt;span style="color:#a6e22e">LocalDate&lt;/span>.now()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> vacation = now&lt;span style="color:#f92672">..&lt;/span>now.plusDays(&lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(now.plusWeeks(&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">in&lt;/span> vacation)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">ClosedRange&lt;/span>&amp;lt;LocalDate&amp;gt;.iterator(): Iterator&amp;lt;LocalDate&amp;gt; =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">: &lt;/span>&lt;span style="color:#a6e22e">Iterator&lt;/span>&amp;lt;LocalDate&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> current = state
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">hasNext&lt;/span>() =
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#f92672">&amp;lt;=&lt;/span> endInclusive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>() = current.apply {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current = plusDays(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> newYear = &lt;span style="color:#a6e22e">LocalDate&lt;/span>.ofYearDay(&lt;span style="color:#ae81ff">2017&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> daysOff = newYear.minusDays(&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">..&lt;/span>newYear
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (dayOff &lt;span style="color:#66d9ef">in&lt;/span> daysOff) { println(dayOff) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2016-12-31
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2017-01-01&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="val%20p%20=%20Point%2810,%2020%29%0aval%20%28x,%20y%29%20=%20p%0a//%20val%20a%20=%20p.component1%28%29%0a//%20val%20b%20=%20p.component2%28%29%0a%0aclass%20Point%28val%20x:%20Int,%20val%20y:%20Int%29%20%7b%0a%20%20operator%20fun%20component1%28%29%20=%20x%0a%20%20operator%20fun%20component2%28%29%20=%20y%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> p = Point(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">20&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>x, y) = p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// val a = p.component1()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// val b = p.component2()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> x: Int, &lt;span style="color:#66d9ef">val&lt;/span> y: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">component1&lt;/span>() = x
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">component2&lt;/span>() = y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> p: Type &lt;span style="color:#66d9ef">by&lt;/span> Delegate()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> _emails: List&amp;lt;Email&amp;gt;? = &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> emails: List&amp;lt;Email&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (_emails &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _emails = loadEmails(&lt;span style="color:#66d9ef">this&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> _emails&lt;span style="color:#f92672">!!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> emails &lt;span style="color:#66d9ef">by&lt;/span> lazy { loadEmails(&lt;span style="color:#66d9ef">this&lt;/span>) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">twoAndThree&lt;/span>(operation: (Int, Int) &lt;span style="color:#f92672">-&amp;gt;&lt;/span> Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> result = operation(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;The result is &lt;/span>&lt;span style="color:#e6db74">$result&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span>&amp;lt;T&amp;gt; synchronized(lock: Lock, action: () &lt;span style="color:#f92672">-&amp;gt;&lt;/span> T): T {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lock.lock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> action()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">finally&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lock.unlock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> l = lock()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>synchronized(l) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">lookForAlice&lt;/span>(people: List&amp;lt;Person&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> people.forEach label&lt;span style="color:#960050;background-color:#1e0010">@&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">it&lt;/span>.name &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">return&lt;/span>&lt;span style="color:#a6e22e">@label&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#e6db74">&amp;#34;Alice might be somewhere&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>T&amp;gt; List&amp;lt;T&amp;gt;.penultimate: T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span>() = &lt;span style="color:#66d9ef">this&lt;/span>[size - &lt;span style="color:#ae81ff">2&lt;/span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Processor&lt;/span>&amp;lt;T&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#66d9ef">value&lt;/span>: T) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">value&lt;/span>&lt;span style="color:#f92672">?.&lt;/span>hashCode() &lt;span style="color:#75715e">// value is nullable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Processor&lt;/span>&amp;lt;T: Any&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>(&lt;span style="color:#66d9ef">value&lt;/span>: T) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">value&lt;/span>.hashCode() &lt;span style="color:#75715e">// value is not nullable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="if%20%28value%20is%20List%3c*%3e%29%20%7b%20...%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">value&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> List&amp;lt;*&amp;gt;) { &lt;span style="color:#f92672">..&lt;/span>. }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">printSum&lt;/span>(c: Collection&amp;lt;Int&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (c &lt;span style="color:#66d9ef">is&lt;/span> List&amp;lt;Int&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(c.sum())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">inline&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span>&amp;lt;&lt;span style="color:#66d9ef">reified&lt;/span>&amp;gt; isA(&lt;span style="color:#66d9ef">value&lt;/span>: Any) = &lt;span style="color:#66d9ef">value&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>println(isA&amp;lt;String&amp;gt;(&lt;span style="color:#e6db74">&amp;#34;abc&amp;#34;&lt;/span>) &lt;span style="color:#75715e">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>println(isA&amp;lt;String&amp;gt;(&lt;span style="color:#ae81ff">123&lt;/span>)) &lt;span style="color:#75715e">// false&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">open&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">feed&lt;/span>() { &lt;span style="color:#f92672">..&lt;/span>. }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Herd&lt;/span>&amp;lt;T: Animal&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> size: Int &lt;span style="color:#66d9ef">get&lt;/span>() = &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">get&lt;/span>(i: Int): T { &lt;span style="color:#f92672">..&lt;/span>. }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">feedAll&lt;/span>(animals: Herd&amp;lt;Animal&amp;gt;) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#66d9ef">in&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> until animals.size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> animals[i].feed()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">FieldValidator&lt;/span>&amp;lt;&lt;span style="color:#66d9ef">in&lt;/span> T&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">validate&lt;/span>(input: T): Boolean
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#a6e22e">DefaultStringValidator&lt;/span>: FieldValidator&amp;lt;String&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">validate&lt;/span>(input: String) = input.isNotEmpty()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">object&lt;/span> &lt;span style="color:#a6e22e">DefaultIntValidator&lt;/span> : FieldValidator&amp;lt;Int&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">override&lt;/span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">validate&lt;/span>(input: Int) = input &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HasTempFolder&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@get&lt;/span>:Rule
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> folder = TemporaryFolder()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fun&lt;/span> &lt;span style="color:#a6e22e">testUsingTempFolder&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> createdFile = folder.newFile(&lt;span style="color:#e6db74">&amp;#34;myfile.text&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>property&lt;/code>, &lt;code>field&lt;/code>, &lt;code>get&lt;/code>, &lt;code>set&lt;/code>, &lt;code>receiver&lt;/code>, &lt;code>param&lt;/code>, &lt;code>setparam&lt;/code>, &lt;code>delegate&lt;/code>, &lt;code>file&lt;/code>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">data&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JsonName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;alias&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">val&lt;/span> firstName: String,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@JsonExclude&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> age: Int? = &lt;span style="color:#66d9ef">null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#66d9ef">val&lt;/span> name: String, &lt;span style="color:#66d9ef">val&lt;/span> age: Int)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">val&lt;/span> kClass = person.javaClass.kotlin &lt;span style="color:#75715e">// KClass&amp;lt;Person&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>println(kClass.simpleName) &lt;span style="color:#75715e">// Person
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>kClass.memberProperties.forEach { println(&lt;span style="color:#66d9ef">it&lt;/span>.name) }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// age
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// name&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>loki label best practices</title><link>https://minuk.dev/wiki/loki-best-practices/</link><pubDate>Thu, 22 Dec 2022 13:03:25 +0900</pubDate><guid>https://minuk.dev/wiki/loki-best-practices/</guid><description>loki label best practices 문서를 번역해둔 문서</description></item><item><title>loki</title><link>https://minuk.dev/wiki/loki/</link><pubDate>Thu, 22 Dec 2022 13:01:14 +0900</pubDate><guid>https://minuk.dev/wiki/loki/</guid><description>loki 자습자료</description></item><item><title>Grafana Loki - Like Prometheus, But for logs.</title><link>https://minuk.dev/wiki/grafana-loki-like-prometheus-but-for-logs/</link><pubDate>Tue, 20 Dec 2022 20:02:46 +0900</pubDate><guid>https://minuk.dev/wiki/grafana-loki-like-prometheus-but-for-logs/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/CQiawXlgabQ">원본 링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="0-simple-and-cost-effective-to-operate">0. Simple and cost effective to operate&lt;/h2>
&lt;ul>
&lt;li>Loki doesn&amp;rsquo;t index the text of the logs, instead grouping entries into &amp;ldquo;streams&amp;rdquo; and indexing those with labels.&lt;/li>
&lt;/ul>
&lt;h2 id="1-integrated-with-existing-observability-tools">1. Integrated with existing observability tools&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>As a DevOps Engineer, how to work:&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>Alert&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>Dashboard&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>Adhoc Query&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>Log Aggregation&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="5">
&lt;li>Distributed Tracing&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="6">
&lt;li>Fix&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Basically, fluentd makes app push their log into fluentd:&lt;/p>
&lt;ul>
&lt;li>It causes various problems.&lt;/li>
&lt;li>But, promtail pulls their log.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2-cloud-native-and-airplane-mode">2. Cloud Native and Airplane mode&lt;/h2>
&lt;h2 id="whats-new">What&amp;rsquo;s new?&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>LogQL Filter Chaining : &lt;code>{job=&amp;quot;app&amp;quot;} |= &amp;quot;/foo&amp;quot; !~ &amp;quot;/foo/bar&amp;quot;&lt;/code>&lt;/p></description></item><item><title>spring boot cli</title><link>https://minuk.dev/wiki/spring-boot-cli/</link><pubDate>Mon, 19 Dec 2022 14:03:25 +0900</pubDate><guid>https://minuk.dev/wiki/spring-boot-cli/</guid><description>내가 써먹으려고 적어두는 cli snippet</description></item><item><title>autoconf</title><link>https://minuk.dev/wiki/autoconf/</link><pubDate>Mon, 12 Dec 2022 01:43:07 +0900</pubDate><guid>https://minuk.dev/wiki/autoconf/</guid><description>&lt;h1 id="heading">&lt;/h1></description></item><item><title>다시 시작하는 쿠버네티스 세팅</title><link>https://minuk.dev/wiki/re-minuk-k8s/</link><pubDate>Thu, 17 Nov 2022 02:33:21 +0900</pubDate><guid>https://minuk.dev/wiki/re-minuk-k8s/</guid><description>처음부터 세팅 다시하기</description></item><item><title>Cloud Native Go</title><link>https://minuk.dev/wiki/cloud-native-go/</link><pubDate>Wed, 02 Nov 2022 00:20:40 +0900</pubDate><guid>https://minuk.dev/wiki/cloud-native-go/</guid><description>&lt;h4 id="누가-이-책을-읽어야하는가">누가 이 책을 읽어야하는가&lt;/h4>
&lt;ul>
&lt;li>imtermediate-to-advanced developers&lt;/li>
&lt;li>web application engineer&lt;/li>
&lt;li>DevOps specialists/site reliability engieers&lt;/li>
&lt;/ul>
&lt;h1 id="part-1-going-cloud-native">Part 1. Going Cloud Native&lt;/h1>
&lt;h2 id="chapter-1-what-is-a-cloud-native-application">Chapter 1. What is a &amp;ldquo;Cloud Native&amp;rdquo; Application?&lt;/h2>
&lt;ul>
&lt;li>A traditional three-tiered architecture:
&lt;ul>
&lt;li>Client - Web server + application server - Database server&lt;/li>
&lt;li>Presentation tier - Business logic tier - Data management tier&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-cloud-native">What Is Cloud Native?&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds&lt;/p></description></item><item><title>overlayfs</title><link>https://minuk.dev/wiki/overlayfs/</link><pubDate>Wed, 26 Oct 2022 23:22:33 +0900</pubDate><guid>https://minuk.dev/wiki/overlayfs/</guid><description>&lt;h1 id="참고자료">참고자료&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://blog.naver.com/alice_k106/221530340759">https://blog.naver.com/alice_k106/221530340759&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lwn.net/Articles/718062/">https://lwn.net/Articles/718062/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lwn.net/Articles/636943/">https://lwn.net/Articles/636943/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lwn.net/Articles/755889/">https://lwn.net/Articles/755889/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="개인-해석">개인 해석&lt;/h2>
&lt;ul>
&lt;li>일단 기본적으로 커널에서 제공해줘야하는 기능이다. 컨테이너를 만들때 이미지의 불변인 부분과 수정된 부분을 분리해야하는데 이를 구현하기 위해 널리 사용된다.&lt;/li>
&lt;li>커널에서 구현방식은 꾸준히 변화하는것 같은데, lwn 자료를 보면 2018년 이전에는 vfs 를 hack하는 방식으로 구현했었고, 이후에는 일종의 파일시스템으로 취급해서 실제 사용하는 파일시스템 위에 overlayfs 를 덧씌우는 방식으로 구현한다.&lt;/li>
&lt;li>이런 구현방식은 현재도 유지되고 있는것으로 보인다. &lt;a href="https://elixir.bootlin.com/linux/v6.0.4/source/fs/overlayfs">overlayfs 커널코드 bootlin&lt;/a>:
&lt;ul>
&lt;li>구현 내용를 보면 위쪽 레이어와 아래쪽 레이어를 오가는 함수가 존재하며, 조회를 할때 이러한 레이어를 겹쳐서 반환해주는 방식으로 동작하는 것 같다.:
&lt;ul>
&lt;li>궁금점 : 성능 이슈는 없나? 어떠한 파일이 존재하지 않는지를 언제나 모든 레이어를 조회해야한다거나, 파일이 통채로 바뀌었음에도 불구하고 모든 레이어에서 겹치느라 추가적인 메모리를 사용하지는 않나?&lt;/li>
&lt;li>아직 코드를 다 읽지는 못했지만, 2018년에 별도의 파일시스템으로 분리된 것만 봐도 아직 최적화할 부분이 많을 것 같다.&lt;/li>
&lt;li>컨테이너가 그냥 프로세스임에도 불구하고 성능이 하락하기는 하는데, 이런 포인트들이 조금씩 깍아 먹는것 같다.:
&lt;ul>
&lt;li>개인 생각은 그냥 프로세스니 VM이랑 성능 비교를 하는게 아니라 베어메탈이랑 비교해야한다고 생각한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>실제로 코드에 TODO가 드문드문 보인다.&lt;/li>
&lt;li>성능에 대한 생각은 overlayfs 개발자도 고민하고 있는게 눈에 보이는게 dentry랑 cache 관련 코드가 밟힌다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>lectures/design-pattern</title><link>https://minuk.dev/wiki/lectures/design-pattern/</link><pubDate>Sun, 23 Oct 2022 00:15:47 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/design-pattern/</guid><description>&lt;h2 id="5-factory">5. Factory&lt;/h2>
&lt;h3 id="factory-patterns">Factory Patterns&lt;/h3>
&lt;ul>
&lt;li>Creational patterns:
&lt;ul>
&lt;li>Allow to creating new objects without explicitly using the new operator&lt;/li>
&lt;li>We can instantiate different objects without modifying client code!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Factory Method:
&lt;ul>
&lt;li>Uses inheritance to decide the object to be instantiated&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Abstract Factory:
&lt;ul>
&lt;li>Delegates object creation to a factory object&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="factory-method-pattern">Factory Method Pattern&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Purpose:&lt;/p>
&lt;ul>
&lt;li>Exposes a method for creating objects, allowing subclasses to constrol the actual creation process.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Use When:&lt;/p>
&lt;ul>
&lt;li>A class will not know what classes it will be required to create.&lt;/li>
&lt;li>Subclasses may specify what objects should be created.&lt;/li>
&lt;li>Parent classes wish to defer creation to their subclasses.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Defines an instance for creating an object, but lets subclasses decide which class to instantiate.&lt;/p></description></item><item><title>사이트 신뢰성 엔지니어링</title><link>https://minuk.dev/wiki/site-reliability-engineering/</link><pubDate>Sun, 16 Oct 2022 17:00:35 +0900</pubDate><guid>https://minuk.dev/wiki/site-reliability-engineering/</guid><description>&lt;h2 id="1-소개">1. 소개&lt;/h2>
&lt;ul>
&lt;li>직접 비용, 간접 비용&lt;/li>
&lt;/ul>
&lt;h3 id="서비스-관리에-대한-구글의-해법-사이트-신뢰성-엔지니어링">서비스 관리에 대한 구글의 해법: 사이트 신뢰성 엔지니어링&lt;/h3>
&lt;ul>
&lt;li>SRE 중 50~60% 는 구글의 소프트웨어 엔지니어다.&lt;/li>
&lt;li>SRE팀은 반드시 50%의 시간을 오롯이 개발을 위해 활용해야한다.:
&lt;ul>
&lt;li>만약 이에 미치지 못한다면, 운영에 대한 부담이 개발팀에 전가되거나 혹은 운영 책임이 없음에도 새로운 팀원이 팀에 배정되는 현상이 발생하고 있음을 암시하고 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="sre의-신조">SRE의 신조&lt;/h3>
&lt;ul>
&lt;li>Availability, Latency, Performance, Efficiency, Change Management, Monitoring, Emergency response, capacity planning&lt;/li>
&lt;/ul>
&lt;h4 id="지속적으로-엔지니어링에-집중한다">지속적으로 엔지니어링에 집중한다.&lt;/h4>
&lt;ul>
&lt;li>모든 심각한 장애에 대해서는 알림 여부를 떠나 반드시 포스트모텀을 작성해야한다.:
&lt;ul>
&lt;li>모니터링되지 않고 있는 부분을 알 수 있기 때문이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="서비스의-안정성을-유지하면서-변화를-최대한-수용한다">서비스의 안정성을 유지하면서 변화를 최대한 수용한다.&lt;/h4>
&lt;ul>
&lt;li>에러 예산:
&lt;ul>
&lt;li>더 이상 무정지 시스템 같은 목표를 세우지 않는다.&lt;/li>
&lt;li>예측 가능한 시스템 정지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="모니터링">모니터링&lt;/h4>
&lt;ul>
&lt;li>알림(alert) : 어떤 문제가 발생했거나 발생하려고 할 때 상황을 개선하기 위해 사람이 즉각적으로 어떤 대응을 취해야 한다는 것을 알린다.&lt;/li>
&lt;li>티켓(tickets) : 사람의 대응이 필요하지만 즉가적인 대응이 필요하지는 않는 상황을 의미한다.&lt;/li>
&lt;li>로깅(logging) : 누군가 이 정보를 반드시 확인해야 할 필요는 없지만 향후 분석이나 조사를 위해 기록되는 내용이다.&lt;/li>
&lt;/ul>
&lt;h4 id="긴급-대응">긴급 대응&lt;/h4>
&lt;ul>
&lt;li>MTTF(Mean Time To Failure)&lt;/li>
&lt;li>MTTR(Mean Time To Repair)&lt;/li>
&lt;li>MTTR을 줄이기 위해서는 잘 정리된 포괄적인 행동 지침이 큰 역할을 할 수 있다. (장애 대응 지침)&lt;/li>
&lt;/ul>
&lt;h4 id="변화-관리">변화 관리&lt;/h4>
&lt;ul>
&lt;li>제품의 단계적 출시&lt;/li>
&lt;li>문제를 빠르고 정확하게 도출하기&lt;/li>
&lt;li>문제 발생 시 안전하게 이전 버전으로 되돌리기&lt;/li>
&lt;/ul>
&lt;h4 id="수요-예측과-수용-계획">수요 예측과 수용 계획&lt;/h4>
&lt;ul>
&lt;li>자연적 수요에 대한 정확한 예측. 필요한 수용력을 확보하기까지의 시간에 대한 예측을 이끌어낼 수 있다.&lt;/li>
&lt;li>자연적 수요와 인위적 수요를 정확하게 합산하기&lt;/li>
&lt;li>원천적인 수용력(서버, 디스크 등)을 바탕으로 서비스의 수용력을 측정하기 위한 통상의 시스템 부하 테스트&lt;/li>
&lt;/ul>
&lt;h4 id="프로비저닝">프로비저닝&lt;/h4>
&lt;ul>
&lt;li>프로비저닝 : 변화 관리와 수용 계획을 합한 개념&lt;/li>
&lt;/ul>
&lt;h4 id="효율성과-성능">효율성과 성능&lt;/h4>
&lt;ul>
&lt;li>서비스의 효율성을 결정짓는 중요한 요소들 : 수요(부하), 수용력, 소프트웨어의 효율성&lt;/li>
&lt;/ul>
&lt;h2 id="2-sre-관점에서-바라본-구글의-프로덕션-환경">2. SRE 관점에서 바라본 구글의 프로덕션 환경&lt;/h2>
&lt;h3 id="하드웨어">하드웨어&lt;/h3>
&lt;ul>
&lt;li>머신(Machine) : 하드웨어(혹은 가상머신, Virtual Machine)을 의미한다.&lt;/li>
&lt;li>서버(server) : 서비스를 구현하는 소프트웨어를 의미한다.&lt;/li>
&lt;/ul>
&lt;h3 id="하드웨어를-조율하는-시스템-소프트웨어">하드웨어를 조율하는 시스템 소프트웨어&lt;/h3>
&lt;ul>
&lt;li>하드웨어 결함도 소프트웨어로 관리할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="머신-관리하기">머신 관리하기&lt;/h4>
&lt;ul>
&lt;li>보그(Borg) : 오늘날의 쿠버네티스&lt;/li>
&lt;/ul>
&lt;h4 id="저장소">저장소&lt;/h4>
&lt;ul>
&lt;li>저장소는 여러 계층으로 구성된다.:
&lt;ul>
&lt;li>가장 낮은 계층은 D 계층&lt;/li>
&lt;li>Colossus, 구글 파일 시스템의 후속 제품이다.&lt;/li>
&lt;li>콜로서스를 바탕으로 데이터베이스와 유사한 서비스들이 존재한다.:
&lt;ul>
&lt;li>Spanner, Bigtable, Blobstore&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="네트워킹">네트워킹&lt;/h4>
&lt;ul>
&lt;li>GSLB(Global Software Load Balancer):
&lt;ul>
&lt;li>DNS 요청에 대한 지역적 로드밸렁싱&lt;/li>
&lt;li>사용자 서비스 수준에서의 로드밸런싱&lt;/li>
&lt;li>원격 프로시저 호출(RPC) 수준에서의 로드밸런싱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="기타-시스템-소프트웨어">기타 시스템 소프트웨어&lt;/h3>
&lt;h4 id="잠금-서비스">잠금 서비스&lt;/h4>
&lt;ul>
&lt;li>처비(Chubby), Paxos 프로토콜&lt;/li>
&lt;li>요즘 널리사용되는 오픈소스(k8s, kafka 등)은 etcd, zookeeper를 사용하고 이들은 raft 알고리즘으로 동작한다.&lt;/li>
&lt;/ul>
&lt;h4 id="모니터링과-알림">모니터링과 알림&lt;/h4>
&lt;ul>
&lt;li>치명적인 문제점에 대한 알림 설정&lt;/li>
&lt;li>행동 비교: 소프트웨어 업데이트 이후 서버가 빨라졌는가?&lt;/li>
&lt;li>수용 계획을 위한 가장 기본적인 지표인 시간의 흐름에 따른 자원 소비 행위의 개선 여부 확인하기&lt;/li>
&lt;/ul>
&lt;h3 id="소프트웨어-인프라스트럭처">소프트웨어 인프라스트럭처&lt;/h3>
&lt;ul>
&lt;li>Protocol buffers:
&lt;ul>
&lt;li>오늘날에는 gRPC를 사용하고 gRPC 는 대부분 Protocol Buffers 를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개발-환경">개발 환경&lt;/h3>
&lt;ul>
&lt;li>구글에서의 업무 흐름 중 중요한 암묵적인 합의:
&lt;ul>
&lt;li>프로젝트 외부의 컴포넌트에서 문제가 발생하면 엔지니어는 문제를 해결하고, 변경사항(cahgnelist, CL)을 소유자에게 보내서 리뷰를 요청한 후 변경된 코드를 제출할 수 있다.&lt;/li>
&lt;li>엔지니어가 소속된 프로젝트의 소스 코드 변경은 반드시 리뷰를 거쳐야 한다. 모든 소프트웨어는 제출되기 전에 리뷰를 받아야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="ii-원리와-원칙들">II. 원리와 원칙들&lt;/h1>
&lt;h2 id="3-위험-요소-수용하기">3. 위험 요소 수용하기&lt;/h2>
&lt;ul>
&lt;li>사용자의 스마트폰이 99% 의 신뢰성을 가진다면, 99.99%와 99.999% 서비스는 사용자가 구별할수 없다.&lt;/li>
&lt;li>SRE는 이 점을 이용해서 위험요소, 빠른 혁신, 효과적인 서비스 운영의 균형을 잡는다. (기능, 서비스, 성능)&lt;/li>
&lt;/ul>
&lt;h3 id="위험-요소-관리하기">위험 요소 관리하기&lt;/h3>
&lt;ul>
&lt;li>신뢰성을 향상시킬수는 있지만 비용이 증가하는 요소들:
&lt;ul>
&lt;li>여분의 머신/컴퓨트 자원 비용&lt;/li>
&lt;li>기회 비용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성 목표치를 초과 달성하려고 노력은 하되, 넘치게 초과하려고는 하지 않는다.&lt;/li>
&lt;li>가용성 목표치를 초과 달성했다면, 기술부채를 줄이거나 윤영비용을 줄이려고 시도해야한다.&lt;/li>
&lt;/ul>
&lt;h3 id="서비스-위험-측정하기">서비스 위험 측정하기&lt;/h3>
&lt;ul>
&lt;li>시간 기준 가용성 : 가용성 = 업타임 / (업타임 + 다운타임)&lt;/li>
&lt;li>종합 가용성 : 가용성 = 성공한 요청 수 / 전체 요청수&lt;/li>
&lt;li>널리 사용되는 가용성 지표를 측정하는 방법:
&lt;ul>
&lt;li>주 단위 혹은 일 단위로 목표치에 대한 성능을 측정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="서비스의-위험-수용도">서비스의 위험 수용도&lt;/h3>
&lt;h4 id="소비자-대상-서비스의-위험-수용도-정의하기">소비자 대상 서비스의 위험 수용도 정의하기&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>위험 수용도를 결정하기 위해서 고려해야 하는 요소:&lt;/p></description></item><item><title>To IPv6 - The Dual-stack Adoption Advisory Panel</title><link>https://minuk.dev/wiki/to-ipv6-the-dual-stack-adoption-advisory-panel/</link><pubDate>Mon, 03 Oct 2022 21:37:29 +0900</pubDate><guid>https://minuk.dev/wiki/to-ipv6-the-dual-stack-adoption-advisory-panel/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/CqfEwzXI5W0">원본&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>강연이 아닌 자유 토론식으로 진행된 세션&lt;/li>
&lt;li>따라서 여기에 정리된 내용도 세션 순서에서 시간흐름대로 난잡하게 정리함.&lt;/li>
&lt;li>PPT 없이 말하는걸 그대로 직역직해해서 적어야해서 놓치는 워딩을 다시 잡기위해서 평소보다 오래 봤다.&lt;/li>
&lt;/ul>
&lt;h2 id="본문">본문&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Question :&lt;/p>
&lt;ul>
&lt;li>&amp;ldquo;How many of you are already familiar with dual stack networking?&amp;rdquo;&lt;/li>
&lt;li>ipv6 bandwagon when it comes to k8s?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>기본적으로 네트워크에 대해 알고 있는 사람을 10점 만점으로 했을떼 6~8 점인 사람을 위한 세션인듯 하다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="앱-개발자로서-ipv6-를-정말로-알아야할까요-그렇다면-어디서부터-시작해야하죠-do-i-really-care-about-ipv6-should-i-really-care-about-ipv6-if-i-do-what-are-my-resources-to-get-started">앱 개발자로서 ipv6 를 정말로 알아야할까요? 그렇다면 어디서부터 시작해야하죠? (Do I really care about ipv6? Should I really care about ipv6? If I do, what are my resources to get started?)&lt;/h3>
&lt;ul>
&lt;li>cluster admin 이 부담하면 상관 없긴한데, 얼마만큼 부담을 주고 싶나요?&lt;/li>
&lt;li>예전에는 ipv4 일때는 클러스터 밖에서 안으로 route 안됬는데, ipv6 나 dual stack 을 사용하면서 routable 해졌다. 알긴 해야하는것 같다.&lt;/li>
&lt;li>nat 안에 있을때는 괜찮았지만 지금은 ipv6 로 되면서 다 연결 가능해졌고, 기존에 복잡하게 했던 것들을 더 단순하게 할수 있게 되었다. 그렇다면 간단한 방법을 안쓸 이유가 있나?&lt;/li>
&lt;li>결과적으로 ipv6 가 되면서 converting 없이 할 수 있게 되었고 이는 개발자에게 더 좋은 방향일 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="ipv4-에서-ip6-로-어떻게-이주해야할까요">ipv4 에서 ip6 로 어떻게 이주해야할까요.&lt;/h3>
&lt;ul>
&lt;li>과거에는 사용하면 &amp;ldquo;와, 이거 웰케 어렵냐?&amp;rdquo; 라는 소리가 절로 나왔지만, 1.20 버전 이후로는 단순해졌고 이를 위해서 지속적으로 노력하고 있다.&lt;/li>
&lt;li>고객들은 ipv6 를 바로 사용하는 것을 원할수 있지만, 당분간은 dual stack 을 사용해야 할 것이다. 단순히 transport 뿐만 아니라 software application 에서 달라진 network 를 적응하기 어려울 것이다.&lt;/li>
&lt;li>ipv4 와 ipv6 를 동시에 사용하고 싶을 때 dual stack 은 정말 도움이 될 것이다.&lt;/li>
&lt;/ul>
&lt;h3 id="ipv4-에-비해서-ipv6-가-모두에게-필요하지-않을-수-있다고-말했는데-nat-64는-어떤-선택지인지">ipv4 에 비해서 ipv6 가 모두에게 필요하지 않을 수 있다고 말했는데 nat 64는 어떤 선택지인지?&lt;/h3>
&lt;ul>
&lt;li>참고 : nat64 는 ipv4 와 ipv6 간 변환하는 전환 매커니즘&lt;/li>
&lt;li>두가지 channel 을 동시에 사용하는 것은 충분히 혼란스러운 일이지만, overhead 나 service discovery 등 문제들을 복합적으로 고려한다면 결과적으로 ipv4 에서 문제를 해결하는 것이 아니라 ipv6 로 옮겨가서 문제를 해결하는게 맞다. 앞으로도 계속 규모는 커질 것이고(pod 가 증가하는 예시) 언제까지고 ipv4 로는 addressing problem 을 막을 수는 없다.&lt;/li>
&lt;li>dual stack 은 ipv6 에 대해서 사용자들이 친숙하게 하는 것에 도움을 줄 것이다.&lt;/li>
&lt;li>v6 는 simple address 이다. 전환하는건 어렵더라도 결과적으로 올바른 방향이 맞다.&lt;/li>
&lt;li>결국에는 사용자들도, 제공하는 것도 계속 증가한다. kubernetes 는 이를 위해서 만들어진 것이고 이를 위해서 노력해야한다.&lt;/li>
&lt;/ul>
&lt;h3 id="향후-가장-강조되고-있는-이슈는-무엇인가요">향후 가장 강조되고 있는 이슈는 무엇인가요?&lt;/h3>
&lt;ul>
&lt;li>adressing scheme 이며 만약 이에 어려움을 겪는다면 언제라도 물어봐주면 usecase 들을 제공해준다고 한다.&lt;/li>
&lt;li>내 해석 : 전환하는데에서 어떻게 주소부여를 할 것이며 어떻게 하는 것이 올바른 것인지 어려움이 많을텐데 이를 위해서 많이 질문해줬으면 좋겠다 라고 답변한걸로 이해했다.&lt;/li>
&lt;/ul>
&lt;h3 id="모든-컴포넌트가-addressable-한데-어떻게-security-제어할-것인지">모든 컴포넌트가 addressable 한데 어떻게 security 제어할 것인지?&lt;/h3>
&lt;ul>
&lt;li>질문 해석 : 모든 컴포넌트가 addressable 하면, 외부에 너무나 많은 것들이 노출되게 되는데 이를 제어하기 위한 수단이 있는지:
&lt;ul>
&lt;li>과거 ipv4 에서는 어짜피 local network 라서 접근을 못해서 이에 대해 단순하게 생각할수 있었지만 앞으로는 어떻게 해야하는가?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ipv6 에만 해당하는 답변은 아닌데 anp(admin network policy) 와 관련된 api 를 만들고 있다.&lt;/li>
&lt;li>지금은 cluster network policy 로 만들고 있긴 한데 multi-cluster network policy 로 넘어갈 것이다.&lt;/li>
&lt;li>약간 벗어난 이야기이긴 한데, 단순히 만들기만 하면 아무도 안쓸꺼기 때문에 core api나 components 들에 dual stack 을 적용하기 위한 provider 를 만들고 있고 이를 위해 interface 도 만들고 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="내-생각">내 생각&lt;/h2>
&lt;ul>
&lt;li>위에 더 내용이 많긴 한데, 중복되는 내용도 많고, 이미 정리된 내용으로 강연의 목적이나 향후 방향성에 대해서 충분히 엿볼수 있는 것 같아서 저정도만 정리했다.&lt;/li>
&lt;li>요약하자면, ipv4 에서 문제를 계속 들고 있는 것 보다 ipv6 에서 문제를 해결하는 것이 올바른 방향이며, 지금까지 ipv4와 ipv6를 공존시키기 위해 nat64 를 사용했지만 이는 결과적으로 모든 문제를 해결하지 못했다.&lt;/li>
&lt;li>하지만, 당장 ipv6 에 대해서 모든 사람이 익숙한 것이 아니며, 개발해야할 툴들도 많다. 이를 위해서 dual stack 을 사용해서 동시에 사용하는 것을 선택하였으며 core api 나 component 에 지속적으로 영향이 있을 것이다. 이를 위해 provider 들도 노력하고 있다.&lt;/li>
&lt;li>이런 결의 내용이며, 자잘한 툴들이나 팁들 같은 경우는 세션의 성격에 맞지 않아서 안한듯 하다.&lt;/li>
&lt;li>여기서 얻을 수 있는 내용은:
&lt;ul>
&lt;li>nat64 는 더이상 해결책이 아니다.&lt;/li>
&lt;li>dual stack 을 사용한다.&lt;/li>
&lt;li>ipv6 에서 addressable 문제가 있기에 이를 위한 해결책들이 제시되고 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Prometheus Intro and Deep Dive</title><link>https://minuk.dev/wiki/prometheus-intro-and-deep-dive/</link><pubDate>Sat, 01 Oct 2022 21:20:08 +0900</pubDate><guid>https://minuk.dev/wiki/prometheus-intro-and-deep-dive/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/eM3RXdK1yys">원본 링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-prometheus">What is Prometheus&lt;/h2>
&lt;ul>
&lt;li>OSS metrics-based monitoring &amp;amp; alerting stack.&lt;/li>
&lt;li>Instrumentation - Metrics collection and storage - Querying, Alerting, Dashboarding&lt;/li>
&lt;li>Works for all levels of the stack!&lt;/li>
&lt;li>Mode for dynamic cloud environments.&lt;/li>
&lt;/ul>
&lt;h2 id="architecture">Architecture&lt;/h2>
&lt;ul>
&lt;li>Instrumentation &amp;amp; Exposition - Target (web app, API server, Linux VM, mysqld, cgouprs &amp;hellip;)&lt;/li>
&lt;li>Collection, Storage &amp;amp; Processing - Prometheus + Service Discovery (DNS, Kubernetes, AWS, &amp;hellip;)&lt;/li>
&lt;li>Qurying, Dashboards - Grafana, Prometheus Web UI, Automation&lt;/li>
&lt;li>Alertmanager&lt;/li>
&lt;/ul>
&lt;h2 id="selling-points">Selling Points&lt;/h2>
&lt;ul>
&lt;li>Dimensional data model&lt;/li>
&lt;li>Powerful query language&lt;/li>
&lt;li>Simple architecture &amp;amp; efficient server&lt;/li>
&lt;li>Service discovery integration&lt;/li>
&lt;/ul>
&lt;h2 id="data-model">Data Model&lt;/h2>
&lt;ul>
&lt;li>What is a time series?:
&lt;ul>
&lt;li>&lt;code>&amp;lt;identifyer&amp;gt; -&amp;gt; [(t0, v0), (t1, v1), ...]&lt;/code>&lt;/li>
&lt;li>metric name&lt;/li>
&lt;li>labels&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="querying">Querying&lt;/h2>
&lt;ul>
&lt;li>PromQL:
&lt;ul>
&lt;li>Functional query language&lt;/li>
&lt;li>Great for time series computations&lt;/li>
&lt;li>Not SQL-style&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="example">Example&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>All partitions in my entire infrastructure with more than 100GB capacity that are not mounted on root?:&lt;/p></description></item><item><title>cs 기본</title><link>https://minuk.dev/wiki/cs/</link><pubDate>Wed, 28 Sep 2022 17:27:10 +0900</pubDate><guid>https://minuk.dev/wiki/cs/</guid><description>&lt;h2 id="정리-동기">정리 동기&lt;/h2>
&lt;ul>
&lt;li>적으면서 공부하려고&lt;/li>
&lt;li>&lt;a href="https://github.com/WooVictory/Ready-For-Tech-Interview">출처&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="algorithm">Algorithm&lt;/h2>
&lt;h3 id="selection-sort">Selection Sort&lt;/h3>
&lt;ul>
&lt;li>Unstable sort&lt;/li>
&lt;li>O(N^2)&lt;/li>
&lt;li>단순한 알고리즘&lt;/li>
&lt;li>적은 교환 횟수&lt;/li>
&lt;li>추가 메모리 공간 필요 없음&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20sort%28int[]%20arr%29%20%7b%0a%20%20for%20%28int%20i%20=%200;%20i%20%3c%20arr.length;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20int%20standard%20=%20i;%0a%20%20%20%20for%20%28int%20j%20=%20i%20&amp;#43;%201;%20j%20%3c%20arr.length;%20j&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20%20%20if%20%28arr[j]%20%3c%20arr[standard]%29%0a%20%20%20%20%20%20%20%20standard%20=%20j;%0a%20%20%20%20%7d%0a%0a%20%20%20%20int%20temp%20=%20arr[standard];%0a%20%20%20%20arr[standard]%20=%20arr[i];%0a%20%20%20%20arr[i]%20=%20temp;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> standard &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> 1; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>standard&lt;span style="color:#f92672">]&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> standard &lt;span style="color:#f92672">=&lt;/span> j;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>standard&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>standard&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="bubble-sort">Bubble Sort&lt;/h3>
&lt;ul>
&lt;li>구현이 단순&lt;/li>
&lt;li>이미 정렬된 데이터를 정렬할때, 가장 빠르다.&lt;/li>
&lt;li>배열 안에서 정렬하는 방식으로 다른 메모리 공간 필요 없음.&lt;/li>
&lt;li>stable sort&lt;/li>
&lt;li>O(n^2)&lt;/li>
&lt;li>교환 횟수가 많다.&lt;/li>
&lt;li>역순 정렬시 가장 느림.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20sort%28int[]%20arr%29%20%7b%0a%20%20for%20%28int%20i%20=%200;%20i%20%3c%20arr.length;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20for%20%28int%20j%20=%200;%20j%20%3c%20arr.length%20-%20i%20-%201;%20j%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20%20%20if%20%28arr[j]%20%3e%20arr[j%20&amp;#43;%201]%29%20%7b%0a%20%20%20%20%20%20%20%20int%20temp%20=%20arr[j];%0a%20%20%20%20%20%20%20%20arr[j]%20=%20arr[j%20&amp;#43;%201];%0a%20%20%20%20%20%20%20%20arr[j%20&amp;#43;%201]%20=%20temp;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%7d%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> 0; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> i &lt;span style="color:#f92672">-&lt;/span> 1; j &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="merge-sort">Merge Sort&lt;/h3>
&lt;ul>
&lt;li>Stable stort&lt;/li>
&lt;li>추가 메모리가 필요하다.&lt;/li>
&lt;li>데이터 분포에 영향을 덜 받는다.&lt;/li>
&lt;li>LinkedList 에서 효율적이다.&lt;/li>
&lt;li>O(nlgn)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20mergeSort%28int[]%20a,%20int%20left,%20int%20right%29%20%7b%0a%20%20if%20%28left%20%3c%20right%29%20%7b%0a%20%20%20%20int%20mid%20=%20%28left%20&amp;#43;%20right%29%20/%202;%0a%20%20%20%20mergeSort%28a,%20left,%20mid%29;%0a%20%20%20%20mergeSort%28a,%20mid%20&amp;#43;%201,%20right%29;%0a%20%20%20%20merge%28a,%20left,%20mid,%20right%29;%0a%20%20%7d%0a%7d%0a%0aprivate%20static%20void%20merge%28int[]%20a,%20int%20left,%20int%20mid,%20int%20right%29%20%7b%0a%20%20int%20i,%20j,%20k;%0a%20%20i%20=%20left;%0a%20%20j%20=%20%28mid%20&amp;#43;%201%29;%0a%20%20k%20=%200;%0a%20%20int[]%20sorted%20=%20new%28int[],%20right%20-%20left%20&amp;#43;%201%29;%0a%20%20while%20%28i%20%3c=%20mid%20&amp;amp;&amp;amp;%20j%20%3c=%20right%29%20%7b%0a%20%20%20%20if%20%28a[i]%20%3c%20a[j]%29%20sorted[k&amp;#43;&amp;#43;]%20=%20a[i&amp;#43;&amp;#43;];%0a%20%20%20%20else%20sorted[k&amp;#43;&amp;#43;]%20=%20a[j&amp;#43;&amp;#43;];%0a%20%20%7d%0a%20%20while%20%28i%20%3c=%20mid%29%20%7b%0a%20%20%20%20sorted[k&amp;#43;&amp;#43;]%20=%20a[i&amp;#43;&amp;#43;];%0a%20%20%7d%0a%20%20while%20%28j%20%3c=%20right%29%20%7b%0a%20%20%20%20sorted[k&amp;#43;&amp;#43;]%20=%20a[j&amp;#43;&amp;#43;];%0a%20%20%7d%0a%20%20for%20%28k%20=%200;%20i%20%3c%20right%20-%20left%20&amp;#43;%201;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20a[left%20&amp;#43;%20k]%20=%20sorted[k];%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> left, &lt;span style="color:#66d9ef">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> mid &lt;span style="color:#f92672">=&lt;/span> (left &lt;span style="color:#f92672">+&lt;/span> right) &lt;span style="color:#f92672">/&lt;/span> 2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mergeSort(a, left, mid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mergeSort(a, mid &lt;span style="color:#f92672">+&lt;/span> 1, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merge(a, left, mid, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> left, &lt;span style="color:#66d9ef">int&lt;/span> mid, &lt;span style="color:#66d9ef">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i, j, k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> (mid &lt;span style="color:#f92672">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> sorted &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span>, right &lt;span style="color:#f92672">-&lt;/span> left &lt;span style="color:#f92672">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> mid &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>) sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> mid) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (k &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> right &lt;span style="color:#f92672">-&lt;/span> left &lt;span style="color:#f92672">+&lt;/span> 1; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a&lt;span style="color:#f92672">[&lt;/span>left &lt;span style="color:#f92672">+&lt;/span> k&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="insertion-sort">Insertion Sort&lt;/h3>
&lt;ul>
&lt;li>O(n^2) (평균, 최악), O(n) (최선)&lt;/li>
&lt;li>추가 공간 필요 없음.&lt;/li>
&lt;li>단순한 알고리즘&lt;/li>
&lt;li>이미 정렬되어있는 경우 효율적&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20sort%28int[]%20arr%29%20%7b%0a%20%20for%20%28int%20i%20=%201;%20i%20%3c%20arr.length;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20int%20standard%20=%20arr[i];%0a%20%20%20%20int%20idx%20=%20i%20-%201;%0a%20%20%20%20while%20%280%20%3c=%20idx%20&amp;amp;&amp;amp;%20standard%20%3c%20arr[idx]%29%20%7b%0a%20%20%20%20%20%20arr[idx%20&amp;#43;%201]%20=%20arr[idx];%0a%20%20%20%20%20%20idx%20--;%0a%20%20%20%20%7d%0a%20%20%20%20arr[idx%20&amp;#43;%201]%20=%20standard;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> standard &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">-&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> idx &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> standard &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>idx&lt;span style="color:#f92672">]&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>idx &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>idx&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx &lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>idx &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> standard;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="quick-sort">Quick Sort&lt;/h3>
&lt;ul>
&lt;li>Unstable sort&lt;/li>
&lt;li>평균적으로 가장 빠른 구현&lt;/li>
&lt;li>피벗 선정하는게 중요&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20quickSort%28int[]%20arr,%20int%20left,%20int%20right%29%20%7b%0a%20%20int%20L%20=%20left;%0a%20%20int%20R%20=%20right;%0a%20%20int%20pivot%20=%20arr[%28left%20&amp;#43;%20right%29%20/%202];%0a%20%20while%20%28L%20%3c=%20R%29%20%7b%0a%20%20%20%20while%20%28arr[L]%20%3c%20pivot%29%20L%20&amp;#43;&amp;#43;;%0a%20%20%20%20while%20%28pivot%20%3c%20arr[R]%29%20R%20--;%0a%20%20%20%20if%20%28L%20%3c=%20R%29%20%7b%0a%20%20%20%20%20%20if%20%28L%20!=%20R%29%20%7b%0a%20%20%20%20%20%20%20%20swap%28arr,%20L,%20R%29;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20L%20&amp;#43;&amp;#43;;%0a%20%20%20%20%20%20R%20--;%0a%20%20%20%20%7d%0a%20%20%20%20if%20%28left%20%3c%20R%29%20quickSort%28arr,%20left,%20R%29;%0a%20%20%20%20if%20%28L%20%3c%20right%29%20quickSort%28arr,%20L,%20right%29;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">quickSort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr, &lt;span style="color:#66d9ef">int&lt;/span> left, &lt;span style="color:#66d9ef">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> L &lt;span style="color:#f92672">=&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> R &lt;span style="color:#f92672">=&lt;/span> right;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> pivot &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>(left &lt;span style="color:#f92672">+&lt;/span> right) &lt;span style="color:#f92672">/&lt;/span> 2&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (L &lt;span style="color:#f92672">&amp;lt;=&lt;/span> R) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>L&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> pivot) L &lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (pivot &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>R&lt;span style="color:#f92672">]&lt;/span>) R &lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (L &lt;span style="color:#f92672">&amp;lt;=&lt;/span> R) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (L &lt;span style="color:#f92672">!=&lt;/span> R) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap(arr, L, R);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> L &lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> R &lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (left &lt;span style="color:#f92672">&amp;lt;&lt;/span> R) quickSort(arr, left, R);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (L &lt;span style="color:#f92672">&amp;lt;&lt;/span> right) quickSort(arr, L, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="heap-sort">Heap Sort&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20heapSort%28int[]%20arr%29%20%7b%0a%20%20int%20n%20=%20arr.length;%0a%20%20for%20%28int%20i%20=%20%28n%20/%202%29%20-%201;%20i%20%3e=%200;%20i%20--%29%20%7b%0a%20%20%20%20heapify%28arr,%20n,%20i%29;%0a%20%20%7d%0a%20%20for%20%28int%20i%20=%20n%20-%201;%20i%20%3e%200;%20i%20--%29%20%7b%0a%20%20%20%20swap%28arr,%200,%20i%29;%0a%20%20%20%20heapify%28arr,%20i,%200%29;%0a%20%20%7d%0a%7d%0a%0aprivate%20static%20void%20heapify%28int[]%20arr,%20int%20n,%20int%20i%29%20%7b%0a%20%20int%20p%20=%20i;%0a%20%20int%20l%20=%20i%20*%202%20&amp;#43;%201;%0a%20%20int%20r%20=%20i%20*%202%20&amp;#43;%202;%0a%20%20if%20%28l%20%3c%20n%20&amp;amp;&amp;amp;%20arr[p]%20%3c%20arr[l]%29%20p%20=%20l;%0a%20%20if%20%28r%20%3c%20n%20&amp;amp;&amp;amp;%20arr[p]%20%3c%20arr[r]%29%20p%20=%20r;%0a%20%20if%20%28i%20!=%20p%29%20%7b%0a%20%20%20%20swap%28arr,%20p,%20i%29;%0a%20%20%20%20heapify%28arr,%20n,%20p%29;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">heapSort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> (n &lt;span style="color:#f92672">/&lt;/span> 2) &lt;span style="color:#f92672">-&lt;/span> 1; i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> 0; i &lt;span style="color:#f92672">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify(arr, n, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> 1; i &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0; i &lt;span style="color:#f92672">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap(arr, 0, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify(arr, i, 0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">heapify&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr, &lt;span style="color:#66d9ef">int&lt;/span> n, &lt;span style="color:#66d9ef">int&lt;/span> i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> l &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> 2 &lt;span style="color:#f92672">+&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> r &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> 2 &lt;span style="color:#f92672">+&lt;/span> 2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (l &lt;span style="color:#f92672">&amp;lt;&lt;/span> n &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>l&lt;span style="color:#f92672">]&lt;/span>) p &lt;span style="color:#f92672">=&lt;/span> l;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (r &lt;span style="color:#f92672">&amp;lt;&lt;/span> n &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>r&lt;span style="color:#f92672">]&lt;/span>) p &lt;span style="color:#f92672">=&lt;/span> r;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i &lt;span style="color:#f92672">!=&lt;/span> p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap(arr, p, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify(arr, n, p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="lru-cache-least-recently-used">LRU Cache (Least Recently Used)&lt;/h3>
&lt;ul>
&lt;li>가장 오랫동안 사용하지 않은 페이지를 교체하는 알고리즘&lt;/li>
&lt;li>자세한건 Demand Paging (페이지 요청 기법) 참고&lt;/li>
&lt;/ul>
&lt;h2 id="operating-system">Operating System&lt;/h2>
&lt;h3 id="프로세스-쓰레드">프로세스, 쓰레드&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Process:&lt;/p></description></item><item><title>learning-coredns</title><link>https://minuk.dev/wiki/coredns/</link><pubDate>Wed, 28 Sep 2022 11:30:48 +0900</pubDate><guid>https://minuk.dev/wiki/coredns/</guid><description>&lt;h2 id="공부-이유">공부 이유&lt;/h2>
&lt;ul>
&lt;li>네트워크 부분에서 모호하게 된 영역이여서&lt;/li>
&lt;li>&lt;a href="https://summerofcode.withgoogle.com/programs/2022/projects/R8SxC38F">google summer code 에 작년 관련 프로젝트가&lt;/a>에 있어서 관심이 가서&lt;/li>
&lt;li>어짜피 공부해야할 내용인데 책으로 있으면 안할 이유가 없어서&lt;/li>
&lt;li>kubecon 에서 간략하게 소개해줬는데 흥미가 가서, [[coredns-into-and-deep-dive]]&lt;/li>
&lt;/ul>
&lt;h2 id="공부-방법">공부 방법&lt;/h2>
&lt;ul>
&lt;li>일단 기본적으로는 책에 있는 내용을 정리하면서 읽기&lt;/li>
&lt;li>추가적으로 궁금한거 (구현부, 기여할만한지) 등도 추가로 정리하면서 읽기&lt;/li>
&lt;/ul>
&lt;h2 id="1장-소개">1장 소개&lt;/h2>
&lt;ul>
&lt;li>제약사항:
&lt;ul>
&lt;li>완전 재귀를 지원하지 않는다.&lt;/li>
&lt;li>동적 업데이트를 지원하지 않는다.&lt;/li>
&lt;li>DNSSEC (Domain Name SYstem Security 확장)을 제한적으로 지원한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="2장-dns-소개">2장 DNS 소개&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>DNS 란?:&lt;/p></description></item><item><title>CoreDNS - Intro and Deep Dive</title><link>https://minuk.dev/wiki/coredns-into-and-deep-dive/</link><pubDate>Thu, 22 Sep 2022 00:53:03 +0900</pubDate><guid>https://minuk.dev/wiki/coredns-into-and-deep-dive/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/rNlSgYZoIYs">원본링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-coredns">What is CoreDNS?&lt;/h2>
&lt;ul>
&lt;li>Flexible DNS server written in GO&lt;/li>
&lt;li>Focus on service discovery&lt;/li>
&lt;li>Plugin based architecture, easily extended&lt;/li>
&lt;li>Support serving via DNS, DNS over TLS, DNS over HTTP/2, DNS over gRPC&lt;/li>
&lt;li>Support forwarding to upstream via DNS, DNS over TLS, DNS over gRPC&lt;/li>
&lt;li>Integration with Route53/Google Cloud DNS/Azuer DNS&lt;/li>
&lt;li>Integrates with Prometheus, Open Tracing, OPA&lt;/li>
&lt;li>Default DNS server in Kubernetes&lt;/li>
&lt;li>Basis for node local cache feature in K8s&lt;/li>
&lt;/ul>
&lt;h2 id="latest-updates">Latest Updates&lt;/h2>
&lt;ul>
&lt;li>1.8.5 - 1.9.2:
&lt;ul>
&lt;li>1.9.2. Released May, 2022&lt;/li>
&lt;li>New plugins: geoip, header:
&lt;ul>
&lt;li>geoip reports where the query comes from&lt;/li>
&lt;li>header allows fiddle with header bits&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Backwards incompatible changes:
&lt;ul>
&lt;li>kubernetes: Removed wild card query functionality.&lt;/li>
&lt;li>route53: Plaintext secret in Corefile deprecated.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Built with golang 1.17.8+ since 1.9.1:
&lt;ul>
&lt;li>golang &amp;lt; 1.17.6 security issues&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="security-audit">Security Audit&lt;/h3>
&lt;ul>
&lt;li>Completed by Tail of Bits (March 2022)&lt;/li>
&lt;li>Sponsored by Linux Foundation&lt;/li>
&lt;li>1 high severity issue (TOB-CDNS-8):
&lt;ul>
&lt;li>May lead to cache poisoning attacks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1 medium issue (TOB-CDNS-12):
&lt;ul>
&lt;li>Mitigation possible withouth coredns update&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>12 low or informational issues.&lt;/li>
&lt;li>All have been resolved now.&lt;/li>
&lt;/ul>
&lt;h2 id="three-ways-to-cusomize-coredns">Three ways to cusomize CoreDNS&lt;/h2>
&lt;ul>
&lt;li>Rebuilding with external plugins&lt;/li>
&lt;li>Using CoreDNS as a library&lt;/li>
&lt;li>Building your own plugin&lt;/li>
&lt;/ul>
&lt;h3 id="rebuilding-with-external-plugins">Rebuilding with External Plugins&lt;/h3>
&lt;ul>
&lt;li>You do not need to know Go to do this!&lt;/li>
&lt;li>&amp;ldquo;External&amp;rdquo;:
&lt;ul>
&lt;li>Not built into the standard binaries and Docker images&lt;/li>
&lt;li>Not supported by core team&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>No dynamic loading of plugins:
&lt;ul>
&lt;li>Plugins are built-in at compile time&lt;/li>
&lt;li>Controlled by plugin.cfg&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Plugin ordering is fixed at compile time&lt;/li>
&lt;/ul>
&lt;h3 id="external-plugins">External Plugins&lt;/h3>
&lt;ul>
&lt;li>Prerequisites: Docker and a shell:
&lt;ol>
&lt;li>Clone CoreDNS&lt;/li>
&lt;li>Modify plugin.cfg&lt;/li>
&lt;li>Build CoreDNS&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="coredns-as-a-library">CoreDNS as a Library&lt;/h3>
&lt;ul>
&lt;li>Replace the CoreDNS main.go&lt;/li>
&lt;li>Allows you to:
&lt;ul>
&lt;li>Reduced the size and memory footprint of the binary&lt;/li>
&lt;li>Limit the functionality and CLI flags&lt;/li>
&lt;li>Do extra setup or initialization&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Used, for example, by Node Local DNS in K8s&lt;/li>
&lt;/ul>
&lt;h3 id="example-dnscached">Example: dnscached&lt;/h3>
&lt;ul>
&lt;li>Source is in &lt;a href="https://github.com/coredns/learning-coredns">https://github.com/coredns/learning-coredns&lt;/a>&lt;/li>
&lt;li>Simple caching DNS server&lt;/li>
&lt;li>Embeds only bind, cache, erros, forward and log plugins&lt;/li>
&lt;li>CLI args to generate a Corefile internally&lt;/li>
&lt;/ul>
&lt;h3 id="writing-a-plugin">Writing a Plugin&lt;/h3>
&lt;ul>
&lt;li>Three categories of plugins&lt;/li>
&lt;li>Best practice: stick to one of these in your plugin&lt;/li>
&lt;li>Backends:
&lt;ul>
&lt;li>Source of data&lt;/li>
&lt;li>file, forward, hosts, clouddns, template, kubernetes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mutators:
&lt;ul>
&lt;li>Modify the inbound request, the outbound response, or both&lt;/li>
&lt;li>acl, cache, rewrite, nsid&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Configurators:
&lt;ul>
&lt;li>Modify the internal state or functioning of CoreDNS&lt;/li>
&lt;li>bind, log, health, ready&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="four-functions">Four functions&lt;/h2>
&lt;ul>
&lt;li>Name - literally, just returns the name of the plugin&lt;/li>
&lt;li>ServeDNS - request handling&lt;/li>
&lt;li>init - register your plugin with Caddy&lt;/li>
&lt;li>setup - parse your config&lt;/li>
&lt;/ul>
&lt;h3 id="example-there-can-be-only-one">Example: There can be only one!&lt;/h3>
&lt;ul>
&lt;li>onlyone plugin from Learning CoreDNS&lt;/li>
&lt;li>Filters out all but one of specific record types&lt;/li>
&lt;/ul>
&lt;h3 id="function-setup">Function: setup&lt;/h3>
&lt;ul>
&lt;li>setup.go&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">setup&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">caddy&lt;/span>.&lt;span style="color:#a6e22e">Controller&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">parse&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;onlyone&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dnsserver&lt;/span>.&lt;span style="color:#a6e22e">GetConfig&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>).&lt;span style="color:#a6e22e">AddPlugin&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Next&lt;/span> = &lt;span style="color:#a6e22e">next&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="function-servedns">Function: ServeDNS&lt;/h3>
&lt;h2 id="개인-생각">개인 생각&lt;/h2>
&lt;ul>
&lt;li>기본적으로 Google 개발자들이 발표하는게 퀄리티가 좋은듯? 너무 기업에서 &amp;ldquo;우리 최고죠?&amp;rdquo; 이런 느낌으로 홍보 가까운 느낌인데, 구글껀 괜찮은듯, 일단 전체적으로 보편적으로 다들 쓰고 있는걸 말한다.: 구글이 쓰니까 보편적인건가? 뭐든 학습자 입장에서는 쓰지도 않을 Framework, Library 공부하는 것보다는 좋은듯&lt;/li>
&lt;li>CoreDNS Plugin 을 만드는 방법에 대해서 설명해주고 있다. 마지막에 Learning CoreDNS 책을 소개해주는데 github 에도 있어서 읽어봐야겠다.&lt;/li>
&lt;/ul></description></item><item><title>Deep Dive into Minikube</title><link>https://minuk.dev/wiki/deep-dive-into-minikube/</link><pubDate>Wed, 21 Sep 2022 01:59:49 +0900</pubDate><guid>https://minuk.dev/wiki/deep-dive-into-minikube/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/Iyq_MlSku-I">원본&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="it-all-started-in-2016">It all started in 2016&lt;/h2>
&lt;ul>
&lt;li>Minkube was created 6 years ago by Google to alleviate the difficulties that developers had when setting up a Kubernetes environment for local development&lt;/li>
&lt;/ul>
&lt;h3 id="ok-google--assist-the-developers-please">OK Google &amp;hellip; Assist the developers please!&lt;/h3>
&lt;ul>
&lt;li>Google has continued to evolve the Minikube project to grow the Kubernetes ecosystem by making Kubernetes development more attractive and frictionless&lt;/li>
&lt;/ul>
&lt;h2 id="primary-goal">Primary Goal&lt;/h2>
&lt;ul>
&lt;li>make it simple to run Kubernetes locally for learning and day-to-day development, testing &amp;amp; debugging workflows:
&lt;ol>
&lt;li>inclusive&lt;/li>
&lt;li>Community-driven&lt;/li>
&lt;li>User-friendly&lt;/li>
&lt;li>Support all Kubernetes features&lt;/li>
&lt;li>Cross-platform&lt;/li>
&lt;li>Reliable&lt;/li>
&lt;li>High Performance&lt;/li>
&lt;li>Developer Focused&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="our-first-integration-tests-ran-in-the-office">Our first Integration tests ran in the office.&lt;/h3>
&lt;ul>
&lt;li>Minikube&amp;rsquo;s VM drivers needed Baremetal servers with virtualization enabled.&lt;/li>
&lt;li>Nested Virtualization only available for certain Linux Distros&lt;/li>
&lt;/ul>
&lt;h3 id="it-takes-a-village-to-test-minikube">It takes a village to test Minikube&lt;/h3>
&lt;ul>
&lt;li>Minikube is the most tested local Kubernetes tool.:
&lt;ul>
&lt;li>46 Self-hosted CI VMs in 5 different clouds (GCP, AWS, Equinix Metal, Azure, Macstadium) + Prow and Github Action&lt;/li>
&lt;li>296 end to end tests in integration testing suite&lt;/li>
&lt;li>100 unit tests&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="flake-rate-system">Flake Rate System&lt;/h2>
&lt;ul>
&lt;li>Problem:
&lt;ul>
&lt;li>Running hundreds of test cases on dozen platforms, there are always some flaky test that fail 10-15% of the time on Master.&lt;/li>
&lt;li>Reviewer had to have a lot of context to approve a PR with failed test.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Solution:
&lt;ul>
&lt;li>Run tests on master regularly, generate failed rate on master.&lt;/li>
&lt;li>On each PR comments how many of the Failed tests are a known Flake&lt;/li>
&lt;li>Automatically create Github issue for frequently failing test.&lt;/li>
&lt;li>Generate Visualized&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Minikube&amp;rsquo;s Flake Rate System is built on top of Gopogh&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-gopogh---reducing-squinting-for-go-developers">What is Gopogh? - Reducing Squinting for go developers&lt;/h3>
&lt;ul>
&lt;li>Problem: Failed minikube test logs come with thousands of lines of post mortem logs low-level system logs. (sometimes 10K lines) that makes it very hard to see what log is for what!:
&lt;ul>
&lt;li>Created in a hackathon with a funny name&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="minikube-speaks-your-language">Minikube speaks your language&lt;/h2>
&lt;h2 id="checkout-minikubes-side-project">Checkout Minikube&amp;rsquo;s Side Project!&lt;/h2>
&lt;ul>
&lt;li>Slow jam&lt;/li>
&lt;li>Triage Party&lt;/li>
&lt;li>Gopogh&lt;/li>
&lt;li>Time To k8s&lt;/li>
&lt;li>Minikube-CI&lt;/li>
&lt;li>Pull Sheet&lt;/li>
&lt;/ul>
&lt;h2 id="the-story-of-kbuernetes-124">The story of Kbuernetes 1.24&amp;hellip;&lt;/h2>
&lt;ul>
&lt;li>Kubernetes removed the code for supporting docker runtime&lt;/li>
&lt;li>CNI&amp;hellip;&lt;/li>
&lt;li>Cgroup V2&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="minikube-continues-to-support-docker-env">Minikube continues to support docker-env&lt;/h3>
&lt;ul>
&lt;li>Users love &amp;ldquo;min8ikube docker-env&amp;rdquo;(building images directly on the cluster) and we can&amp;rsquo;t blame them, it is 36X time faster than Image load.&lt;/li>
&lt;/ul>
&lt;h2 id="minikube-cpu-usage-overtime">Minikube CPU usage overtime&lt;/h2>
&lt;ul>
&lt;li>Save energy by using these Minikube features Features that can save energy:
&lt;ul>
&lt;li>try &amp;ldquo;minikube pause&amp;rdquo;&lt;/li>
&lt;li>Auto-Pause Addon&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="benchmarking">Benchmarking&lt;/h2>
&lt;ul>
&lt;li>Measure Weekly/Daily and per release&lt;/li>
&lt;li>Measure agsinst similar tools&lt;/li>
&lt;/ul>
&lt;h2 id="minikubes-base-image">Minikube&amp;rsquo;s Base Image&lt;/h2>
&lt;h3 id="did-you-know-minikube-maintains-its-own-linux">Did you know minikube maintains its own linux?&lt;/h3>
&lt;ul>
&lt;li>Hand Crafted - Just enough Linux for Kubernetes&lt;/li>
&lt;li>Small ISO - 280MB&lt;/li>
&lt;li>Based on CoreOS BUildroot&lt;/li>
&lt;li>Might Graduate out of Minikube to is own repo&lt;/li>
&lt;li>Advantages:
&lt;ul>
&lt;li>Granular control of enabled kernel modules and packages&lt;/li>
&lt;li>Tailored for Kubernetes&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="types-of-minikube-users">Types of Minikube users&lt;/h3>
&lt;ul>
&lt;li>Learn Kubernetes&lt;/li>
&lt;li>Develop on Kubernetes&lt;/li>
&lt;li>Test/CI&lt;/li>
&lt;/ul>
&lt;h3 id="new-category-of-minikube-users">New category of minikube users!&lt;/h3>
&lt;ul>
&lt;li>Tens of Blog posts, tweets and survey comments shows that a lot of new users are using minikube merely as a Docker Desktop Replacement.&lt;/li>
&lt;/ul>
&lt;h3 id="minikube-start--no-kubernetes">minikube start -no-kubernetes?&lt;/h3>
&lt;ul>
&lt;li>IMO : ?? what?&lt;/li>
&lt;/ul>
&lt;h3 id="top-differentiators-minikube-vs-similar-tools">Top differentiators Minikube vs similar tools&lt;/h3>
&lt;ul>
&lt;li>Multiple container runtimes for Kubernetes&lt;/li>
&lt;li>Direct access to container runtime for faster image build&lt;/li>
&lt;li>Integration tests (most comprehensive)&lt;/li>
&lt;/ul>
&lt;h2 id="advantages-of-vm-drivers">Advantages of VM Drivers&lt;/h2>
&lt;ul>
&lt;li>No need to have Docker Desktop License&lt;/li>
&lt;li>Less CPU usage&lt;/li>
&lt;li>You can hit the port directly (for example if you have a hotspot service running on port 80 you can curl $(minikube ip):80 on your machine vs Docker Drive that by design needs to be assigned a random port.)&lt;/li>
&lt;/ul>
&lt;h2 id="tens-of-survey-requests-for-vm-driver-on-m1arm64">Tens of Survey Requests for VM driver on M1/Arm64&lt;/h2>
&lt;h3 id="1-try-qemu-driver-on-apple-m1">1. Try Qemu Driver on Apple M1&lt;/h3>
&lt;ul>
&lt;li>Qemu driver is finally available for Arm64 and M1&lt;/li>
&lt;li>This means on Arm-based machines like Apple M1 you could have a Kbuernetes experience without having to have Docker Desktop.&lt;/li>
&lt;/ul>
&lt;h3 id="challenges-of-adding-arm64-iso">Challenges of adding ARM64 ISO&lt;/h3>
&lt;ul>
&lt;li>Slow iteration of testing&lt;/li>
&lt;li>BIOS/EFI&lt;/li>
&lt;li>AppArmor&lt;/li>
&lt;li>Lack of team familiarity with Buildroot&lt;/li>
&lt;/ul>
&lt;h3 id="2-try-early-prototype-of-minikube-gui">2. Try Early prototype of Minikube-GUI&lt;/h3>
&lt;ul>
&lt;li>Go to minikube website&lt;/li>
&lt;li>Search for Minikube GUI&lt;/li>
&lt;li>Things to try:
&lt;ul>
&lt;li>Simplified View (one cluster)&lt;/li>
&lt;li>Advanced View (multi cluster)&lt;/li>
&lt;li>Right click tray icon&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="개인-생각">개인 생각&lt;/h2>
&lt;ul>
&lt;li>개인적으로 퀄리티가 굉장히 좋은 강연이였다.&lt;/li>
&lt;li>일단:
&lt;ul>
&lt;li>minikube에 대한 간략한 설명(k8s 에 고통을 덜기위해)&lt;/li>
&lt;li>왜 써야하는지 (안정성)&lt;/li>
&lt;li>겪고 있는 문제(flake, k8s 1.24)&lt;/li>
&lt;li>화제거리(docker 를 사용하기 위해 k8s 없이 minikube 를 돌릴수 있게 해달라)&lt;/li>
&lt;li>새로운 소식(M1 에 대한 지원, GUI 지원)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>위 사항들을 모두 요약한 좋은 강연이였다고 생각된다.&lt;/li>
&lt;li>다만 아쉬운 점은 최근 이야기가 많이 나오고 있는 k3s라던가 minikube 가 내부적으로 어떻게 동작하는지에 대한 설명이 있었으면 좋았을 거 같은데, 사실 이건 시간 관계상 하기 어렵기도 하고 minikube 를 사용하는 사람이 아닌 개발하는 사람에게 필요한 내용이므로 적합하지 않다고 생각해서 뺀것 같다. (혹은 예전에 이미 했어서 중복되서 안하거나?)&lt;/li>
&lt;li>이 강연을 통해서 얻게된 내용:
&lt;ul>
&lt;li>minikube 내부구조를 살짝 공부하고, kind(kubernetes in docker) 와 k3s 와 비교해봐야겠다. (목적성이나 구조적인 문제 둘다)&lt;/li>
&lt;li>중간에 소개해줬던 내부 툴 repo를 살펴봤는데, 현재 사용하고 있지만 툴 자체가 발전하지는 않는 상황인것 같다. 살펴봐야겠다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Making Your Apps and Infrastructure Services Failure-Resilient with Dapr</title><link>https://minuk.dev/wiki/making-your-apps-and-infrastructure-services-failure-resilient-with-dapr/</link><pubDate>Wed, 07 Sep 2022 00:57:53 +0900</pubDate><guid>https://minuk.dev/wiki/making-your-apps-and-infrastructure-services-failure-resilient-with-dapr/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/Jw05zFpsPms">원본 링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-dapr">What is Dapr?&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dapr.io/">Dapr : Distributed Application Runtime&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="sidecar">Sidecar&lt;/h3>
&lt;ul>
&lt;li>Dapr API (HTTP/gRPC)&lt;/li>
&lt;/ul>
&lt;h3 id="dapr-components">Dapr Components&lt;/h3>
&lt;ul>
&lt;li>State Stores&lt;/li>
&lt;li>Pubsub Brokers&lt;/li>
&lt;li>Bindings &amp;amp; Triggers&lt;/li>
&lt;li>Secret Stores&lt;/li>
&lt;li>Observability&lt;/li>
&lt;li>Configuration&lt;/li>
&lt;/ul>
&lt;h2 id="resiliency">Resiliency&lt;/h2>
&lt;ul>
&lt;li>State Management&lt;/li>
&lt;li>Application Configuration&lt;/li>
&lt;li>Input Binding&lt;/li>
&lt;li>Service Invocation&lt;/li>
&lt;li>Secret Management&lt;/li>
&lt;li>Publish &amp;amp; Subscribe&lt;/li>
&lt;li>Output Binding&lt;/li>
&lt;/ul>
&lt;h2 id="resiliency-configuration-yaml">Resiliency Configuration YAML&lt;/h2>
&lt;h3 id="resiliency-as-crd">Resiliency as CRD&lt;/h3>
&lt;ul>
&lt;li>In kubernetes Resiliency is defined as a CRD&lt;/li>
&lt;li>Allows for multiple policies to be defined&lt;/li>
&lt;li>Dapr merges all found policies into singl configuration&lt;/li>
&lt;/ul>
&lt;h3 id="resiliency-policies">Resiliency Policies&lt;/h3>
&lt;ul>
&lt;li>Timeouts:
&lt;ul>
&lt;li>Allows for the cancellation of requets after a given duration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Regries:
&lt;ul>
&lt;li>Allows for the generic retrying of a request or operation&lt;/li>
&lt;li>Two supported retry types. constant and exponential&lt;/li>
&lt;li>Can specify erros which are retryable and permanent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Circuit Breakers:
&lt;ul>
&lt;li>Allows for broken/breaking systems to be cut-off from requests&lt;/li>
&lt;li>Helps reduce traffic and requests to allow for recovery time&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="resiliency-policies---retries">Resiliency Policies - Retries&lt;/h4>
&lt;ul>
&lt;li>Constant Policieis:
&lt;ul>
&lt;li>maxRetries - The maximum number of attempts to make for a request&lt;/li>
&lt;li>duration - The time in-between retries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Exponential Policies:
&lt;ul>
&lt;li>maxRetries - The maximum number of attempts to make for a request&lt;/li>
&lt;li>initialinterval - The starting time between retries&lt;/li>
&lt;li>randomizationFactor - Jitter used to offset requests&lt;/li>
&lt;li>multiplier - Growth rate of the retry interval&lt;/li>
&lt;li>maxInterval - The maximum duration between retries&lt;/li>
&lt;li>maxElapsedTime - The maximum time spent over all retries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="resiliency-policies---circuit-breakers">Resiliency Policies - Circuit Breakers&lt;/h4>
&lt;ul>
&lt;li>maxRequets - The maximum number of requets allowed while the breakers is in the half-open state&lt;/li>
&lt;li>interval - The cyclical period that errors are evaluated in, if not specified the evaluation period is continuous&lt;/li>
&lt;li>timeout - the Time in which the circuit breaker will remain open after breaking&lt;/li>
&lt;li>trip - The criteria that errors are evaluated against to trigger state changes&lt;/li>
&lt;/ul>
&lt;h3 id="resiliency-targets">Resiliency Targets&lt;/h3>
&lt;ul>
&lt;li>Can be defined as Applications, Actors, and Components&lt;/li>
&lt;li>A target maps the policies to be used when calling into a system&lt;/li>
&lt;/ul>
&lt;h2 id="개인-생각">개인 생각&lt;/h2>
&lt;ul>
&lt;li>전반적으로 kubecon 이 자기가 만들거나 사용하고 있는 프로그램을 소개할수 밖에 없는 구조 이긴한데, 이건 좀 그냥 그랬다.&lt;/li>
&lt;li>그냥 아.. 있나보다 싶은 생각?&lt;/li>
&lt;li>굳이 공부한 거라고는 Policy 마다 저런 요소들을 고민해야한다 정도?&lt;/li>
&lt;li>실제로 내가 Dapr 을 쓸께아니라면, 그닥 매력적인 강연은 아닌것 같다.&lt;/li>
&lt;/ul></description></item><item><title>Make Cloud Native Chaos Engineering Easier Deep Dive into Chaos Mesh</title><link>https://minuk.dev/wiki/make-cloud-native-chaos-engineering-easier-deep-dive-into-chaos-mesh/</link><pubDate>Sun, 04 Sep 2022 02:42:20 +0900</pubDate><guid>https://minuk.dev/wiki/make-cloud-native-chaos-engineering-easier-deep-dive-into-chaos-mesh/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/bZnI5omUKe4">원본&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="testing-a-distributed-system-is-difficult">Testing a distributed system is difficult&lt;/h2>
&lt;ul>
&lt;li>Distributed systems are more and more complex nowadays:
&lt;ul>
&lt;li>Faults can happen anytime, anywhere, in any ways&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Writing tests and debugging is hard:
&lt;ul>
&lt;li>Deterministic test is very hard and impossible to cover all faults&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>But, No crash, No data loss, No wrong results&lt;/li>
&lt;/ul>
&lt;h2 id="chaos-engieering-to-the-rescue">Chaos Engieering to the rescue&lt;/h2>
&lt;ul>
&lt;li>Chaos engineering is about breaking things in a controlled environment and through well-planned experiments in order to build confidence in your application to withstand turbulent conditions.&lt;/li>
&lt;li>Chaos engineering is NOT about breaking things randomly without a perpose.&lt;/li>
&lt;li>Program Cycle:
&lt;ul>
&lt;li>Improve -&amp;gt; Steady State -&amp;gt; Hypothesis -&amp;gt; Run Experiment -&amp;gt; Verify -&amp;gt; Improve&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="why-chaos-mesh">Why Chaos Mesh&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>On Kubernetes:&lt;/p></description></item><item><title>selinux</title><link>https://minuk.dev/wiki/selinux/</link><pubDate>Sat, 03 Sep 2022 05:23:50 +0900</pubDate><guid>https://minuk.dev/wiki/selinux/</guid><description>&lt;h2 id="공부-계기">공부 계기&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/containerd/nerdctl">nerdctl&lt;/a> 에 최근 기여하게 되면서 issue를 유심히 보게되었는데 &lt;a href="https://github.com/containerd/nerdctl/issues/1336">selinux 관련 주제&lt;/a>로 불타서 대충 개념만 알고 있었는데, 구현레벨에서 이걸 어떻게 하는지를 전혀 모르고 있다는 것을 알게 되었다.&lt;/li>
&lt;/ul>
&lt;h2 id="개념">개념&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Security Enhanced Linux&lt;/p>
&lt;/li>
&lt;li>
&lt;p>상태나 생긴 이유나 이런건 다른 곳에도 많이 나와있으므로 스킵&lt;/p>
&lt;/li>
&lt;li>
&lt;p>구현과 동작 방식:&lt;/p>
&lt;ul>
&lt;li>Kernel space 에 Security Policy 와 AVC(Access Vector Cache) 가 있다.&lt;/li>
&lt;li>이를 통해서 유저레벨에서 뿐만 아니라 추가적으로 관리를 한다.&lt;/li>
&lt;li>동작하는 코드는 아래 순서로 보면 쉽다.:
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/security/selinux/hooks.c#L7081">file_ioctl 을 호출할 때 selinux_file_ioctl 훅을 걸도록 설정된 코드&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/security/selinux/hooks.c#L3684">ioctl_has_perm 을 호출하며 권한을 체크하는 코드&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/security/selinux/hooks.c#L3642">ioctl_has_perm 내부적으로 avc_has_extended_perms, avc_has_perm 등 권한 체크하는 코드&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>결론적으로 말하면 SELinux 를 쓰면 성능이 감소한다는 이야기는 어느정도 사실이다. hook 을 걸어 추가 로직을 동작시키는 방식이니까, 하지만 진짜 그렇게 떨어지나 보기는 조금 어렵다.:
&lt;ul>
&lt;li>&lt;a href="https://www.phoronix.com/news/Fedora-23-SELinux-Impact">phoronix-Fedora 23 SELinux Impact&lt;/a> 자료를 보면 유의미하게 떨어진다고 보기 어려운 결과가 나온다. 저정도 성능감소 때문에 서버에서 SELinux 를 못킨다? c, rust 말고는 어플리케이션 금지하는건가? 그게 훨씬 유의미 하지 않나? 이런 생각이 들거 같다.&lt;/li>
&lt;li>뭐 이것저것 추가적인 권한제어 로직이 있는거니 작업하기 번거롭기는 할 것 같다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>아직 이해하지 못한 부분:&lt;/p></description></item><item><title>go snippet for go</title><link>https://minuk.dev/wiki/http-go/</link><pubDate>Fri, 02 Sep 2022 22:06:05 +0900</pubDate><guid>https://minuk.dev/wiki/http-go/</guid><description>&lt;h2 id="get-post-snippet">Get, Post Snippet&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;url&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// resp, err := http.Post(url, &amp;#34;text/plain&amp;#34;, reqBody) // reqBody []bytes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// resp, err := http.PostForm(url, url.Values{&amp;#34;Foo&amp;#34;:{&amp;#34;Bar&amp;#34;}})
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// resp, err := http.Post(url, &amp;#34;application/json&amp;#34;, reqBody) // reqBody []bytes; reqBody, err := json.Marshal(data)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">raw&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadAll&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">A&lt;/span>, &lt;span style="color:#a6e22e">B&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">raw&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="with-auth">With Auth&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;lt;url&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bearer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Bearer &amp;lt;token&amp;gt;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">NewRequest&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GET&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">req&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Authorization&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">bearer&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// skip
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>curl</title><link>https://minuk.dev/wiki/curl/</link><pubDate>Fri, 02 Sep 2022 21:47:51 +0900</pubDate><guid>https://minuk.dev/wiki/curl/</guid><description>&lt;h2 id="참고자료">참고자료&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.lesstif.com/software-architect/curl-http-get-post-rest-api-14745703.html">https://www.lesstif.com/software-architect/curl-http-get-post-rest-api-14745703.html&lt;/a>&lt;/li>
&lt;li>간단한것만 기술, 더 자세한건 참고자료에서 확인&lt;/li>
&lt;/ul>
&lt;h2 id="파일-다운">파일 다운&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="curl%20-o%20%3cfilename%3e%20%3curl%3e">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -o &amp;lt;filename&amp;gt; &amp;lt;url&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="curl%20-O%20%3curl%3e">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -O &amp;lt;url&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="for-rest-api">For REST API&lt;/h2>
&lt;ul>
&lt;li>&lt;code>-L&lt;/code> : follow redirect, &lt;code>-v&lt;/code> : verbose, &lt;code>-H&lt;/code> : Header&lt;/li>
&lt;/ul>
&lt;h3 id="basic">Basic&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="curl%20-L%20%3curl%3e%20%7c%20jq%20.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -L &amp;lt;url&amp;gt; | jq .&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="with-auth">With Auth&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -v -L -H &lt;span style="color:#e6db74">&amp;#39;Authorization: Bearer &amp;lt;token&amp;gt;&amp;#39;&lt;/span> &amp;lt;url&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="change-method">Change method&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="curl%20-v%20-L%20-X%20POST%20%3curl%3e">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -v -L -X POST &amp;lt;url&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="file">File&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="curl%20-T%20%3cfilename%3e%20%3curl%3e%20#%20method%20%eb%9e%91%20%ec%a1%b0%ed%95%a9%ed%95%b4%ec%84%9c%20%ec%82%ac%ec%9a%a9%ed%95%a0%ea%b2%83">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -T &amp;lt;filename&amp;gt; &amp;lt;url&amp;gt; &lt;span style="color:#75715e"># method 랑 조합해서 사용할것&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="form">Form&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="curl%20-d%20%22foo=bar&amp;amp;x=y%22%20%3curl%3e%20#%20%ec%9e%90%eb%8f%99%ec%9c%bc%eb%a1%9c%20POST%20%eb%a1%9c%20%ec%b2%98%eb%a6%ac">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -d &lt;span style="color:#e6db74">&amp;#34;foo=bar&amp;amp;x=y&amp;#34;&lt;/span> &amp;lt;url&amp;gt; &lt;span style="color:#75715e"># 자동으로 POST 로 처리&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Volcano - Intro &amp; Deep Dive</title><link>https://minuk.dev/wiki/volcano-intro-and-deep-dive/</link><pubDate>Tue, 30 Aug 2022 23:20:47 +0900</pubDate><guid>https://minuk.dev/wiki/volcano-intro-and-deep-dive/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/a76CajRhsX0">원본링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="intro--deep-dive---volcano-a-cloud-native-batch-system">Intro &amp;amp; Deep dive - Volcano: A Cloud Native Batch System&lt;/h1>
&lt;h2 id="cloud-native-for-intelligent-workload">Cloud Native for Intelligent Workload&lt;/h2>
&lt;ul>
&lt;li>More and more organization are leveraging cloud native technology to avoid fragmental ecosystem, isolated stack, low resource utilization&lt;/li>
&lt;/ul>
&lt;h2 id="batch-on-k8s-challenges">Batch on K8s: Challenges&lt;/h2>
&lt;ul>
&lt;li>Job meanagement:
&lt;ul>
&lt;li>Pod level scheduling, no awareness of upper-level applications.&lt;/li>
&lt;li>Lack of fine-grained lifecycle management.&lt;/li>
&lt;li>Lack of task dependencies, Job dependencies.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scheduling:
&lt;ul>
&lt;li>Lack of job based scheduling, e.g. job ordering, job priority, job preemption, job fair-share, job reservation.&lt;/li>
&lt;li>Not enough advanced scheduling algortihms, E.g. CPU topology, task-topology, IO-Awareness, backfill.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-framework support:
&lt;ul>
&lt;li>Insufficient suport for mainstream computing frameowrks like MPI, Tensorflow, Mxnet, Pytorch.&lt;/li>
&lt;li>Complex deployment and O&amp;amp;M because each frameowrk corresponding to a different operator.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Resource planning, sharing, heterogeneous computing:
&lt;ul>
&lt;li>Lack of support to resource sharing mechanism between jobs, queues, namespaces.&lt;/li>
&lt;li>Lack of Deeper support on heterogenous resources.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Performance:
&lt;ul>
&lt;li>Not enough throughput, roundtrip for batch workload.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="volcano-overview">Volcano Overview&lt;/h2>
&lt;ul>
&lt;li>Created at March 2019; Sandbox at April 2020; Incubator at April 2022&lt;/li>
&lt;li>2.3k star, 360+ contributors, latest version v1.5.1&lt;/li>
&lt;li>50+ enterprises adopt Volcano in production environments.&lt;/li>
&lt;/ul>
&lt;h3 id="key-concept">Key Concept&lt;/h3>
&lt;ul>
&lt;li>Job:
&lt;ul>
&lt;li>Multiple Pod Template&lt;/li>
&lt;li>Lifecycle management/Erro handling&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>User/namespace/resource quota:
&lt;ul>
&lt;li>namespace is regarded as user&lt;/li>
&lt;li>resource quota is regarded as the upper limit resource that users in the namespace are able to use at most. Like the QPS in Kube-apiserver.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Resource share:
&lt;ul>
&lt;li>Use Queue for resource sharing&lt;/li>
&lt;li>Share resources between different &amp;ldquo;tenants&amp;rdquo; or resource pools.&lt;/li>
&lt;li>Support different scheduling policies or algorithms for different &amp;ldquo;tenants&amp;rdquo; or resource pools.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="job-mangement">Job mangement&lt;/h3>
&lt;ul>
&lt;li>Volcano Job:
&lt;ul>
&lt;li>Unified Job interface for most of batch job like mpi, pytorch, tensorflow, mxnet, etc.&lt;/li>
&lt;li>Fine-grained Job Lifecycle mangement&lt;/li>
&lt;li>Extendable job plugin:
&lt;ul>
&lt;li>env, svc, ssh, tensorflow&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Coordinate with Scheduler&lt;/li>
&lt;li>Job dependency&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="resource-mangement--queue">Resource mangement- Queue&lt;/h3>
&lt;ul>
&lt;li>Queue is cluster scoped, decoupled with user/namespace&lt;/li>
&lt;li>Queue is used to share resources between &amp;ldquo;multi-tenants&amp;rdquo; or resource pool.&lt;/li>
&lt;li>Configure policy for each queue, e.g. FIFO, fair share, priority, SLA.&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-resource-sharing-between-queues">Dynamic resource sharing between queues&lt;/h3>
&lt;ul>
&lt;li>Queue Guarantee/Capacity&lt;/li>
&lt;li>Share resource between Queues proportionally by weight&lt;/li>
&lt;/ul>
&lt;h4 id="개인-생각">개인 생각&lt;/h4>
&lt;ul>
&lt;li>?? 왜 Queue 들끼리 균등하게 분할할 생각이 아니라 Queue 끼리 자원을 서로 대여하는 구조인거지??&lt;/li>
&lt;li>Queue 끼리 우선순위를 조정하는 Policy 도 있겠지?? 일단 Queue 내부 Policy 는 있는거 같은데 Queue 간 제어하는 로직이 확실치 않네&lt;/li>
&lt;/ul>
&lt;h3 id="fair-share-within-queue">Fair share within Queue&lt;/h3>
&lt;ul>
&lt;li>Sharing resource between jobs&lt;/li>
&lt;li>Sharing resource between namespaces&lt;/li>
&lt;li>Per-Queue policy (FIFO, Priority, Fair share, &amp;hellip;)&lt;/li>
&lt;/ul>
&lt;h4 id="case--hierarchical-queue">Case : hierarchical queue&lt;/h4>
&lt;ul>
&lt;li>How to share resource in a multi-level org more easily?&lt;/li>
&lt;li>Problem: flat queue cannot meet complex resource share and isolation easily for big org.&lt;/li>
&lt;li>Solution:
&lt;ul>
&lt;li>Multiple level queue constructs a tree which is mapped to the org.&lt;/li>
&lt;li>Each level queue has min, max, weight. Use max to isolate resource, use queue weight to balance resource betweeen queues.&lt;/li>
&lt;li>Share resources between queues and reclaim by weight&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Benefit:
&lt;ul>
&lt;li>Flexible resource mangement, easy to map the organization&lt;/li>
&lt;li>fine-grained control resource share and isolation for a big multi-tenants organization&lt;/li>
&lt;li>The queue min capacity ensures guaranteed resource, the proportion by weight offers flexible sharing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="scenario-elastic-scheduling">Scenario: Elastic scheduling&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>What is elastic job&lt;/p></description></item><item><title>Intro to Kubernetes, GitOps, and Observability Hands-On Tutorial</title><link>https://minuk.dev/wiki/intro-to-kubernetes-gitops-and-observability-hands-on-tutorial/</link><pubDate>Thu, 25 Aug 2022 00:06:14 +0900</pubDate><guid>https://minuk.dev/wiki/intro-to-kubernetes-gitops-and-observability-hands-on-tutorial/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=WKvogzTg2iM">원본&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>기본적으로 따라서 하는 Hands On Tutorial 강의이다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-kubernetes">Intro to Kubernetes&lt;/h2>
&lt;ul>
&lt;li>Oss CNCF graduated project for container orchestration&lt;/li>
&lt;li>Declarative configuration to manage containerized workloads and services&lt;/li>
&lt;li>Cloud Native, provides:
&lt;ul>
&lt;li>Automation and observability&lt;/li>
&lt;li>Self-healing and horizontal scaling&lt;/li>
&lt;li>Service discovery and load balancing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scalable, runs on-premises, in public cloud, and hybrid environments&lt;/li>
&lt;/ul>
&lt;h3 id="kubernetes-cluster-overview">Kubernetes Cluster Overview&lt;/h3>
&lt;ul>
&lt;li>API server&lt;/li>
&lt;li>Cloud controller manager(optional)&lt;/li>
&lt;li>Controller manager&lt;/li>
&lt;li>etcd(persistence store)&lt;/li>
&lt;li>kubelet&lt;/li>
&lt;li>kube-proxy&lt;/li>
&lt;li>Scheduler&lt;/li>
&lt;li>Control plane&lt;/li>
&lt;li>Node&lt;/li>
&lt;/ul>
&lt;h3 id="kubernetes-resources-review">Kubernetes Resources Review&lt;/h3>
&lt;ul>
&lt;li>Kubernetes REST API and declarative resources manage operations and communications between components&lt;/li>
&lt;li>Kubernetes API Groups (resources grouped based on their primary functions):
&lt;ul>
&lt;li>RBAC, scheduling, admission registration, autoscaling, events, apps, core&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Core API group objects (core/v1 + apps/v1 API Groups):
&lt;ul>
&lt;li>Namespaces, Deployments, Services, Secrets&lt;/li>
&lt;li>CRUD operations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>API extensions via Custom Resource Definitions + Controllers&lt;/li>
&lt;li>Declaraitve (YAML)&lt;/li>
&lt;/ul>
&lt;h3 id="kubernetes-resources-at-a-galance">Kubernetes Resources At A Galance&lt;/h3>
&lt;ul>
&lt;li>Container : Runs an image (immutable copy of your application code and all code dependencies in an isolated environment&lt;/li>
&lt;li>Pod : A set of containers, co-scheduled on one machien. Mortal. Has pod IP. Has labels.&lt;/li>
&lt;li>Deployment : Ensures a certain number of replicas of a pod are running across the cluster&lt;/li>
&lt;li>Service : Gets virtual IP, mapped to endpoints via labels, Named in DNS&lt;/li>
&lt;li>Namespace : Resource names are scoped to a Namespace. Logical boundary&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-gitops">Intro to GitOps&lt;/h2>
&lt;h3 id="gitops-principles">GitOps Principles&lt;/h3>
&lt;ul>
&lt;li>Declarative: A system managed by GitOPs must have its desired state expressed declaratively&lt;/li>
&lt;li>Versioned and Immutable: Desired state is stored in a way that enforces immutatibility, versioning and retains a complete version history.&lt;/li>
&lt;li>Pulled Automatically: Software agents automatically pull the desired state declarations from the source&lt;/li>
&lt;li>Continuously Reconciled: Software agents continuously observe actual system state and attempt to apply the desired state.&lt;/li>
&lt;/ul>
&lt;h3 id="gitops-a-cloud-native-operating-model">GitOps: A Cloud Native Operating Model&lt;/h3>
&lt;ul>
&lt;li>Unifying Deployment, Monitoring and Management:
&lt;ul>
&lt;li>Git as the single source of truth of a system&amp;rsquo;s desired state&lt;/li>
&lt;li>ALL intended operations are committed by pull request&lt;/li>
&lt;li>ALL diffs between intended and observed state with automatic convergence&lt;/li>
&lt;li>ALL changes are observable, verifiable, and auditable.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="intro-to-gitops-1">Intro to GitOps&lt;/h3>
&lt;ul>
&lt;li>GitOps is the practice of using Git to store declaratively defined desired state and Continuous Delivery agents (e.g. Flux) to automate the reconcilation of current state to desired state. With GitOps, CI and CD are effectively decoupled.&lt;/li>
&lt;/ul>
&lt;h3 id="intro-to-flux">Intro to Flux&lt;/h3>
&lt;ul>
&lt;li>OSS CNCF Project&lt;/li>
&lt;li>Created at Weaveworks&lt;/li>
&lt;li>Runtime composed of Kubernetes Controllers + CRDs&lt;/li>
&lt;li>Flux keeps kubernetes clusters in sync with sources of configuration and automatically + continuously reconciles running state to desired state.&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-observability">Intro to Observability&lt;/h2>
&lt;ul>
&lt;li>Monitoring vs. Observability:
&lt;ul>
&lt;li>Monitoring: Metrics, alerts, actionable, dashboards, canned quieries&lt;/li>
&lt;li>Observabiilty: Inspect, observe, explore, trace, custom queries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="observability-instrumentation">Observability Instrumentation&lt;/h3>
&lt;ul>
&lt;li>Metrics:
&lt;ul>
&lt;li>Prometheus:
&lt;ul>
&lt;li>OSS CNCF monitoring and alerting toolkit&lt;/li>
&lt;li>Time series database for metrics collection created by SoundCloud&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DataVisualization:
&lt;ul>
&lt;li>Grafana:
&lt;ul>
&lt;li>OSS metrics visualization dashboards&lt;/li>
&lt;li>Created by Grafana Labs, CNCF Platinum Partner&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Logging:
&lt;ul>
&lt;li>Fluent Bit:
&lt;ul>
&lt;li>OSS CNCF project for lightweight logs and metrics processing + forwarding&lt;/li>
&lt;li>Sub-project under Fluentd umbrella created by Treasure Data&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="개인생각">개인생각&lt;/h2>
&lt;ul>
&lt;li>강연이 좀 혼란했다. 개념적인걸 설명하고, Flux 를 활용한 gitops 실습이 목표였던 것 같은데 codespace가 잘 동작하지 않거나, port binding 이 잘 동작하지 않아서 영상 중 상당 시간이 지연되었다.&lt;/li>
&lt;li>실습 자료가 나쁜편은 아닌데, 어짜피 대부분은 경험해본적이 있어서 굳이 실습을 하진 않았다.&lt;/li>
&lt;li>영상만을 보고 실습을 하기에는 조금 무릭 ㅏ있다. 기본적으로 로그인도 안되고, 실습 환경도 직접 구축해야하니까&amp;hellip;&lt;/li>
&lt;li>얻어간건 위에 요약된 정보들과 k9s 정도 이다.&lt;/li>
&lt;/ul></description></item><item><title>kubespray</title><link>https://minuk.dev/wiki/kubespray/</link><pubDate>Wed, 24 Aug 2022 17:20:22 +0900</pubDate><guid>https://minuk.dev/wiki/kubespray/</guid><description>&lt;h3 id="문서-목적">문서 목적&lt;/h3>
&lt;ul>
&lt;li>kubespray 를 하면서 삽질한 내용 기록&lt;/li>
&lt;/ul>
&lt;h3 id="참고자료">참고자료&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.whatwant.com/entry/Kubespray">kubespray 이용하여 kubenetes 설치하기&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/kubespray">공식사이트&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="내가-한-일">내가 한 일&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>swap off:&lt;/p>
&lt;ul>
&lt;li>각 노드에서 아래 명령어를 실행해준다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="sudo%20swapoff%20-a">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo swapoff -a&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>kubespray 를 clone 해준다.:&lt;/p>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/kubernetes-sigs/kubespray.git&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>controlplane 이 될 곳에서 ansible 설정을 해준다.:&lt;/p>
&lt;ul>
&lt;li>그냥 linux 이기만 하면 된다. controlplane이 아니여도 된다.&lt;/li>
&lt;li>mac 에서 실행하려고 하니 공식문서에 나와있는 ansible version 이 잘 설치가 안되서, 그냥 controlplane 에서 작업했다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="VENVDIR=kubespray-venv%0aKUBESPRAYDIR=kubespray%0aANSIBLE_VERSION=2.12%0avirtualenv%20%20--python=$%28which%20python3%29%20$VENVDIR%0asource%20$VENVDIR/bin/activate%0acd%20$KUBESPRAYDIR%0apip%20install%20-U%20-r%20requirements-$ANSIBLE_VERSION.txt%0atest%20-f%20requirements-$ANSIBLE_VERSION.yml%20&amp;amp;&amp;amp;%20%5c%0a%20%20ansible-galaxy%20role%20install%20-r%20requirements-$ANSIBLE_VERSION.yml%20&amp;amp;&amp;amp;%20%5c%0a%20%20ansible-galaxy%20collection%20-r%20requirements-$ANSIBLE_VERSION.yml">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>VENVDIR&lt;span style="color:#f92672">=&lt;/span>kubespray-venv
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>KUBESPRAYDIR&lt;span style="color:#f92672">=&lt;/span>kubespray
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ANSIBLE_VERSION&lt;span style="color:#f92672">=&lt;/span>2.12
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>virtualenv --python&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>which python3&lt;span style="color:#66d9ef">)&lt;/span> $VENVDIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>source $VENVDIR/bin/activate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd $KUBESPRAYDIR
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pip install -U -r requirements-$ANSIBLE_VERSION.txt
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test -f requirements-$ANSIBLE_VERSION.yml &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ansible-galaxy role install -r requirements-$ANSIBLE_VERSION.yml &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ansible-galaxy collection -r requirements-$ANSIBLE_VERSION.yml&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;/li>
&lt;/ul></description></item><item><title>Spark on Kubernetes - The Elastic Story</title><link>https://minuk.dev/wiki/spark-on-kubernetes-the-elastic-story/</link><pubDate>Tue, 23 Aug 2022 02:46:35 +0900</pubDate><guid>https://minuk.dev/wiki/spark-on-kubernetes-the-elastic-story/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/n7WeoTJq-40">원본링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="benefits-of-cloud">Benefits of Cloud&lt;/h2>
&lt;ul>
&lt;li>Agile : Resources are on-dmand, pay as you go&lt;/li>
&lt;li>Elastic &amp;amp; Scalable : Almost infinite scale of compute and storage&lt;/li>
&lt;li>Strong Resource Isolation : Container-native on K8S&lt;/li>
&lt;li>Privacy-First : Leverage cloud security techniques to enforce security&lt;/li>
&lt;li>Operation Friendly : Our developers can focus on building and improving services to achieve higher ROI&lt;/li>
&lt;/ul>
&lt;h2 id="design-principles">Design Principles&lt;/h2>
&lt;ul>
&lt;li>Leverage Cloud Infra&lt;/li>
&lt;li>Full Containerizng - Elastic, Agile, Lightweight&lt;/li>
&lt;li>Decouple Compute/Storage, Scale Independently&lt;/li>
&lt;li>Developer-Friendly, API Centric&lt;/li>
&lt;li>Security &amp;amp; Privacy as First Class Citizen&lt;/li>
&lt;li>Use Apple Internal Spark distribution&lt;/li>
&lt;/ul>
&lt;h2 id="architecture-of-cloud-native-spark-service">Architecture of Cloud-Native Spark Service&lt;/h2>
&lt;ul>
&lt;li>원본 링크 PPT 참고&lt;/li>
&lt;li>Spark K8s Operator 가 Resource Queues 를 가르키고 있고 Resource Queue 는 Node 를 관리한다.&lt;/li>
&lt;li>이를 Skate(Spark service gateway) 로 호출하면서 관리하며, 이는 API, CLI, Airflow 등 다양한 Batch Processing 으로 처리한다.&lt;/li>
&lt;li>또한 Jupyter Notebook 을 Interactive Spark Gateway랑 연결해서 달아둘수도 있다.&lt;/li>
&lt;li>이러한 환경에서 Observability Infra, Security &amp;amp; Privacy Infra 가 당연하게도 깔려있어야한다.&lt;/li>
&lt;/ul>
&lt;h2 id="cost-saving-and-elasticity-needs">Cost saving and Elasticity Needs&lt;/h2>
&lt;ul>
&lt;li>Varing workload pattern: fluctuating within a day and/or a week&lt;/li>
&lt;li>Different use cases: daily/weekly scheduled jobs, ad hoc jobs, scheduled + adhoc, backfill&lt;/li>
&lt;li>Fixed amount of resources must account for max usage, which causes resource waste&lt;/li>
&lt;/ul>
&lt;h2 id="design-of-reactive-autoscaling">Design of Reactive AUtoscaling&lt;/h2>
&lt;h3 id="reactive-autoscaling-cluster-nodegroups-layout">Reactive AutoScaling Cluster NodeGroups Layout&lt;/h3>
&lt;ul>
&lt;li>자세한건 원본 링크 PPT 참고&lt;/li>
&lt;li>Physical isolation : Minimize potential impact&lt;/li>
&lt;li>Minimum capacity: Guaranteed at any time&lt;/li>
&lt;li>maximum capacity: Jobs will be queued if executed&lt;/li>
&lt;li>Multi-tenant Autoscaling K8S Cluster
&lt;ul>
&lt;li>spark-system(node group) : static size; shared by all queues&lt;/li>
&lt;li>spark-drive(node group): scale-out; shared by all queues&lt;/li>
&lt;li>spark-executor(node group): scale in/out&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="reactive-autoscaling-workflow">Reactive AutoScaling Workflow&lt;/h3>
&lt;ul>
&lt;li>자세한건 원본 링크 참조&lt;/li>
&lt;li>CLI/SDK/Airflow Operator of Skate clients - 1. Submitting Spark job to Spark Platform&lt;/li>
&lt;li>Skate(Spark service gateway) - 2. Creating SparkAPP CRD on cluster&lt;/li>
&lt;li>Spark K8S Operator - 3. Creating driver and executor pods in YK resources queue&lt;/li>
&lt;li>YuniKorn - 4. Creating Spark Driver pod in driver node group&lt;/li>
&lt;li>YuniKorn - 5. Creating Spark executor pods in executor node group&lt;/li>
&lt;li>6.1 Sned pending pods signal in each node groups for scale-out&lt;/li>
&lt;li>6.2 Send idel node in each node groups for scale in&lt;/li>
&lt;li>
&lt;ol start="7">
&lt;li>Send scale in/out request to cloud provider per node group&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;h3 id="reactive-autoscaling-scale-inout-controls">Reactive AutoScaling Scale in/out Controls&lt;/h3>
&lt;ul>
&lt;li>Scale in Controls:
&lt;ul>
&lt;li>Only when no running executor pods on the node&lt;/li>
&lt;li>Enabled Apache YuniKorn bin-packing in resource scheduling&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scale out Controls:
&lt;ul>
&lt;li>Spark-driver node group scale out only&lt;/li>
&lt;li>Speed up executor pods allocation size config of Spark&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="production-status">Production Status&lt;/h2>
&lt;ul>
&lt;li>In production for 3+ months&lt;/li>
&lt;li>Cost saving report: Cost saving percentage per queue is located in 20% - 70%&lt;/li>
&lt;/ul>
&lt;h3 id="migration-findings-1">Migration findings 1&lt;/h3>
&lt;ul>
&lt;li>Scale in/out events are stable:
&lt;ul>
&lt;li>Tens of thousands of job per week running successfully&lt;/li>
&lt;li>All scale-in events works as expected&lt;/li>
&lt;li>Scale out latency is consistent(&amp;lt;= 5 mins from 2 to 200)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="migration-findings-2">Migration findings 2&lt;/h3>
&lt;ul>
&lt;li>Compared to massive over-provisioning approach before, runtime of workloads with autoscaling enbaled may increase:
&lt;ul>
&lt;li>Most negligible, a couple jobs increased ~20%&lt;/li>
&lt;li>Users need to take this into consideration and optimize jobs if there&amp;rsquo;s strict data delivery time SLO&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="challenges-solutions-learnings">Challenges, Solutions, Learnings&lt;/h3>
&lt;ul>
&lt;li>Physical Isolation and min/max capacity setting&lt;/li>
&lt;li>How to guarantee no impact to existing Spark jobs when scale-in&lt;/li>
&lt;li>How to speed up scale-out latency and always allow Spark driver getting start&lt;/li>
&lt;li>Monitoring autoscaling performance&lt;/li>
&lt;/ul>
&lt;h3 id="top-community-feature-requests">Top Community Feature Requests&lt;/h3>
&lt;ul>
&lt;li>Mixed instance type support&lt;/li>
&lt;li>Dynamic Allocation support&lt;/li>
&lt;li>Spot instance support with Remote Shuffle Service&lt;/li>
&lt;li>Predictive Autoscaling leveraging the platform&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="개인-생각">개인 생각&lt;/h3>
&lt;ul>
&lt;li>Apple 에서 k8s에 spark 를 돌리는 것에 대해서 나와있다.&lt;/li>
&lt;li>Apache YuniKorn 에 대해서 처음 알게 되었다. 좀더 정확히는 Spark 가 Kbuernetes 위에서 동작하는 구조 자체를 처음 공부했다.&lt;/li>
&lt;li>단순히 Spark Pod 이 많이 띄워져 있다. 이런 식으로 끝나는 것이 아니라 Layer 를 나눠서 설명해준 점이 좋았다.&lt;/li>
&lt;li>뭐 당연하게도 CRD 로 관리하고 있었다.&lt;/li>
&lt;li>대충 요약하자면, Spark 를 그냥 동작시키게 되면 skew 현상이 너무 심하고 이는 리소스가 남는 상황에서도 이를 잘 활용하지 못하는 것을 의미한다.&lt;/li>
&lt;li>따라서 중간에 Queue Layer를 두고 API/CLI/Airflow/Jupyter Notebook 등등은 Skate 에 요청한다.:
&lt;ul>
&lt;li>skate 는 처음 나오는 단어이고 특별한 프레임워크를 의미하는게 아니라 Spark service gateway를 줄여서 저렇게 부르는것 같다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>여기서 YuniKorn Resource Queue 로 작업을 분배하게 된다. 이때 설정에 따라서 여러 cluster를 사용할 수 있는 것으로 보인다.&lt;/li>
&lt;li>특히나 인상 깊은건 Scale in/out Control에 따른 Memory, CPU Utilization Graph 인데 봐보면 너무나도 이상적으로 나왔다. 특정 노드가 엄청나게 뛰는게 아니라 전체적으로 스케줄링이 잘되는 것을 볼 수 있다. 물론 이 그래프만 가지고 판단하기에는 대조군도 없고, 그래프가 너무 컬러풀해서 잘 식별되지는 않지만 충분히 유의미한 그래프이며 이 구조가 어느정도의 안정성을 보임을 확인할수 있다.&lt;/li>
&lt;/ul></description></item><item><title>DevOps와 SE를 위한 리눅스 커널 이야기</title><link>https://minuk.dev/wiki/devops%EC%99%80-se%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BB%A4%EB%84%90-%EC%9D%B4%EC%95%BC%EA%B8%B0/</link><pubDate>Mon, 22 Aug 2022 13:49:39 +0900</pubDate><guid>https://minuk.dev/wiki/devops%EC%99%80-se%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BB%A4%EB%84%90-%EC%9D%B4%EC%95%BC%EA%B8%B0/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>이 책은 실습과 개념, Tip 이 동시에 존재하는 책이다.&lt;/li>
&lt;li>개념, 실습에 대한 내용은 책을 반드시 참고하자. 실험이 알차다.&lt;/li>
&lt;li>여기선 Tip 에 해당하는 각 챕터의 요약부분만을 정리해둔다.&lt;/li>
&lt;/ul>
&lt;h2 id="1-시스템-구성-정보-확인하기">1. 시스템 구성 정보 확인하기&lt;/h2>
&lt;ul>
&lt;li>demidecode 명령을 통해서 CPU, 메모리, BIOS 등의 정보를 확인할 수 있다.&lt;/li>
&lt;li>CPU 정보는 &lt;code>/proc/cpuinfo&lt;/code> 파일을 통해서도 확인할 수 있다.&lt;/li>
&lt;li>free 명령을 통해서 시스템에 설치된 메모리의 전체 크기를 알 수 있다.&lt;/li>
&lt;li>시스템에 마운트된 블록 디바이스의 정보는 df 명령을 통해 확인할 수 있다.&lt;/li>
&lt;li>네트워크 카드 정보는 ethtool 명령을 통해서 확인할 수 있다.&lt;/li>
&lt;li>ethtool 명령 중 -g 옵션으로 네트워크 카드에 설정된 Ring Buffer의 최대 크기와 현재 크기를 확인할 수 있다.&lt;/li>
&lt;li>ethtool 명령 중 -k 옵션으로 네트워크 카드의 부수적인 기능들을 확인할 수 있다.&lt;/li>
&lt;li>ethtool 명령 중 -i 옵션으로 네트워크 카드가 사용 중인 커널 드라이버의 정보를 확인할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="2-top을-통해-살펴보는-프로세스-정보들">2. top을 통해 살펴보는 프로세스 정보들&lt;/h2>
&lt;ul>
&lt;li>top 명령으로 현재 시스템의 CPU, Memory, swap의 사용량 및 각 프로세스들의 상태와 메모리 점유 상태를 확인할 수 있다.&lt;/li>
&lt;li>top 명령의 결과 중 VIRT는 프로세스에게 할당된 가상 메모리 전체의 크기를 가리킨다. RES는 그 중에서도 실제로 메모리에 올려서 사용하고 있는 물리 메모리의 크기, 그리고 SHR은 다른 프로세스와 공유하고 있는 메모리의 크기를 의미한다.&lt;/li>
&lt;li>커널은 프로세스가 메모리를 요청할 때 그에 맞는 크기를 할당해주지만 해당 영역을 물리 메모리에 바로 할당하지는 않는다. Memory Commit 참고- &lt;code>vm.overcommit_memory&lt;/code> 는 커널의 Memory Commit 동작 방식을 변경할 수 있게 해주는 커널 파라미터이다.&lt;/li>
&lt;li>top으로 볼 수 있는 프로세스의 상태 중 D는 I/O 대기중인 프로세스, R은 실제 실행 중인 프로세스, S는 sleep 상태의 프로세스를 의미한다. T는 tracing 중인 프로세스, Z는 좀비 상태의 프로세스를 의미한다.&lt;/li>
&lt;li>프로세스에는 우선순위가 있어 우선순위값이 더 작을 수록 빨리 실행된다. 우선순위는 nice 명령을 통해서 조절될 수 있다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>개인 생각: nice를 조절해본 경험이 없는데, 조절할일이 많나?&lt;/li>
&lt;/ul>
&lt;h2 id="3-load-average와-시스템-부하">3. Load Average와 시스템 부하&lt;/h2>
&lt;ul>
&lt;li>Load Average는 실행 중 혹은 실행 대기 중이거나 I/O 작업 등을 위해 대기 큐에 있는 프로세스들의 수를 기반으로 만들어진 값이다.&lt;/li>
&lt;li>Load Average 자체의 절대적인 높음과 낮음은 없다.&lt;/li>
&lt;li>커널에도 버그가 있을 수 있으므로 Load Average 값을 절대적으로 신뢰해서는 안된다.&lt;/li>
&lt;li>vmstat 툴도 시스템 부하를 측정하는데 사용할 수 있다.&lt;/li>
&lt;li>&lt;code>/proc/sched_debug&lt;/code>는 nr_running과 runnable tasks 항목에서 각 CPU에 할당된 프로세스 수와 프로세스의 PID 등 정보를 확인할수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="4-free-명령이-숨기고-있는-것들">4. free 명령이 숨기고 있는 것들&lt;/h2>
&lt;ul>
&lt;li>free 명령으로 볼 수 있는 buffers 는 파일 시스템의 메타 데이터 등을 저장하고 있는 블록 디바이스의 블록을 위한 캐시이다.&lt;/li>
&lt;li>free 명령으로 볼 수 있는 cached는 I/O 작업의 효율성을 위해 한번 읽은 파일의 내용을 저장하는 데 사용하는 캐시이다.&lt;/li>
&lt;li>buffers와 cached는 미사용중인 메모리 영역을 시스템의 효율성을 위해서 커널이 사용하고 있는 것이며, 프로세스가 요청하면 이 영역을 해제하여 프로세스에게 전달해 줄수 있다.&lt;/li>
&lt;li>&lt;code>/proc/meminfo&lt;/code> 에서 보이는 anon 영역은 프로세스에서 사용하는 영역, file 영역은 I/O 를 위한 캐시이다.&lt;/li>
&lt;li>slab 영역은 커널이 사용하는 캐싱 영역을 의미, dentry cache, inode cache 등 다양한 캐싱 용도로 사용된다.&lt;/li>
&lt;/ul>
&lt;h2 id="5-swap-메모리-증설의-포인트">5. swap, 메모리 증설의 포인트&lt;/h2>
&lt;ul>
&lt;li>버디시스템&lt;/li>
&lt;li>swap 을 사용할 경우 성능하락이 생길수 있다.&lt;/li>
&lt;li>swap 영역을 사용할 때에는 어떤 프로세스에서 swap 영역을 사용하는지 정확하게 알 필요가 있으며 smem 이라는 툴을 이용해 빠르게 확인할 수 있다.&lt;/li>
&lt;li>&lt;code>vm.swappiness&lt;/code> 파라미터를 통해서 메모리 재할당시, swap을 사용하게 할지 페이지 캐시를 해제하게 할지 비율을 조절할 수 있다.&lt;/li>
&lt;li>&lt;code>vm.vfs_cache_pressure&lt;/code> 파라메터를 통해 메모리 재할당시, 페이지 캐시를 더 많이 해제할지 vfs 관련 cache를 더 많이 해제할지 비율을 조절할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="6-numa-메모리-관리의-새로운-세계">6. NUMA, 메모리 관리의 새로운 세계&lt;/h2>
&lt;h3 id="개인-의견">개인 의견&lt;/h3>
&lt;ul>
&lt;li>NUMA는 예전에 논문 볼때 봤던건데, 최근 본 kubecon에서도 관련 자료가 있고, 이 책에도 있어 좀 놀랐다. 이게 이렇게나 기본 상식인지 몰랐다.&lt;/li>
&lt;li>내용 자체는 좋으나 난이도가 있다고 생각해서, 모두 적지는 않는다.&lt;/li>
&lt;/ul>
&lt;h3 id="요약">요약&lt;/h3>
&lt;ul>
&lt;li>NUMA : Non-Uniform Memory Access, 하드웨어 설계에 따른 cpu에 따라 특정 메모리에 접근하는 속도가 각기 다르다.&lt;/li>
&lt;li>numastat, numactl 명령어를 사용해서 NUMA 의 상태, 제어를 할 수 있다.&lt;/li>
&lt;li>&lt;code>/proc/&amp;lt;pid&amp;gt;/numa_maps&lt;/code> 에 process 별 numa 정보가 확인 가능하다.&lt;/li>
&lt;li>numad 는 데몬으로 상주하면서 프로세스의 numa 상태를 최적화한다. 하지만 항상 최적화가 좋은건 아니다.&lt;/li>
&lt;li>&lt;code>vm.zone_reclaim_mode&lt;/code> 는 zone 에서 최대한 재할당해서 메모리를 확보하려고 노력할지, 최대한 다른 zone 을 통해서 메모리를 확보할지를 결정하는 변수이다.&lt;/li>
&lt;li>numa 정책:
&lt;ul>
&lt;li>bind : 특정 노드에서 메모리를 할당받도록 강제한다.&lt;/li>
&lt;li>preferred : 선호하는 노드를 정하되, 부족하면 다른 곳에서 받는다.&lt;/li>
&lt;li>interleave : 최대한 여러 노드에서 균등하게 받도록 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NUMA 아키텍쳐와 관련된 workload는 요구되는 memory size와 process의 thread 방식에 가장 큰 영향을 받는다.&lt;/li>
&lt;/ul>
&lt;h2 id="7-time_wait-소켓이-서비스에-미치는-영향">7. TIME_WAIT 소켓이 서비스에 미치는 영향&lt;/h2>
&lt;h3 id="개인-의견-1">개인 의견&lt;/h3>
&lt;ul>
&lt;li>워낙에 유명한 문제이기도 하고, 운영을 배울때 거의 단골로 나오는 내용이라 정리한다는 느낌으로만 봤다.&lt;/li>
&lt;/ul>
&lt;h3 id="요약-1">요약&lt;/h3>
&lt;ul>
&lt;li>TIME_WAIT 소켓은 먼저 연결을 끊는 쪽에서 발생한다.&lt;/li>
&lt;li>클라이언트 입장에서의 TIME_WAIT 소켓은 tw_reuse 파라미터를 통해 재사용할 수 있기 때문에 로컬 포트 고갈 문제는 발생하지 않는다.&lt;/li>
&lt;li>불필요한 TCP 3 way handshake가 일어날 수 있기 때문에 가급적, Connection Pool 방식을 적용해 TIME_WAIT 소켓을 줄이도록 한다.&lt;/li>
&lt;li>서버 입장에서는 TIME_WAIT 소켓은 tw_recycle 파라미터를 통해 빠르게 회수 할 수 있지만, 권장되지는 않는다. 근본적인 문제(connection 이 지나치게 낭비된다거나 등)를 찾아서 해결해야한다.&lt;/li>
&lt;li>서버 입장에서 keepalive 기능을 켬으로써 불필요한 TCP 3way handshake 를 줄일 수도 있고 TIME_WAIT 소켓도 줄일수 있다. 서비스의 응답 속도 향상이 가능하지만, keepalive 가 가져올수 있는 문제점이 있기에 사용 시 테스트를 반드시 해봐야한다. 자세한건 keepalive 관련 챕터 및 LB 관련 내용 참고&lt;/li>
&lt;li>TIME_WAIT 소켓은 정상적인 TCP 연결 해제를 위해 반드시 필요하다.&lt;/li>
&lt;/ul>
&lt;h2 id="8-tcp-keepalive-를-이용한-세션-유지">8. TCP Keepalive 를 이용한 세션 유지&lt;/h2>
&lt;ul>
&lt;li>TCP Keepalive 는 커널레벨에서 종단 간의 세션을 유지시켜주는 기능을 한다.&lt;/li>
&lt;li>net.ipv4.tcp_keepalive_time 는 두 종단 간의 연결이 유지되어 있는지를 keepalive 패킷을 보내는 주기를 설정한다.&lt;/li>
&lt;li>net.ipv4.tcp_keepalive_probes 는 keepalive 패킷에 대한 응답을 받지 못했을 때 추가로 보내는 패킷의 개수를 지정한다.&lt;/li>
&lt;li>net.ipv4.tcp_keepalive_intvl은 keepalive 패킷에 대한 응답을 받지 못해서 재전송 패킷을 보낼 때 필요한 주기를 설정한다.&lt;/li>
&lt;li>tcp keepalive 설정으로 좀비 커넥션을 관리한다.&lt;/li>
&lt;li>HTTP keepalive가 설정되어 있다면 tcp keepalive 설정 값과 다르다고 해도 의도한 대로 동작한다. 혼동하지 말자&lt;/li>
&lt;li>LB 환경에서는 TCP Keepalive 가 설정되어 있지 않다면 LB Idle time 값을 참조해 설정해야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="9-tcp-재전송과-타임아웃">9. TCP 재전송과 타임아웃&lt;/h2>
&lt;ul>
&lt;li>RTO(Retransmission Timeout)&lt;/li>
&lt;li>TCP 재전송은 RTO를 기준으로 발생한다.&lt;/li>
&lt;li>RTO 는 RTT를 기반으로 동적으로 생성된다.&lt;/li>
&lt;li>관련 파라메터:
&lt;ul>
&lt;li>net.ipv4.tcp_syn_retries&lt;/li>
&lt;li>net.ipv4.tcp_synack_retries&lt;/li>
&lt;li>net.ipv4.tcp_orphan_retries&lt;/li>
&lt;li>net.ipv4.tcp_retries1, net.ipv4.tcp_retries2&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>최소한 한번의 재전송은 견딜 수 있도록 connection timeout 은 3s, read tiemout 은 300ms 이상으로 설정하는 것이 좋다.&lt;/li>
&lt;/ul>
&lt;h2 id="10-dirty-page가-io에-끼치는-영향">10. dirty page가 I/O에 끼치는 영향&lt;/h2>
&lt;ul>
&lt;li>관련 파라메터:
&lt;ul>
&lt;li>vm.dirty_ratio&lt;/li>
&lt;li>vm.dirty_background_ratio&lt;/li>
&lt;li>vm.dirty_background_bytes&lt;/li>
&lt;li>vm.dirty_writeback_centisecs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>diry page를 너무 빨리 동기화시키면 flush 커널 스레드가 너무 자주 깨어나게 되며, dirty page를 너무 늦게 동기화시키면 동기화해야할 dirty page가 너무 많아서 vm.dirty_ratio 에 도달할 가능성이 커지게 된다. 워크로드와 시스템 구성에 맞게 적절히 설정해주어야한다.&lt;/li>
&lt;/ul>
&lt;h2 id="11-io-작업이-지나가는-관문-io-스케줄러">11. I/O 작업이 지나가는 관문, I/O 스케줄러&lt;/h2>
&lt;ul>
&lt;li>&lt;code>/sys/block/&amp;lt;block device&amp;gt;/queue/scheduler&lt;/code> 에서 현재 사용하는 스케줄러, 사용 가능한 스케줄러 정보를 보고, 수정할 수 있다.&lt;/li>
&lt;li>cfq, deadline, noop I/O scheduler&lt;/li>
&lt;li>iotop 을 사용해서 I/O 프로세스를 확인 할 수 있다.&lt;/li>
&lt;li>perf-tools 중에 iosnoop 은 I/O 요청들의 섹터 주소를 볼 수 있기에 순차 접근이 많은지 임의 접근이 많은지에 대한 I//O 워크로드 패턴을 살펴볼 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="12-어플리케이션-성능-측정과-튜닝">12. 어플리케이션 성능 측정과 튜닝&lt;/h2>
&lt;ul>
&lt;li>워커 수를 최소한 CPU 코어 수와 같은 수로 설정해서 CPU 리소스를 최대로 사용할수 있도록 구성한다.&lt;/li>
&lt;li>TIME_WAIT 소켓이 생긴다면 연결을 유지한 상태로 사용해 성능을 향상시킬수 있다.&lt;/li>
&lt;li>다른 서비스들과 연동할 때 keepalive 옵션과 커넥션 풀 방식을 사용해 성능을 증가 시킬수 있다.&lt;/li>
&lt;li>시스템 리소스가 부족함이 없을때 응답 속도가 느려질 경우 워커 설정 및 소프트웨어적 설정에 문제가 있는지 확인해야한다.&lt;/li>
&lt;/ul>
&lt;h2 id="개인-정리">개인 정리&lt;/h2>
&lt;ul>
&lt;li>개인적으로 알고 있었던 설정들도 있고, 모르고 있던 설정들도 있는데 전반적으로 한곳에 이런걸 모아둬서 정리하는 보람이 있었다.&lt;/li>
&lt;li>사실 지식으로만 알고 있던 부분들을 실습을 섞어서 수치로 볼수 있게 구성되어 있어 책 자체 퀄리티가 좋다고 생각한다.&lt;/li>
&lt;li>몇몇 커널 파라메터는 너무 어렵다. 수치를 보면서도 바로바로 해석이 안된다.&lt;/li>
&lt;/ul></description></item><item><title>Running Containerd and k3s on MacOS</title><link>https://minuk.dev/wiki/running-containerd-and-k3s-on-macos/</link><pubDate>Fri, 19 Aug 2022 01:01:46 +0900</pubDate><guid>https://minuk.dev/wiki/running-containerd-and-k3s-on-macos/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/g5GCsbjkzRM">원본&lt;/a>, Kubecon EU 2022&lt;/li>
&lt;li>&lt;a href="https://static.sched.com/hosted_files/kccnceu2022/5f/lima.pdf">Slide&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://events.linuxfoundation.org/archive/2022/kubecon-cloudnativecon-europe/program/schedule/">Slide 출처&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="why-run-containers-on-macos">Why run containers on macOS?&lt;/h2>
&lt;ul>
&lt;li>2022 is The Year of the Linux Desktop&lt;/li>
&lt;li>But ordinary developers still need macOS (or Windows)&lt;/li>
&lt;li>Almost solely for the dev &amp;amp; test environment&lt;/li>
&lt;li>Not the best fit for running a production server&lt;/li>
&lt;/ul>
&lt;h2 id="existing-methods">Existing methods&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Docker Desktop for Mac has been the popular solution&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Supports automatic host filesystem sharing&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Supports automatic port forwarding&lt;/p>
&lt;/li>
&lt;li>
&lt;p>But proprietary&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Just install Docker and Kubernetes inside a Linux VM? Maybe via minikube?:&lt;/p></description></item><item><title>12요소 어플리케이션</title><link>https://minuk.dev/wiki/twelve-factor-app/</link><pubDate>Thu, 18 Aug 2022 15:07:21 +0900</pubDate><guid>https://minuk.dev/wiki/twelve-factor-app/</guid><description>&lt;h2 id="공부-계기">공부 계기&lt;/h2>
&lt;ul>
&lt;li>[[kubernetes-patterns]] 의 11장에서 언급되어있다.&lt;/li>
&lt;li>참고자료 : &lt;a href="https://assu10.github.io/dev/2020/12/27/12factor-app/">클라우드에서의 운영 - 12요소 애플리케이션&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="구성요소">구성요소&lt;/h2>
&lt;ol>
&lt;li>Codebase : 각 마이크로서비스는 각자 코드베이스를 가지고 있고, 공유되지 않는다.&lt;/li>
&lt;li>Dependencies : 의존성을 명시적으로 관리하여야 한다.&lt;/li>
&lt;li>Config : 환경설정은 코드와 분리된다.&lt;/li>
&lt;li>Backing services : backing services 는 URL로 접근 가능해야한다.&lt;/li>
&lt;li>Build, release, run : 이 3단계가 명확히 분리되어야 한다.&lt;/li>
&lt;li>Processes : 무상태, 비공유 프로세스여야 한다. 만약 상태가 필요하면 backing services에서 처리한다.&lt;/li>
&lt;li>Port binding : 서비스 자체로 port binding 이 가능해야한다. (tomcat 같은게 내장되어야한다.)&lt;/li>
&lt;li>Concurrency : 복제를 통한 확장이 가능해야한다.&lt;/li>
&lt;li>Disposability : 시작과 종료는 최대한 빨리 그리고 gracefully shutdown 이 되어야한다.&lt;/li>
&lt;li>Dev/prod parity : 운영을 개발에서 재연가능해야한다.&lt;/li>
&lt;li>Logs : I/O가 병목이 될수 있으므로 바깥쪽으로 빼야한다. (기타 이유들도 있으니 참고자료 확인)&lt;/li>
&lt;li>Admin processes : 관리자를 위해 태스크를 지원해야한다.&lt;/li>
&lt;/ol></description></item><item><title>vim/vim-go</title><link>https://minuk.dev/wiki/vim-go/</link><pubDate>Wed, 17 Aug 2022 04:51:27 +0900</pubDate><guid>https://minuk.dev/wiki/vim-go/</guid><description>&lt;h2 id="간단-설명">간단 설명&lt;/h2>
&lt;ul>
&lt;li>vim에서 go를 지원하는 플러그인&lt;/li>
&lt;li>일반적으로 가장 많이 제시됨.&lt;/li>
&lt;li>기본적인 공부는 &lt;a href="https://github.com/fatih/vim-go/wiki/Tutorial">공식 사이트의 튜토리얼&lt;/a>을 따라하면 좋다.&lt;/li>
&lt;/ul>
&lt;h2 id="지원하는-좋은-기능">지원하는 좋은 기능&lt;/h2>
&lt;ul>
&lt;li>저장시에 자동으로 go fmt 을 실행한다. 이때 import 도 해준다.&lt;/li>
&lt;/ul>
&lt;h2 id="자주-사용하는-명령어">자주 사용하는 명령어&lt;/h2>
&lt;ul>
&lt;li>&lt;code>GoRun&lt;/code> : 간단하게 실행할때 사용한다.&lt;/li>
&lt;li>&lt;code>CTRL-]&lt;/code> : GoDef&lt;/li>
&lt;/ul>
&lt;h2 id="자주-사용하면-좋은데-손에-잘-안익는거">자주 사용하면 좋은데 손에 잘 안익는거&lt;/h2>
&lt;ul>
&lt;li>&lt;code>:GoDoc&lt;/code>&lt;/li>
&lt;li>&lt;code>:GoDecls&lt;/code>&lt;/li>
&lt;li>&lt;code>:GoDeclsDir&lt;/code>&lt;/li>
&lt;li>나머지 유용한 내용은 &lt;a href="https://johngrib.github.io/wiki/vim-go-env/">여기&lt;/a>가 더 잘나와있다. 하지만 솔직히 하나씩 손에 익히는게 좋다고 생각하고 몇가지 자주 쓰는 기능만 손에 익히고, 나머지는 기능이 있구나 정도 여부만 알고 진짜 필요할때만 보면 될거 같다. (예를 들어 인터페이스 구현 목록이라던가 등등)&lt;/li>
&lt;/ul>
&lt;h2 id="개인-생각">개인 생각&lt;/h2>
&lt;ul>
&lt;li>나는 coc-go랑 같이 사용하고 있는데 둘이 동시에 사용하는 것도 좋다.&lt;/li>
&lt;li>딱히 충돌난 경험은 없다.&lt;/li>
&lt;li>GoReferers 같은 기능은 잘 안쓰게 되는데, coc 에서는 gr(go referers)로 이동할 수 있어서 사용한다.&lt;/li>
&lt;/ul></description></item><item><title>쿠버네티스 패턴</title><link>https://minuk.dev/wiki/kubernetes-patterns/</link><pubDate>Tue, 16 Aug 2022 10:56:05 +0900</pubDate><guid>https://minuk.dev/wiki/kubernetes-patterns/</guid><description>&lt;ul>
&lt;li>책 내용 정리 및 공식 문서와 비교하며 버전 확인&lt;/li>
&lt;/ul>
&lt;h3 id="1장-개요">1장 개요&lt;/h3>
&lt;h4 id="클라우드-네이티브로-가는길">클라우드 네이티브로 가는길&lt;/h4>
&lt;ul>
&lt;li>클린코드&lt;/li>
&lt;li>도메인 주도 설계&lt;/li>
&lt;li>마이크로서비스 아키텍처 방식&lt;/li>
&lt;li>컨테이너&lt;/li>
&lt;/ul>
&lt;h4 id="분산-기본-요소">분산 기본 요소&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>개념&lt;/th>
 &lt;th>로컬 기본 요소&lt;/th>
 &lt;th>분산 기본 요소&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>캡슐화 동작&lt;/td>
 &lt;td>클래스&lt;/td>
 &lt;td>컨테이너 이미지&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>인스턴스화 동작&lt;/td>
 &lt;td>객체&lt;/td>
 &lt;td>컨테이너&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>재사용 단위&lt;/td>
 &lt;td>Jar 파일&lt;/td>
 &lt;td>컨테이너 이미지&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>컴포지션&lt;/td>
 &lt;td>포함 관계&lt;/td>
 &lt;td>사이드카 패턴&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>상속&lt;/td>
 &lt;td>확장 관계&lt;/td>
 &lt;td>FROM 으로 부모 이미지 상속&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>배포 단위&lt;/td>
 &lt;td>.jar/.war/.ear&lt;/td>
 &lt;td>pod&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>빌드타임/런타임 격리&lt;/td>
 &lt;td>모듈, 패키지, 클래스&lt;/td>
 &lt;td>namespace, pod, container&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>초기화 필요조건&lt;/td>
 &lt;td>Constructor&lt;/td>
 &lt;td>초기화 컨테이너&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>초기화 직 후 트리거&lt;/td>
 &lt;td>Init method&lt;/td>
 &lt;td>postStart&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>삭제 직전 트리거&lt;/td>
 &lt;td>Destroy method&lt;/td>
 &lt;td>preStop&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>정리 절차&lt;/td>
 &lt;td>finalize(), shutdown hook&lt;/td>
 &lt;td>Defer 컨테이너&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>비동기 &amp;amp; 병렬 칫행&lt;/td>
 &lt;td>ThreadPoolExecutor, ForkJoinPool&lt;/td>
 &lt;td>Job&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>주기적 작업&lt;/td>
 &lt;td>Timer, ScheduleExecutorService&lt;/td>
 &lt;td>CronJob&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>백그라운드 작업&lt;/td>
 &lt;td>Deamon Thread&lt;/td>
 &lt;td>DeamonSets&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>설정관리&lt;/td>
 &lt;td>System.getenv(), Properties&lt;/td>
 &lt;td>ConfigMap, Secret&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="컨테이너">컨테이너&lt;/h4>
&lt;ul>
&lt;li>컨테이너 이미지는 하나의 문제를 해결하는 기능 단위다.&lt;/li>
&lt;li>컨테이너 이미지는 하나의 팀에 의해 소유되며, 릴리즈 주기가 있다.&lt;/li>
&lt;li>컨테이너 이미지는 자기 완비적이며, 런타임 의존 성을 정의하고 수행한다.&lt;/li>
&lt;li>컨테이너 이미지는 불변적이며, 한번 만들어지면 변경되지 않는다. 즉 이미 설정 값이 정해져 있다.&lt;/li>
&lt;li>컨테이너 이미지는 런타임 의존성과 자원 요구사항이 정의되어 있다.&lt;/li>
&lt;li>컨테이너 이미지는 기능을 노출시키기 위해 잘 정의된 API가 있다.&lt;/li>
&lt;li>컨테이너는 일반적으로 하나의 유닉스 프로세스로 실행된다.&lt;/li>
&lt;li>컨테이너는 일회용이며 언제든지 스케일 업과 스케일 다운을 안전하게 수행할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="파드">파드&lt;/h4>
&lt;ul>
&lt;li>파드는 스케줄링의 최소 단위이다.&lt;/li>
&lt;li>파드는 파드에 속한 컨테이너들의 동일 장소 배치를 보장한다.&lt;/li>
&lt;li>한 파드는 파드 안의 모든 컨테이너가 공유하는 하나의 IP 주소와 이름, 포트 범위를 갖는다.&lt;/li>
&lt;/ul>
&lt;h4 id="서비스">서비스&lt;/h4>
&lt;ul>
&lt;li>서비스는 애플리케이션에 접근하기 위한 이름으로 된 진입점이다.&lt;/li>
&lt;/ul>
&lt;h4 id="레이블">레이블&lt;/h4>
&lt;ul>
&lt;li>레이블은 실행 중인 특정 파드의 인스턴스들을 가리키기 위해 사용된다.&lt;/li>
&lt;li>레이블은 스케줄러에서 많이 사용된다.&lt;/li>
&lt;li>레이블은 파드를 논리적 그룹으로 묶어 가리킬 수 있다.&lt;/li>
&lt;li>미리 앞서서 레이블을 추가하지 않아야한다. 레이블 삭제가 어떤 영향을 일으키는지 알아낼 방법이 없다.&lt;/li>
&lt;/ul>
&lt;h4 id="어노테이션">어노테이션&lt;/h4>
&lt;ul>
&lt;li>레이블과 유사한 기능을 하지만, 사람보다는 봇을 위한 용도로 사용된다.&lt;/li>
&lt;li>검색 불가능한 메타데이터를 지정하는데 사용한다.&lt;/li>
&lt;/ul>
&lt;h4 id="네임스페이스">네임스페이스&lt;/h4>
&lt;ul>
&lt;li>네임스페이스는 쿠버네티스 자원으로서 관리된다.&lt;/li>
&lt;li>네임스페이스는 컨테이너, 파드, 서비스, 레플리카세트 등의 자원에 대한 영역을 제공한다.&lt;/li>
&lt;li>네임스페이스 내에서 자원명은 고유해야한다.&lt;/li>
&lt;li>네임스페이스는 격리시키는 것이 아니므로 자원간 접근을 막을수는 없다.&lt;/li>
&lt;li>노드, PersistentVolume 등은 네임스페이스 내에 속하지 않는다.&lt;/li>
&lt;li>서비스는 &lt;code>&amp;lt;service-name&amp;gt;.&amp;lt;namespace-name&amp;gt;.svc.cluster.local&lt;/code> 형식의 dns address 를 갖는다.&lt;/li>
&lt;li>ResourceQuota는 네임스페이스 별로 제약조건을 걸 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="1부-기본-패턴">1부 기본 패턴&lt;/h2>
&lt;h3 id="2장-예측-범위-내의-요구사항">2장 예측 범위 내의 요구사항&lt;/h3>
&lt;ul>
&lt;li>애플리케이션의 요구사항에 따라서 필요한 자원량은 달라지며, 이를 예측하는 것은 어려운 일이다.&lt;/li>
&lt;li>쿠버네티스를 사용하면서 런타임 요구사항을 알아야하는 이유:
&lt;ul>
&lt;li>효율적인 하드웨어 사용을 위한 배치&lt;/li>
&lt;li>전체 클러스터 설계 및 관리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="런타임-의존성">런타임 의존성&lt;/h4>
&lt;ul>
&lt;li>PersistentVolume&lt;/li>
&lt;li>hostPort&lt;/li>
&lt;li>configMap, secret&lt;/li>
&lt;/ul>
&lt;h4 id="자원-프로파일">자원 프로파일&lt;/h4>
&lt;ul>
&lt;li>compressible resource : cpu, network&lt;/li>
&lt;li>incompressible resource : memory&lt;/li>
&lt;li>incompressible resource를 너무 많이 사용할 경우 컨테이너가 죽게 된다.&lt;/li>
&lt;li>requests, limits 에 따른 서비스 구분:
&lt;ul>
&lt;li>Best-Effort:
&lt;ul>
&lt;li>requests, limits 를 갖고 있지 않다.&lt;/li>
&lt;li>incompressible resource가 모자랄때, 가장 먼저 죽는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Burstable:
&lt;ul>
&lt;li>requests와 limits 가 다르다. (일반적으로 limits 가 requests 보다 크다.)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Guaranteed:
&lt;ul>
&lt;li>requests와 limts가 같다.&lt;/li>
&lt;li>가장 나중에 죽는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="파드-우선순위">파드 우선순위&lt;/h4>
&lt;ul>
&lt;li>책의 내용과 살짝 다르다. k8s v1.24 문서를 기준으로 작성되었다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">scheduling.k8s.io/v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">PrioirtyClass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">high-priority&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">globalDefault&lt;/span>: &lt;span style="color:#ae81ff">flase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;This is a very high priority Pod class&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>---
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">random-generator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">labels&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>: &lt;span style="color:#ae81ff">random-generator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">k8spatterns/random-generator:1.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">random-generator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">priorityClassName&lt;/span>: &lt;span style="color:#ae81ff">high-prioirty&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="프로젝트-자원">프로젝트 자원&lt;/h4>
&lt;ul>
&lt;li>추가 참고자료 : &lt;a href="https://hakkyoonjung31.github.io/linux/memory-overcommit/">메모리 상승과 오버커밋&lt;/a>&lt;/li>
&lt;li>메모리 오버커밋 : 요구된 메모리를 그대로 할당하는 것이 아닌 실제 사용되는 시점에서 필요한 만큼의 메모리를 할당하는 방식에 의해 요구되는 메모리의 총량이 100%를 넘기는 경우&lt;/li>
&lt;li>오버 커밋 상태에서 실제 메모리 사용 총량이 메모리 총량을 넘기게 될 수도 있는데, 이때 OOM-Killer에 의해 프로세스들을 죽여서 용량을 확보하게 된다.&lt;/li>
&lt;li>개인 해석:
&lt;ul>
&lt;li>오버커밋에 의해 요청된 메모리와 사용하는 메모리는 차이가 날 수 있다.&lt;/li>
&lt;li>즉 requests는 250M를 하는데, pod에서 오버커밋을 이용해 500M를 할당하고, 사용은 200M를 하고 있는 상황같은게 발생 할 수 있다는 것이다.&lt;/li>
&lt;li>kubernetes 는 기본적으로 requests 를 기준으로 스케줄링한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="3장-선언적-배포">3장 선언적 배포&lt;/h3>
&lt;ul>
&lt;li>선언적 업데이트를 작동시키기 위한 옵션:
&lt;ul>
&lt;li>&lt;code>kubectl replace&lt;/code>로 새로운 버전의 deployment로 전체 deployment를 교체한다.&lt;/li>
&lt;li>deployment를 &lt;code>kubectl patch&lt;/code> 나 &lt;code>kubectl edit&lt;/code>으로 새로운 버전을 넣는다.&lt;/li>
&lt;li>&lt;code>kubectl set image&lt;/code> 을 통해서 deployment에 새로운 이미지를 넣는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>deployment 의 장점:
&lt;ul>
&lt;li>deployment는 상태가 내부적으로 관리되는 객체이므로 클라이언트와 상호작용 없이, 서버측에서 실행된다.&lt;/li>
&lt;li>deployment 의 선언적 특성은 배포에 필요한 단계보다는 배포된 상태가 어떻게 보여야하는지를 알 수 있다.&lt;/li>
&lt;li>deployment의 정의는 운영 환경에 배포되기 전에 다양한 환경에서 테스트된 실행 가능한 객체이다.&lt;/li>
&lt;li>업데이트 프로세스는 모두 기록되며, 일시 중지 및 계속을 위한 옵션, 이전 버전으로 롤백을 위한 옵션으로 버전이 지정된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="고정-배포">고정 배포&lt;/h4>
&lt;ul>
&lt;li>Recreate 전략:
&lt;ul>
&lt;li>우선적으로 현재 버전의 모든 컨테이너를 죽이고, 이전 버전의 컨테이너가 축출될때 모든 신규 컨테이너를 동시에 시작한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="블루-그린">블루-그린&lt;/h4>
&lt;ul>
&lt;li>블루(이전 버전), 그린(현재 버전)&lt;/li>
&lt;li>블루와 그린을 모두 띄운뒤 신규 트래픽을 그린으로 보낸뒤, 기존 트래픽을 다 처리하면 블루를 삭제한다.&lt;/li>
&lt;li>블루와 그린이 순간적으로 동시에 뜨게 된다.&lt;/li>
&lt;li>즉, 자원이 2배로 필요하다.&lt;/li>
&lt;/ul>
&lt;h4 id="카나리아">카나리아&lt;/h4>
&lt;ul>
&lt;li>소수의 인스턴스를 교체하면서 동작한다.&lt;/li>
&lt;/ul>
&lt;h3 id="4장-정상상태-점검">4장 정상상태 점검&lt;/h3>
&lt;ul>
&lt;li>프로세스 상태는 애플리케이션의 정상상태를 결정하기에는 충분하지 않다.&lt;/li>
&lt;/ul>
&lt;h4 id="liveness-probe">Liveness probe&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>HTTP : 200~399 사이 응답코드&lt;/p></description></item><item><title>Horizontal Pod AutoScaler</title><link>https://minuk.dev/wiki/horizontalpodautoscaler/</link><pubDate>Thu, 11 Aug 2022 13:36:02 +0900</pubDate><guid>https://minuk.dev/wiki/horizontalpodautoscaler/</guid><description>&lt;h2 id="공부하게된-이유">공부하게된 이유&lt;/h2>
&lt;ul>
&lt;li>면접때 autoscaling 에 대한 질문이 나왔는데 한번도 k8s 에서 auto scaling 을 해본적이 없었다.&lt;/li>
&lt;li>모든 auto scaling 에 대한 답이 horizontal pod autoscaling 인 건 아니긴 하지만, 면접에서 요구한 건 이 지식이였다.&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/ko/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">공식 문서&lt;/a>를 따라하면서 한번 공부해보자.&lt;/li>
&lt;/ul>
&lt;h2 id="개념">개념&lt;/h2>
&lt;ul>
&lt;li>메트릭을 관찰해서 Deployment 의 scale을 변화시켜주는 구조.&lt;/li>
&lt;li>명령을 실행하는 시점에서 최대, 최소의 scale 을 입력해준다.&lt;/li>
&lt;li>추가적으로 메트릭을 임의로 정의해서 조절시킬수 있다.&lt;/li>
&lt;li>공식 문서에 나와있는 기본 예제는 CPU 사용량을 기준으로 하고 있으며, 다양한 resource 에 대해서 기본적으로 지원한다.&lt;/li>
&lt;/ul></description></item><item><title>What If… Kube-Apiserver Could be Extended Via WebAssembly?</title><link>https://minuk.dev/wiki/what-if-kube-apiserver-could-be-extended-via-webassembly/</link><pubDate>Thu, 11 Aug 2022 01:58:52 +0900</pubDate><guid>https://minuk.dev/wiki/what-if-kube-apiserver-could-be-extended-via-webassembly/</guid><description>&lt;p>&lt;a href="https://www.youtube.com/watch?v=4CKcMZySUbc&amp;amp;list=PLj6h78yzYM2MCEgkd8zH0vJWF7jdQ-GRR&amp;amp;index=2">출처&lt;/a>&lt;/p>
&lt;h2 id="what-is-web-assembly">What is Web Assembly?&lt;/h2>
&lt;ul>
&lt;li>Polyglot
&lt;ul>
&lt;li>Many langugages can be compiled to Wasm(Web assembly)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Small
&lt;ul>
&lt;li>Like Container&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Portable
&lt;ul>
&lt;li>Can run on any architecture and any OS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Secure
&lt;ul>
&lt;li>In sandbox&lt;/li>
&lt;li>Memory safety&lt;/li>
&lt;li>Control-flow integrity&lt;/li>
&lt;li>Runtime isolation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="webassembly-outside-of-the-browser">WebAssembly Outside of the Browser&lt;/h2>
&lt;ul>
&lt;li>A new way to build and distribute applications&lt;/li>
&lt;li>Implement plugin systems&lt;/li>
&lt;/ul>
&lt;h2 id="kubernetes-control-plan-extensibility">Kubernetes Control Plan Extensibility&lt;/h2>
&lt;ul>
&lt;li>Authentication and Autorization&lt;/li>
&lt;li>Scheduler&lt;/li>
&lt;li>Dynamic Admission Controllers&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-admission-controller">Dynamic Admission Controller&lt;/h3>
&lt;ul>
&lt;li>Authentication, Authorization&lt;/li>
&lt;li>Mutating admission&lt;/li>
&lt;li>Schema Validation&lt;/li>
&lt;li>Validating admission&lt;/li>
&lt;/ul>
&lt;h2 id="introducting-kubewarden">Introducting Kubewarden&lt;/h2>
&lt;ul>
&lt;li>A policy engine for Kubernetes&lt;/li>
&lt;li>Its mission is to simplify the adoption of Policy As Code.&lt;/li>
&lt;/ul>
&lt;h3 id="kubewarden-policies">Kubewarden Policies&lt;/h3>
&lt;ul>
&lt;li>Written using:
&lt;ul>
&lt;li>Rust, Go, AssemblyScript, Swift&lt;/li>
&lt;li>Rego&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Compiled to WebAssembly&lt;/li>
&lt;li>Distributed using container registries&lt;/li>
&lt;li>Signed and verified using Sigstore&lt;/li>
&lt;/ul>
&lt;h3 id="the-idea">The Idea&lt;/h3>
&lt;ul>
&lt;li>Define admission rules using WebAssembly modules&lt;/li>
&lt;li>Extend the API server to make use of WebAssembly-based rules&lt;/li>
&lt;/ul>
&lt;h2 id="what-do-we-gain">What do we gain?&lt;/h2>
&lt;h3 id="remove-uncertainty">Remove Uncertainty&lt;/h3>
&lt;ul>
&lt;li>Webhooks rely on the network&lt;/li>
&lt;li>The network introduces many types of failures&lt;/li>
&lt;li>The network increase attack surface&lt;/li>
&lt;/ul>
&lt;h3 id="limit-resource-usage">Limit Resource Usage&lt;/h3>
&lt;ul>
&lt;li>A set of Kubernetes Cusom Resource Definitions&lt;/li>
&lt;li>&lt;del>The Webhook server&lt;/del>&lt;/li>
&lt;li>&lt;del>The Controller that reconciles the Custom Resources&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>→ Great for Edge environments!&lt;/p></description></item><item><title>The Future Of Reproducible Research - Powered by Kubeflow</title><link>https://minuk.dev/wiki/the-future-of-reproducible-research-powered-by-kubeflow/</link><pubDate>Sat, 06 Aug 2022 00:54:31 +0900</pubDate><guid>https://minuk.dev/wiki/the-future-of-reproducible-research-powered-by-kubeflow/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/JiqY5lWbFVE">출처&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;h3 id="articles-about-why-reproducible-research-is-important">Articles About Why Reproducible Research is Important&lt;/h3>
&lt;h3 id="the-replication-crisis-what-is-it">The Replication Crisis: What Is It?&lt;/h3>
&lt;ul>
&lt;li>Wikipedia Article Paraphrase:
&lt;ul>
&lt;li>Many scientific studies are difficult or impossible to reproduce.&lt;/li>
&lt;li>Most prevalent in psychology and medicine, but also serious in other natural and social sciences.&lt;/li>
&lt;li>Term coined in eary 2010s, gave rise to meta-science discipline.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-replication-crisis--causes">The Replication Crisis : Causes&lt;/h3>
&lt;ul>
&lt;li>Wikipiedia Article Paraphrase:
&lt;ul>
&lt;li>C ommodification of Science&lt;/li>
&lt;li>Publish or Perish Culture in Academia&lt;/li>
&lt;li>Fraud and otherwise “Questionable” Research Practices&lt;/li>
&lt;li>Statistical Issues&lt;/li>
&lt;li>Base Rate Hypotheses Accuracy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-replication-crisis-consequences">The Replication Crisis: Consequences&lt;/h3>
&lt;ul>
&lt;li>Wikipedia Article Paraphrase:
&lt;ul>
&lt;li>Political repercussions&lt;/li>
&lt;li>Public awareness and perceptions&lt;/li>
&lt;li>Response in Academia&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-replication-crisis-potential-remedies">The Replication Crisis: Potential Remedies&lt;/h3>
&lt;ul>
&lt;li>Wikipedia Article Paraphase:
&lt;ul>
&lt;li>Reforms in publishing&lt;/li>
&lt;li>Statistical Reform&lt;/li>
&lt;li>Replication Efforts&lt;/li>
&lt;li>Changes to scientific approach&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="my-experience-trying-to-reproduce-research">My Experience Trying to Reproduce Research&lt;/h3>
&lt;ul>
&lt;li>Grad Student/ Academic Papers&lt;/li>
&lt;li>Working on someone else’s old junk code&lt;/li>
&lt;li>Working on my own old junk code&lt;/li>
&lt;/ul>
&lt;h2 id="what-we-did">What we did&lt;/h2>
&lt;h3 id="tower-of-babel-making-apache-spark-k8s-and-kubeflow-play-nice">Tower of Babel: Making Apache Spark, K8s, and Kubeflow Play Nice&lt;/h3>
&lt;h3 id="10-minute-quick-overview-of-kf4covid">10 Minute Quick Overview of KF4COVID&lt;/h3>
&lt;ul>
&lt;li>Early days of pandemic - everyone was scared, no solutions were out of bounds.&lt;/li>
&lt;li>Various ERs turned to CT scans and ultrasounds to detect ‘ground glass occlusions’ a hallmark of covid (technique has been used in ERs in the past for rapid pneumonia detection).&lt;/li>
&lt;li>CT Scans deliver high dose of radition&lt;/li>
&lt;li>Low Dose CT Scans deliver, low dose of radiation, but produce ‘noisy’ images.&lt;/li>
&lt;li>We used K8s, Apache Spark, Apache Mahout &amp;amp; Kubeflow to denoise CT Scans&lt;/li>
&lt;/ul>
&lt;h3 id="rapid-testing-needed--desperately">Rapid Testing Needed -Desperately&lt;/h3>
&lt;ul>
&lt;li>Mental Time Machine - to March 2020.
&lt;ul>
&lt;li>No one understands Coronavirus - but hospitals are being overrune and people are dying.&lt;/li>
&lt;li>Slow Tests&lt;/li>
&lt;li>Rapid test “issues”&lt;/li>
&lt;li>No answer was ‘out of bounds’&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-pipeline-overview">The Pipeline: Overview&lt;/h3>
&lt;ul>
&lt;li>S3 Buckets of images (can be easily swapped out to other image repo)&lt;/li>
&lt;li>PyDiCOM to turn CT scan into numerical matrix, write matrix to disk&lt;/li>
&lt;li>Load matrix in apache spark (~500 MB each) then wrap RDD into Mahout DRM&lt;/li>
&lt;li>DS-SVD on Mahout DRM (why couldn’t do this in Numpy?)&lt;/li>
&lt;li>DS-SVD results in two matrices- one of basis vectors, one of weights per image - to “de noise” you only use first X% of basis vectors. These get output and can be easily rastered using a laptop.&lt;/li>
&lt;/ul>
&lt;h2 id="call-to-action--how-you-can-do-the-same">Call to action / How you can do the same&lt;/h2>
&lt;ul>
&lt;li>Assume they won’t be using your laptop.&lt;/li>
&lt;/ul>
&lt;h3 id="use-kubeflow">Use Kubeflow&lt;/h3>
&lt;p>Assuming someone will want to replicate your work, and that they won’t have access to your machine, Kubeflow provides a nice framework for reproducing results.&lt;/p></description></item><item><title>This is The Way- A Crash Course on the Intricacies of Managing CPUs in K8s</title><link>https://minuk.dev/wiki/this-is-the-way-a-crash-course-on-intricacies-of-managing-cpus/</link><pubDate>Fri, 05 Aug 2022 02:07:46 +0900</pubDate><guid>https://minuk.dev/wiki/this-is-the-way-a-crash-course-on-intricacies-of-managing-cpus/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/IFEJD1YOpXo">원본 링크&lt;/a>&lt;/li>
&lt;li>Scope : We will cover CPU Management requirements Only, but also reference other projects.&lt;/li>
&lt;/ul>
&lt;h2 id="simple-systems">Simple Systems&lt;/h2>
&lt;ul>
&lt;li>Nodes
&lt;ul>
&lt;li>Single NIC&lt;/li>
&lt;li>Single Socket CPU&lt;/li>
&lt;li>Memory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Kubelet was designed for simple at first&lt;/li>
&lt;li>Early Kubelet&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># &amp;lt; Kubernetes v1.8 - before 2017&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">apiVersion&lt;/span>: &lt;span style="color:#ae81ff">v1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">kind&lt;/span>: &lt;span style="color:#ae81ff">Pod&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">metadata&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">frontend&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">spec&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">containers&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">app&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">my-company.example/myapp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">resources&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">requests&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">memory&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;64Mi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;250m&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">limits&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">memory&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;128Mi&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cpu&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;500m&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>Resources supported:
&lt;ul>
&lt;li>CPU&lt;/li>
&lt;li>Memory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reuqests: Ask for resources for your container&lt;/li>
&lt;li>Limits: limit the amount of resources consumed by the container&lt;/li>
&lt;li>Resource Mangement in Kubelet
&lt;ul>
&lt;li>Kubernetes v1.8-v.11 (2017-2018)&lt;/li>
&lt;li>Pre-allocated hugepage support as native resources (Alpha support v1.8, graduated to Beta in v.11)&lt;/li>
&lt;li>CPU Manager support to enable container level CPU affinity support (Alpha support v1.8, graduated to Beta in v.11)&lt;/li>
&lt;li>Device Plugin Support to enable a consistent and portable solution for users to consume hardware devices across k8s clusters(Alpha support in v1.8, graduated to Beta in v.10)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="high-performance-uses-cases">High Performance Uses Cases&lt;/h2>
&lt;ul>
&lt;li>Performance Sensitive Workloads&lt;/li>
&lt;li>High Performance, AI/ML Clusters
&lt;ul>
&lt;li>Multiple CPU Socket&lt;/li>
&lt;li>Multiple NIC&lt;/li>
&lt;li>Multiple Numa&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cpu-manager---pinned-cores">CPU Manager - Pinned Cores&lt;/h3>
&lt;ul>
&lt;li>Cpu Manager with static policy allocates CPUs exclusively for a container if
&lt;ul>
&lt;li>pod QoS is Guaranteed&lt;/li>
&lt;li>has a positive integer CPU request&lt;/li>
&lt;li>does not change CPU assignments for exclusively pinned guaranteed containers after the main container process start&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cpu-manager-policies">CPU Manager Policies&lt;/h3>
&lt;ul>
&lt;li>&lt;code>--cpu-manager-policy&lt;/code> kubelet flag used to specify the policy&lt;/li>
&lt;li>None:
&lt;ul>
&lt;li>Default&lt;/li>
&lt;li>Provides no affinity beyond what the OS scheduler does automatically&lt;/li>
&lt;li>Can handle partial CPUs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Static:
&lt;ul>
&lt;li>allows containers access to exclusive CPUs on the node&lt;/li>
&lt;li>does not change CPU assignments for exclusively pinned guaranteed containers after the main container process starts&lt;/li>
&lt;li>Only uses whole CPUs, so increases perceived CPU utilization&lt;/li>
&lt;li>Only by container, not by pod&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cpu-manager-policy-options">CPU Manager Policy Options&lt;/h3>
&lt;ul>
&lt;li>Introduced in v1.22, Beta in v1.23&lt;/li>
&lt;li>&lt;code>--cpu-manager-policy-options&lt;/code> : kubelet flag used to specify the policy option&lt;/li>
&lt;li>full-pcpus-only:
&lt;ul>
&lt;li>Beta option, visible by default&lt;/li>
&lt;li>the static policy will always allocate full physical cores, so guarantee same NUMA zone.&lt;/li>
&lt;li>Fails with SMTAlignmentError for partial core allocation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>distribute-cpus-acorss-numa:
&lt;ul>
&lt;li>alpha, hidden by default&lt;/li>
&lt;li>the static policy will evenly distribute CPUs across NUMA nodes&lt;/li>
&lt;li>Still per container&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="numa-zones-not-for-the-weak-of-heart">NUMA Zones: Not for the weak of heart&lt;/h2>
&lt;ul>
&lt;li>If CPU and Memory are located in different NUMA zones, …&lt;/li>
&lt;/ul>
&lt;h3 id="along-comes-topology-management">Along Comes Topology Management&lt;/h3>
&lt;ul>
&lt;li>Kubernetes v1.8 (2019 onwards)&lt;/li>
&lt;li>Topology Manger to coordinate resource assignment to avoid cross NUMA assignments (alpha support v1.16, graduated to beta in v1.18)&lt;/li>
&lt;li>Memory Manager for guarnteed memory (and hugepages) allocation to pods (alpha support v1.21, graduated to beta in v1.22))&lt;/li>
&lt;li>Known Issue: Scheduler is not NUMA aware and pod can fail with TopologyAffinityError if kubelet is unable to align all the resources based on the Topology Manager policy.&lt;/li>
&lt;/ul>
&lt;h3 id="going-with-the-topology-flow">Going with the Topology Flow&lt;/h3>
&lt;p>kubelet - Admit()&lt;/p></description></item><item><title>kubernetes-graceful-shutdown</title><link>https://minuk.dev/wiki/kubernetes-graceful-shutdown/</link><pubDate>Thu, 04 Aug 2022 17:25:09 +0900</pubDate><guid>https://minuk.dev/wiki/kubernetes-graceful-shutdown/</guid><description>글을 보고 궁금한걸 코드로 정리한 문서</description></item><item><title>dockerfile</title><link>https://minuk.dev/wiki/dockerfile/</link><pubDate>Thu, 04 Aug 2022 13:57:13 +0900</pubDate><guid>https://minuk.dev/wiki/dockerfile/</guid><description>dockerfile 만들때마다 까먹어서 만들어두는 cheatsheet</description></item><item><title>Automated Progressive Delivery Using GitOps and Service Mesh</title><link>https://minuk.dev/wiki/automated-progressive-delivery-using-gitops-and-service-mesh/</link><pubDate>Thu, 04 Aug 2022 01:56:34 +0900</pubDate><guid>https://minuk.dev/wiki/automated-progressive-delivery-using-gitops-and-service-mesh/</guid><description>&lt;ul>
&lt;li>&lt;a href="https://youtu.be/5Ko-CnP2qhA">원본링크&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="service-mesh">Service Mesh&lt;/h2>
&lt;h3 id="k8s-at-scale-at-intuit">K8s at scale at Intuit&lt;/h3>
&lt;h3 id="why-service-mesh-at-intuit">Why service mesh at Intuit?&lt;/h3>
&lt;ul>
&lt;li>Provides &amp;gt; 30% network latency imporvement per API call by reducing hops&lt;/li>
&lt;li>East-West Communication Solution
&lt;ul>
&lt;li>Keep traffic in private network
&lt;ul>
&lt;li>Reduces cost&lt;/li>
&lt;li>Removes redundant hops&lt;/li>
&lt;li>Reduces Latency&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Automates certificate management
&lt;ul>
&lt;li>No need for last-mile check&lt;/li>
&lt;li>increases developer productivity&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Provides Transactional visibility&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="istio-architecture-at-intuit">Istio architecture at Intuit&lt;/h3>
&lt;h3 id="cross-cluster-service-discovery---with-service-mesh">Cross-cluster service discovery - With Service Mesh&lt;/h3>
&lt;ul>
&lt;li>Admiral&lt;/li>
&lt;li>Called&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="개인-생각">개인 생각&lt;/h3>
&lt;ul>
&lt;li>Intuit 회사에서 계속해서 K8s 의 수요가 증가하고 있으며, 단순한 API Gateway 구조로는 더이상 감당하기 힘든 단계가 다가오고 있다. 서비스 끼리 서로를 호출하는 구조라던가, 보안적인 관점에서 한계를 보인다.&lt;/li>
&lt;li>궁금점 : mTLS 라는 단어가 지속적으로 등작하고 있는데 왜 m 이 붙었을까? mTLS 규격이 어떻게 될까?&lt;/li>
&lt;li>Istio architecture at Intuit 부분에서 L7 Proxy (Envoy) 를 통해서 Service 끼리 통신하고 있다는 것을 알 수 있다. 이는 layer 화를 하다보니 생기는 일인 것 같다.&lt;/li>
&lt;li>cluster 내부 를 넘어서 cluster 간에서도 serviceMesh 를 통해서 통신할 수 있다고 말하는게 인상 깊었다. &lt;a href="https://github.com/istio-ecosystem/admiral">Admiral&lt;/a> 이라는 라이브러리&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="progressive-delivery">Progressive Delivery&lt;/h2>
&lt;h3 id="progressive-delivery-at-intuit">Progressive Delivery at Intuit&lt;/h3>
&lt;ul>
&lt;li>Increase Operational Excellence
&lt;ul>
&lt;li>Minimize impact from change incidents&lt;/li>
&lt;li>Reduce MTTR if and incident occur&lt;/li>
&lt;li>Increase automation &amp;amp; reliability of deployment process&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Use Argo Rollouts&lt;/li>
&lt;li>Day 0 experience for new services&lt;/li>
&lt;li>Opt-in migration for existing services&lt;/li>
&lt;li>All configuration and templates stored in git&lt;/li>
&lt;li>Rollouts deployed and managed by Argo Team in “waves”&lt;/li>
&lt;/ul>
&lt;h2 id="mesh--progressive-delivery-challenges--learnings">Mesh + Progressive Delivery Challenges &amp;amp; Learnings&lt;/h2>
&lt;h3 id="issues-uncovered">Issues uncovered&lt;/h3>
&lt;ul>
&lt;li>Using multiple traffic providers&lt;/li>
&lt;li>Incompatible mesh end point generation&lt;/li>
&lt;/ul>
&lt;h3 id="onboarding-2000-services-x-2">Onboarding 2000 services x 2&lt;/h3>
&lt;ul>
&lt;li>Make migration easy and fun&lt;/li>
&lt;li>Stop the bleed&lt;/li>
&lt;/ul>
&lt;h3 id="configuring-analysis-templates">Configuring analysis templates&lt;/h3>
&lt;ul>
&lt;li>Low Service Commonality
&lt;ul>
&lt;li>
&lt;p>Wide variety of services types&lt;/p></description></item><item><title>containerd Project Update and Deep Dive</title><link>https://minuk.dev/wiki/containerd-proejct-update-and-deep-dive/</link><pubDate>Thu, 04 Aug 2022 00:23:24 +0900</pubDate><guid>https://minuk.dev/wiki/containerd-proejct-update-and-deep-dive/</guid><description>kubecon 2022 eu</description></item><item><title>http2 탐구</title><link>https://minuk.dev/wiki/http2/</link><pubDate>Wed, 03 Aug 2022 15:42:58 +0900</pubDate><guid>https://minuk.dev/wiki/http2/</guid><description>RFC 문서와 golang 라이브러리를 뜯어보며 http2 탐구</description></item><item><title>gRPC For Microservices Service-mesh and Observability</title><link>https://minuk.dev/wiki/grpc-for-microservices/</link><pubDate>Tue, 02 Aug 2022 23:00:08 +0900</pubDate><guid>https://minuk.dev/wiki/grpc-for-microservices/</guid><description>kubecon north america 2022 발표 중 자료 정리</description></item><item><title>kubecon</title><link>https://minuk.dev/wiki/kubecon/</link><pubDate>Tue, 02 Aug 2022 22:58:55 +0900</pubDate><guid>https://minuk.dev/wiki/kubecon/</guid><description>kubecon 동영상 정리</description></item><item><title>go-http</title><link>https://minuk.dev/wiki/go-http/</link><pubDate>Tue, 02 Aug 2022 15:55:09 +0900</pubDate><guid>https://minuk.dev/wiki/go-http/</guid><description>go 언어 http 동작방식이 궁금해져서 탐구해보는 자료</description></item><item><title>go</title><link>https://minuk.dev/wiki/go/</link><pubDate>Tue, 02 Aug 2022 15:52:30 +0900</pubDate><guid>https://minuk.dev/wiki/go/</guid><description>go 언어 관련</description></item><item><title>CRI(Container Runtime Interface)</title><link>https://minuk.dev/wiki/cri/</link><pubDate>Mon, 01 Aug 2022 17:08:45 +0900</pubDate><guid>https://minuk.dev/wiki/cri/</guid><description>CRI 관련 자료 모음</description></item><item><title>vagrant</title><link>https://minuk.dev/wiki/vagrant/</link><pubDate>Mon, 01 Aug 2022 17:05:59 +0900</pubDate><guid>https://minuk.dev/wiki/vagrant/</guid><description>vagrant</description></item><item><title>jsonpath</title><link>https://minuk.dev/wiki/jsonpath/</link><pubDate>Mon, 01 Aug 2022 16:12:23 +0900</pubDate><guid>https://minuk.dev/wiki/jsonpath/</guid><description>jsonpath 에서 자주 쓰는거</description></item><item><title>systemctl 중요한것만 정리</title><link>https://minuk.dev/wiki/systemctl/</link><pubDate>Sun, 31 Jul 2022 22:20:31 +0900</pubDate><guid>https://minuk.dev/wiki/systemctl/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>systemd 를 제어하기 위한 명령어&lt;/li>
&lt;/ul>
&lt;h2 id="사용하는-것들">사용하는 것들&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="systemctl%20start%20%3cservicename%3e%0asystemctl%20status%20%3cservicename%3e%0asystemctl%20kill%20%3cservicename%3e%20[--signal=SIGABRT]%0asystemctl%20status%20%3cservicename%3e%0asystemctl%20stop%20%3cservicename%3e%0a%0asystemctl%20is-active%20%3cservicename%3e%0asystemctl%20reload%20%3cservicename%3e%0asystemctl%20restart%20%3cservicename%3e">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>systemctl start &amp;lt;servicename&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl status &amp;lt;servicename&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl kill &amp;lt;servicename&amp;gt; &lt;span style="color:#f92672">[&lt;/span>--signal&lt;span style="color:#f92672">=&lt;/span>SIGABRT&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl status &amp;lt;servicename&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl stop &amp;lt;servicename&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl is-active &amp;lt;servicename&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl reload &amp;lt;servicename&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl restart &amp;lt;servicename&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="journalctl%20-u%20%3cservicename%3e%20[-o%20json]">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>journalctl -u &amp;lt;servicename&amp;gt; &lt;span style="color:#f92672">[&lt;/span>-o json&lt;span style="color:#f92672">]&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>linux init 요약</title><link>https://minuk.dev/wiki/init/</link><pubDate>Sun, 31 Jul 2022 22:13:30 +0900</pubDate><guid>https://minuk.dev/wiki/init/</guid><description>&lt;ul>
&lt;li>참고 : &lt;a href="https://steady-snail.tistory.com/272">https://steady-snail.tistory.com/272&lt;/a>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#!/bin/bash%0a###%20BEGIN%20INIT%20INFO%0a#%20Provides:%20%20%20%20%20%20%20%20%20%20%20%20%20startup.sh%0a#%20Required-Start:%20%20%20%20%20%20%20$reboot%0a#%20Required-Stop:%20%20%20%20%20%20%20%20$reboot%0a#%20Default-Start:%20%20%20%20%20%20%20%202%203%204%205%0a#%20Default-Stop:%20%20%20%20%20%20%20%20%200%201%206%0a#%20Short-Description:%20%20%20%20Server%20init%20script%0a###%20END%20INIT%20INFO%0a%0acase%20%22$1%22%20in%0a%20%20start%29%0a%20%20#%20run%20as%20a%20specific%20user%0a%20%20sudo%20-u%20%3cusername%3e%20/foo/bar%0a%20%20#%20TODO%20Something..%0a%0a%20%20;;%0a%20%20*%29%0a%20%20echo%20%22Usage:%20$0%20%28start%29%22%0a%20%20;;%0aesac%0a%0aexit%200">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#75715e">### BEGIN INIT INFO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Provides: startup.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Required-Start: $reboot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Required-Stop: $reboot&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Default-Start: 2 3 4 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Default-Stop: 0 1 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Short-Description: Server init script&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### END INIT INFO&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> in
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># run as a specific user&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudo -u &amp;lt;username&amp;gt; /foo/bar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># TODO Something..&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> *&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Usage: &lt;/span>$0&lt;span style="color:#e6db74"> (start)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ;;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">esac&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>exit &lt;span style="color:#ae81ff">0&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="chmod%20755%20startup.sh">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>chmod &lt;span style="color:#ae81ff">755&lt;/span> startup.sh&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="update-rc.d%20startup.sh%20defaults">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>update-rc.d startup.sh defaults&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="update-rc.d%20-f%20startup.sh%20remove">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>update-rc.d -f startup.sh remove&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>process 관련된 명령어 모음</title><link>https://minuk.dev/wiki/process-cli/</link><pubDate>Sun, 31 Jul 2022 22:01:50 +0900</pubDate><guid>https://minuk.dev/wiki/process-cli/</guid><description>&lt;ul>
&lt;li>Refer : &lt;a href="https://www.guru99.com/managing-processes-in-linux.html">https://www.guru99.com/managing-processes-in-linux.html&lt;/a>&lt;/li>
&lt;li>&lt;code>bg&lt;/code> : To send a process to the background&lt;/li>
&lt;li>&lt;code>fg&lt;/code> : To run a stopped process in the forground&lt;/li>
&lt;li>&lt;code>top&lt;/code>&lt;/li>
&lt;li>&lt;code>ps&lt;/code>&lt;/li>
&lt;li>&lt;code>pidof&lt;/code> : Gives the Process ID of a process&lt;/li>
&lt;li>&lt;code>kill&lt;/code>&lt;/li>
&lt;li>&lt;code>nice&lt;/code> : starts a process with a given priority&lt;/li>
&lt;li>&lt;code>renice&lt;/code> : changes priority of an already runnign process&lt;/li>
&lt;li>&lt;code>df&lt;/code> : Gives free hard disk space on your system&lt;/li>
&lt;li>&lt;code>free&lt;/code> : gives free RAM on your system&lt;/li>
&lt;/ul></description></item><item><title>process-status</title><link>https://minuk.dev/wiki/process-status/</link><pubDate>Sun, 31 Jul 2022 09:53:00 +0900</pubDate><guid>https://minuk.dev/wiki/process-status/</guid><description>process 상태 종류 정리</description></item><item><title>teamnote-go</title><link>https://minuk.dev/wiki/teamnote-go/</link><pubDate>Fri, 08 Jul 2022 20:57:32 +0900</pubDate><guid>https://minuk.dev/wiki/teamnote-go/</guid><description>go teamnote</description></item><item><title>cgroup</title><link>https://minuk.dev/wiki/cgroups/</link><pubDate>Sat, 02 Jul 2022 04:20:55 +0900</pubDate><guid>https://minuk.dev/wiki/cgroups/</guid><description>&lt;ul>
&lt;li>관련된 커널 커밋은 아직 찾지 못했다.&lt;/li>
&lt;li>하지만 kernel/cgroup 으로 별도로 분리되어 존재한다는 점. &lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/cgroup/freezer.c#L14">cgroup을 정지하기 위한 별도의 함수가 존재한다는 점&lt;/a>, &lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/exit.c#L736">이 함수가 불리는 시점이 do_exit 이라는 점&lt;/a> 을 통해서 코드로 이를 알수 있다.&lt;/li>
&lt;/ul></description></item><item><title>namespaces</title><link>https://minuk.dev/wiki/namespaces/</link><pubDate>Sat, 02 Jul 2022 03:42:51 +0900</pubDate><guid>https://minuk.dev/wiki/namespaces/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/nsproxy.c">namespace 구현과 관련된 nsproxy code&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://elixir.bootlin.com/linux/latest/source/include/linux/nsproxy.h#L31">namespace 구현과 관련된 nsproxy 자료구조&lt;/a>&lt;/p>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20nsproxy%20%7b%0a%20%20atomic_t%20count;%0a%20%20struct%20uts_namespace%20*uts_ns;%0a%20%20struct%20ipc_namespace%20*ipc_ns;%0a%20%20struct%20mnt_namespace%20*mnt_ns;%0a%20%20struct%20pid_namespace%20*pid_ns_for_children;%0a%20%20struct%20net%20%09%20%20%20%20%20*net_ns;%0a%20%20struct%20time_namespace%20*time_ns;%0a%20%20struct%20time_namespace%20*time_ns_for_children;%0a%20%20struct%20cgroup_namespace%20*cgroup_ns;%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> nsproxy {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">atomic_t&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> uts_namespace &lt;span style="color:#f92672">*&lt;/span>uts_ns;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> ipc_namespace &lt;span style="color:#f92672">*&lt;/span>ipc_ns;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> mnt_namespace &lt;span style="color:#f92672">*&lt;/span>mnt_ns;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> pid_namespace &lt;span style="color:#f92672">*&lt;/span>pid_ns_for_children;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> net 	 &lt;span style="color:#f92672">*&lt;/span>net_ns;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> time_namespace &lt;span style="color:#f92672">*&lt;/span>time_ns;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> time_namespace &lt;span style="color:#f92672">*&lt;/span>time_ns_for_children;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> cgroup_namespace &lt;span style="color:#f92672">*&lt;/span>cgroup_ns;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>uts : unix time-sharing&lt;/li>
&lt;li>ipc : inter-process communication&lt;/li>
&lt;li>mnt : mount&lt;/li>
&lt;li>pid : process id&lt;/li>
&lt;li>net : network&lt;/li>
&lt;li>time : system clock(monotonic &amp;amp; boottime)&lt;/li>
&lt;li>cgroup : control groups&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h#L1083">task_struct 에 존재하는 nsproxy 코드&lt;/a>&lt;/p>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20task_struct%20%7b%0a%20%20/*%20skip%20*/%0a%20%20struct%20nsproxy%20*nsproxy;%0a%20%20/*%20skip%20*/%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> task_struct {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* skip */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> nsproxy &lt;span style="color:#f92672">*&lt;/span>nsproxy;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* skip */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>어떻게 동작하는지 러프하게 따라가기:
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/sys.c#L1354">sethostname 호출&lt;/a>:
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/capability.c#L384">ns_capable 호출&lt;/a>:
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/capability.c#L365">ns_capable_common 호출&lt;/a>:
&lt;ul>
&lt;li>잡다한 보안 호출:
&lt;ul>
&lt;li>&lt;a href="https://elixir.bootlin.com/linux/latest/source/security/commoncap.c#L51">cap_capable 호출&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>위의 코드와 다른 코드들 몇가지를 트래킹하면서 깨달은 점. namespace 를 system call을 거의 호출하자마자 검사하고 분기하며, 이미 많은 커널 코드들에 녹아들어 있다.:
&lt;ul>
&lt;li>엄청 아래 레벨에서만 레이어화 되어있을줄 알았는데 그건 아니다. 초창기에 들어올때나 그랬고 성능상의 문제나 구현상의 문제로 점점 녹아든걸로 생각한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>결론 : namespace는 kernel code 전반에 있어서 녹아들어 있으며 (task_struct 와 같은 자료구조에 nsproxy 가 있는 점등이 근거), 성능이 떨어지지 않기 위해서 많은 노력이 이미 들어가 있는 거 같음.&lt;/li>
&lt;li>추가적으로 알수 있었던 점 : cgroup과 namespace가 구분되어 있는 이유가 궁금하였는데 namespace의 구현은 이미 kernel code 전반에 걸쳐서 있어 자원 제어와 관련된 부분(예시: 독점)을 코딩하는 레이어를 만들기는 어려웠을 것 같음. 이는 cgroup의 구현을 조금 더 보아야하나, namespace에서 cgroup을 별도로 가르키고 있다는 점, 별도의 자료구조를 추가적으로 통한다는 점에서 하드웨어 자원을 관리하기 위한 함수구조가 있을 것으로 추정&lt;/li>
&lt;/ul></description></item><item><title>LXC</title><link>https://minuk.dev/wiki/lxc/</link><pubDate>Sat, 02 Jul 2022 03:27:34 +0900</pubDate><guid>https://minuk.dev/wiki/lxc/</guid><description>&lt;h3 id="lxc-란">LXC 란&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/lxc/lxc">원문&lt;/a>&lt;/li>
&lt;li>2008년부터 개발 시작&lt;/li>
&lt;li>분리된 커널을 돌리고 모든 하드웨어를 시뮬레이팅하는 것을 오버헤드 없이 하는 것을 목표로 함.&lt;/li>
&lt;li>Unprivileged containers 는 어떠한 권한 없이 돌아가는 컨테이너를 의미.:
&lt;ul>
&lt;li>UID와 GID를 격리&lt;/li>
&lt;li>이를 위해서 서로 다른 범위를 사용. host의 100000번 이후를 0으로 내부적으로 매핑&lt;/li>
&lt;li>이러한 것들은 몇가지 제약을 가져왔고 아래 3가지 setuid code를 이용해 이를 극복:
&lt;ul>
&lt;li>lxc-user-nic&lt;/li>
&lt;li>newuidmap&lt;/li>
&lt;li>newgidmap&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일반적으로 LXC의 목표는 커널상의 모든 보안 기능을 사용 가능하게 하는데에 있음. 이를 통해서 LXC는 그들의 요구에 따라 복잡하게 튜닝할수 있게 함.&lt;/li>
&lt;li>LXC는 모든 권한 없이도 잘 돌아가지만 일반적으로 몇가지 유용한 것들은 꽤나 제한적임. 대표적인 2가지 문제는 Network와 Usernamespaces 임.:
&lt;ul>
&lt;li>Network : host의 network namespace는 격리 수준을 낮추고 attack vector를 증가시킴. host와 container가 똑같은 network namespace를 사용한다는 것은 sysfs mount가 거부될수 있음을 의미함.&lt;/li>
&lt;li>user namespaces는 보안 증가에는 효율적이지만 privileged helper에 의하지 않고 unprivileged 유저가 container에 그들의 uid를 매핑하는 게 허락되있음. POSIX 시스템에서는 65536 UIDs와 GIDs 로도 모든 기능을 사용 가능한게 보장되어 있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="lxc가-namespace와-cgroup-을-어떻게-사용하는가">lxc가 namespace와 cgroup 을 어떻게 사용하는가:&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/lxc/lxc/blob/a5e32dabc641ab5e8a04b3359bb2c61895684b77/src/lxc/start.c#L860">lxc_init 함수를 통해 lxc를 초기화 할때 cgroup_init을 호출한다.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/lxc/lxc/blob/97592484fa8f16fb354322b4b6c727450868a8f9/src/lxc/namespace.c#L38">lxc 는 권한 문제에서 자유로우면서도 안전하게 동작시키기 위해 lxc_namespace_t 를 추가로 선언해서 관리한다.&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="docker는-lxc를-사용하는가">Docker는 LXC를 사용하는가?&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://hwan-shell.tistory.com/116">docker와 container 차이 설명글&lt;/a>&lt;/li>
&lt;li>위 글에 따르면, libcontainer를 별도로 사용한다.&lt;/li>
&lt;li>궁금점 : 그러면 lxc는 아무도 사용안하나?
&lt;ul>
&lt;li>나는 지금 메인은 도커와 containerd 라고 생각하는데 containerd 도 &lt;a href="https://github.com/containerd/cgroups">cgroup을 사용하기 위한 별도의 구현체&lt;/a> 가 있는 것으로 보아, 의존성 없이 kernel의 cgroup과 namespace을 직접 사용하는 것 같다.&lt;/li>
&lt;li>lxc는 &lt;a href="https://ubuntu.com/server/docs/containers-lxd">ubuntu lxd&lt;/a> 쪽에서만 자료가 좀 나온다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>devops</title><link>https://minuk.dev/wiki/devops/</link><pubDate>Sat, 02 Jul 2022 03:26:27 +0900</pubDate><guid>https://minuk.dev/wiki/devops/</guid><description>devops 공부 자료</description></item><item><title>Supply and Demand</title><link>https://minuk.dev/wiki/ringle/supply-and-demand/</link><pubDate>Wed, 01 Jun 2022 16:24:23 +0900</pubDate><guid>https://minuk.dev/wiki/ringle/supply-and-demand/</guid><description>5월 23일 링글 수업</description></item><item><title>ringle/The metaverse</title><link>https://minuk.dev/wiki/ringle/the-metaverse/</link><pubDate>Wed, 01 Jun 2022 16:00:47 +0900</pubDate><guid>https://minuk.dev/wiki/ringle/the-metaverse/</guid><description>&lt;ul>
&lt;li>5월 9일날 한걸 이제야 정리하고 있네&lt;/li>
&lt;/ul>
&lt;h2 id="feedback">Feedback&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>누구가의 입장에서 생각할때 perspective&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Because the Metaverse growth is too impressive recently:&lt;/p>
&lt;ul>
&lt;li>Metaverse&amp;rsquo;s growth has been too crazy (or wild) recently:
&lt;ul>
&lt;li>과거부터 최근까지 빠르게 성장하고 있는 것이므로 has been&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>unreasonable - very impressive&lt;/li>
&lt;li>all show with nothing to back it up:
&lt;ul>
&lt;li>lots of smoke but no fire&lt;/li>
&lt;li>all talk, no action, &amp;ldquo;that&amp;rsquo;s a lot of hot air&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Too fast growth, the investment is too high:&lt;/p></description></item><item><title>ringle/Microsoft x Activision Blizzard</title><link>https://minuk.dev/wiki/ringle/microsoft-x-activision-blizzard/</link><pubDate>Wed, 25 May 2022 05:15:40 +0900</pubDate><guid>https://minuk.dev/wiki/ringle/microsoft-x-activision-blizzard/</guid><description>5월 5일 링글 수업 복습</description></item><item><title>topcit 간략 공부</title><link>https://minuk.dev/wiki/topcit/</link><pubDate>Fri, 20 May 2022 22:27:18 +0900</pubDate><guid>https://minuk.dev/wiki/topcit/</guid><description>topcit 자료를 정리하면서 공부</description></item><item><title>구글 엔지니어는 이렇게 일한다</title><link>https://minuk.dev/wiki/software-engineering-at-google/</link><pubDate>Sat, 14 May 2022 08:01:10 +0900</pubDate><guid>https://minuk.dev/wiki/software-engineering-at-google/</guid><description>책 정리</description></item><item><title>k8s-in-rpi</title><link>https://minuk.dev/wiki/k8s-in-rpi/</link><pubDate>Tue, 03 May 2022 02:11:00 +0900</pubDate><guid>https://minuk.dev/wiki/k8s-in-rpi/</guid><description>라즈베리파이에서 k8s 자습하기</description></item><item><title>kubernetes</title><link>https://minuk.dev/wiki/kubernetes/</link><pubDate>Tue, 03 May 2022 02:09:39 +0900</pubDate><guid>https://minuk.dev/wiki/kubernetes/</guid><description>k8s 관련 공부 모음</description></item><item><title>수치해석</title><link>https://minuk.dev/wiki/lectures/numerical_analysis/</link><pubDate>Thu, 21 Apr 2022 00:32:34 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/numerical_analysis/</guid><description>2022-1학기 수치해석을 가장한 그래픽스</description></item><item><title>2022-1 정보보호이론</title><link>https://minuk.dev/wiki/lectures/information_security_theory/</link><pubDate>Mon, 18 Apr 2022 08:59:34 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/information_security_theory/</guid><description>2022-1 정보보호이론 정리노트</description></item><item><title>제텔카스텐</title><link>https://minuk.dev/wiki/%EC%A0%9C%ED%85%94%EC%B9%B4%EC%8A%A4%ED%85%90/</link><pubDate>Sat, 09 Apr 2022 03:20:06 +0900</pubDate><guid>https://minuk.dev/wiki/%EC%A0%9C%ED%85%94%EC%B9%B4%EC%8A%A4%ED%85%90/</guid><description>제텔카스텐과 관련된 것들을 저장하는 곳</description></item><item><title>링글/Autonomous</title><link>https://minuk.dev/wiki/%EB%A7%81%EA%B8%80/autonomous/</link><pubDate>Tue, 05 Apr 2022 16:26:34 +0900</pubDate><guid>https://minuk.dev/wiki/%EB%A7%81%EA%B8%80/autonomous/</guid><description>&lt;ul>
&lt;li>내가 말한 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="Honestly,%20I%20choose%20this%20topic%20more%20-%20this%20topic%20is%20more%20technical,%20and%20after%20I%20choose%20it,%20I%20acknowledget%20it%20-%20it%27s%20not%20only%20technical,%20it%27s%20more%20complext%20topic.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>Honestly, I choose this topic more - this topic is more technical, and after I choose it, I acknowledget it - it&amp;#39;s not only technical, it&amp;#39;s more complext topic.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>자체 피드백:
&lt;ul>
&lt;li>말을 너무 많이 더듬었다.&lt;/li>
&lt;li>지난번 총평과 이번 총평 두번 다 말을 하기 전에 천천히 생각하고 어느 정도 문장을 완성한다음에 말하라고 하는 피드백이 있었으니 좀 더 천천히 말하자.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>내가 말한 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="When%20I%20sawed%20question%20-%20question%206,%20it%27s%20comparing%20the%20value%20of%20human%20life%20and%20the%20life%20on,%20and%20animla.%20When%20I%20saw%20it,%20I%20am%20so%20surpised,%20because%20I%20haven%27t%20-%20don%27t%20think%20about%20it.%20Did%20I%20make%20a%20mistake?">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>When I sawed question - question 6, it&amp;#39;s comparing the value of human life and the life on, and animla. When I saw it, I am so surpised, because I haven&amp;#39;t - don&amp;#39;t think about it. Did I make a mistake?&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>첨삭 받은 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>When I saw question 6, I was taken aback by its gravity; comparing the value of human lives and animal ones is an intense converation. I hadn&amp;#39;t considered that it would be a part of the lesson content. I thought: Did I make a mistake?&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>saw를 말할때 -ed 발을을 했다는게 놀라웠다. 그리고 여전히 말을 더듬고 있다. 심지어 haven&amp;rsquo;t라고 뱉어놓고 didn&amp;rsquo;t 로 고치고 있다. 고등학생이 되기 전까지 말을 정말 많이 더듬으면서 말했던 걸로 기억하는데, 영어에서도 이 문제를 겪을줄 몰랐다. 고등학교때는 말을 엄청나게 많이 해서 일단 아무 말이나 내뱉어도 이어서 말할 수 있도록 순간 대응력을 늘리는 것을 목표로 연습해서 이를 고쳤던것 같은데.. 쉽지 않을 것 같다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>내가 말한 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="When%20I%20learn%20the%20AI%20-%20i%27m%20-%20I%20didn%27t%20think%20the%20AI%20is%20nearly%20intelligence,%20because%20it%27s%20only%20the%20think,%20just%20make%20it%20with%20mathematic,%20and%20people%20said%20machine%20can%20be%20learning%20but%20I%20don%27t%20think%20machine%20learning%20is%20really%20learning%20because%20it%20is%20-%20it%27s%20very%20different%20to%20comparing%20to%20teaching%20our%20kid%20-%20it%27s%20just%20mathematic%20and%20calculus,%20it%27s%20based%20on%20only%20calculus.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>When I learn the AI - i&amp;#39;m - I didn&amp;#39;t think the AI is nearly intelligence, because it&amp;#39;s only the think, just make it with mathematic, and people said machine can be learning but I don&amp;#39;t think machine learning is really learning because it is - it&amp;#39;s very different to comparing to teaching our kid - it&amp;#39;s just mathematic and calculus, it&amp;#39;s based on only calculus.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>첨삭 받은 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>AI is popular understood as a learning machine. I am skeptical: I don&amp;#39;t think machine learning resembles anything beyound a mathematical approximation of the process. A machine that is &amp;#39;learning&amp;#39; in the sense that we use it now undergoes very different stressors, inputs, and experiences than the education of a human child. Its world is all mathematics and calculus; it&amp;#39;s based only on calculus.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>부정형으로 말할때, be동사, do/does/did, have/has/had 를 말할때 엄청 틀린다. 어떻게 해야지 자연스럽게 나올까?&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>내가 말한 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="I%20learned%20that.%20I%27m%20participated%20in%20Google%20AI%20contest%20in%20maybe%202018%20or%2019,%20in%20Summer,%20they%20-%20the%20contest%20aksed%20to%20us%20just%20categorizing%20cat%20and%20dog.%20And%20second%20problem%20is%20predicting%20other%20surface%20of%20the%20car%20-%20they%20just%20-%20this%20[]%20has%20just%20one%20side%20of%20car,%20and%20predicting%20the%20other%20side.%20I%27m%20not%20-%20I%20didn%27t%20win%20a%20prize%20but%20the%20experience%20is%20surely%20valuable.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>I learned that. I&amp;#39;m participated in Google AI contest in maybe 2018 or 19, in Summer, they - the contest aksed to us just categorizing cat and dog. And second problem is predicting other surface of the car - they just - this [] has just one side of car, and predicting the other side. I&amp;#39;m not - I didn&amp;#39;t win a prize but the experience is surely valuable.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>첨삭받은 문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="In%20the%20summer%20of%202018%20or%2019,%20I%20participated%20in%20the%20Google%20AI%20contest.%20They%20provided%20us%20with%20two%20problems;%20the%20first%20was%20easy.%20We%20were%20to%20categorize%20cats%20and%20dogs.%20The%20second%20problem%20was%20not%20so%20simple.%20We%20were%20to%20predict%20the%20alternate/opposite%20side%20of%20a%20car%20given%20data%20about%20the%20surface%20of%20one%20of%20the%20sides.%20While%20I%20didn%27t%20win%20a%20prize,%20i%20am%20certainly%20grateful%20to%20have%20had%20the%20experience.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>In the summer of 2018 or 19, I participated in the Google AI contest. They provided us with two problems; the first was easy. We were to categorize cats and dogs. The second problem was not so simple. We were to predict the alternate/opposite side of a car given data about the surface of one of the sides. While I didn&amp;#39;t win a prize, i am certainly grateful to have had the experience.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>
&lt;p>시간을 제일 처음에 말하려고 노력하자. 지금까지 시간이 들어가있는 문장들은 모조리 제일 처음에 시간을 말하도록 첨삭받았다.&lt;/p></description></item><item><title>링글/Metaverse</title><link>https://minuk.dev/wiki/%EB%A7%81%EA%B8%80/metaverse/</link><pubDate>Thu, 31 Mar 2022 13:26:34 +0900</pubDate><guid>https://minuk.dev/wiki/%EB%A7%81%EA%B8%80/metaverse/</guid><description>&lt;ul>
&lt;li>내가 말한문장&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="First,%20in%20the%20past,%20AI%20-%20maching%20learning%20was%20introduced%20in%201980s,%20but%20computer%20was%20not%20good,%20so%20-%20[]%20baybe,%20but%20there%20is%20no%20hardware.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>First, in the past, AI - maching learning was introduced in 1980s, but computer was not good, so - [] baybe, but there is no hardware.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>첨삭 내용&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="In%20the%201980s,%20machine%20learning%20was%20introduced,%20but%20the%20necessary%20hardware%20to%20test%20it%20at%20scale%20was%20not%20sufficient.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>In the 1980s, machine learning was introduced, but the necessary hardware to test it at scale was not sufficient.&lt;/code>&lt;/pre>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="In%20the%201980s,%20machine%20learning%20was%20theoretically%20possible,%20but%20the%20extent%20hardware%20of%20the%20time%20could%20not%20match%20those%20theoretical%20requirements.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>In the 1980s, machine learning was theoretically possible, but the extent hardware of the time could not match those theoretical requirements.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>
&lt;p>첨삭에 대한 내 생각:&lt;/p></description></item><item><title>algorithm</title><link>https://minuk.dev/wiki/algorithm/</link><pubDate>Thu, 31 Mar 2022 11:17:20 +0900</pubDate><guid>https://minuk.dev/wiki/algorithm/</guid><description>알고리즘 관련</description></item><item><title>study-note</title><link>https://minuk.dev/wiki/study-note/</link><pubDate>Thu, 31 Mar 2022 11:14:42 +0900</pubDate><guid>https://minuk.dev/wiki/study-note/</guid><description>공부한거 모아두기</description></item><item><title>2022 1학기 머신러닝</title><link>https://minuk.dev/wiki/lectures/machine-learning/</link><pubDate>Sun, 06 Mar 2022 16:12:45 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/machine-learning/</guid><description>2022 1학기 머신러닝</description></item><item><title>Kubernetes in action</title><link>https://minuk.dev/wiki/kubernetes-in-action/</link><pubDate>Mon, 31 Jan 2022 04:38:12 +0900</pubDate><guid>https://minuk.dev/wiki/kubernetes-in-action/</guid><description>쿠버네티스 ebook 읽으면서 대충 정리</description></item><item><title>Effective Java</title><link>https://minuk.dev/wiki/effective-java/</link><pubDate>Sun, 26 Dec 2021 17:48:34 +0900</pubDate><guid>https://minuk.dev/wiki/effective-java/</guid><description>Effective Java 책 정리</description></item><item><title>Kafka</title><link>https://minuk.dev/wiki/kafka/</link><pubDate>Mon, 13 Dec 2021 16:07:50 +0900</pubDate><guid>https://minuk.dev/wiki/kafka/</guid><description>&lt;h2 id="kafka">Kafka&lt;/h2>
&lt;ul>
&lt;li>Apache Kafka is an event streaming platform&lt;/li>
&lt;li>publish-subscribe model(producer, consumer, broker)&lt;/li>
&lt;/ul>
&lt;h3 id="topic-partition-offset">Topic, Partition, Offset&lt;/h3>
&lt;ul>
&lt;li>Topic : 특정 스트림 데이터이며, 카프카 클러스터에서 데이터를 관리할 때 기준이 된다.:
&lt;ul>
&lt;li>Similar to a table in a database (without all the constraints)&lt;/li>
&lt;li>원하는 수만큼 토픽을 만들 수 있다.&lt;/li>
&lt;li>토픽의 구별자는 토픽의 이름이다.&lt;/li>
&lt;li>토픽은 파티션으로 나누어 처리되며, 각 파티션은 순서가 있고, 각각의 파티션 내 메시지는 offset이라는 단위로 고유 id가 증가한다.:&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Parition : 각 토픽 당 데이터를 분산처리하는 단위. 카프카에서는 토픽 안에서 파티션을 나누어 그 수대로 데이터를 분산처리 한다. 카프카 옵션에서 지정한 replica의 수만큼 파티션이 각 서버들에게 복제된다.&lt;/li>
&lt;li>offset은 특정 partition에서만 의미가 있으며 순서 또한 파티션 내에서만 보장된다.&lt;/li>
&lt;li>데이터의 기본 보존 주기는 7일이고 log.retention.hours 설정을 통해서 변경 가능하다.&lt;/li>
&lt;li>데이터가 특정 파티션에 쓰여지게 된다면 절대 변경되지 않는다.&lt;/li>
&lt;li>특정 키로 파티션을 지정하지 않는다면, 데이터는 랜덤하게 파티션이 지정되어 쓰여진다.&lt;/li>
&lt;/ul>
&lt;h3 id="broker">Broker&lt;/h3>
&lt;ul>
&lt;li>Kafka Cluster 는 여러대의 broker로 구성된다.&lt;/li>
&lt;li>각 broker는 고유한 id로 구분되며, 특정한 topic partition을 포함한다.&lt;/li>
&lt;li>bootstrap broker라 불리는 어떤 broker에나 연결이 된다면, 전체 클러스터에 연결된 것이다.&lt;/li>
&lt;li>일반적으로 3개의 broker로 운영을 하는게 이상적이지만 규모에 따라서 여러개로 늘릴 수 있다.&lt;/li>
&lt;li>Replication Factor:
&lt;ul>
&lt;li>Kafka topic 파티션의 Replication Factor(RF)는 broker 설정 중 &lt;code>offsets.topic.replication.factor&lt;/code>에 의해 결정 된다. 기본값은 3으로, 하나의 파티션이 총 3개로 분산되어 저장된다.&lt;/li>
&lt;li>1개의 broker만이 특정 파티션의 leader가 될 수 있고, leader만이 해당 파티션의 데이터를 송수신 가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="producer">Producer&lt;/h3>
&lt;ul>
&lt;li>Producer는 topic에 데이터를 write한다.&lt;/li>
&lt;li>Producer는 데이터를 쓸때 어떤 브로커와 파티션에 데이터를 write할지 알고 있다.&lt;/li>
&lt;li>Producer는 데이터를 write 할 때의 receive acknowledgment를 선택할 수 있다.:
&lt;ul>
&lt;li>acks=0 : Producer는 acknowledgement 를 기다리지 않음&lt;/li>
&lt;li>acks=1 : producer는 leader acknowledgment를 기다렸다가 다음 액션을 한다.&lt;/li>
&lt;li>acks=all : leader + ISR acknowledgment를 모두 기다린다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Message keys:
&lt;ul>
&lt;li>Producer는 메시지 데이터와 함께 key를 선택하여 보낼 수 있다.&lt;/li>
&lt;li>key=null 이라면, 데이터는 라운드로빈 동작으로 브로커에 순차적으로 데이터를 송신한다.&lt;/li>
&lt;li>key를 지정하여 데이터를 송신하면, 해당 key로 보내지는 데이터는 항상 같은 파티션으로 보내진다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="consumer--consumer-group">Consumer &amp;amp; Consumer Group&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Consumer는 topic에 있는 데이터를 read한다.&lt;/p></description></item><item><title>면접 준비 자료</title><link>https://minuk.dev/wiki/%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84/</link><pubDate>Tue, 07 Dec 2021 20:32:41 +0900</pubDate><guid>https://minuk.dev/wiki/%EB%A9%B4%EC%A0%91%EC%A4%80%EB%B9%84/</guid><description>&lt;h2 id="devops">DevOps&lt;/h2>
&lt;ul>
&lt;li>참고 자료:
&lt;ul>
&lt;li>&lt;a href="https://oain.tistory.com/155">https://oain.tistory.com/155&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>ISP : Interset Service Provider&lt;/li>
&lt;li>DHCP : Dynamic Host Configuration Protocol&lt;/li>
&lt;li>Router&lt;/li>
&lt;li>Subnet : Network Class, CIDR 참고&lt;/li>
&lt;li>CIDR : Classless Inter-Domain Routing&lt;/li>
&lt;li>Gateway&lt;/li>
&lt;li>DNS : Domain Name System&lt;/li>
&lt;li>TLD Server : Top Level Domain Server&lt;/li>
&lt;li>ARP : Address Resolution Protocol&lt;/li>
&lt;li>AP : Access Point&lt;/li>
&lt;li>Broadcast, Unicast, Multicast&lt;/li>
&lt;li>OSI 7 Layer : Physical - Data Link - Network - Transport - Session - Presentation - Application&lt;/li>
&lt;li>TCP : Transmission Control Protocol:
&lt;ul>
&lt;li>3 way handshake&lt;/li>
&lt;li>4 way handshake&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>UDP : User Datagram Protocol&lt;/li>
&lt;li>HTTP : HyperText Transfer Protocol:
&lt;ul>
&lt;li>GET, POST&lt;/li>
&lt;li>Session, Cookie&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>TLS/SSL&lt;/li>
&lt;li>socket&lt;/li>
&lt;li>segment&lt;/li>
&lt;li>Memory:
&lt;ul>
&lt;li>static segment : code, data&lt;/li>
&lt;li>dynamic segment : heap, stack&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Thread, Process&lt;/li>
&lt;li>Lock:
&lt;ul>
&lt;li>Semaphore, Mutex, Spin-lock&lt;/li>
&lt;li>Deadlock, Livelock&lt;/li>
&lt;li>Critical Section, Race condition&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sychronous, Asynchronous&lt;/li>
&lt;li>Concurrency, Parallelism&lt;/li>
&lt;li>WAL, Shadow paging&lt;/li>
&lt;li>Prometheus : 메트릭 정보를 수집하여 시스템을 모니터링 하고 Alerting을 지원하는 오픈소스:
&lt;ul>
&lt;li>Data Model:
&lt;ul>
&lt;li>Metric name : ex) http_requests_total&lt;/li>
&lt;li>Label : (key, value), ex) method=&amp;ldquo;POST&amp;rdquo;, handler=&amp;quot;/messages&amp;quot;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Job : 확장성이나 안정성을 위해 복제된 동일한 인스턴스의 모음&lt;/li>
&lt;li>Instance : 스크랩할 수 있는 엔드포인트 (수집 당하는 곳), 일반적으로 단일 프로세스&lt;/li>
&lt;li>Recording Rule&lt;/li>
&lt;li>Storage:
&lt;ul>
&lt;li>기본적으로 on-disk 의 시계열 DB를 포함하고 있다.&lt;/li>
&lt;li>remote storage 도 허용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>InfluxDB : push 방식의 시계열 db&lt;/li>
&lt;li>Grafana : 시계열 매트릭 데이터를 시각화 하는데 최적화된 대시보드를 제공해주는 툴킷&lt;/li>
&lt;li>Argo : Kubernetes 용 CI 툴&lt;/li>
&lt;li>Kubernetes : 추후 공부&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aws-서비스-종류">AWS 서비스 종류&lt;/h2>
&lt;ul>
&lt;li>EC2 : Elastic Computer Cloud&lt;/li>
&lt;li>Resource Group : 리소스 묶어서 자동화하는 서비스&lt;/li>
&lt;li>VPC&lt;/li>
&lt;li>RDS : Relational Database Service&lt;/li>
&lt;li>ECR : Elastic Container Registry&lt;/li>
&lt;li>ECS : Elastic Container Service&lt;/li>
&lt;li>IAM : Identity and Access Management&lt;/li>
&lt;li>EKS : Elastic Kubernetes Service&lt;/li>
&lt;li>GWLD : Gateway Load Balancer Endpointer&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="linux">Linux&lt;/h2>
&lt;ul>
&lt;li>Directory
&lt;ul>
&lt;li>&lt;code>/etc&lt;/code> : global configuration&lt;/li>
&lt;li>&lt;code>/usr&lt;/code> : 대부분의 프로그램들(기본적인거 제외)&lt;/li>
&lt;li>&lt;code>/dev&lt;/code> : device information&lt;/li>
&lt;li>&lt;code>/proc&lt;/code> : process information, hardware information&lt;/li>
&lt;li>&lt;code>/var&lt;/code> : variable files(log, cache)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="cs-기본">CS 기본&lt;/h2>
&lt;h3 id="컴퓨터-구조">컴퓨터 구조&lt;/h3>
&lt;ul>
&lt;li>RISC pipeline : IF(Instruction Fetch) - ID(Instruction Decode) - EX (Instruction Execute) - MEM (Memory Access) - WB(Write Back)&lt;/li>
&lt;li>Cache : L1(CPU 내부), L2(CPU - RAM 사이), L3(메인보드?)&lt;/li>
&lt;/ul>
&lt;h3 id="데이터베이스">데이터베이스&lt;/h3>
&lt;ul>
&lt;li>Candidate Key : Tuple 을 유일하게 식별하기 위해 사용하는 속성들의 부분집합:
&lt;ul>
&lt;li>유일성, 최소성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Primary Key : 후보키 중 성택한 Main Key&lt;/li>
&lt;li>Alternate Key&lt;/li>
&lt;li>Super Key: 유일성은 만족, 최소성은 만족하지 못하는 키&lt;/li>
&lt;li>Foreign Key&lt;/li>
&lt;li>JOIN:
&lt;ul>
&lt;li>INNER JOIN : 교집합을 join (join 안되는건 버림)&lt;/li>
&lt;li>LEFT OUTER JOIN : 왼쪽을 기준으로 (왼쪽을 기준으로 join 한다.)&lt;/li>
&lt;li>RIGHT OUTER JOIN : 오른쪽을 기준으로&lt;/li>
&lt;li>FULL OUTER JOIN : 그냥 둘다 다 나오도록&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NF:
&lt;ul>
&lt;li>1NF : 테이블 칼럼이 원자값을 갖도록 테이블을 분리시킨 것&lt;/li>
&lt;li>2NF : 테이블의 모든 컬럼이 오나전 함수 종속을 만족해야 한다.&lt;/li>
&lt;li>3NF : 이행적 함수 종속이 없어진 것&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ACID:
&lt;ul>
&lt;li>Atomicity, Consistency, Isolation Durability&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Isolation Level:
&lt;ul>
&lt;li>Read Uncommitted (Level 0)&lt;/li>
&lt;li>Read Committed (Level 1)&lt;/li>
&lt;li>Repeatable Read (Level 2)&lt;/li>
&lt;li>Serializable (Level 3)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dirty Read, Non-Repeatable Read, Phantom Read:
&lt;ul>
&lt;li>Dirty Read : 커밋되지 않은 수정중인 데이터를 다른 트랜잭션에서 읽을 수 있도록 허용할 때 발생하는 현상&lt;/li>
&lt;li>Non-Repeatable Read : 한 트랜잭션에서 같은 쿼리를 두 번 수행할 때 그 사이에 다른 트랜잭션 값을 수정 또는 삭제하면서 두 쿼리의 결과가 상이하게 나타나는 일관성이 꺠진 현상&lt;/li>
&lt;li>Phantom Read : 한 트랜잭션 안에서 일정 범위의 레코드를 두 번 이상 읽었을 때, 첫번째 쿼리에서 없던 레코드가 두번째 쿼리에서 나타나는 현상&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="디자인-패턴">디자인 패턴&lt;/h3>
&lt;ul>
&lt;li>SOLID:
&lt;ul>
&lt;li>Single Responsibility Principle&lt;/li>
&lt;li>Open-Close Principle&lt;/li>
&lt;li>Liskov Substitution Principle&lt;/li>
&lt;li>Interface Segregation Principle&lt;/li>
&lt;li>Dependency Inversion Property&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>패턴의 분류:
&lt;ul>
&lt;li>Creational Pattern : Factory Method, Abstract Factory, Builder, Prototype, Singleton&lt;/li>
&lt;li>Structural Pattern : Adapter, Bridge, Composite, Decorator, Facde, Flyweight, Proxy&lt;/li>
&lt;li>Behavioral Pattern : Chain of Responsibility, Command, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method, Visitor&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="java">Java&lt;/h3>
&lt;ul>
&lt;li>GC (Garbage Collection):
&lt;ul>
&lt;li>Reference Counting&lt;/li>
&lt;li>Mark and Sweep&lt;/li>
&lt;li>Generational Garbase Collection:
&lt;ul>
&lt;li>Young : Eden, Survivor&lt;/li>
&lt;li>Old : Serial GC(mark-sweep-compact), Parallel GC(=Throughput GC), Parallel Old GC, CMS GC, G1 GC&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Vector vs ArrayList:
&lt;ul>
&lt;li>Vector : 동기식, 한 쓰레드가 벡터 작업중이면 다른 스레드가 벡터 보유 불가능&lt;/li>
&lt;li>ArrayList : 비동기식, 여러 쓰레드 동시 작업 가능&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>String vs String Buffer:
&lt;ul>
&lt;li>String : Immutable&lt;/li>
&lt;li>StringBuilder : 동기화 지원 X&lt;/li>
&lt;li>StringBuffer : 동기화 지원&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Serialization&lt;/li>
&lt;li>JVM Memory:
&lt;ul>
&lt;li>Method Area : Byte code, Global variable, Static variable&lt;/li>
&lt;li>Stack&lt;/li>
&lt;li>Heap&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Java 실행 순서:
&lt;ul>
&lt;li>java - (compiler) -&amp;gt; bytecode&lt;/li>
&lt;li>bytecode -&amp;gt; Class Loader:
&lt;ul>
&lt;li>로드-검증-준비-분석-초기화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>실행엔진:
&lt;ul>
&lt;li>인터프린터&lt;/li>
&lt;li>JIT(Just-In-Time Compiler)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>JAVA Stream:
&lt;ul>
&lt;li>&lt;code>filter()&lt;/code>, &lt;code>distinct()&lt;/code>, &lt;code>limit()&lt;/code>, &lt;code>skip()&lt;/code>, &lt;code>map()&lt;/code>, &lt;code>flatmap()&lt;/code>&lt;/li>
&lt;li>&lt;code>allMatch()&lt;/code>, &lt;code>anyMatch()&lt;/code>, &lt;code>noneMatch()&lt;/code>, &lt;code>findAny()&lt;/code>, &lt;code>findFirst()&lt;/code>, &lt;code>reduct()&lt;/code>, &lt;code>collect()&lt;/code>, &lt;code>forEach()&lt;/code>, &lt;code>count&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="python">Python&lt;/h3>
&lt;ul>
&lt;li>Python의 주요 특징 : 인터프린터, 동적 타이핑 언어&lt;/li>
&lt;li>list vs tuple : list는 데이터를 변경 가능, tuple은 데이터 변경 불가능&lt;/li>
&lt;li>3항 연산자 : [Returning Value on True] if [Conditional Statement] else [Returning Value on False]&lt;/li>
&lt;li>리스트에서 음수 인덱스를 사용하면 : 오른쪽부터 검색 시작 (-1은 오른쪽 첫번째 원소)&lt;/li>
&lt;li>변수나 함수 식별자 길이 제한 : 딱히 없는데 어짜피 80자 제한 걸림&lt;/li>
&lt;li>pass : 문법적으로 아무것도 안쓸수 없어서&lt;/li>
&lt;li>파이썬의 단점 : 속도, 동적 타이핑&lt;/li>
&lt;li>현재 작업중인 디렉토리 : &lt;code>os.getcwd()&lt;/code>&lt;/li>
&lt;li>built-in method : &lt;code>complex()&lt;/code>, &lt;code>eval()&lt;/code>, &lt;code>filter()&lt;/code>, &lt;code>format()&lt;/code>, &lt;code>hash()&lt;/code>, &lt;code>hex()&lt;/code>, &lt;code>len()&lt;/code>, &lt;code>open()&lt;/code>, &lt;code>min()&lt;/code>, &lt;code>max()&lt;/code>, &lt;code>abs()&lt;/code>, &lt;code>sum()&lt;/code>&lt;/li>
&lt;li>중복값 제거 : set으로 만들고 다시 변환&lt;/li>
&lt;li>// : 정수 나누기, % : 나머지, ** : 제곱값&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="기본적인-언어지식">기본적인 언어지식&lt;/h3>
&lt;ul>
&lt;li>Overloading vs Overriding:
&lt;ul>
&lt;li>Overloading : 매개변수 다름&lt;/li>
&lt;li>Overriding : 상속&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Generic&lt;/li>
&lt;li>접근 지정자:
&lt;ul>
&lt;li>public, protected, default, private&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Call by Value vs Call by Reference&lt;/li>
&lt;li>C++ 컴파일 과정:
&lt;ul>
&lt;li>전처리 - 컴파일 - 어셈블 - 링크 - 실행&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="spring">Spring&lt;/h2>
&lt;ul>
&lt;li>Dispatcher-Servlet:
&lt;ul>
&lt;li>서블릿 컨테이너에서 HTTP 프로토콜을 통해 들어오는 모든 요청을 제일 앞에서 처리해주는 프론트 컨트롤러&lt;/li>
&lt;li>서버가 요청을 받기전, 공통 처리 작업을 dispatcher-servlet에서 하고 controller로 작업을 위임해준다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dependency Injection:
&lt;ul>
&lt;li>@Resource: 이름 -&amp;gt; 타입 -&amp;gt; @Qaulifier&lt;/li>
&lt;li>@Autowired : 타입 -&amp;gt; 이름 -&amp;gt; @Qualifier&lt;/li>
&lt;li>@Inject : 타입 -&amp;gt; @Qualifier -&amp;gt; 이름&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AOP(Aspect Oriented Programming):
&lt;ul>
&lt;li>공통의 관심 사항을 적용해서 발생하는 의존 관계의 복잡성과 코드 중복을 해소해준다.&lt;/li>
&lt;li>각 클래스에서 공통 관심 사항을 구혀한 모듈에 대한 의존 관계를 갖기 보단, Aspect를 이용해 핵심 로직을 구현한 각 클래스에 공통 기능을 적용한다.&lt;/li>
&lt;li>대표적으로 웹 애플리케이션의 보안, 로깅, 트랜잭션과 같은 공통 관심 사항을 AOP를 이용해 간단한게 적용할 수 있다.&lt;/li>
&lt;li>용어:
&lt;ul>
&lt;li>Advice : 언제 공통 관심기능을 핵심 로직에 적용할지 정의&lt;/li>
&lt;li>Jointpoint : Advice를 적용이 가능한 지점을 의미 (before, after 등등)&lt;/li>
&lt;li>Pointcut : Joinpoint의 부분집합으로, 실제로 Advice가 적용되는 Jointpoint를 나타냄&lt;/li>
&lt;li>Weaving : Advice를 핵심 로직코드에 적용하는 것&lt;/li>
&lt;li>Aspect : 여러 객체에 공통으로 적용되는 공통 관심 사항&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DAO(Data Access Object):
&lt;ul>
&lt;li>DB에 데이터를 조회하거나 조작하는 기능들을 전담한다.&lt;/li>
&lt;li>Mybatis를 이용할때 mapper 클래스에서 쿼리를 받아와 DAO에게 넘겨주는 식으로 구현한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="면접-질문-위주">면접 질문 위주&lt;/h1>
&lt;ul>
&lt;li>질문 참고 : &lt;a href="https://new-blue.tistory.com/33">https://new-blue.tistory.com/33&lt;/a>&lt;/li>
&lt;li>가장 인상적이었던 경험:







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%a0%9c%ea%b0%80%20xx%ec%97%90%ec%84%9c%20%ec%9d%bc%ec%9d%84%20%ed%95%a0%20%eb%95%8c%20%ec%a0%9c%ea%b0%80%20%ec%b2%98%ec%9d%8c%eb%b6%80%ed%84%b0%20%ea%b0%9c%eb%b0%9c%ed%95%98%ec%a7%80%20%ec%95%8a%ec%9d%80,%20%ec%9d%b4%eb%af%b8%20%ec%82%ac%ec%9a%a9%ec%9e%90%eb%93%a4%ec%9d%b4%20%ec%82%ac%ec%9a%a9%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8a%94%20%ec%84%9c%eb%b9%84%ec%8a%a4%eb%a5%bc%20%eb%b0%b0%ed%8f%ac%ed%95%b4%eb%b3%bc%20%ea%b2%bd%ed%97%98%ec%9d%b4%20%ec%9e%88%ec%97%88%ec%8a%b5%eb%8b%88%eb%8b%a4.%20%ec%82%ac%ec%8b%a4%20%eb%b0%b0%ed%8f%ac%ed%95%98%ea%b8%b0%20%ec%a0%84%ec%97%90%eb%8a%94%20%ec%9c%a0%eb%8b%9b%ed%85%8c%ec%8a%a4%ed%8a%b8%eb%8f%84%20%ec%b6%a9%eb%b6%84%ed%9e%88%20%eb%8f%8c%eb%a6%ac%ea%b3%a0%20%ed%85%8c%ec%8a%a4%ed%8a%b8%20%ec%84%9c%eb%b2%84%ec%97%90%ec%84%9c%20%ea%b0%9c%eb%b0%9c%ec%9e%90%eb%93%a4%ec%9d%b4%202%ec%a3%bc%ec%a0%95%eb%8f%84%20%ec%82%ac%ec%9a%a9%ed%95%b4%eb%b3%b8%20%ec%83%81%ed%99%a9%ec%9d%b4%eb%9d%bc%20%eb%b2%84%ea%b7%b8%ea%b0%80%20%ec%97%86%ec%9d%84%20%ea%b2%83%ec%9d%b4%eb%9d%bc%ea%b3%a0,%20%ec%9e%88%ec%96%b4%eb%8f%84%20%ed%81%ac%eb%a6%ac%ed%8b%b0%ec%bb%ac%ed%95%98%ec%a7%80%20%ec%95%8a%ec%9d%84%20%ea%b2%83%ec%9d%b4%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%20%ed%95%98%ea%b3%a0%20%ec%9e%88%ec%97%88%eb%8a%94%eb%8d%b0%20%eb%b0%b0%ed%8f%ac%eb%a5%bc%20%ec%8b%a4%ec%a0%9c%eb%a1%9c%20%ed%95%b4%eb%b3%b4%eb%8b%88%20%eb%ac%b8%ec%9e%90%ec%97%b4%20%ec%9d%b8%ec%bd%94%eb%94%a9%20%eb%ac%b8%ec%a0%9c%20%eb%95%8c%eb%ac%b8%ec%97%90%20%ed%99%88%ed%8e%98%ec%9d%b4%ec%a7%80%ea%b0%80%20%ec%97%89%eb%a7%9d%ec%9d%b4%20%eb%90%98%ec%97%88%ec%97%88%ec%8a%b5%eb%8b%88%eb%8b%a4.%20%ec%98%88%ec%83%81%ec%b9%98%20%eb%aa%bb%ed%96%88%eb%8d%98%20%eb%b2%84%ea%b7%b8%ec%98%80%ea%b3%a0,%20%ed%99%98%ea%b2%bd%ec%9d%84%20%eb%8d%94%20%ec%9e%98%20%ec%a0%90%ea%b2%80%ed%96%88%eb%8b%a4%eb%a9%b4%20%ec%b0%be%ec%9d%84%20%ec%88%98%20%ec%9e%88%ec%97%88%ec%9d%84%20%ea%b2%83%ec%9d%b4%eb%9d%bc%ea%b3%a0%20%ed%9b%84%ed%9a%8c%eb%a5%bc%20%ed%96%88%ec%97%88%ec%8a%b5%eb%8b%88%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>제가 xx에서 일을 할 때 제가 처음부터 개발하지 않은, 이미 사용자들이 사용하고 있는 서비스를 배포해볼 경험이 있었습니다. 사실 배포하기 전에는 유닛테스트도 충분히 돌리고 테스트 서버에서 개발자들이 2주정도 사용해본 상황이라 버그가 없을 것이라고, 있어도 크리티컬하지 않을 것이라고 생각 하고 있었는데 배포를 실제로 해보니 문자열 인코딩 문제 때문에 홈페이지가 엉망이 되었었습니다. 예상치 못했던 버그였고, 환경을 더 잘 점검했다면 찾을 수 있었을 것이라고 후회를 했었습니다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;/li>
&lt;li>가장 많이 성장했던 경험:







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%b5%9c%ea%b7%bc%20%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4%20%eb%a7%88%ec%97%90%ec%8a%a4%ed%8a%b8%eb%a1%9c%eb%9d%bc%eb%8a%94%20%ed%94%84%eb%a1%9c%ea%b7%b8%eb%9e%a8%ec%97%90%20%ec%b0%b8%ec%97%ac%ed%95%b4%ec%84%9c%20%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8%eb%a5%bc%20%ec%a7%84%ed%96%89%ed%95%b4%eb%b3%bc%20%ea%b8%b0%ed%9a%8c%ea%b0%80%20%ec%9e%88%ec%97%87%eb%8a%94%eb%8d%b0,%20%ec%9d%b4%eb%95%8c%20%ea%b0%80%ec%9e%a5%20%eb%a7%8e%ec%9d%b4%20%ec%84%b1%ec%9e%a5%ed%96%88%eb%8d%98%20%ea%b2%83%20%ea%b0%99%ec%8a%b5%eb%8b%88%eb%8b%a4.%20%ec%9d%b4%eb%a1%a0%ec%a0%81%ec%9d%b8%20%ea%b3%b5%eb%b6%80%eb%a5%bc%20%ec%a0%81%ec%9a%a9%ed%95%b4%eb%b3%b4%ec%9e%90%eb%9d%bc%eb%8a%94%20%ec%83%9d%ea%b0%81%ec%9d%84%20%eb%a7%8e%ec%9d%b4%20%ed%95%b4%ec%84%9c%20Kafka,%20Ci/CD%20%ec%9e%90%eb%8f%99%ed%99%94%20%eb%93%b1%20%eb%93%a3%ea%b8%b0%eb%a7%8c%20%ed%96%88%eb%8d%98%20%ea%b2%83%eb%93%a4%ec%9d%84%20%eb%a7%8e%ec%9d%b4%20%ec%a0%81%ec%9a%a9%ed%96%88%ec%97%88%eb%8a%94%eb%8d%b0%20%ec%a0%81%ec%9a%a9%ed%95%98%eb%a9%b4%ec%84%9c%20%ec%83%9d%ea%b0%81%ec%a7%80%20%eb%aa%bb%ed%96%88%eb%8d%98%20%eb%ac%b8%ec%a0%9c%eb%a5%bc%20%eb%a7%8e%ec%9d%b4%20%ea%b2%aa%ea%b3%a0,%20%ea%b3%a0%eb%af%bc%ed%95%b4%eb%b3%bc%eb%a7%8c%ed%95%9c%20%ed%8f%ac%ec%9d%b8%ed%8a%b8%eb%93%a4%ec%9d%84%20%eb%a7%8e%ec%9d%b4%20%eb%b0%b0%ec%9a%b0%ea%b2%8c%20%eb%90%98%ec%96%b4%ec%84%9c%20%ea%b0%80%ec%9e%a5%20%ec%84%b1%ec%9e%a5%ed%96%88%eb%8d%98%20%ea%b2%83%20%ea%b0%99%ec%8a%b5%eb%8b%88%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>최근 소프트웨어 마에스트로라는 프로그램에 참여해서 프로젝트를 진행해볼 기회가 있엇는데, 이때 가장 많이 성장했던 것 같습니다. 이론적인 공부를 적용해보자라는 생각을 많이 해서 Kafka, Ci/CD 자동화 등 듣기만 했던 것들을 많이 적용했었는데 적용하면서 생각지 못했던 문제를 많이 겪고, 고민해볼만한 포인트들을 많이 배우게 되어서 가장 성장했던 것 같습니다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>구체적으로 어떤것을을 고민하게 되었나요? 라는 질문이 들어오면







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="kafka%eb%a5%bc%20%ed%86%b5%ed%95%b4%20%ec%97%ac%eb%9f%ac%20%ec%9b%8c%ec%bb%a4%ec%97%90%ea%b2%8c%20%ec%9d%bc%ec%9d%84%20%eb%b6%84%eb%b0%b0%ed%95%98%ec%97%ac%20%ec%a7%88%ec%9d%98%20%ec%84%b1%eb%8a%a5%ec%9d%84%20%ec%98%ac%eb%a6%ac%eb%8a%94%20%ec%bd%94%eb%93%9c%eb%a5%bc%20%ec%a7%af%ec%97%88%eb%8a%94%eb%8d%b0,%20%ec%a7%88%ec%9d%98%ec%9e%90%eb%8f%84%20%ec%97%ac%eb%9f%ac%eb%aa%85,%20%eb%8b%b5%eb%b3%80%ec%9e%90%eb%8f%84%20%ec%97%ac%eb%9f%ac%eb%aa%85%ec%9d%b8%eb%8d%b0,%20%ec%a7%88%ec%9d%98%ed%95%9c%20%ec%84%9c%eb%b2%84%eb%a1%9c%20%ec%a0%95%ed%99%95%ed%95%98%ea%b2%8c%20%ec%9d%91%eb%8b%b5%ec%9d%84%20aggregation%20%ed%95%b4%ec%a3%bc%ec%96%b4%ec%95%bc%20%ed%96%88%ec%8a%b5%eb%8b%88%eb%8b%a4.%20%ec%9d%b4%eb%95%8c%20kafka%ea%b0%80%20%eb%8b%a8%eb%b0%a9%ed%96%a5%20streaming%ec%97%90%eb%8a%94%20%ec%a0%81%ec%9a%a9%ed%95%98%ea%b8%b0%20%ec%89%ac%ec%9a%b4%eb%8d%b0,%20request-response%20%ec%99%80%20%ea%b0%99%ec%9d%80%20%ec%9a%94%ec%b2%ad%ec%9d%84%20%eb%a7%8c%eb%93%a4%ec%96%b4%ec%95%bc%20%eb%90%98%eb%a9%b4%20response%eb%b6%80%eb%b6%84%ec%9d%b4%20%ec%b2%98%eb%a6%ac%ed%95%98%ea%b8%b0%20%ec%96%b4%eb%a0%b5%eb%8b%a4%eb%9d%bc%eb%8a%94%20%ea%b2%83%ec%9d%84%20%ec%95%8c%ea%b2%8c%20%eb%90%98%ec%97%88%ec%8a%b5%eb%8b%88%eb%8b%a4.%20%ec%b5%9c%ec%a2%85%ec%a0%81%ec%9c%bc%eb%a1%9c%eb%8a%94%20aggregation%20server%eb%a5%bc%20%eb%91%90%ec%96%b4%ec%84%9c%20worker%eb%93%a4%ec%9d%b4%20%ec%9d%b4%20%ec%84%9c%eb%b2%84%ec%97%90%ea%b2%8c%20%ec%9d%91%eb%8b%b5%ec%9d%84%20%ed%95%b4%ec%a3%bc%ea%b3%a0,%20%ec%9a%94%ec%b2%ad%ec%9e%90%eb%8a%94%20%ec%9d%b4%20worker%eb%a1%9c%eb%b6%80%ed%84%b0%20%eb%8d%b0%ec%9d%b4%ed%84%b0%eb%a5%bc%20%ea%b0%80%ec%a0%b8%ea%b0%80%eb%8f%84%eb%a1%9d%20%ea%b5%ac%ec%84%b1%eb%90%98%ec%97%88%ec%8a%b5%eb%8b%88%eb%8b%a4.%20%ec%82%ac%ec%8b%a4%20%ec%95%84%ec%a7%81%eb%8f%84%20%ec%9d%b4%eb%9f%b0%20%ea%b5%ac%ec%a1%b0%ea%b0%80%20%eb%a7%9e%ec%95%98%eb%8a%94%ec%a7%80%ec%97%90%20%eb%8c%80%ed%95%b4%ec%84%9c%20%ec%9d%98%eb%ac%b8%ec%9d%b4%20%eb%a7%8e%ea%b3%a0,%20%eb%8d%94%20%ec%a2%8b%ec%9d%80%20%eb%b0%a9%eb%b2%95%ec%9d%b4%20%ec%9e%88%ec%a7%80%20%ec%95%8a%ec%95%98%ec%9d%84%ea%b9%8c%20%eb%9d%bc%eb%8a%94%20%ec%83%9d%ea%b0%81%ec%9d%84%20%ea%b0%80%ec%a7%80%ea%b3%a0%20%ec%9e%88%ec%8a%b5%eb%8b%88%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>kafka를 통해 여러 워커에게 일을 분배하여 질의 성능을 올리는 코드를 짯었는데, 질의자도 여러명, 답변자도 여러명인데, 질의한 서버로 정확하게 응답을 aggregation 해주어야 했습니다. 이때 kafka가 단방향 streaming에는 적용하기 쉬운데, request-response 와 같은 요청을 만들어야 되면 response부분이 처리하기 어렵다라는 것을 알게 되었습니다. 최종적으로는 aggregation server를 두어서 worker들이 이 서버에게 응답을 해주고, 요청자는 이 worker로부터 데이터를 가져가도록 구성되었습니다. 사실 아직도 이런 구조가 맞았는지에 대해서 의문이 많고, 더 좋은 방법이 있지 않았을까 라는 생각을 가지고 있습니다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>방금 말한 구조가 어떤 단점이 있는지에 대한 질문이 들어오면







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ea%b3%bc%ed%95%98%ea%b2%8c%20%ec%95%84%ed%82%a4%ed%85%8d%ec%b3%90%ea%b0%80%20%eb%b3%b5%ec%9e%a1%ed%95%98%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%98%ea%b3%a0,%20%ec%9d%b4%20%ea%b5%ac%ec%a1%b0%ea%b0%80%20api%20gateway%eb%a5%bc%20%eb%91%90%ec%96%b4%20load%20balancing%20%ed%95%98%eb%8a%94%20%ea%b2%83%eb%b3%b4%eb%8b%a4%20%ec%a2%8b%ec%9d%80%ea%b2%8c%20%eb%ac%b4%ec%97%87%ec%9d%b8%ec%a7%80%ea%b0%80%20%eb%b6%80%ec%a0%95%ed%99%95%ed%95%98%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%a9%eb%8b%88%eb%8b%a4.%0aapi%20gateway%eb%a5%bc%20%eb%91%90%eb%8a%94%20%ea%b2%83%ec%9d%b4%20kafka%eb%a5%bc%20%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94%20%ea%b2%83%eb%b3%b4%eb%8b%a4%20%eb%b9%84%ec%9a%a9%ec%a0%81,%20%ea%b5%ac%ec%a1%b0%ec%a0%81%20%eb%b3%b5%ec%9e%a1%ec%84%b1%20%eb%a9%b4%ec%9c%bc%eb%a1%9c%20%eb%8d%94%20%ec%a2%8b%ec%95%98%ec%9d%84%20%ea%b2%83%ec%9d%b4%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%98%ea%b3%a0%20%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8%20%ec%a2%85%eb%a3%8c%ea%b8%b0%ea%b0%84%ec%9d%84%20%ea%b0%90%ec%95%88%ed%95%98%ec%97%ac%20%eb%b0%94%ea%be%b8%ec%a7%80%20%eb%aa%bb%ed%95%9c%ea%b2%8c%20%ed%9b%84%ed%9a%8c%eb%90%a9%eb%8b%88%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>과하게 아키텍쳐가 복잡하다고 생각하고, 이 구조가 api gateway를 두어 load balancing 하는 것보다 좋은게 무엇인지가 부정확하다고 생각합니다.
api gateway를 두는 것이 kafka를 사용하는 것보다 비용적, 구조적 복잡성 면으로 더 좋았을 것이라고 생각하고 프로젝트 종료기간을 감안하여 바꾸지 못한게 후회됩니다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DB에서 트랜젝션이 무엇인가요?







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="DB%ec%97%90%ec%84%9c%20%ec%9b%90%ec%9e%90%ec%84%b1%ec%9d%84%20%ec%a7%80%eb%85%80%ec%95%bc%ed%95%98%eb%8a%94%20%ec%b2%98%eb%a6%ac%20%eb%8b%a8%ec%9c%84%eb%a1%9c,%20%ec%b2%98%eb%a6%ac%20%ec%84%b1%ea%b3%b5%20%ed%98%b9%ec%9d%80%20%ec%8b%a4%ed%8c%a8%eb%a1%9c%eb%a7%8c%20%eb%b6%84%eb%a6%ac%eb%90%a9%eb%8b%88%eb%8b%a4.%20%ec%bb%b4%ed%93%a8%ed%84%b0%20%ea%b3%b5%ed%95%99%20%ec%88%98%ec%97%85%ec%97%90%ec%84%9c%eb%8a%94%20%ec%a3%bc%eb%a1%9c%20%ec%9d%80%ed%96%89%20%ec%9e%85%ec%b6%9c%ea%b8%88%ea%b3%bc%20%ea%b0%99%ec%9d%80%20%ec%98%88%ec%8b%9c%eb%a5%bc%20%eb%93%a4%ec%96%b4%20%ed%8a%b8%eb%9e%9c%ec%a0%9d%ec%85%98%ec%9d%84%20%ec%84%a4%eb%aa%85%ed%95%a9%eb%8b%88%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>DB에서 원자성을 지녀야하는 처리 단위로, 처리 성공 혹은 실패로만 분리됩니다. 컴퓨터 공학 수업에서는 주로 은행 입출금과 같은 예시를 들어 트랜젝션을 설명합니다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;/li>
&lt;li>DB에서 Entity란 무엇인가요?







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ea%b0%9d%ec%b2%b4%eb%9d%bc%ea%b3%a0%20%eb%8b%a8%ec%88%9c%ed%95%98%ea%b2%8c%20%eb%a7%90%ed%95%a0%20%ec%88%98%20%ec%9e%88%eb%8a%94%eb%8d%b0%20%ec%a3%bc%eb%a1%9c%20%eb%aa%85%ec%82%ac%eb%a1%9c%20%ec%a7%80%ec%b9%ad%ed%95%98%eb%8a%94%20%ea%b2%83%eb%93%a4%ec%9e%85%eb%8b%88%eb%8b%a4.%20%ec%9c%84%ec%9d%98%20%eb%8b%b5%eb%b3%80%ec%97%90%ec%84%9c%20%ec%9d%80%ed%96%89%20%ec%9e%85%ec%b6%9c%ea%b8%88%ec%97%90%ec%84%9c,%20%ea%b3%84%ec%a2%8c%ea%b0%99%ec%9d%80%20%ea%b2%83%eb%93%a4%ec%9d%b4%20%eb%8c%80%ed%91%9c%ec%a0%81%ec%9c%bc%eb%a1%9c%20%ea%b0%9d%ec%b2%b4%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%a9%eb%8b%88%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>객체라고 단순하게 말할 수 있는데 주로 명사로 지칭하는 것들입니다. 위의 답변에서 은행 입출금에서, 계좌같은 것들이 대표적으로 객체라고 생각합니다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;/li>
&lt;li>Javascript에서 &lt;code>call&lt;/code>, &lt;code>bind&lt;/code>, &lt;code>apply&lt;/code>에 대해서 각각 설명해주세요:
&lt;ul>
&lt;li>call과 apply는 개념적으로는 동일하지만, 인자가 다릅니다. call은 this, param1, param2 와 같은 순서로 넣는다면, apply는 this, [param1, param2] 의 구조로 넣습니다.&lt;/li>
&lt;li>bind는 실제 함수 호출을 하는 시점과 함수와 this를 결정하는 시점이 다를때 사용되는데, bind를 사용하게 된다면 함수 호출이 아닌, 함수 자체가 리턴되게 됩니다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>zsh</title><link>https://minuk.dev/wiki/zsh/</link><pubDate>Fri, 03 Dec 2021 13:33:49 +0900</pubDate><guid>https://minuk.dev/wiki/zsh/</guid><description>zsh 쓰면서 불편했던거 모음</description></item><item><title>Simple한 File Server</title><link>https://minuk.dev/wiki/simple-file/</link><pubDate>Fri, 03 Dec 2021 04:07:49 +0900</pubDate><guid>https://minuk.dev/wiki/simple-file/</guid><description>&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>script&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="python3%20-m%20http.server%208000">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>python3 -m http.server &lt;span style="color:#ae81ff">8000&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>nginx configuration&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20location%20/file/%20%7b%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20rewrite%20%5e/file/%28.*%29$%20/$1%20break;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20client_max_body_size%2050M;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_pass%20http://localhost:8000;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_redirect%20http://localhost:8000%20$scheme://$http_host/;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_set_header%20X-Real-IP%20$remote_addr;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_set_header%20Host%20$host;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_set_header%20X-Forwarded-For%20$proxy_add_x_forwarded_for;%0a%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20#%20websocket%20headers%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_http_version%201.1;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_set_header%20Upgrade%20$http_upgrade;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_set_header%20Connection%20$connection_upgrade;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_set_header%20X-Scheme%20$scheme;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20proxy_buffering%20off;%0a%20%20%20%20%20%20%20%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code> location /file/ {
 rewrite ^/file/(.*)$ /$1 break;
 client_max_body_size 50M;
 proxy_pass http://localhost:8000;
 proxy_redirect http://localhost:8000 $scheme://$http_host/;
 proxy_set_header X-Real-IP $remote_addr;
 proxy_set_header Host $host;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

 # websocket headers
 proxy_http_version 1.1;
 proxy_set_header Upgrade $http_upgrade;
 proxy_set_header Connection $connection_upgrade;
 proxy_set_header X-Scheme $scheme;
 proxy_buffering off;
 }&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>스크린샷
&lt;img src="https://minuk.dev/wiki/images/simple-file-1.png" alt="simple-file-1">&lt;/li>
&lt;/ul>
&lt;h2 id="이유">이유&lt;/h2>
&lt;ul>
&lt;li>이야기하다가 파일 공유해야할 일이 있는데 카카오톡은 300M, 디스코드는 100M인데 파일 보내주기 불편해서 사용한다.&lt;/li>
&lt;li>업로드가 어려운 구조이다보니 나중에 개인 프로젝트로 개발할듯:
&lt;ul>
&lt;li>관리자는 키를 발급할 수 있고 이는 짧은 문자열이다.(단순히 불러줄 수 있게)&lt;/li>
&lt;li>키는 6글자 영어소문자와 숫자, 혼동되지 않는 특수문자를 포함하도록 한다.&lt;/li>
&lt;li>관리자가 키를 발급하는 것은 반드시 cli 환경에서 가능해야한다. (ssh로 접속해서 할 수 있도록)&lt;/li>
&lt;li>발급한 키는 업로드만 가능하다.&lt;/li>
&lt;li>다운로드는 서버를 순간적으로 키는 것으로 한다.(항상 켜긴 좀&amp;hellip; 이건 나-중에 키에 권한 부여 어캐할지 고민해보면 생각함)&lt;/li>
&lt;li>언어는 java가 편할듯 하지만, go를 배워서 해보고 싶다는 생각은 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>회고/2021-12-03</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2021-12-03/</link><pubDate>Fri, 03 Dec 2021 03:32:55 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2021-12-03/</guid><description>벌써 12월이네</description></item><item><title>bayesian/week3</title><link>https://minuk.dev/wiki/lectures/bayesian/week3/</link><pubDate>Sat, 20 Nov 2021 02:32:45 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/bayesian/week3/</guid><description>베이지안통계학 3주</description></item><item><title>jupyter notebook</title><link>https://minuk.dev/wiki/jupyter/</link><pubDate>Sat, 20 Nov 2021 02:29:02 +0900</pubDate><guid>https://minuk.dev/wiki/jupyter/</guid><description>jupyter notebook 에서 삽질하거나 설정한거 모음</description></item><item><title>ffmpeg 를 사용한 convert 요약</title><link>https://minuk.dev/wiki/ffmpeg/</link><pubDate>Mon, 15 Nov 2021 11:18:06 +0900</pubDate><guid>https://minuk.dev/wiki/ffmpeg/</guid><description>ffmpeg 로 간단한 비디오 변환 하려고 만든 페이지</description></item><item><title>bayesian/week2</title><link>https://minuk.dev/wiki/lectures/bayesian/week2/</link><pubDate>Sun, 14 Nov 2021 04:32:45 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/bayesian/week2/</guid><description>베이지안통계학 2주</description></item><item><title>bayesian/week1</title><link>https://minuk.dev/wiki/lectures/bayesian/week1/</link><pubDate>Fri, 12 Nov 2021 19:43:30 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/bayesian/week1/</guid><description>&lt;p>R markdown 은 resources/bayesian/week1.Rmd 참고&lt;/p></description></item><item><title>pdf-test</title><link>https://minuk.dev/wiki/pdf-test/</link><pubDate>Fri, 12 Nov 2021 19:43:30 +0900</pubDate><guid>https://minuk.dev/wiki/pdf-test/</guid><description>&lt;p>R markdown 은 resources/bayesian/week1.Rmd 참고&lt;/p></description></item><item><title>오토마타와 형식언어 정리</title><link>https://minuk.dev/wiki/lectures/automata/</link><pubDate>Tue, 19 Oct 2021 21:46:37 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/automata/</guid><description>&lt;h1 id="chapter-1-introduction">Chapter 1. Introduction&lt;/h1>
&lt;h2 id="12-three-basic-concepts-languages">1.2 Three basic concepts Languages&lt;/h2>
&lt;ul>
&lt;li>String : A sequence of symbolx&lt;/li>
&lt;li>Alphabet : $\Sigma = { a, b }$&lt;/li>
&lt;/ul>
&lt;h2 id="string-operations">String Operations&lt;/h2>
&lt;ul>
&lt;li>Concatenation(연결):
&lt;ul>
&lt;li>$w = a_1 a_2 &amp;hellip; a_n$&lt;/li>
&lt;li>$v = b_1 b_2 &amp;hellip; b_m$&lt;/li>
&lt;li>$wv = a_1 a_2 &amp;hellip; a_n b_1 b_2 &amp;hellip; b_m$&lt;/li>
&lt;li>교환법칙 성립X&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reverse(역):
&lt;ul>
&lt;li>$w = a_1 a_2 &amp;hellip; a_n$&lt;/li>
&lt;li>$w^R = a_n &amp;hellip; a_2 a_1$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Length(길이):
&lt;ul>
&lt;li>$w = a_1 a_2 &amp;hellip; a_n$&lt;/li>
&lt;li>$\vert w \vert = n$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Length of concatenation:
&lt;ul>
&lt;li>$\vert u v \vert = \vert u \vert + \vert v \vert$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Empty Strings(공스트링):
&lt;ul>
&lt;li>A string with no symbools : $\lambda$&lt;/li>
&lt;li>Observation : $\vert \lambda \vert = 0, \lambda w = w \lambda = w$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Substring:
&lt;ul>
&lt;li>Substring of string: a subsequnce of consecutive characters&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Prefix and Suffix:
&lt;ul>
&lt;li>prefix와 suffix는 substring이다.&lt;/li>
&lt;li>$\lambda$도 substring이기 때문에 prefix, suffix에 포함된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Power(제곱):
&lt;ul>
&lt;li>$w^n = w w &amp;hellip; w$&lt;/li>
&lt;li>Definition: $w^0 = \lambda$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The * operation(스타 연산):
&lt;ul>
&lt;li>$\Sigma^*$ : the set of all possible strings from alphabet $\Sigma$&lt;/li>
&lt;li>무한집합이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The + operation(플러스 연산):
&lt;ul>
&lt;li>$\Sigma^+$ : the set of all possible strings from alphabet $\Sigma$ except $\lambda$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="languages">Languages&lt;/h2>
&lt;ul>
&lt;li>Languages:
&lt;ul>
&lt;li>A language is any subset of $\Sigma^*$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Operations on Lanugages:
&lt;ul>
&lt;li>The usual set operations:
&lt;ul>
&lt;li>union, intersection, complement, relative complement&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reverse:
&lt;ul>
&lt;li>Definition $L = { w^R : w \in L }$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Concatenation:
&lt;ul>
&lt;li>Definition: $L_1 L_2 = {xy : x \in L_1, y \in L_2 }$&lt;/li>
&lt;li>교환법칙이 성립하지 않는다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Another Operation:
&lt;ul>
&lt;li>Definition $L^n = L L &amp;hellip; L$&lt;/li>
&lt;li>Special case $L^0 = { \lambda }$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Star-Closure:
&lt;ul>
&lt;li>Definition: $L^* = L^0 \cup L^1 \cup L^2 \cup \cdots$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Positive Closure:
&lt;ul>
&lt;li>Definition: $L^+ = L^1 \cup L^2 \cup \cdots$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="grammars">Grammars&lt;/h2>
&lt;ul>
&lt;li>Grammar: $S \rightarrow aSb, S \rightarrow \lambda$&lt;/li>
&lt;li>Derivation of sentence string:
&lt;ul>
&lt;li>$S \Rightarrow aSb \Rightarrow ab$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Language of the Grammer:
&lt;ul>
&lt;li>example: $S \rightarrow aSb, S \rightarrow \lambda$:
&lt;ul>
&lt;li>$L = { a^n b^n : n \le 0 }$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>More Notation:
&lt;ul>
&lt;li>Grammar:$G=(V, T, S, P)$:
&lt;ul>
&lt;li>V : Set of variables&lt;/li>
&lt;li>T : Set of terminal symbols&lt;/li>
&lt;li>S : Start variable&lt;/li>
&lt;li>P : Set of Productions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sentential Form:
&lt;ul>
&lt;li>A setence that contains variables and terminals&lt;/li>
&lt;li>$S \stackrel{*}{\Rightarrow} aaabbb$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="automata">Automata&lt;/h2>
&lt;ul>
&lt;li>Different kinds of automata:
&lt;ul>
&lt;li>Automata are distinguished by the temporary memory&lt;/li>
&lt;li>Finite Automata : no temporary memory&lt;/li>
&lt;li>Pushdown Automata : stack&lt;/li>
&lt;li>Turing Machines : random access memory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Power of Automata:
&lt;ul>
&lt;li>Finite Automata &amp;lt; Pushdown Automata &amp;lt; Turing Machine&lt;/li>
&lt;li>More power means it can solve more compational problems&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="chatper-2-finite-automata">Chatper 2. Finite Automata&lt;/h1>
&lt;h2 id="21-deterministic-finite-automata-dfa">2.1 Deterministic Finite Automata (DFA)&lt;/h2>
&lt;ul>
&lt;li>Transition Graph&lt;/li>
&lt;/ul>
&lt;h2 id="determistic-finite-automata-dfa">Determistic Finite Automata (DFA)&lt;/h2>
&lt;ul>
&lt;li>$M = (Q, \Sigma, \sigma, q_0, F)$:
&lt;ul>
&lt;li>$Q$ : set of states&lt;/li>
&lt;li>$\Sigma$: input alphabet&lt;/li>
&lt;li>$\sigma$: transition $\sigma : Q \times \Sigma \rightarrow Q$&lt;/li>
&lt;li>$q_0$ : initial (or start) state&lt;/li>
&lt;li>$F$ : set of final states $F \subseteq Q$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="extended-transition-function-sigma">Extended Transition Function $\sigma^*$&lt;/h2>
&lt;ul>
&lt;li>$\sigma^* : Q \times \Sigma^* \rightarrow Q$&lt;/li>
&lt;/ul>
&lt;h2 id="languages-accepted-by-dfas">Languages Accepted by DFAs&lt;/h2>
&lt;ul>
&lt;li>Definition:
&lt;ul>
&lt;li>The language L(M) contains all inputs strings accepted by M&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="regular-languages">Regular Languages&lt;/h2>
&lt;ul>
&lt;li>Definition:
&lt;ul>
&lt;li>A language L is regular if there is a DFA M such that L=L(M)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="non-determistic-automatanfa">Non-determistic automata(NFA)&lt;/h2>
&lt;ul>
&lt;li>An NFA accepts a string:
&lt;ul>
&lt;li>when there is a computation of the NFA that accepts the string&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>An NFA rejects a string:
&lt;ul>
&lt;li>when there is no computation of the NFA that accepts the string&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lambda---transition">$\lambda$ - transition&lt;/h3>
&lt;h3 id="formal-definition-of-nfas">Formal Definition of NFAs&lt;/h3>
&lt;ul>
&lt;li>$M = (Q, \Sigma, \sigma, q_0, F)$:
&lt;ul>
&lt;li>$Q$ : Set of states&lt;/li>
&lt;li>$\Sigma$ : Input alphabet&lt;/li>
&lt;li>$\sigma$ : Transition function $\sigma : Q \times (\Sigma \cup { \lambda }) \rightarrow 2^Q$&lt;/li>
&lt;li>$q_0$ : Initial state&lt;/li>
&lt;li>$F$ : Final state&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="extened-transition-function-sigma">Extened Transition Function $\sigma^*$&lt;/h3>
&lt;ul>
&lt;li>Informally:
&lt;ul>
&lt;li>$q_j \in \sigma^*(q_i, w)$ : there is a walk from $q_i$ to $q_j$ with label w&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Formally:
&lt;ul>
&lt;li>The language accepted by NFA M is:
&lt;ul>
&lt;li>$L(M) = {w, &amp;hellip;}$&lt;/li>
&lt;li>where $\sigma^* (q_0, w) = {q_i, &amp;hellip; }$ and there is some $q_k \in F$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="why-nondeterminism">Why Nondeterminism?&lt;/h3>
&lt;ul>
&lt;li>Best case in multiple choices:
&lt;ul>
&lt;li>Automatic backtracking&lt;/li>
&lt;li>Hide unncessary detils&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Good fit to (transform) other notations&lt;/li>
&lt;li>Basically, close to human:
&lt;ul>
&lt;li>Easy to design.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="equivalence-of-dfas-and-nfas">Equivalence of DFAs and NFAs&lt;/h3>
&lt;ul>
&lt;li>Equivalence of Machines:
&lt;ul>
&lt;li>
&lt;p>Definition for automata:&lt;/p></description></item><item><title>컴퓨터통신</title><link>https://minuk.dev/wiki/lectures/computer-communication/</link><pubDate>Fri, 15 Oct 2021 23:07:20 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/computer-communication/</guid><description>&lt;h2 id="컴퓨터에서-의미란-데이터">컴퓨터에서 의미란? 데이터&lt;/h2>
&lt;ul>
&lt;li>문자 (디지털데이터)&lt;/li>
&lt;li>음성 (아날로그 데이터) =&amp;gt; 실제로는 디지털화 시켜서 사용&lt;/li>
&lt;li>컴퓨터 기반 기기에서 모든 의미는 디지털 데이터로 표현되어야 한다. 따라서 의미교환이란 디지털 데이터를 교환한다는 것이다.&lt;/li>
&lt;/ul>
&lt;h2 id="데이터-전달교환이란-신호송수신">데이터 전달/교환이란? 신호송수신&lt;/h2>
&lt;ul>
&lt;li>0/1은 추상적인 표시이다.:
&lt;ul>
&lt;li>0/1로 추상화했다고 해서 실제로 전달하는 매체가 디지털이라는 것이 아니다. 약속을 한다면 아날로그를 쓰더라도 디지털데이터를 전달하는 데에는 문제가 없다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>0/1을 유선/무선을 통해 전달하려면 신호화가 필요하다.&lt;/li>
&lt;li>신호는 디지털 신호/아날로그 신호가 존재한다.&lt;/li>
&lt;li>매체: 신호를 전달하는 물체. 예) 공중, 케이블&lt;/li>
&lt;li>유선(구리선, 광케이블), 무선(전파):
&lt;ul>
&lt;li>매체에 따라 디지털이 잘 전송되지 않는다.&lt;/li>
&lt;li>무선에서는 특히 아날로그를 선택해서 전달한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="직접-신호-교환의-한계-스위칭">직접 신호 교환의 한계: 스위칭&lt;/h2>
&lt;ul>
&lt;li>통신 상대방과 직접 신호교환을 할 것인가?:
&lt;ul>
&lt;li>블루투스 스피커&lt;/li>
&lt;li>대부분은 기지국/공유가와 신호를 교환한다.&lt;/li>
&lt;li>직접적으로 신호를 교환하는 것은 특수한 경우이고, 오히려 간접적으로 교환하는 것이 보편적이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>거리가 멀다면 결국에는 중계기를 설치할 수 밖에 없다.&lt;/li>
&lt;li>연결할 수 있는 규모 - 스위치:
&lt;ul>
&lt;li>통신자간 수많은 기기들(라우터 등)을 통해 통신하며, 이때 수많은 기기들을 망(Network)라고 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>컴퓨터 통신을 하기 위해서는 망을 거치는 것이 필수적이다.&lt;/li>
&lt;li>직접 통신의 한계:
&lt;ul>
&lt;li>물리적 한계(거리에 따라 세기가 감소하는 등) : 중간에 있는 기기들이 이를 극복하기 위해서 중계를 해주어야한다.&lt;/li>
&lt;li>통신의 용이성(통신자가 바뀌어도 전달 가능) : 중간에 있는 기기들은 스위칭, 라우팅 등을 통해 올바른 목적지를 향해 데이터를 보내주는 것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="서로-다른-통신망-연결-이질성-극복">서로 다른 통신망 연결: 이질성 극복&lt;/h2>
&lt;ul>
&lt;li>통신하는 양쪽의 통신망이 서로 다를 수 있다.:
&lt;ul>
&lt;li>기술, 관리, 정책 측면에서&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>극복방법 필요:
&lt;ul>
&lt;li>네트워크 간의 네트워크(internet)이 필요하다. Internet&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="컴퓨터-통신-기술-재정의">컴퓨터 통신 기술 재정의&lt;/h2>
&lt;ul>
&lt;li>컴퓨터 기반 기기를 통한 의미 교환&lt;/li>
&lt;li>= 컴퓨터 기반 응용들을 통한 의미교환 (컴퓨터 기반 응용들의 의미 교환)&lt;/li>
&lt;li>= 컴퓨터 기반 응용들의 디지털데이터 교환&lt;/li>
&lt;li>= 컴퓨터 기반 응용들의 디지털데이터를 담고 있는 신호 교환&lt;/li>
&lt;li>= 컴퓨터 기반 응용들의 디지털데이터를 담고 있는 신호를, 필요에 따라서 중계기, 스위치를 경유하면서 교환&lt;/li>
&lt;li>= &lt;strong>컴퓨터 기반 기기/응용들&lt;/strong>이 필요에 따라서 &lt;strong>중계기/스위치&lt;/strong>를 경유하면서, &lt;strong>디지털데이터&lt;/strong>를 담고있는 &lt;strong>신호&lt;/strong>를 교환해서 의미를 교환하는 것&lt;/li>
&lt;/ul>
&lt;h2 id="네트위크를-보는-관점-관심사항에-따른-관점">네트위크를 보는 관점: 관심사항에 따른 관점&lt;/h2>
&lt;ul>
&lt;li>네트워크 사용자: 통신 응용이 필요로 하는 서비스:
&lt;ul>
&lt;li>즉, 보낸 메시지가 오류 없이 어떤 정해진 시간 안에 전달되는 것을 보장하는 서비스&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>네트워크 설계자: 효과적인 설계:
&lt;ul>
&lt;li>즉, 네트워크 자원들이 효율적으로 이용되며 각각의 사용자에게 공평하게 할당되는 설계&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>네트워크 제공자: 운영 및 관리가 용이한 시스템:
&lt;ul>
&lt;li>즉, 통신 장애가 쉽게 분산되며, 사용량에 따른 요금 부과가 용이한 시스템&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="컴퓨터-통신네트워크-분야">컴퓨터 통신/네트워크 분야&lt;/h2>
&lt;ul>
&lt;li>컴퓨터공학 전공자의 시각:
&lt;ul>
&lt;li>컴퓨터 통신 응용의 개발:
&lt;ul>
&lt;li>통신 응용들의 사례 및 발전 추세&lt;/li>
&lt;li>(통신의 기본 개념 + 컴퓨터 통신 시스템 동작원리) 필요&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>컴퓨터 통신 시스템의 이해 및 개발:
&lt;ul>
&lt;li>개발 과정, 관리측면에서 컴퓨터 전문가가 필요하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="1장-기본개념">1장 기본개념&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>요구사항:&lt;/p></description></item><item><title>통계학습개론(Introduction to statistical learnning) 수업 정리</title><link>https://minuk.dev/wiki/lectures/introduction-to-statistical-learning/</link><pubDate>Fri, 08 Oct 2021 04:46:27 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/introduction-to-statistical-learning/</guid><description>2021 가을학기 수업 정리</description></item><item><title>베이지안 통계학(Bayesian Statistics)</title><link>https://minuk.dev/wiki/lectures/bayesian-statistics/</link><pubDate>Sun, 03 Oct 2021 19:46:55 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/bayesian-statistics/</guid><description>&lt;h1 id="rmarkdown">Rmarkdown&lt;/h1>
&lt;ul>
&lt;li>[[Bayesian/week1]]&lt;/li>
&lt;li>[[Bayesian/week2]]&lt;/li>
&lt;li>[[Bayesian/week3]]&lt;/li>
&lt;/ul>
&lt;h2 id="historical-perspective-관점의-변화">Historical Perspective (관점의 변화)&lt;/h2>
&lt;h3 id="en">en&lt;/h3>
&lt;ul>
&lt;li>Bayesian statistics came first.:
&lt;ul>
&lt;li>Reverend Thomas Bayes, Pierre Simon Laplace in the late 17th/early 18th centuries.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Limitations of Bayesian analyses:
&lt;ul>
&lt;li>Difficulty in evaluating $p(\theta \vert y)$ in complex models analytically.&lt;/li>
&lt;li>Role of prior information - lack of objectivity.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Frequentist statistics was introduced as a way of overcoming these issues.:
&lt;ul>
&lt;li>Fisher in the 1920s, Neyman, Pearson in the mid-20th century.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Reemergence of Bayesian statistics:
&lt;ul>
&lt;li>Computational advancements have made complex Bayesian analyses feasible.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ko">ko&lt;/h3>
&lt;ul>
&lt;li>베이지안 방법론이 처음 토마스 베이지와 시몬 라플라스에 의해 17세기 말, 18세기 초에 등장했다.&lt;/li>
&lt;li>베이지안 분석은 복잡한 모델에 대해서 사후 확률을 추론하기 어려웠고, 사전 정보의 역할이 객관성의 저하를 불러 한계에 부딪혔다.&lt;/li>
&lt;li>Fisher(1920), Neyman, Pearson(20세기 중기)와 같은 빈도주의자들이 이러한 문제를 극복하는 방법론을 제시했다.&lt;/li>
&lt;li>계산의 혁신(컴퓨터의 발전)에 따라서 복잡한 베이지안 분석론이 실용성이 생기게 되어서 재등장하게 된다.&lt;/li>
&lt;/ul>
&lt;h2 id="frequentistclassical-paradigm-빈도주의고전적-패러다임">Frequentist/Classical Paradigm (빈도주의/고전적 패러다임)&lt;/h2>
&lt;h3 id="en-1">en&lt;/h3>
&lt;ul>
&lt;li>A parameter $\theta$ is viewed as an unknown fixed constant.&lt;/li>
&lt;li>Data are a repeatable random sample.&lt;/li>
&lt;li>Goal : Estimate $\theta$ based on all available information (data) and find its associated error under asymptotic theory.&lt;/li>
&lt;li>Inference is based on examining how well a procedure would do if it is used many times.:
&lt;ul>
&lt;li>Point estimates and standard errors or 95% confidence intervals.&lt;/li>
&lt;li>Deduction from $P(data \vert H_0)$, by setting $\alpha$ in advance.&lt;/li>
&lt;li>Accept $H_1$ if $P(data \vert H_0) &amp;lt; \alpha$&lt;/li>
&lt;li>Accept $H_0$ if $P(data \vert H_1) \ge \alpha$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ko-1">ko&lt;/h3>
&lt;ul>
&lt;li>추정하고자 하는 파라메터(이걸 모수로 번역해도 되나?) $\theta$를 우리가 아직 알지는 못하지만 고정된 값이라고 생각한다.&lt;/li>
&lt;li>따라서 데이터는 반복가능한 랜덤 샘플이 된다. (이미 집단이 결정되어 있고 우리는 거기에 영향을 주지 못해서 데이터 추출을 몇번을 해도 똑같다는 것)&lt;/li>
&lt;li>목표 : 사용가능한 모든 정보(data)에 기반하여 $\theta$를 추정하고 점근적 이론하에 이와 관련된 에러를 찾아낸다.&lt;/li>
&lt;li>추정은 여러번 사용할때 얼마나 잘 적용되는지 시험하고 한다.&lt;/li>
&lt;li>-&amp;gt; 최대한 많이 맞출수 있도록 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="bayesian-paradigm-베이지안주의-패러다임">Bayesian Paradigm (베이지안주의 패러다임)&lt;/h2>
&lt;h3 id="en-2">en&lt;/h3>
&lt;ul>
&lt;li>A parameter $\theta$ is viewed as a random variable whose distribution is unknown, and described probabilistically .&lt;/li>
&lt;li>Data are observed from the realized sample.&lt;/li>
&lt;li>Goal: Estimate the distribution of $\theta$ conditional on the observed data, the posterior distribution of $\theta$.&lt;/li>
&lt;li>Inference is based on summaries of the posterior distribution of $\theta$.:
&lt;ul>
&lt;li>Induction from $P(\theta \vert data)$, starting with $P(\theta)$&lt;/li>
&lt;li>Broad descriptions of the posterior distribution such as means and quantiles.&lt;/li>
&lt;li>Highest posterior density intervals indicating region of highest posterior probability, regardless of contiguity.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ko-2">ko&lt;/h3>
&lt;ul>
&lt;li>파라메터 $\theta$를 우리가 모르는 분포를 따르는 랜덤 변수라고 보고, 확률적으로 설명 가능하다고 본다.&lt;/li>
&lt;li>데이터는 구체화된(실현된으로 번역하기에는 어렵&amp;hellip; realized) 샘플로 부터 관측된다.&lt;/li>
&lt;li>-&amp;gt; 이게 번역이 참 어렵다. 한국어로 어캐 말하지?&lt;/li>
&lt;li>목표 : 관측된 데이터로부터 $\theta$의 조건부 분포를 추정한다. ($\theta$의 사후분포를 추정한다.)&lt;/li>
&lt;li>추론은 $\theta$의 사후분포에 기반해서 진행된다.:
&lt;ul>
&lt;li>평균, 분위수과 같은 다양한 통계 수치 등 사후분포에 관한 폭넓은 설명이 가능하다.&lt;/li>
&lt;li>연속성 여부에 관계없이 사후 밀도가 높을수록 높은 사후 확률을 가지는 것을 의미한다. -&amp;gt; 연속성 여부와 관련없이 적용가능하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="differences-between-frequentist-and-bayesian-빈도주의와-베이지안주의-간의-차이">Differences Between Frequentist and Bayesian (빈도주의와 베이지안주의 간의 차이)&lt;/h2>
&lt;h3 id="en-3">en&lt;/h3>
&lt;ul>
&lt;li>Waht is fixed?:
&lt;ul>
&lt;li>Frequentist : Parameters are fixed!&lt;/li>
&lt;li>Bayesian : Data are fixed!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>General inference:
&lt;ul>
&lt;li>Frequentist : $P(data \vert \theta)$ is the sampling distribution of the data given the parameter.&lt;/li>
&lt;li>Bayesian : $P(\theta)$ is the prior distribution of the parameter (before the data are seen) and $P(\theta \vert data)$ is the posterior distribution of the parameter.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>95% Intervals:
&lt;ul>
&lt;li>Frequentist: In repeated sampling, 95% of realized intervals covers the true parameter.&lt;/li>
&lt;li>Bayesian: For these data, with probability 95% the parameter is in the interval.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bayesian inference proceeds vertically, with x fixed, according to the posterior distribution $g(\mu \vert x)$.&lt;/li>
&lt;li>Frequentists reason horizontally, with $\mu$ fixed and x varying.&lt;/li>
&lt;/ul>
&lt;h3 id="ko-3">ko&lt;/h3>
&lt;ul>
&lt;li>뭐를 고정됬다고 볼것인가? 빈도주의는 파라메터를, 베이지안주의는 데이터를 고정된다고 본다.&lt;/li>
&lt;li>예: &amp;ldquo;민욱공정&amp;rdquo; 이라는 회사에서 일회용 컵을 생산하는 기계를 만들어낸다고 하자. &amp;ldquo;민욱공정&amp;quot;에서 만들어 내는 기계는 오차율이 정규분포(0.001, 0.0004)를 따른다고 하자. 이 기계를 구입해서 실제로 일회용 컵 10000개를 생산했고, 10개의 불량품을 만들었다, 이 기계의 오차율은 어떻게 될까?:
&lt;ul>
&lt;li>빈도주의자들은 기계의 오차율은 고정되어 있고, 관측된 데이터가 10개의 불량품을 포함하는 샘플이 추출되었다고 본다. (역으로 추론할 때는 이를 통해서 오차율에 대한 가정을 기각할지 받아들일지 결정한다.)&lt;/li>
&lt;li>베이지안 주의자들은 기계의 오차율은 변화한다고 보고, 불량품의 개수가 기계의 오차율을 결정한다고 본다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>뭔가 너무 어렵게 설명한거 같기도 한데, 둘다 맞는 말로 볼 수 있다. 무엇이 무엇을 결정할지에 대한 관점이 달라진 것이다.&lt;/li>
&lt;li>살짝 다른 이야기이지만, 가설검증에서 느낀 찝찝한 감정이 이런 점에서 나오는 것이다.:
&lt;ul>
&lt;li>가설검증에서 통과되는 가설이 여러개인 경우에 대한 찝찝함을 느껴본적이 있나? 이를 베이지안 관점에서 보면, 빈도주의에서 통과시키는 가설이 분포로 존재함을 추론해낼수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="overall-recommendation">Overall Recommendation&lt;/h2>
&lt;ul>
&lt;li>Be pragmatic, not dogmatic.:
&lt;ul>
&lt;li>Use what has been shown to work.&lt;/li>
&lt;li>As a default approach, the following will serve you well:
&lt;ul>
&lt;li>Design as a bayesian, and evaluate as a frequentist&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Construct models and procedures from a Bayesian perspective, and use frequentist tools to evaluate their empirical and theoretical perofrmance.&lt;/li>
&lt;li>In the spirit of being pragmatic, it might seem unnecessarily restrictive to limit oneself to Bayesian procedures, and indeed, there are times when a non-Bayesian procedure may be preferable to a Bayesian one.&lt;/li>
&lt;li>However, typically, it turns out that there is no disadvantage in considering only Bayesian procedures.&lt;/li>
&lt;/ul>
&lt;h2 id="bayesian-approach-베이지안적-접근">Bayesian Approach (베이지안적 접근)&lt;/h2>
&lt;h3 id="en-4">en&lt;/h3>
&lt;ul>
&lt;li>The idea is to assume a prior probability distribution for $\theta$; that is, a distribution representing the plausibility of each possible value of $\theta$ before the data are observed.&lt;/li>
&lt;li>To make inferences about $\theta$, one simply considers the conditional distribution of $\theta$ given the observed data, referred to as the posterior distribution, representing the plausibility of each possible value of $\theta$ after seeing the data.&lt;/li>
&lt;li>This provides a coherent framework for making inferences about unknown parameters $\theta$ as well as any future data or missing data, and for making rational decisions based on such inferences.&lt;/li>
&lt;/ul>
&lt;h3 id="ko-4">ko&lt;/h3>
&lt;ul>
&lt;li>$\theta$의 사전 확률을 가정하는 것이 기본 아이디어이다. 데이터를 관측하기 전 $\theta$의 그럴듯한 가능한 값을 나타내는 분포를 설정해야한다.&lt;/li>
&lt;li>$\theta$에 대한 추론을 하기 위해서, 관측된 데이터 하에 $\theta$의 조건부 분포(사후 분포)를 간단하게 고려한다. 이는 데이터 관측 이후 $\theta$의 가능한 값들의 그럴듯함을 표현한다.&lt;/li>
&lt;li>이러한 과정을 통해서 미래의 어떤 관측값이나 유실된 데이터에 대해서도 $\theta$를 추론할 논리적인 체계를 만들어 낸다. 또한 이러한 추론을 기반으로 하여 이성적인 결정을 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="bayes-theorem">Bayes&amp;rsquo; Theorem&lt;/h2>
&lt;ul>
&lt;li>Bayes&amp;rsquo; Theorem:
&lt;ul>
&lt;li>$p(\theta \vert y) = \frac{p(\theta, y)}{p(y)} = \frac{p(y \vert \theta) p (\theta)}{p(y)}$&lt;/li>
&lt;li>where $p(y)$ is marginal distribution of y and either $p(y) = \sum_{\theta} p(\theta)p(y\vert\theta)$ or $p(y) = \int p(\theta) p(y \vert \theta) d \theta$.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>In calcuating,:
&lt;ul>
&lt;li>$p(\theta \vert y) \propto p(y \vert \theta) p(\theta)$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="bayesian-modeling">Bayesian Modeling&lt;/h2>
&lt;ol>
&lt;li>Model specification:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>$p(y \vert \theta)$ : likelihood function of y&lt;/li>
&lt;li>$p(\theta)$ : prior distribution of $\theta$&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Performing inference:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>$p(\theta \vert y)$ : posterior distribution of $\theta$ given y&lt;/li>
&lt;li>$p(\theta \vert y) \propto p(y \vert \theta) p(\theta)$&lt;/li>
&lt;li>How ?:
&lt;ul>
&lt;li>analystically-only possibile for certain models.&lt;/li>
&lt;li>using simulation when we are not able to write down the exact form of the posterior density.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>Inference results:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>ex) posterior mean : $E[\theta \vert y] = \int _{\theta} \theta p(\theta \vert y) d \theta$&lt;/li>
&lt;/ul>
&lt;h2 id="binomial-model">Binomial Model&lt;/h2>
&lt;ul>
&lt;li>Goal: estimate an unknown proportion from the results of a sequence of &amp;ldquo;Bernoulli trials&amp;rdquo; (data $y_1, &amp;hellip;, y_n$ that are either 1s or 0s)&lt;/li>
&lt;li>Assume that the data arise from a sequence of n independent trials or draws from a large population where each trial is classified as a &amp;ldquo;success&amp;rdquo; ($y_i = 1$) or a &amp;ldquo;failure&amp;rdquo; ($y_i = 0$).&lt;/li>
&lt;li>We can characterize the data by the total number of success, denoted by y, in n tirals.&lt;/li>
&lt;li>Binomial sampling model:
&lt;ul>
&lt;li>$p(y \vert \theta) = Bin(y \vert n, \theta) = \binom{n}{y} \theta^y (1 - \theta)^{n - y}$&lt;/li>
&lt;li>where the parameter $\theta$ represents the proportion of successes in the population (equivalently, the probability of success in each trial).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Question: How can we get the posterior distribution of $\theta$?&lt;/li>
&lt;li>First, we need to specify the prioir distribution for $\theta$:
&lt;ul>
&lt;li>One possibility: $p(\theta) = Unif(0, 1)$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Second, apply Bayes&amp;rsquo; Rule:
&lt;ul>
&lt;li>Posterior distribution:
&lt;ul>
&lt;li>$p(\theta \vert y) \propto p(\theta) p(y \vert \theta) \\ = I(0 \le \theta \le 1) \binom{n}{y} \theta^y (1 - \theta)^{n - y} \\ \propto I(0 \le \theta \le 1) \theta^y (1 - \theta)^{n - y} ~ Beta(y + 1, n - y + 1)$&lt;/li>
&lt;li>It means the posterior distribution follows the Beta(y + 1, n - y + 1) distribution.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Posterior mean:
&lt;ul>
&lt;li>$Beta(\alpha, \beta)$ distribution has $\mu = \frac{\alpha}{\alpha + \beta}$ as mean.&lt;/li>
&lt;li>So, Binimial model&amp;rsquo;s posterior mean is $\frac{y + 1}{n + 2}$:
&lt;ul>
&lt;li>$\frac{y + 1}{n + 2} = \frac{n}{n + 2} \frac{y}{n} + \frac{1}{n + 2} \\ = \text{weight} \times \text{MLE} + \text{weight} \times \text{ Prior information }$&lt;/li>
&lt;li>Weighted average of sample mean and prior mean&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="binomial-model-with-beta-prior">Binomial Model with Beta Prior&lt;/h2>
&lt;ul>
&lt;li>Use the different prior distribution:
&lt;ul>
&lt;li>$p(\theta) = Beta(\alpha, \beta)$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Posterior distribution:
&lt;ul>
&lt;li>$p(\theta \vert y) \propto p(\theta) p(y \vert \theta) \\ = \frac{\Gamma(\alpha + \beta)}{\Gamma(\alpha) \Gamma(\beta)} \theta^{\alpha - 1} (1 - \theta)^{\beta - 1} \binom{n}{y} \theta ^ y (1 - \theta)^{n - y} \\ \propto \theta^{\alpha - 1 + y} (1 - \theta)^{\beta - 1 + n - y} ~ Beta(\alpha + y, \beta + n - y)$&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Posterior mean:
&lt;ul>
&lt;li>$E[\theta \vert y] = \frac{\alpha + y}{\alpha + \beta + n} = \frac{n}{\alpha + \beta + n} \frac{y}{n} + \frac{\alpha + \beta}{\alpha + \beta + n} \frac{\alpha}{\alpha + \beta}$&lt;/li>
&lt;li>It is also weighted average of sample mean and prior mean&lt;/li>
&lt;li>Actually, unif(0, 1) = Beta(1, 1)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Observations:
&lt;ul>
&lt;li>When n is greater, the expectation goes to sample mean.&lt;/li>
&lt;li>When n is smaller, the expectation goes to prior mean.&lt;/li>
&lt;li>We can interpret $\alpha + \beta$ is the amount of prior information:
&lt;ul>
&lt;li>When $\alpha + \beta$ is greater (more information of prior), the expectation goes to prior mean.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="example--placenta-previa">Example : Placenta Previa&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Placenta previa is an unusual pregnancy condition in hwich the placenta is implmented very low in the uterns, obstructing the fetus from a normal vaginal delivery.&lt;/p></description></item><item><title>Multi Variant Statistical Analysis</title><link>https://minuk.dev/wiki/lectures/multi-variant-statistical-analysis/</link><pubDate>Fri, 24 Sep 2021 12:38:16 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/multi-variant-statistical-analysis/</guid><description>2021-fall lecture</description></item><item><title>주석 관련 좋은 글</title><link>https://minuk.dev/wiki/comment/</link><pubDate>Sun, 05 Sep 2021 19:11:08 +0900</pubDate><guid>https://minuk.dev/wiki/comment/</guid><description>주석다는건 언제나 힘들다 한번 읽어보자</description></item><item><title>ssh 관련 명령어 모음</title><link>https://minuk.dev/wiki/ssh/</link><pubDate>Fri, 03 Sep 2021 19:52:27 +0900</pubDate><guid>https://minuk.dev/wiki/ssh/</guid><description>내가 검색하기 귀찮아서 모아둔 스크립트</description></item><item><title>amazon msk 삽질</title><link>https://minuk.dev/wiki/msk/</link><pubDate>Mon, 30 Aug 2021 15:23:10 +0900</pubDate><guid>https://minuk.dev/wiki/msk/</guid><description>&lt;h2 id="삽질-목록">삽질 목록&lt;/h2>
&lt;h3 id="plaintext-안만들어-놓고-tls없이-접속하려고-함">PLAINTEXT 안만들어 놓고 TLS없이 접속하려고 함.&lt;/h3>
&lt;ul>
&lt;li>MSK 만들때 encryption 에서 똑바로 확인 안하고 무지성으로 만들어서 생긴 문제&lt;/li>
&lt;li>해결법 : Plaintext interface 도 열어둠(TLS도 언젠가 사용할지 모르니까 열어둠)&lt;/li>
&lt;/ul>
&lt;h3 id="msk에-접속이-안된문제">MSK에 접속이 안된문제&lt;/h3>
&lt;ul>
&lt;li>같은 VPC인데 왜 접속이 안되지? 라면서 삽질함&lt;/li>
&lt;li>해결법:
&lt;ul>
&lt;li>&lt;a href="https://docs.aws.amazon.com/msk/latest/developerguide/create-client-machine.html">https://docs.aws.amazon.com/msk/latest/developerguide/create-client-machine.html&lt;/a> 에서 18~21번을 안해줬었음&lt;/li>
&lt;li>굳이 EC2가 있을때 메뉴얼 따라할 필요가 없다고 생각했는데 보안 설정을 추가로 해줘야한다는 것을 알게됨&lt;/li>
&lt;li>private ip에 대해서 모든 traffic을 허용해주면 됨.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="unknown-topic">Unknown topic&lt;/h3>
&lt;ul>
&lt;li>Spring 에서 Listener 생성할 때 Unknown topic 이라고 뜨는 문제&lt;/li>
&lt;li>해결법:
&lt;ul>
&lt;li>토픽을 생성을 안해줌&lt;/li>
&lt;li>&lt;a href="https://docs.aws.amazon.com/msk/latest/developerguide/create-topic.html">https://docs.aws.amazon.com/msk/latest/developerguide/create-topic.html&lt;/a>&lt;/li>
&lt;li>를 따라서 해줘야한다. 여기서 위에 적힌 접속이 안되는 문제를 겪었음. zookeeper는 위의 보안 그룹만 설정해주면 따라가는 듯?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="the-class-is-not-in-the-trusted-packages">The class is not in the trusted packages&lt;/h3>
&lt;ul>
&lt;li>문제점 : 데이터를 보낼때 패키지를 못믿겠다고 터지는것&lt;/li>
&lt;li>해결법 :
&lt;ul>
&lt;li>원래는 코딩적으로 패키지마다 풀어줘야하는데, 어짜피 VPC내부에서 보낸것만 받을수 있고, 안정성 때문에 하나하나 풀 이유가 없다고 생각해서 전부 풀어주는 방법을 선택함&lt;/li>
&lt;li>&lt;code>spring.kafka.consumer.properties.spring.json.trusted.packages=*&lt;/code>&lt;/li>
&lt;li>참고 : &lt;a href="https://stackoverflow.com/questions/51688924/spring-kafka-the-class-is-not-in-the-trusted-packages">https://stackoverflow.com/questions/51688924/spring-kafka-the-class-is-not-in-the-trusted-packages&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>케라스 창시자에게 배우는 딥러닝 책 공부</title><link>https://minuk.dev/wiki/keras-book/</link><pubDate>Sun, 22 Aug 2021 16:04:33 +0900</pubDate><guid>https://minuk.dev/wiki/keras-book/</guid><description>어디까지 읽었는지, 추가적으로 기억할만한거 정리</description></item><item><title>도메인 주도 설계로 시작하는 마이크로서비스 개발</title><link>https://minuk.dev/wiki/msa-from-ddd/</link><pubDate>Thu, 22 Jul 2021 02:56:55 +0900</pubDate><guid>https://minuk.dev/wiki/msa-from-ddd/</guid><description>도메인 주도 설계로 시작하는 마이크로서비스 개발 책 정리</description></item><item><title>2021-07-21 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2021-07-18/</link><pubDate>Sun, 18 Jul 2021 20:41:27 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2021-07-18/</guid><description>자존감이 너무 떨어진듯?</description></item><item><title>아이엠루트 스터디 자료 정리</title><link>https://minuk.dev/wiki/iamroot19/</link><pubDate>Sat, 10 Jul 2021 19:09:59 +0900</pubDate><guid>https://minuk.dev/wiki/iamroot19/</guid><description>&lt;h2 id="instruction-참고">instruction 참고&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://trace32.com/wiki/index.php/B,_BL,_BX_and_BLX">http://trace32.com/wiki/index.php/B,_BL,_BX_and_BLX&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://egloos.zum.com/rousalome/v/9973524">http://egloos.zum.com/rousalome/v/9973524&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://casionwoo.tistory.com/25">https://casionwoo.tistory.com/25&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="heads">head.S&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>_head:
	/*
	 * DO NOT MODIFY. Image header expected by Linux boot-loaders.
	 */
#ifdef CONFIG_EFI
	/*
	 * This add instruction has no meaningful effect except that
	 * its opcode forms the magic &amp;#34;MZ&amp;#34; signature required by UEFI.
	 */
	add	x13, x18, #0x16
	b	primary_entry
#else
	b	primary_entry			// branch to kernel start, magic
	.long	0				// reserved
#endif&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>add 는 &lt;code>op{cond}{S} Rd, Rn, Operand2&lt;/code>로 &lt;code>add x13, x18, #0x16&lt;/code> 은 &lt;code>x13 = x18 + 0x16&lt;/code> 을 의미한다.&lt;/li>
&lt;li>하지만 여기서는 의미가 없는 연산이고 ascii로 번역하면 MZ가 되는 내용일 뿐이다.:
&lt;ul>
&lt;li>UEFI 를 지원하면 MZ가 적혀있게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>실제로 실행되는 것은 다음 코드부터 동작한다.&lt;/li>
&lt;li>b 는 branch 를 의미하며, &lt;code>primary_entry&lt;/code> 로 분기하라는 것을 의미한다. x86에서 jump ? 랑 비슷한 느낌인듯&lt;/li>
&lt;li>간략하게 써보자면







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="goto%20primary_entry;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">goto&lt;/span> primary_entry;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;h3 id="primary_entry">primary_entry&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="SYM_CODE_START%28primary_entry%29%0a%09bl%09preserve_boot_args%0a%09bl%09el2_setup%09%09%09//%20Drop%20to%20EL1,%20w0=cpu_boot_mode%0a%09adrp%09x23,%20__PHYS_OFFSET%0a%09and%09x23,%20x23,%20MIN_KIMG_ALIGN%20-%201%09//%20KASLR%20offset,%20defaults%20to%200%0a%09bl%09set_cpu_boot_mode_flag%0a%09bl%09__create_page_tables%0a%09/*%0a%09%20*%20The%20following%20calls%20CPU%20setup%20code,%20see%20arch/arm64/mm/proc.S%20for%0a%09%20*%20details.%0a%09%20*%20On%20return,%20the%20CPU%20will%20be%20ready%20for%20the%20MMU%20to%20be%20turned%20on%20and%0a%09%20*%20the%20TCR%20will%20have%20been%20set.%0a%09%20*/%0a%09bl%09__cpu_setup%09%09%09//%20initialise%20processor%0a%09b%09__primary_switch%0aSYM_CODE_END%28primary_entry%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>SYM_CODE_START(primary_entry)
	bl	preserve_boot_args
	bl	el2_setup			// Drop to EL1, w0=cpu_boot_mode
	adrp	x23, __PHYS_OFFSET
	and	x23, x23, MIN_KIMG_ALIGN - 1	// KASLR offset, defaults to 0
	bl	set_cpu_boot_mode_flag
	bl	__create_page_tables
	/*
	 * The following calls CPU setup code, see arch/arm64/mm/proc.S for
	 * details.
	 * On return, the CPU will be ready for the MMU to be turned on and
	 * the TCR will have been set.
	 */
	bl	__cpu_setup			// initialise processor
	b	__primary_switch
SYM_CODE_END(primary_entry)&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>
&lt;p>bl 은 branch with link를 의미, r14 레지스터(링크 레지스터)에 돌아올 주소(pc + 2)를 남김&lt;/p></description></item><item><title>boj-9019</title><link>https://minuk.dev/wiki/boj-9019/</link><pubDate>Mon, 28 Jun 2021 03:23:08 +0900</pubDate><guid>https://minuk.dev/wiki/boj-9019/</guid><description>&lt;h2 id="c">C#&lt;/h2>
&lt;ul>
&lt;li>채점번호 30417320&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="using%20System;%0ausing%20System.Text;%0ausing%20System.Collections.Generic;%0aDictionary%3cint,%20%28int%20BeforeNum,%20char%20BeforeCalc%29%3e%20history%20=%20new%28%29;%0a%09%0aint%20t%20=%20int.Parse%28Console.ReadLine%28%29%29;%0afor%20%28int%20i%20=%200;%20i%20%3c%20t;%20i&amp;#43;&amp;#43;%29%0a%7b%0a%09string[]%20input%20=%20Console.ReadLine%28%29.Split%28%27%20%27%29;%0a%09%0a%09int%20a%20=%20int.Parse%28input[0]%29;%0a%09int%20b%20=%20int.Parse%28input[1]%29;%0a%09%0a%09history.Clear%28%29;%0a%20%20%20%20history[a]%20=%20%280,%20%27%5c0%27%29;%0a%0a%09Queue%3cint%3e%20q%20=%20new%20Queue%3cint%3e%28%29;%0a%20%20%20%20q.Enqueue%28a%29;%0a%09%0a%09while%20%28!history.ContainsKey%28b%29%29%0a%09%7b%0a%09%09int%20num%20=%20q.Dequeue%28%29;%0a%20%20%20%20%20%20%20%20%0a%09%09%09int%20d%20=%20%282%20*%20num%29%20%25%2010000;%0a%09%09%09int%20s%20=%20%28num%20&amp;#43;%209999%29%20%25%2010000;%0a%09%09%09int%20l%20=%20%28num%20/%201000%20&amp;#43;%2010%20*%20num%29%20%25%2010000;%0a%09%09%09int%20r%20=%201000%20*%20%28num%20%25%2010%29%20&amp;#43;%20num%20/%2010;%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28d%29%29%0a%09%09%09%7b%0a%09%09%09%09history[d]%20=%20%28num,%20%27D%27%29;%0a%09%09%09%09if%20%28d%20==%20b%29%20break;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20q.Enqueue%28d%29;%0a%09%09%09%7d%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28s%29%29%0a%09%09%09%7b%0a%09%09%09%09history[s]%20=%20%28num,%20%27S%27%29;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28s%20==%20b%29%20break;%0a%09%09%09%09q.Enqueue%28s%29;%0a%09%09%09%7d%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28l%29%29%0a%09%09%09%7b%0a%09%09%09%09history[l]%20=%20%28num,%20%27L%27%29;%0a%09%09%09%09if%20%28l%20==%20b%29%20break;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20q.Enqueue%28l%29;%0a%09%09%09%7d%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28r%29%29%0a%09%09%09%7b%0a%09%09%09%09history[r]%20=%20%28num,%20%27R%27%29;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28r%20==%20b%29%20break;%0a%09%09%09%09q.Enqueue%28r%29;%0a%09%09%09%7d%0a%09%7d%0a%09%0a%09StringBuilder%20outputBuilder%20=%20new%28%29;%0a%09for%20%28int%20before%20=%20b;%20before%20!=%20a;%20before%20=%20history[before].BeforeNum%29%0a%09%09outputBuilder.Append%28history[before].BeforeCalc%29;%0a%20%20%20%20char[]%20charArray%20=%20outputBuilder.ToString%28%29.ToCharArray%28%29;%0a%20%20%20%20Array.Reverse%28charArray%29;%0a%09Console.WriteLine%28new%20string%28charArray%29%29;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Generic;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, (&lt;span style="color:#66d9ef">int&lt;/span> BeforeNum, &lt;span style="color:#66d9ef">char&lt;/span> BeforeCalc)&amp;gt; history = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> t = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(Console.ReadLine());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; t; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">string&lt;/span>[] input = Console.ReadLine().Split(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> a = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(input[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> b = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(input[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	history.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> history[a] = (&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Queue&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt; q = &lt;span style="color:#66d9ef">new&lt;/span> Queue&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.Enqueue(a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (!history.ContainsKey(b))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">int&lt;/span> num = q.Dequeue();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> d = (&lt;span style="color:#ae81ff">2&lt;/span> * num) % &lt;span style="color:#ae81ff">10000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> s = (num + &lt;span style="color:#ae81ff">9999&lt;/span>) % &lt;span style="color:#ae81ff">10000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> l = (num / &lt;span style="color:#ae81ff">1000&lt;/span> + &lt;span style="color:#ae81ff">10&lt;/span> * num) % &lt;span style="color:#ae81ff">10000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> r = &lt;span style="color:#ae81ff">1000&lt;/span> * (num % &lt;span style="color:#ae81ff">10&lt;/span>) + num / &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(d))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[d] = (num, &lt;span style="color:#e6db74">&amp;#39;D&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">if&lt;/span> (d == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.Enqueue(d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[s] = (num, &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (s == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				q.Enqueue(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(l))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[l] = (num, &lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#66d9ef">if&lt;/span> (l == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.Enqueue(l);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(r))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[r] = (num, &lt;span style="color:#e6db74">&amp;#39;R&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (r == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				q.Enqueue(r);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	StringBuilder outputBuilder = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> before = b; before != a; before = history[before].BeforeNum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		outputBuilder.Append(history[before].BeforeCalc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>[] charArray = outputBuilder.ToString().ToCharArray();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.Reverse(charArray);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Console.WriteLine(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>(charArray));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>채점번호 30417393&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="using%20System;%0ausing%20System.Text;%0ausing%20System.Collections.Generic;%0a%0aint%20t%20=%20int.Parse%28Console.ReadLine%28%29%29;%0aDictionary%3cint,%20%28int%20BeforeNum,%20char%20BeforeCalc%29%3e%20history%20=%20new%28%29;%0afor%20%28int%20i%20=%200;%20i%20%3c%20t;%20i&amp;#43;&amp;#43;%29%0a%7b%0a%09string[]%20input%20=%20Console.ReadLine%28%29.Split%28%27%20%27%29;%0a%09%0a%09int%20a%20=%20int.Parse%28input[0]%29;%0a%09int%20b%20=%20int.Parse%28input[1]%29;%0a%09history.Clear%28%29;%0a%20%20%20%20history[a]%20=%20%28a,%20%27%5c0%27%29;%0a%0a%09SortedSet%3cint%3e%20beforeSet%20=%20new%28%29%20%7b%20a%20%7d;%0a%09%0a%09while%20%28!history.ContainsKey%28b%29%29%0a%09%7b%0a%09%09SortedSet%3cint%3e%20tempSet%20=%20new%28%29;%0a%09%09%0a%09%09foreach%20%28int%20num%20in%20beforeSet%29%0a%09%09%7b%0a%09%09%09int%20d%20=%20%282%20*%20num%29%20%25%2010000;%0a%09%09%09int%20s%20=%20%28num%20&amp;#43;%209999%29%20%25%2010000;%0a%09%09%09int%20l%20=%20%28num%20/%201000%20&amp;#43;%2010%20*%20num%29%20%25%2010000;%0a%09%09%09int%20r%20=%201000%20*%20%28num%20%25%2010%29%20&amp;#43;%20num%20/%2010;%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28d%29%29%0a%09%09%09%7b%0a%09%09%09%09history[d]%20=%20%28num,%20%27D%27%29;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28d%20==%20b%29%20break;%0a%09%09%09%09tempSet.Add%28d%29;%0a%09%09%09%7d%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28s%29%29%0a%09%09%09%7b%0a%09%09%09%09history[s]%20=%20%28num,%20%27S%27%29;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28s%20==%20b%29%20break;%0a%09%09%09%09tempSet.Add%28s%29;%0a%09%09%09%7d%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28l%29%29%0a%09%09%09%7b%0a%09%09%09%09history[l]%20=%20%28num,%20%27L%27%29;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28l%20==%20b%29%20break;%0a%09%09%09%09tempSet.Add%28l%29;%0a%09%09%09%7d%0a%09%09%09%0a%09%09%09if%20%28!history.ContainsKey%28r%29%29%0a%09%09%09%7b%0a%09%09%09%09history[r]%20=%20%28num,%20%27R%27%29;%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20%28r%20==%20b%29%20break;%0a%09%09%09%09tempSet.Add%28r%29;%0a%09%09%09%7d%0a%09%09%7d%0a%09%09%0a%09%09beforeSet%20=%20tempSet;%0a%09%7d%0a%09%0a%09StringBuilder%20outputBuilder%20=%20new%28%29;%0a%09for%20%28int%20before%20=%20b;%20before%20!=%20a;%20before%20=%20history[before].BeforeNum%29%0a%09%09outputBuilder.Append%28history[before].BeforeCalc%29;%0a%20%20%20%20char[]%20charArray%20=%20outputBuilder.ToString%28%29.ToCharArray%28%29;%0a%20%20%20%20Array.Reverse%28charArray%29;%0a%09Console.WriteLine%28new%20string%28charArray%29%29;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> System.Collections.Generic;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> t = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(Console.ReadLine());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Dictionary&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>, (&lt;span style="color:#66d9ef">int&lt;/span> BeforeNum, &lt;span style="color:#66d9ef">char&lt;/span> BeforeCalc)&amp;gt; history = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i = &lt;span style="color:#ae81ff">0&lt;/span>; i &amp;lt; t; i++)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">string&lt;/span>[] input = Console.ReadLine().Split(&lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> a = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(input[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span> b = &lt;span style="color:#66d9ef">int&lt;/span>.Parse(input[&lt;span style="color:#ae81ff">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	history.Clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> history[a] = (a, &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	SortedSet&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt; beforeSet = &lt;span style="color:#66d9ef">new&lt;/span>() { a };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">while&lt;/span> (!history.ContainsKey(b))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		SortedSet&amp;lt;&lt;span style="color:#66d9ef">int&lt;/span>&amp;gt; tempSet = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">foreach&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> num &lt;span style="color:#66d9ef">in&lt;/span> beforeSet)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> d = (&lt;span style="color:#ae81ff">2&lt;/span> * num) % &lt;span style="color:#ae81ff">10000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> s = (num + &lt;span style="color:#ae81ff">9999&lt;/span>) % &lt;span style="color:#ae81ff">10000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> l = (num / &lt;span style="color:#ae81ff">1000&lt;/span> + &lt;span style="color:#ae81ff">10&lt;/span> * num) % &lt;span style="color:#ae81ff">10000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">int&lt;/span> r = &lt;span style="color:#ae81ff">1000&lt;/span> * (num % &lt;span style="color:#ae81ff">10&lt;/span>) + num / &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(d))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[d] = (num, &lt;span style="color:#e6db74">&amp;#39;D&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (d == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				tempSet.Add(d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[s] = (num, &lt;span style="color:#e6db74">&amp;#39;S&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (s == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				tempSet.Add(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(l))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[l] = (num, &lt;span style="color:#e6db74">&amp;#39;L&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (l == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				tempSet.Add(l);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#66d9ef">if&lt;/span> (!history.ContainsKey(r))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				history[r] = (num, &lt;span style="color:#e6db74">&amp;#39;R&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (r == b) &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				tempSet.Add(r);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		beforeSet = tempSet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	StringBuilder outputBuilder = &lt;span style="color:#66d9ef">new&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> before = b; before != a; before = history[before].BeforeNum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		outputBuilder.Append(history[before].BeforeCalc);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span>[] charArray = outputBuilder.ToString().ToCharArray();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.Reverse(charArray);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Console.WriteLine(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>(charArray));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>2021년 6월 19일 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2021-06-19/</link><pubDate>Sat, 19 Jun 2021 01:11:54 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2021-06-19/</guid><description>2021-1학기</description></item><item><title>독성말투</title><link>https://minuk.dev/wiki/%EB%8F%85%EC%84%B1%EB%A7%90%ED%88%AC/</link><pubDate>Thu, 10 Jun 2021 06:11:23 +0900</pubDate><guid>https://minuk.dev/wiki/%EB%8F%85%EC%84%B1%EB%A7%90%ED%88%AC/</guid><description>독성말투를 고치기 위해서 말투 교정</description></item><item><title>Regression Analysis</title><link>https://minuk.dev/wiki/lectures/regression/</link><pubDate>Sun, 06 Jun 2021 14:56:14 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/regression/</guid><description>2021 Spring</description></item><item><title>피시실</title><link>https://minuk.dev/wiki/%ED%94%BC%EC%8B%9C%EC%8B%A4/</link><pubDate>Thu, 03 Jun 2021 16:29:19 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%94%BC%EC%8B%9C%EC%8B%A4/</guid><description>학교 피시실에서 쓰는 세팅 + 학교 할일 모음</description></item><item><title>Multicore Computing</title><link>https://minuk.dev/wiki/lectures/multicore/</link><pubDate>Wed, 02 Jun 2021 17:11:08 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/multicore/</guid><description>&lt;h2 id="introduction-to-multicore-computing">Introduction to Multicore Computing&lt;/h2>
&lt;h3 id="multicore-processor">Multicore Processor&lt;/h3>
&lt;ul>
&lt;li>A single computing component with two or more independent cores
&lt;ul>
&lt;li>Core(CPU): computing unit that reads/executes program instructions&lt;/li>
&lt;li>share cache or not&lt;/li>
&lt;li>symmetric or asymmetric&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multiple cores run multiple instructions at the same time(concurrently)&lt;/li>
&lt;li>Increase overall program speed(performance)&lt;/li>
&lt;li>performance grained by multi-core processor&lt;/li>
&lt;/ul>
&lt;h3 id="manycore-processor-gpu">Manycore processor (GPU)&lt;/h3>
&lt;ul>
&lt;li>multi-core architectures with an especially high number of cores(thousands)&lt;/li>
&lt;li>CUDA
&lt;ul>
&lt;li>Compute Unified Device Architecture&lt;/li>
&lt;li>parallel computing platform and programming model created by NVIDIA and implemented by the graphics processing units (GPUs) that they produce&lt;/li>
&lt;li>GPGPU (General Purpose Graphics Prcessing Unit)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OpenCL
&lt;ul>
&lt;li>Open Standard parallel programming platform&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="what-is-prallel-computing">What is Prallel Computing?&lt;/h3>
&lt;ul>
&lt;li>Parallel computing : using multiple processors in parallel to solve problems more quickly than with an single processor&lt;/li>
&lt;li>Examples:
&lt;ul>
&lt;li>A cluster computer that contains multiple PCs combined together with a high speed network&lt;/li>
&lt;li>A shared memory multiprocessor by connecting multiple processors to a single memory system&lt;/li>
&lt;li>A Chip Multi-Processor(CMP) contains multiple processors (called cores) on a single chip&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Concurrent execution comes from desire for performance.&lt;/li>
&lt;/ul>
&lt;h3 id="parallelism-vs-concurrency">Parallelism vs Concurrency&lt;/h3>
&lt;ul>
&lt;li>Parallel Programming
&lt;ul>
&lt;li>Using additional computational resources to produce and answer faster&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Concurrent Programming
&lt;ul>
&lt;li>Correctly and efficiently controlling access by multiple threads to shared resources&lt;/li>
&lt;li>Problem of preventing a bad interleaving of operations from different thrads&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Often used interchangeably&lt;/li>
&lt;/ul>
&lt;h3 id="parallel-programming-techniques">Parallel Programming Techniques&lt;/h3>
&lt;ul>
&lt;li>Shared Memory : OpenMP, pthreads&lt;/li>
&lt;li>Distributed Memory : MPI&lt;/li>
&lt;li>Distributed/Shared Memory : MPI + OpenMP&lt;/li>
&lt;li>GPU Parallel Programming : CUDA, OpenCL&lt;/li>
&lt;/ul>
&lt;h3 id="parallel-processing-systems">Parallel Processing Systems&lt;/h3>
&lt;ul>
&lt;li>Small-Scale Multicore Environment
&lt;ul>
&lt;li>Notebook, Workstation, etc.&lt;/li>
&lt;li>POSIX threads&lt;/li>
&lt;li>GPGPU-based supercomputer&lt;/li>
&lt;li>Development of CUDA/OpenCL/GPGPU&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Large-Scale Multicore Environemnt
&lt;ul>
&lt;li>Supercomputer&lt;/li>
&lt;li>Clusters&lt;/li>
&lt;li>Servers&lt;/li>
&lt;li>Grid Computing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="parallel-computing-vs-distirbuted-computing">Parallel Computing vs. Distirbuted Computing&lt;/h3>
&lt;ul>
&lt;li>Parallel Computing
&lt;ul>
&lt;li>all processors may have access to a shared memory to exchange information between processors.&lt;/li>
&lt;li>more tightly coupled to multi-threading.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Distributed Computing
&lt;ul>
&lt;li>multiple computers communicate through network&lt;/li>
&lt;li>each processor has its own private memory(distributed memory)&lt;/li>
&lt;li>executing sub-taks on different machines and then merging the results&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cluster-computing-vs-grid-computing">Cluster Computing vs. Grid Computing&lt;/h3>
&lt;ul>
&lt;li>Cluster Computing:
&lt;ul>
&lt;li>a set of loosely connected computers that work together so that in many respects they can be viewed as a single system.&lt;/li>
&lt;li>good price /performance.&lt;/li>
&lt;li>memory not shared&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Grid Computing
&lt;ul>
&lt;li>federation of computer resources from multiple locations to reach a common goal (a large scale distributed system)&lt;/li>
&lt;li>grids tend to be more loosely coupled, heterogeneous, and geographically dispered&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cloud-computing">Cloud Computing&lt;/h3>
&lt;ul>
&lt;li>shares networked computing resources rather than having local servers or personal devices to handle applicatons.&lt;/li>
&lt;li>&amp;ldquo;Cloud&amp;rdquo; is used as a metaphor for &amp;ldquo;Internet&amp;rdquo; meaning &amp;quot; a type of Internet-based computing.&amp;quot;&lt;/li>
&lt;/ul>
&lt;h3 id="good-parallel-program">Good Parallel Program&lt;/h3>
&lt;ul>
&lt;li>Correct (Results)&lt;/li>
&lt;li>Good Performance&lt;/li>
&lt;li>Scalability&lt;/li>
&lt;li>Load Balance&lt;/li>
&lt;li>Portability&lt;/li>
&lt;li>Hardware Specific Utilization&lt;/li>
&lt;/ul>
&lt;h3 id="moores-law">Moore&amp;rsquo;s Law&lt;/h3>
&lt;ul>
&lt;li>Doublign of the number of transisotrs on integrated circuits rougly every two years.&lt;/li>
&lt;/ul>
&lt;h3 id="computer-hardware-trend">Computer Hardware Trend&lt;/h3>
&lt;ul>
&lt;li>Chip density is continuing increase ~ 2x every 2years:
&lt;ul>
&lt;li>Clock speed is not(in high clock speed, power consumption and heat generation is too high to be tolerated.)&lt;/li>
&lt;li>
&lt;h1 id="of-cores-may-double-instead">of cores may double instead&lt;/h1>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>No more hidden paralleism(ILP;instruction level parallelism) to be found&lt;/li>
&lt;li>Transistor# still rising&lt;/li>
&lt;li>Clock speed flattening shareply&lt;/li>
&lt;li>Need Multicore programming&lt;/li>
&lt;/ul>
&lt;h3 id="examples-of-paralle-lcomputer">Examples of Paralle lComputer&lt;/h3>
&lt;ul>
&lt;li>Chip MultiProcessor (CMP)&lt;/li>
&lt;li>Symemetric Multiprocessor(SMP)&lt;/li>
&lt;li>Heterogeneous Chips&lt;/li>
&lt;li>Clusters&lt;/li>
&lt;li>Supercomputers&lt;/li>
&lt;/ul>
&lt;h3 id="generic-smp">Generic SMP&lt;/h3>
&lt;ul>
&lt;li>Symmetric MultiProcessor(SMP) System:
&lt;ul>
&lt;li>multiprocessor hardware architecture&lt;/li>
&lt;li>two or more identical processors are connected to a single shared memory&lt;/li>
&lt;li>controlled by a single OS instance&lt;/li>
&lt;li>Most common multiprocessor systems today use and SMP architecture&lt;/li>
&lt;li>Both Multicore and multi-CPU&lt;/li>
&lt;li>Single logical memory image&lt;/li>
&lt;li>Shared bus often bottleneck&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;ul>
&lt;li>All computers are now parallel computers&lt;/li>
&lt;li>Multi-core processors represent an important new trend in computer achitecture.&lt;/li>
&lt;li>They enable true thread-level parallelism with great energy efficiency and scalability.&lt;/li>
&lt;li>To utilize their full potential, applications will need to move from a single to a multi-threaded model.&lt;/li>
&lt;li>The software industry needs to get back into the state where existing applications run faster on new hardware.&lt;/li>
&lt;/ul>
&lt;h3 id="principles-of-parallel-computing">Principles of Parallel Computing&lt;/h3>
&lt;ul>
&lt;li>Finding enough parallelism (Amdahl&amp;rsquo;s Law)&lt;/li>
&lt;li>granularity&lt;/li>
&lt;li>Locality&lt;/li>
&lt;li>Load balance&lt;/li>
&lt;li>Coordination and Synchronization&lt;/li>
&lt;/ul>
&lt;h3 id="overhead-of-parallelism">Overhead of Parallelism&lt;/h3>
&lt;ul>
&lt;li>Tradeoff: Algorithm needs sufficiently large units of work to run fast in parallel, but not so large that htere is not enough parallel work.&lt;/li>
&lt;/ul>
&lt;h3 id="locality-and-parallelism">Locality and Parallelism&lt;/h3>
&lt;ul>
&lt;li>Large memories are slow, fast memories are small&lt;/li>
&lt;li>Storage hierarchies are large and fast on average&lt;/li>
&lt;li>Parallel processors, collectively, have large, fast cache&lt;/li>
&lt;li>Algorithm should do most work on loccal data&lt;/li>
&lt;/ul>
&lt;h3 id="load-imbalance">Load Imbalance&lt;/h3>
&lt;ul>
&lt;li>Load imbalance is the time that some processors in the system are idle due to:
&lt;ul>
&lt;li>insufficient parallelism (during the phase)&lt;/li>
&lt;li>unequal size tasks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="performance-of-parallel-programs">Performance of Parallel Programs&lt;/h2>
&lt;h3 id="flynns-taxonomy-on-parallel-computer">Flynn&amp;rsquo;s Taxonomy on Parallel Computer&lt;/h3>
&lt;ul>
&lt;li>Classified with two independent dimension:
&lt;ul>
&lt;li>Instruction stream&lt;/li>
&lt;li>Data stream&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="sisd-single-instruction-single-data">SISD (Single Instruction, Single Data)&lt;/h4>
&lt;ul>
&lt;li>A serial (non-parallel) computer&lt;/li>
&lt;li>This is the oldes and even today, the most common type of computer&lt;/li>
&lt;/ul>
&lt;h4 id="simd-single-instruction-multiple-data">SIMD (Single Instruction, Multiple Data)&lt;/h4>
&lt;ul>
&lt;li>All processing units execute the same instruction at any given clock cycle&lt;/li>
&lt;li>Best suited for specialized problems characterized by a high degree of regularity, such as graphics/image processing.&lt;/li>
&lt;/ul>
&lt;h4 id="misd-multiple-instruction-single-data">MISD (Multiple Instruction, Single Data)&lt;/h4>
&lt;ul>
&lt;li>Each processing unit operates on the data independently via separate instruction streams.&lt;/li>
&lt;li>Few actual examples of this class of parallel computer have ever existed.&lt;/li>
&lt;/ul>
&lt;h4 id="mimd-multiple-instruction-multiple-data">MIMD (Multiple Instruction, Multiple Data)&lt;/h4>
&lt;ul>
&lt;li>Very processor may be executing a different instruction stream&lt;/li>
&lt;li>Every processor may be working with a different data stream&lt;/li>
&lt;li>the most common type of parallel computer&lt;/li>
&lt;li>Most modern supercomputers fall into this category.&lt;/li>
&lt;/ul>
&lt;h3 id="creating-a-parallel-program">Creating a Parallel Program&lt;/h3>
&lt;ol>
&lt;li>Decomposition&lt;/li>
&lt;li>Assignment&lt;/li>
&lt;li>Orchestration/Mapping&lt;/li>
&lt;/ol>
&lt;h4 id="decomposition">Decomposition&lt;/h4>
&lt;ul>
&lt;li>Break up computation into tasks to be divided among processes&lt;/li>
&lt;li>identify concurrency and decide level at which to exploit it.&lt;/li>
&lt;/ul>
&lt;h4 id="domain-decomposition">Domain Decomposition&lt;/h4>
&lt;ul>
&lt;li>data associated with a probelm is decomposed.&lt;/li>
&lt;li>Each parallel task then works on a portion of data.&lt;/li>
&lt;/ul>
&lt;h4 id="functional-decomposition">Functional Decomposition&lt;/h4>
&lt;ul>
&lt;li>the focus is on the computation that is to be performed rather than on the data&lt;/li>
&lt;li>problem is decomposed according to the work that must be done.&lt;/li>
&lt;li>Each task then performs a portion of the overall work.&lt;/li>
&lt;/ul>
&lt;h4 id="assignment">Assignment&lt;/h4>
&lt;ul>
&lt;li>Assign taks to threads:
&lt;ul>
&lt;li>Balance workload, reduce communication and management cost&lt;/li>
&lt;li>Together with decomposition, and callled partitioning&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Can be performed statically, or dynamically&lt;/li>
&lt;li>Goal:
&lt;ul>
&lt;li>Balanced workload&lt;/li>
&lt;li>Reduced communication costs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="orchestration">Orchestration&lt;/h4>
&lt;ul>
&lt;li>Sturucturing communication and synchronization&lt;/li>
&lt;li>Organizing data structures in memory and scheduling taks temporarlly&lt;/li>
&lt;li>Goals:
&lt;ul>
&lt;li>Reduce cost of communication and synchronization as seen by processors&lt;/li>
&lt;li>Reserve locality of data reference (including data structure organization)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="mapping">Mapping&lt;/h4>
&lt;ul>
&lt;li>Mapping threads to execution units (CPU cores)&lt;/li>
&lt;li>Parallel Pplication tries to use the entire machine&lt;/li>
&lt;li>Usually a job for OS&lt;/li>
&lt;li>Mapping decision:
&lt;ul>
&lt;li>Place related threads (cooperating threas) on the same processor&lt;/li>
&lt;li>maximize locality, data sharing, minimize coasts of comm/sync&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="performance-of-parallel-programs-1">Performance of Parallel Programs&lt;/h3>
&lt;ul>
&lt;li>Decomposition:
&lt;ul>
&lt;li>Coverage of parallelism in algorithm&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Assignment:
&lt;ul>
&lt;li>Granularity of partitioning among processors&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Orchestration/Mapping:
&lt;ul>
&lt;li>Locality of computation and communication&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="coverage-amdahls-law">Coverage (Amdahl&amp;rsquo;s Law)&lt;/h4>
&lt;ul>
&lt;li>Potential program speedup is defined by the fraction of code that can be prallelized&lt;/li>
&lt;li>p = fraction of work that can be prallelized, n = the number of processor&lt;/li>
&lt;li>speedup = old running time / new runing time = 1 / { (1-p) + p/n }&lt;/li>
&lt;/ul>
&lt;h4 id="performance-scalability">Performance Scalability&lt;/h4>
&lt;ul>
&lt;li>Scalability : the capability of a system to increase total throughput under an increased load when resources(typically hardware) are added&lt;/li>
&lt;/ul>
&lt;h4 id="granularity">Granularity&lt;/h4>
&lt;ul>
&lt;li>Granularity is a qualitative measure of the ratio of computation to communication:
&lt;ul>
&lt;li>Coarse: relatively large amounts of computational work are done between communication events&lt;/li>
&lt;li>Fine : relatively small amounts of computational work are done between communication events&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Computation stages are typically seperated from periods of communication by synchronization events&lt;/li>
&lt;li>Granularity:
&lt;ul>
&lt;li>the extent to which a system is broekn down into small parts&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Corase-grained systems:
&lt;ul>
&lt;li>consist of fewer, larger components than fine-grained systems&lt;/li>
&lt;li>regards large subcomponents&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Fine-grained systems:
&lt;ul>
&lt;li>regard smaller components of which the larger ones are composed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="fine-vs-coarse-granularity">Fine vs Coarse Granularity&lt;/h3>
&lt;ul>
&lt;li>Fine-grain Parallelism:
&lt;ul>
&lt;li>Low computation to communication ratio&lt;/li>
&lt;li>Samll amounts of computational work between communication stages&lt;/li>
&lt;li>Less oppertunity for performance enhancement&lt;/li>
&lt;li>HIgh communication overhead&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Coarse-grain Parallelism:
&lt;ul>
&lt;li>High computation to communication ratio&lt;/li>
&lt;li>Large amounts of computational work between communication events&lt;/li>
&lt;li>More oppertunity for performance increase&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The most efficient granularity is dependent on the algorithem and the hardware&lt;/li>
&lt;li>In most cases the overhead associated with communications and synchronization is high relative to execution speed so it is advantageous to have coarse granularity.&lt;/li>
&lt;li>Fine-grain parallelism can help reduce overheads due to load imbalance.&lt;/li>
&lt;/ul>
&lt;h3 id="load-balancing">Load Balancing&lt;/h3>
&lt;ul>
&lt;li>distributing approximately equal amounts of work among taks so that all taks are kept busy all of the time.&lt;/li>
&lt;li>It can be sonsidered a minimization of task idel time.&lt;/li>
&lt;/ul>
&lt;h3 id="general-load-balancing-problem">General Load Balancing Problem&lt;/h3>
&lt;ul>
&lt;li>The whole work should be compoleted as faster as possible.&lt;/li>
&lt;li>As workers are very expensive, they should be kept busy.&lt;/li>
&lt;li>Thw work should be distributed fairly. About the same amount of work should be assigned to every worker.&lt;/li>
&lt;li>There are precedence constraints between different tasks. Thus we also have to find a clever procssing order of the different jobs.&lt;/li>
&lt;/ul>
&lt;h3 id="load-balancing-problem">Load Balancing Problem&lt;/h3>
&lt;ul>
&lt;li>Processors that finish early have to wait for the processor with the largest amoung of work to complete&lt;/li>
&lt;/ul>
&lt;h3 id="static-load-balancing">Static load balancing&lt;/h3>
&lt;ul>
&lt;li>Programmer make decisions and assigns a fixed amount of work t each processing core a priori&lt;/li>
&lt;li>Low run time overhead&lt;/li>
&lt;li>Works well for homogeneous multicores:
&lt;ul>
&lt;li>All core are the same&lt;/li>
&lt;li>Each core has an equal amount of work&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Not so well for heterogeneous multicores:
&lt;ul>
&lt;li>Some cores may be faster than others.&lt;/li>
&lt;li>Work distribution is uneven.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-load-balancing">Dynamic Load Balancing&lt;/h3>
&lt;ul>
&lt;li>WHen one core finishes its allocated work, it takes work from a work queue or a core with the heaviest workload&lt;/li>
&lt;li>Adapt partitioning at run time to balance load&lt;/li>
&lt;li>High runtime overhead&lt;/li>
&lt;li>Ideal for codes where work is uneven, unpredictable, and in heterogeneous multicore&lt;/li>
&lt;/ul>
&lt;h3 id="granularity-and-performance-tradeoffs">Granularity and Performance Tradeoffs&lt;/h3>
&lt;ul>
&lt;li>Load balancing:
&lt;ul>
&lt;li>How well is work distributed among cores?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Synchronization/Communication:
&lt;ul>
&lt;li>Communication Overhead&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="communication">Communication&lt;/h3>
&lt;ul>
&lt;li>With message passing, programmer has to understand the computation and orchestrate the communication accordingly&lt;/li>
&lt;/ul>
&lt;h3 id="factors-to-consider-for-communication">Factors to consider for communication&lt;/h3>
&lt;ul>
&lt;li>Cost of communications:
&lt;ul>
&lt;li>Inter-task communication virtually always implies overhead.&lt;/li>
&lt;li>Communications frequently require some type of synchronization between tasks, which can result in taks spending time &amp;lsquo;waiting&amp;rsquo; instead of doing work.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Latency vs Bandwidth:
&lt;ul>
&lt;li>Latency:
&lt;ul>
&lt;li>the time it takes to send a minimal message from point A to point B.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bandwidth:
&lt;ul>
&lt;li>The amount of data that can be communicated per unit of time.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sending many small messages can cause latency to dominate communication overheads.&lt;/li>
&lt;li>Often it is more efficient to package small messages into a larger message.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Synchronous vs asynchronous:
&lt;ul>
&lt;li>Synchronous : require some type of handshaking between tasks that shred data&lt;/li>
&lt;li>Asynchronous : transfer data independently from one another.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Scope of communication:
&lt;ul>
&lt;li>Point-to-Point&lt;/li>
&lt;li>Collective&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="mpi--message-passing-library">MPI : Message Passing Library&lt;/h3>
&lt;ul>
&lt;li>MPI :portable specification:
&lt;ul>
&lt;li>Not a language or compiler specification&lt;/li>
&lt;li>Not a specific implementation or product&lt;/li>
&lt;li>SPMD model (same program, multiple data)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For parallel computers, clusters, and heterogeneous networks, multicores&lt;/li>
&lt;li>Multiple communication modes allow precise buffer management&lt;/li>
&lt;li>Extensive collective operations for scalable global communication&lt;/li>
&lt;/ul>
&lt;h3 id="point-to-point">Point-To-Point&lt;/h3>
&lt;ul>
&lt;li>Basic method of communication between two processors:
&lt;ul>
&lt;li>Originating processor &amp;ldquo;sends&amp;rdquo; message to destination processor&lt;/li>
&lt;li>Destination processor then &amp;ldquo;receives&amp;rdquo; the message&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The message commonly includes:
&lt;ul>
&lt;li>Data or other information&lt;/li>
&lt;li>Length of the message&lt;/li>
&lt;li>Destination address and possibly a tag&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="synchronous-vs-asynchronous-messages">Synchronous vs Asynchronous Messages&lt;/h3>
&lt;ul>
&lt;li>Synchronous send:
&lt;ul>
&lt;li>Sender notified when message is received&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Asynchronous send:
&lt;ul>
&lt;li>Sneder only know that message is sent&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="blocking-vs-non-blocking-messages">Blocking vs .Non-Blocking Messages&lt;/h3>
&lt;ul>
&lt;li>Blocking messages:
&lt;ul>
&lt;li>Sender waits until message is transmitted: buffer is empty&lt;/li>
&lt;li>Receiver watis until message is received: buffer is full&lt;/li>
&lt;li>Potential for deadlock&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Non-blocking:
&lt;ul>
&lt;li>Processing continues even if message hasn&amp;rsquo;t been transmitted&lt;/li>
&lt;li>Avoid idel time and deadlocks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="broadcase">Broadcase&lt;/h3>
&lt;ul>
&lt;li>one processor sends the same inforamtion to many other processors&lt;/li>
&lt;li>MPI_BCAST&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="A[n]%20=%20%7b...%7d%0aB[n]%20=%20%7b...%7d%0aBroadcast%28B[1..n]%29%0afor%20%28i%201%20to%20n%29%0a%20%20//%20round%20robin%20distribute%20B%20to%20m%20processors%0a%20%20Send%28A[i%20%25%20m]%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>A[n] = {...}
B[n] = {...}
Broadcast(B[1..n])
for (i 1 to n)
 // round robin distribute B to m processors
 Send(A[i % m])&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h3 id="reduction">Reduction&lt;/h3>
&lt;ul>
&lt;li>A reduction combines data from all processors and returns it to a singl process&lt;/li>
&lt;li>MPI_REDUCE&lt;/li>
&lt;li>Can apply any associative operation on gathered data(ADD , OR, AND, MAX, MIN, etc)&lt;/li>
&lt;li>No processor can finish reduction before each processor has contributed a value&lt;/li>
&lt;li>BCAST/REDUCE can reduce programming complexity and may be more efficient in some programs&lt;/li>
&lt;/ul>
&lt;h3 id="synchronization">Synchronization&lt;/h3>
&lt;ul>
&lt;li>Coordination of simultaneous events(threads/processes) in order to obatin correct runtime order and avoid unexpected condition&lt;/li>
&lt;li>Type of synchronization:
&lt;ul>
&lt;li>Barrier:
&lt;ul>
&lt;li>Any thread/process must stop at this point(barrier) and cannot proceed until all other threads/processes reach this barrier&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Lock/semaphore:
&lt;ul>
&lt;li>The first task acquires the lock. This task can then safely(serially) access the procted data or code.&lt;/li>
&lt;li>Other takss can attempt to acquire the lock but must wait until the task that owns the lock release it.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="locality">Locality&lt;/h3>
&lt;ul>
&lt;li>Large memories are slow, fast memories are small.&lt;/li>
&lt;li>Storage hierarchies are large and fast on average&lt;/li>
&lt;li>Parallel processors, collectively, have large, fast cache&lt;/li>
&lt;li>Algorithm should do most work on local data&lt;/li>
&lt;li>Need to exploit spatial and temporal locality&lt;/li>
&lt;/ul>
&lt;h3 id="memory-access-latency-in-shared-memory-architectures">Memory Access Latency in Shared Memory Architectures&lt;/h3>
&lt;ul>
&lt;li>Uniform Memory Access (UMA):
&lt;ul>
&lt;li>Centrall located memory&lt;/li>
&lt;li>All processors are equidistant (access times)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Non-Uniform Access (NUMA):
&lt;ul>
&lt;li>Physicall partitioned but accessible by all&lt;/li>
&lt;li>Processors have the same address space&lt;/li>
&lt;li>Placement of data affects performance&lt;/li>
&lt;li>CC-NUMA (Cache-Coherent NUMA)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cache-coherence">Cache Coherence&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>The uniformity of shared resource data that ends up sotred in multiple local caches&lt;/p></description></item><item><title>Network Simulator 3</title><link>https://minuk.dev/wiki/lectures/ns3/</link><pubDate>Fri, 07 May 2021 08:59:07 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/ns3/</guid><description>&lt;h2 id="configuration">Configuration&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/nsnam/ns-3-dev-git.git --depth&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd ns-3-dev-git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./waf configure --enable-examples
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./waf&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="basic">Basic&lt;/h2>
&lt;h3 id="basic-from">Basic From&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#include%20%22ns3/core-module.h%22%0a#include%20%22ns3/network-module.h%22%0a#include%20%22ns3/internet-module.h%22%0a#include%20%22ns3/point-to-point-module.h%22%0a#include%20%22ns3/applications-module.h%22%0a%0ausing%20namespace%20ns3;%0a%0aNS_LOG_COMPONENT_DEFINE%20%28%22LMU_FirstScriptExample%22%29;%0a%0aint%20main%20%28int%20argc,%20char%20*argv[]%29%20%7b%0a%20%20CommandLine%20cmd%28__FILE__%29;%0a%20%20cmd.Parse%28argc,%20argv%29;%0a%0a%20%20/*%20%ec%8b%9c%ea%b0%84%20%ec%a0%95%ed%99%95%eb%8f%84%20%ec%84%a4%ec%a0%95%20*/%0a%20%20Time::SetResolution%20%28Time::NS%29;%0a%20%20/*%20Log%20Level%20%ec%84%a4%ec%a0%95%20*/%0a%20%20LogComponentEnable%28%22UdpEchoClientApplication%22,%20LOG_LEVEL_INFO%29;%0a%20%20LogComponentEnable%28%22UdpEchoServerApplication%22,%20LOG_LEVEL_INFO%29;%0a%0a%20%20/*%20Node%20%ec%84%a4%ec%a0%95%20*/%0a%20%20NodeContainer%20nodes;%0a%20%20nodes.Create%282%29;%0a%0a%20%20PointToPointHelper%20pointToPoint;%0a%20%20pointToPoint.SetDeviceAttribute%28%22DataRate%22,%20StringValue%28%225Mbps%22%29%29;%0a%20%20pointToPoint.SetChannelAttribute%28%22Delay%22,%20StringValue%28%222ms%22%29%29;%0a%0a%20%20/*%20Network%20Device%20%ec%84%a4%ec%a0%95%20*/%0a%20%20NetDeviceContainer%20devices;%0a%20%20devices%20=%20pointToPoint.Install%28nodes%29;%0a%0a%20%20/*%20Internet%20Stack%20%ec%84%a4%ec%a0%95%20*/%0a%20%20InternetStackHelper%20stack;%0a%20%20stack.Install%28nodes%29;%0a%0a%20%20/*%20IP%20%ed%95%a0%eb%8b%b9%20*/%0a%20%20Ipv4AddressHelper%20address;%0a%20%20address.SetBase%28%2210.1.1.0%22,%20%22255.255.255.0%22%29;%0a%0a%20%20Ipv4InterfaceContainer%20interfaces%20=%20address.Assign%20%28devices%29;%0a%0a%20%20/*%20Application%20%ec%84%a4%ec%a0%95%20*/%0a%20%20UdpEchoServerHelper%20echoServer%289%29;%0a%0a%20%20ApplicationContainer%20serverApps%20=%20echoServer.Install%28nodes.Get%281%29%29;%0a%20%20serverApps.Start%20%28Seconds%281.0%29%29;%0a%20%20serverApps.Stop%20%28Seconds%2810.0%29%29;%0a%0a%20%20UdpEchoClientHelper%20echoClient%20%28interfaces.GetAddress%281%29,%209%29;%0a%20%20echoClient.SetAttribute%28%22MaxPackets%22,%20UintegerValue%281%29%29;%0a%20%20echoClient.SetAttribute%28%22Interval%22,%20TimeValue%28Seconds%281.0%29%29%29;%0a%20%20echoClient.SetAttribute%28%22PacketSize%22,%20UintegerValue%281024%29%29;%0a%0a%20%20ApplicationContainer%20clientApps%20=%20echoClient.Install%20%28nodes.Get%280%29%29;%0a%0a%20%20/*%20%ec%8b%a4%ed%96%89%20*/%0a%20%20clientApps.Start%20%28Seconds%282.0%29%29;%0a%20%20clientApps.Stop%20%28Seconds%2810.0%29%29;%0a%0a%20%20Simulator::Run%28%29;%0a%20%20Simulator::Destroy%28%29;%0a%0a%20%20return%200;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ns3/core-module.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ns3/network-module.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ns3/internet-module.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ns3/point-to-point-module.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;#34;ns3/applications-module.h&amp;#34;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> ns3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NS_LOG_COMPONENT_DEFINE (&lt;span style="color:#e6db74">&amp;#34;LMU_FirstScriptExample&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>argv[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CommandLine cmd(__FILE__);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd.Parse(argc, argv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* 시간 정확도 설정 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Time&lt;span style="color:#f92672">::&lt;/span>SetResolution (Time&lt;span style="color:#f92672">::&lt;/span>NS);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Log Level 설정 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LogComponentEnable(&lt;span style="color:#e6db74">&amp;#34;UdpEchoClientApplication&amp;#34;&lt;/span>, LOG_LEVEL_INFO);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LogComponentEnable(&lt;span style="color:#e6db74">&amp;#34;UdpEchoServerApplication&amp;#34;&lt;/span>, LOG_LEVEL_INFO);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Node 설정 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NodeContainer nodes;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nodes.Create(&lt;span style="color:#ae81ff">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PointToPointHelper pointToPoint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pointToPoint.SetDeviceAttribute(&lt;span style="color:#e6db74">&amp;#34;DataRate&amp;#34;&lt;/span>, StringValue(&lt;span style="color:#e6db74">&amp;#34;5Mbps&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pointToPoint.SetChannelAttribute(&lt;span style="color:#e6db74">&amp;#34;Delay&amp;#34;&lt;/span>, StringValue(&lt;span style="color:#e6db74">&amp;#34;2ms&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Network Device 설정 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NetDeviceContainer devices;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> devices &lt;span style="color:#f92672">=&lt;/span> pointToPoint.Install(nodes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Internet Stack 설정 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InternetStackHelper stack;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack.Install(nodes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* IP 할당 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ipv4AddressHelper address;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> address.SetBase(&lt;span style="color:#e6db74">&amp;#34;10.1.1.0&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;255.255.255.0&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ipv4InterfaceContainer interfaces &lt;span style="color:#f92672">=&lt;/span> address.Assign (devices);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Application 설정 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UdpEchoServerHelper echoServer(&lt;span style="color:#ae81ff">9&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ApplicationContainer serverApps &lt;span style="color:#f92672">=&lt;/span> echoServer.Install(nodes.Get(&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serverApps.Start (Seconds(&lt;span style="color:#ae81ff">1.0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> serverApps.Stop (Seconds(&lt;span style="color:#ae81ff">10.0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UdpEchoClientHelper echoClient (interfaces.GetAddress(&lt;span style="color:#ae81ff">1&lt;/span>), &lt;span style="color:#ae81ff">9&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echoClient.SetAttribute(&lt;span style="color:#e6db74">&amp;#34;MaxPackets&amp;#34;&lt;/span>, UintegerValue(&lt;span style="color:#ae81ff">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echoClient.SetAttribute(&lt;span style="color:#e6db74">&amp;#34;Interval&amp;#34;&lt;/span>, TimeValue(Seconds(&lt;span style="color:#ae81ff">1.0&lt;/span>)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echoClient.SetAttribute(&lt;span style="color:#e6db74">&amp;#34;PacketSize&amp;#34;&lt;/span>, UintegerValue(&lt;span style="color:#ae81ff">1024&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ApplicationContainer clientApps &lt;span style="color:#f92672">=&lt;/span> echoClient.Install (nodes.Get(&lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* 실행 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientApps.Start (Seconds(&lt;span style="color:#ae81ff">2.0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clientApps.Stop (Seconds(&lt;span style="color:#ae81ff">10.0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Simulator&lt;span style="color:#f92672">::&lt;/span>Run();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Simulator&lt;span style="color:#f92672">::&lt;/span>Destroy();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>NS_LOG_COMPONENT_DEFINE&lt;/code> in &lt;code>ns/log.h&lt;/code>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define NS_LOG_COMPONENT_DEFINE(name) \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> static ns3::LogComponent g_log = ns3::LogComponent (name, __FILE__)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>CommandLine&lt;/code> class in &lt;code>ns/command-line.h&lt;/code>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/**%0a%20*%20%5ccode%0a%20*%20%20%20int%20value1;%0a%20*%20%20%20int%20value2;%0a%20*%0a%20*%20%20%20CommandLine%20cmd%20%28__FILE__%29;%0a%20*%20%20%20cmd.Usage%20%28%22...%22%29;%0a%20*%20%20%20cmd.AddValue%20%28%22value1%22,%20%22first%20value%22,%20value1%29;%0a%20*%20%20%20cmd.AddValue%20%28%22value2%22,%20%22second%20value%22,%20value1%29;%0a%20*%0a%20*%20%20%20cmd.Parse%20%28argc,%20argv%29;%0a%20*%0a%20*%20%20%20if%20%28value1%20*%20value2%20%3c%200%29%0a%20*%20%20%20%20%20%7b%0a%20*%20%20%20%20%20%20%20std::cerr%20%3c%3c%20%22value1%20and%20value2%20must%20have%20the%20same%20sign!%22%20%3c%3c%20std::endl;%0a%20*%20%20%20%20%20%20%20std::cerr%20%3c%3c%20cmd;%0a%20*%20%20%20%20%20%20%20exit%20%28-1%29;%0a%20*%20%20%20%20%20%7d%0a%20*%20%5cendcode%0a%20**/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * \code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * int value1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * int value2;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * CommandLine cmd (__FILE__);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * cmd.Usage (&amp;#34;...&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * cmd.AddValue (&amp;#34;value1&amp;#34;, &amp;#34;first value&amp;#34;, value1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * cmd.AddValue (&amp;#34;value2&amp;#34;, &amp;#34;second value&amp;#34;, value1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * cmd.Parse (argc, argv);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * if (value1 * value2 &amp;lt; 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * std::cerr &amp;lt;&amp;lt; &amp;#34;value1 and value2 must have the same sign!&amp;#34; &amp;lt;&amp;lt; std::endl;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * std::cerr &amp;lt;&amp;lt; cmd;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * exit (-1);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * \endcode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> **/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>비모수 통계학</title><link>https://minuk.dev/wiki/lectures/nonparametric-statistic/</link><pubDate>Sat, 24 Apr 2021 20:44:25 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/nonparametric-statistic/</guid><description>&lt;h2 id="1장-서론">1장 서론&lt;/h2>
&lt;h3 id="11-비모수적-방법">1.1 비모수적 방법&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>통계학은 기술통계학(descriptive statistics)과 추측통계학(inferential statistics)로 나뉜다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>통계적 추론(statistical inference) : 표본으로부터 정보를 이용하여 모집단에 대한 추측 또는 의사결정을 하는 과정, 접근방법에 따라 모수적 방법, 비모수적 방법, 베이즈적 방법 등으로 분류&lt;/p>
&lt;/li>
&lt;li>
&lt;p>확률적 진술이 필요하기 때문에 데이터가 얻어진 모집단의 분포에 대한 정보가 필요&lt;/p>
&lt;/li>
&lt;li>
&lt;p>모집단에 대하여 구체적인 분포함수를 가정하는 것이 무리일때, 모집단 분포에 대한 가정을 약화시켜 오류의 가능성을 줄이고 때로는 효율을 높일 수 있는 대안을 사용해야함. 이를 통칭하여 비모수적(nonparametric) 방법이라고 함.&lt;/p></description></item><item><title>wireless 무선이동통신 수업</title><link>https://minuk.dev/wiki/lectures/wireless/</link><pubDate>Tue, 20 Apr 2021 19:23:19 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/wireless/</guid><description>무선이동통신 수업 정리</description></item><item><title>Database System</title><link>https://minuk.dev/wiki/lectures/database_system/</link><pubDate>Sun, 18 Apr 2021 18:42:47 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/database_system/</guid><description>학교 데이터베이스 시스템 수업 정리</description></item><item><title>카카오워크</title><link>https://minuk.dev/wiki/%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%9B%8C%ED%81%AC/</link><pubDate>Fri, 16 Apr 2021 23:42:43 +0900</pubDate><guid>https://minuk.dev/wiki/%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%9B%8C%ED%81%AC/</guid><description>소마에서 진행한 카카오 워크 정리</description></item><item><title>소프트웨어 마에스트로</title><link>https://minuk.dev/wiki/soma/</link><pubDate>Fri, 16 Apr 2021 23:39:09 +0900</pubDate><guid>https://minuk.dev/wiki/soma/</guid><description>2021년도 소프트웨어 마에스트로 한 활동 정리하는 파일</description></item><item><title>리눅스 카카오톡</title><link>https://minuk.dev/wiki/linux_kakaotalk/</link><pubDate>Sun, 21 Feb 2021 20:43:13 +0900</pubDate><guid>https://minuk.dev/wiki/linux_kakaotalk/</guid><description>차라리 내가 만들고 만다</description></item><item><title>라틴어</title><link>https://minuk.dev/wiki/latina/</link><pubDate>Mon, 11 Jan 2021 13:53:08 +0900</pubDate><guid>https://minuk.dev/wiki/latina/</guid><description>&lt;h1 id="카르페-라틴어">카르페 라틴어&lt;/h1></description></item><item><title>Multi-Queue Block IO Queueing (blk-mq)</title><link>https://minuk.dev/wiki/blk-mq/</link><pubDate>Sun, 27 Dec 2020 17:46:35 +0900</pubDate><guid>https://minuk.dev/wiki/blk-mq/</guid><description>&lt;h1 id="multi-queue-block-io-queueing-mechanism">Multi-Queue Block IO Queueing Mechanism&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h3 id="background">Background&lt;/h3>
&lt;ul>
&lt;li>The standard of storage development moved to Solid State Drives and Non-Volatile Memories from Magnetic hard disks.&lt;/li>
&lt;li>They do not have random access penalty and can perform high parallel access. Therefore, the bottleneck of computer storage stack moved from the storage device to the operating system.&lt;/li>
&lt;li>The former design had a signle queue to store block IO requests with a single lock. Instead of this, the blk-mq API spawns multiple queus with individusal entry points local to the CPU, removing the need for a lock.&lt;/li>
&lt;/ul>
&lt;h3 id="operation">Operation&lt;/h3>
&lt;ul>
&lt;li>When the userspace performs IO to a block device (reading or writing a file, for instance), blk-mq takes action: it will store and manage IO requests to the block device, acting as middleware between the userspace (and a file system, if present) and the block device driver.&lt;/li>
&lt;li>blk-mq has two group of queues: software staging queus and hardware dispatch queues.&lt;/li>
&lt;/ul>
&lt;h3 id="software-staging-queues">Software staging queues&lt;/h3>
&lt;ul>
&lt;li>The block IO subsystem adds requests in the software staging queus(represented by &lt;code>struct blk_mq_ctx&lt;/code>) in case that they weren&amp;rsquo;t sent directly to the driver. A request is one or more BIOs. They arrived at the block layer though the data structure struct bio. The block layer will tehn build a new structure from it, the struct request that will be used to communicate with the device driver. Each queue has its own lock and the number of queues is defined by a per-CPU or per-node basis.&lt;/li>
&lt;li>The statging queue can be used to merge requests for adjacent sectors.&lt;/li>
&lt;/ul>
&lt;h3 id="io-schedulers">IO Schedulers&lt;/h3>
&lt;ul>
&lt;li>There are several schedulers implemented by the block layer, each one following a heruistic to improve the IO performance. They are &lt;strong>pluggable&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h3 id="hardware-dispatch-queues">Hardware dispatch queues&lt;/h3>
&lt;ul>
&lt;li>The hardware queue (represented by &lt;code>struct blk_mq_hw_ctx&lt;/code>) is a struct used by device drivers to map the device sumission queues (or device DMA ring buffer), and are the last step of the block layer submission code before the low level device driver taking ownership of the request.&lt;/li>
&lt;/ul>
&lt;h1 id="source-code">Source Code&lt;/h1>
&lt;h2 id="open-path-based-f2fs">Open Path (Based F2FS)&lt;/h2>
&lt;ul>
&lt;li>dentry_open()
&lt;ul>
&lt;li>vfs_open()
&lt;ul>
&lt;li>do_dentry_open()
&lt;ul>
&lt;li>file-&amp;gt;f_op-&amp;gt;open() -&amp;gt; f2fs_file_open()
&lt;ul>
&lt;li>dquot_file_open()
&lt;ul>
&lt;li>generic_file_open()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="read-path-based-f2fs">Read Path (Based F2FS)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ksys_read()&lt;/p></description></item><item><title>linux-study</title><link>https://minuk.dev/wiki/linux-study/</link><pubDate>Sun, 27 Dec 2020 17:45:36 +0900</pubDate><guid>https://minuk.dev/wiki/linux-study/</guid><description>&lt;ul>
&lt;li>[[blk-mq]]&lt;/li>
&lt;li>[[debug-linux]]&lt;/li>
&lt;li>[[iamroot19]]&lt;/li>
&lt;/ul></description></item><item><title>2020-12-20 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-12-20/</link><pubDate>Sun, 20 Dec 2020 20:58:15 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-12-20/</guid><description>&lt;h2 id="잡념">잡념&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%96%b8%ec%a0%9c%eb%82%98%20%ea%b7%b8%eb%a0%87%eb%93%af%20%ec%b2%ab%20%eb%b0%9c%ec%9d%84%20%eb%82%b4%eb%94%9b%eb%8a%94%ea%b2%8c%20%ec%96%b4%eb%a0%b5%eb%8b%a4.%0a%ec%98%a4%eb%8a%98%20%ed%9a%8c%ea%b3%a0%eb%8f%84%20%ea%b7%b8%eb%a0%87%eb%8b%a4.%0a%eb%af%bc%ea%b0%84%ec%9d%b8%203%ec%9d%bc%ec%b0%a8%eb%8b%a4.%20%ec%82%ac%eb%8a%94%20%ea%b2%8c%20%ec%b0%b8%20%ec%96%b4%eb%a0%b5%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%eb%90%9c%eb%8b%a4.%20%ec%a7%80%eb%82%9c%ec%a3%bc%20%eb%82%b4%eb%82%b4%20%eb%8c%80%ed%95%99%ec%9b%90%ec%9d%b4%eb%83%90%20%ec%b7%a8%ec%a7%81%ec%9d%b4%eb%83%90%20%ea%b3%a0%eb%af%bc%ec%9d%84%20%ed%96%88%eb%8b%a4.%0a%eb%82%98%ec%97%90%ea%b2%90%20%eb%91%90%20%ec%84%a0%ed%83%9d%ec%a7%80%20%ec%a0%84%eb%b6%80%20%eb%8b%a4%20%ea%b0%81%ea%b0%81%ec%9d%98%20%eb%a7%a4%eb%a0%a5%ec%9d%b4%20%ec%9e%88%eb%8b%a4.%20%ec%9d%b4%eb%9f%b0%20%ea%b3%a0%eb%af%bc%ec%9d%84%20%ed%95%98%ea%b2%8c%20%eb%90%9c%ea%b1%b4%20%ed%98%84%ec%9e%ac%20%eb%82%b4%20%ea%b0%80%ec%b9%98%ea%b4%80%20%eb%82%b4%ec%97%90%ec%84%9c%20%ec%9a%b0%ec%84%a0%ec%88%9c%ec%9c%84%ea%b0%80%20%ed%9d%94%eb%93%a4%eb%a0%b8%ea%b8%b0%20%eb%95%8c%eb%ac%b8%ec%9d%b4%eb%8b%a4.%0a%ea%b3%a0%eb%93%b1%ed%95%99%ea%b5%90,%20%eb%8c%80%ed%95%99%ea%b5%90%201~2%ed%95%99%eb%85%84,%20%ea%b7%b8%eb%a6%ac%ea%b3%a0%20%ec%9e%91%eb%85%84%eb%a7%8c%20%ed%95%b4%eb%8f%84%20%ec%9d%b4%eb%9f%b0%20%ea%b1%b1%ec%a0%95%ec%9d%80%20%ed%95%98%ec%a7%80%20%ec%95%8a%ec%95%98%eb%8b%a4.%0a%ea%b7%b8%20%eb%95%8c%20%eb%8b%b9%ec%8b%9c%ec%9d%98%20%ec%9a%b0%ec%84%a0%20%ec%88%9c%ec%9c%84%eb%8a%94%20%eb%82%b4%20%ea%b0%80%ec%b9%98%eb%a5%bc%20%eb%86%92%ec%9d%b4%eb%8a%94%20%ec%9d%bc,%20%ea%b7%b8%eb%a6%ac%ea%b3%a0%20%ea%b7%b8%ea%b1%b8%20%ec%82%ac%ec%9a%a9%ed%95%98%eb%8a%94%20%ea%b2%83%ec%9d%b4%ec%98%80%ec%9c%bc%eb%8b%88%ea%b9%8c...%0a%ea%b7%b8%eb%9f%b0%eb%8d%b0%20%ec%9a%94%ec%a6%98%ec%9d%80%20%ea%b7%b8%eb%95%8c%20%ea%b0%81%ec%98%a4%ea%b0%80%20%eb%ac%b4%eb%8e%8c%ec%a1%8c%eb%8b%a4.%20%ec%a7%80%ea%b8%88%ec%9d%80%20%eb%ad%98%20%ed%95%b4%ec%95%bc%ed%95%a0%ec%a7%80%20%eb%aa%a8%eb%a5%b4%ea%b2%a0%eb%8b%a4.%20%eb%88%84%ea%b5%b0%ea%b0%80%20%ed%88%ad%20%ed%95%98%eb%a9%b4%20%eb%ac%b4%eb%84%88%ec%a0%b8%20%eb%82%b4%eb%a6%b4%20%ea%b2%83%eb%a7%8c%20%ea%b0%99%eb%8b%a4.%0a%eb%8b%a4%eb%93%a4%20%ec%96%b4%eb%96%bb%ea%b2%8c%20%ec%82%b4%ec%95%84%ea%b0%80%eb%8a%94%ea%b0%80%20%ec%b0%b8%20%ec%8b%a0%ea%b8%b0%ed%95%98%eb%8b%a4.%0a%ec%a7%80%ed%91%b8%eb%9d%bc%ea%b8%b0%20%ec%9e%a1%eb%8a%94%20%ec%8b%ac%ec%a0%95%ec%9c%bc%eb%a1%9c%20%ec%a3%bc%eb%b3%80%20%ec%82%ac%eb%9e%8c%eb%93%a4%ec%97%90%ea%b2%8c%20%eb%a7%88%ea%b5%ac%ec%9e%a1%ec%9d%b4%eb%a1%9c%20%eb%ac%bc%ec%96%b4%eb%b4%a4%eb%8b%a4.%20%ec%8b%a4%ec%97%86%eb%8a%94%20%ec%86%8c%eb%a6%ac%eb%a1%9c%20%eb%ac%bc%ec%96%b4%eb%b4%a4%ec%a7%80%eb%a7%8c,%20%ed%95%9c%ec%97%86%ec%9d%b4%20%ec%a7%84%ec%a7%80%ed%96%88%eb%8b%a4.%0a%eb%aa%a8%eb%91%90%20%ec%84%9c%eb%a1%9c%20%eb%8b%a4%eb%a5%b8%20%eb%8b%b5%ec%9d%84%20%ec%a4%ac%ea%b3%a0,%20%ec%96%b4%ec%a7%9c%ed%94%bc%20%ea%b2%b0%ec%a0%95%ec%9d%80%20%eb%82%b4%ea%b0%80%20%ed%95%b4%ec%95%bc%ed%95%98%eb%8a%94%20%ea%b2%83%eb%8f%84%20%ec%9e%98%20%ec%95%88%eb%8b%a4.%0a%ea%b7%b8%eb%9f%ac%eb%8d%98%20%ec%a4%91,%20%eb%8c%80%ed%95%99%20%ed%9b%84%eb%b0%b0%ec%97%90%ea%b2%8c%20%ec%a0%84%ed%99%94%ea%b0%80%20%ec%99%94%eb%8b%a4.%20%ec%a7%84%eb%a1%9c%20%ec%83%81%eb%8b%b4%20%eb%b9%84%ec%8a%b7%ed%95%9c%20%ea%b2%83%ec%9d%b4%ec%97%88%eb%8b%a4.%20%ec%b5%9c%eb%8c%80%ed%95%9c%20%ec%b9%9c%ec%a0%88%ed%9e%88%20%eb%8b%b5%ed%95%b4%ec%a4%ac%eb%8b%a4.%20%ec%82%ac%ec%8b%a4%20%eb%88%84%ea%b0%80%20%eb%88%84%ea%b5%b4%20%ec%83%81%eb%8b%b4%ed%95%b4%ec%a4%84%20%ec%b2%98%ec%a7%80%ea%b0%80%20%ec%95%84%eb%8b%8c%eb%8d%b0%0a%ec%98%a4%eb%8a%98%20%ec%98%a4%ed%9b%84%ec%97%90%eb%8a%94%20%ec%b9%9c%ed%96%88%eb%8d%98%20%ed%95%99%ea%b5%90%20%ec%84%a0%eb%b0%b0%ec%97%90%ea%b2%8c%20%eb%ac%bc%ec%96%b4%eb%b4%a4%eb%8b%a4.%20%ea%b7%b8%20%ec%84%a0%eb%b0%b0%ea%b0%80%20%ed%95%98%eb%8a%94%20%eb%a7%90%ec%9d%b4%20%eb%8b%a4%20%ec%82%ac%eb%8a%94%ea%b2%8c%20%ec%82%ac%eb%8a%94%ea%b1%b0%eb%9e%80%eb%8b%a4.%0a%ec%82%ac%ec%8b%a4%20%eb%82%b4%ea%b0%80%20%ec%82%b4%ec%95%84%ec%9e%88%eb%8a%94%20%ea%b1%b4%ec%a7%80%eb%8f%84%20%ec%9d%98%ec%8b%ac%ec%8a%a4%eb%9f%bd%eb%8b%a4.%20%eb%ad%94%ea%b0%80%20%ec%9e%ac%eb%b0%8c%eb%8b%a4%ea%b3%a0,%20%ed%9d%a5%eb%af%b8%eb%a1%ad%eb%8b%a4%ea%b3%a0,%20%ec%97%b4%eb%a7%9d%ec%9d%84%20%ea%b0%80%ec%a1%8c%eb%8d%98%20%eb%95%8c%ea%b0%80%20%ec%82%b4%ec%95%84%ec%9e%88%eb%8d%98%ea%b1%b0%ec%a7%80%20%ec%a7%80%ea%b8%88%ec%9d%80%20%ec%9e%98%20%eb%aa%a8%eb%a5%b4%ea%b2%a0%eb%8b%a4.%0a%ea%b7%b8%ec%a0%80%20%ec%97%b0%ea%b5%ac%ec%8b%a4%ec%97%90%20%ec%b6%9c%ea%b7%bc%ea%b3%bc%20%ed%87%b4%ea%b7%bc%ec%9d%84%20%eb%b0%98%eb%b3%b5%ed%95%98%eb%a9%b0%20%ea%b8%b0%ea%b3%84%ec%a0%81%ec%9c%bc%eb%a1%9c%20%ec%9d%bc%ed%95%98%ea%b8%b0%20%ec%8b%9c%ec%9e%91%ed%96%88%eb%8b%a4.%20%ec%9d%bc%ed%95%98%ec%a7%80%20%ec%95%8a%ec%9c%bc%eb%a9%b4,%20%ec%9e%a0%ec%8b%9c%eb%9d%bc%eb%8f%84%20%ec%9d%b4%eb%9f%b0%20%ec%83%9d%ea%b0%81%ec%9d%84%20%ed%95%a0%20%ec%8b%9c%ea%b0%84%ec%9d%b4%20%ec%83%9d%ea%b8%b0%eb%a9%b4%20%ea%b7%b8%ec%a0%80%20%ec%a3%bd%ec%96%b4%eb%b2%84%eb%a6%b4%ea%b9%8c%20%eb%91%90%eb%a0%b5%ea%b8%b0%eb%a7%8c%20%ed%95%98%eb%8b%a4.%0a%0a%ec%96%b4%ec%a0%9c%eb%8a%94%20%ea%bf%88%ec%9d%84%20%ea%bf%a8%eb%8b%a4.%20%eb%88%84%ea%b5%b0%ea%b0%80%20%ec%86%90%ec%9d%84%20%ec%98%ac%eb%a6%ac%eb%a9%b4%20%ec%a7%80%ea%b8%88%eb%8f%84%20%ec%9b%80%ec%b0%94%ed%95%9c%eb%8b%a4.%20%eb%88%84%ea%b5%b0%ea%b0%80%20%eb%82%98%ec%97%90%ea%b2%8c%20%ed%94%84%eb%a0%88%ec%9e%84%ec%9d%84%20%ec%94%8c%ec%9a%b0%eb%a9%b4%20%eb%84%88%eb%ac%b4%eb%8f%84%20%ea%b0%91%ea%b0%91%ed%95%98%eb%8b%a4.%0a%ec%83%9d%ea%b0%81%ea%b3%bc%20%eb%8a%90%eb%82%8c%ec%9d%84%20%ec%a0%81%ec%96%b4%eb%82%b4%eb%a0%a4%ea%b3%a0%20%ed%95%98%eb%8b%88%20%ec%b0%b8%20%ec%96%b4%eb%a0%b5%eb%8b%a4.%0a%0a%ec%a7%80%ea%b8%88%20%eb%82%9c%20%eb%ad%98%20%ec%9c%84%ed%95%b4%20%ec%82%b4%ec%95%84%ea%b0%80%ea%b3%a0%20%ec%9e%88%eb%8a%94%ea%b0%80%0a%ec%b0%a8%eb%9d%bc%eb%a6%ac%20%eb%aa%87%eb%85%84%ec%a0%84%ec%b2%98%eb%9f%bc%20%ec%a7%91%eb%85%90%ec%9d%84%20%ea%b0%80%ec%a7%80%ea%b3%a0%20%ec%82%b4%ec%95%84%ea%b0%80%eb%8a%94%ea%b2%8c%20%eb%8d%94%20%ec%98%ac%eb%b0%94%eb%a5%b8%ea%b2%8c%20%ec%95%84%eb%8b%88%ec%98%80%ec%9d%84%ea%b9%8c%20%ec%8b%b6%eb%8b%a4.%20%eb%b9%84%eb%a1%9d%20%ec%a3%bd%ec%9d%8c%ec%9d%84%20%ed%96%a5%ed%95%98%eb%8d%94%eb%9d%bc%eb%8f%84%eb%a7%90%ec%9d%b4%eb%8b%a4.%0a%ec%9d%b4%ec%a0%a0%20%ec%96%b4%ec%a7%b8%ec%84%9c%20%ea%b7%b8%20%eb%aa%a9%ed%91%9c%eb%a5%bc%20%ed%8f%ac%ea%b8%b0%ed%96%88%eb%8a%94%ec%a7%80%20%ec%9e%8a%ec%96%b4%eb%b2%84%eb%a6%b4%eb%a0%a4%ea%b3%a0%20%ed%95%9c%ec%a7%80%eb%8f%84%20%ed%9d%ac%eb%af%b8%ed%95%98%eb%8b%a4.%20%ec%88%98%eb%85%84%ea%b0%84%ec%9d%98%20%eb%aa%a9%ed%91%9c%ec%98%80%eb%8a%94%eb%8d%b0,%20%ed%8f%ac%ea%b8%b0%ed%95%9c%ea%b2%83%eb%8f%84%20%ed%95%9c%ec%88%9c%ea%b0%84%ec%9d%b4%ea%b3%a0%20%ea%b7%b8%eb%a7%88%ec%a0%b8%20%ec%9e%8a%ec%96%b4%eb%b2%84%eb%a6%b0%ea%b2%83%eb%8f%84%20%ed%95%9c%ec%88%9c%ea%b0%84%ec%9d%b4%eb%8b%a4.%0a%0a%ec%a7%80%ea%b8%88%ec%9d%80%20%ea%b7%b8%eb%83%a5%20%eb%88%84%ea%b5%b0%ea%b0%80%ec%97%90%ea%b2%8c%20%ec%9d%98%ec%a7%80%ed%95%98%ea%b3%a0%20%ec%8b%b6%eb%8b%a4.%0a%eb%aa%a9%ed%91%9c%ea%b0%80%20%ec%97%86%ec%9c%bc%eb%8b%88%20%ec%9d%98%ec%a7%80%ed%95%98%ec%a7%80%20%ec%95%8a%ec%9c%bc%eb%a9%b4%20%ec%93%b0%eb%9f%ac%ec%a0%b8%eb%b2%84%eb%a6%b4%ea%b2%83%20%ea%b0%99%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>언제나 그렇듯 첫 발을 내딛는게 어렵다.
오늘 회고도 그렇다.
민간인 3일차다. 사는 게 참 어렵다고 생각된다. 지난주 내내 대학원이냐 취직이냐 고민을 했다.
나에겐 두 선택지 전부 다 각각의 매력이 있다. 이런 고민을 하게 된건 현재 내 가치관 내에서 우선순위가 흔들렸기 때문이다.
고등학교, 대학교 1~2학년, 그리고 작년만 해도 이런 걱정은 하지 않았다.
그 때 당시의 우선 순위는 내 가치를 높이는 일, 그리고 그걸 사용하는 것이였으니까...
그런데 요즘은 그때 각오가 무뎌졌다. 지금은 뭘 해야할지 모르겠다. 누군가 툭 하면 무너져 내릴 것만 같다.
다들 어떻게 살아가는가 참 신기하다.
지푸라기 잡는 심정으로 주변 사람들에게 마구잡이로 물어봤다. 실없는 소리로 물어봤지만, 한없이 진지했다.
모두 서로 다른 답을 줬고, 어짜피 결정은 내가 해야하는 것도 잘 안다.
그러던 중, 대학 후배에게 전화가 왔다. 진로 상담 비슷한 것이었다. 최대한 친절히 답해줬다. 사실 누가 누굴 상담해줄 처지가 아닌데
오늘 오후에는 친했던 학교 선배에게 물어봤다. 그 선배가 하는 말이 다 사는게 사는거란다.
사실 내가 살아있는 건지도 의심스럽다. 뭔가 재밌다고, 흥미롭다고, 열망을 가졌던 때가 살아있던거지 지금은 잘 모르겠다.
그저 연구실에 출근과 퇴근을 반복하며 기계적으로 일하기 시작했다. 일하지 않으면, 잠시라도 이런 생각을 할 시간이 생기면 그저 죽어버릴까 두렵기만 하다.

어제는 꿈을 꿨다. 누군가 손을 올리면 지금도 움찔한다. 누군가 나에게 프레임을 씌우면 너무도 갑갑하다.
생각과 느낌을 적어내려고 하니 참 어렵다.

지금 난 뭘 위해 살아가고 있는가
차라리 몇년전처럼 집념을 가지고 살아가는게 더 올바른게 아니였을까 싶다. 비록 죽음을 향하더라도말이다.
이젠 어째서 그 목표를 포기했는지 잊어버릴려고 한지도 희미하다. 수년간의 목표였는데, 포기한것도 한순간이고 그마져 잊어버린것도 한순간이다.

지금은 그냥 누군가에게 의지하고 싶다.
목표가 없으니 의지하지 않으면 쓰러져버릴것 같다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>이것저것 잠념을 적게 됬다. 적는다면 끝이 없고 한없이 어두워질 것이니 여기까지만 적자.&lt;/li>
&lt;/ul></description></item><item><title>linux-debug/scheduling</title><link>https://minuk.dev/wiki/linux-debug/scheduling/</link><pubDate>Wed, 09 Dec 2020 13:30:45 +0900</pubDate><guid>https://minuk.dev/wiki/linux-debug/scheduling/</guid><description>&lt;h2 id="주요-키워드">주요 키워드&lt;/h2>
&lt;ul>
&lt;li>scheduling : 실행 대기 중인 프로세스 중에서 우선순위가 가장 높은 프로세스를 선택해 CPU에서 실행시킴
&lt;ul>
&lt;li>Preemptive Scheduling : 강제로 CPU에서 실행 중인 프로세스를 비우고 새로운 프로세스 실행&lt;/li>
&lt;li>Non-Preemptive Scheduling : 프로세스가 자발적으로 스케줄링 요청&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>context-switching : cpu에서 실행 중인 프로세스의 레지스터 세트를 비우고 새로운 프로세스 레지스터 세트를 채우는 동작, 아키텍쳐마다 구현 방식이 다름&lt;/li>
&lt;li>scheduling policy : 스케쥴링 시 어떤 방식과 규칙으로 다음에 실행할 프로세스를 선택할지 결정&lt;/li>
&lt;li>scheduler class : 5가지 커널 스케쥴러 세부동작을 모듈화한 자료구조 이자 인터페이스, 프로세스는 스케쥴러 클레스를 우선순위에 따라 선택할 수 있음&lt;/li>
&lt;li>run queue : 실행 대기 중인 프로세스를 관리하는 자료구조, percpu 타입 변수&lt;/li>
&lt;li>proirity : 유저 공간에서 설정한 nice와 커널 우선순위가 존재&lt;/li>
&lt;/ul>
&lt;h3 id="선점-스케쥴링과-비선점-스케쥴링-비교">선점 스케쥴링과 비선점 스케쥴링 비교&lt;/h3>
&lt;ul>
&lt;li>Preemptive Scheduling
&lt;ul>
&lt;li>실행 중인 프로세스를 강제로 CPU에서 실행 중지&lt;/li>
&lt;li>새로운 프로세스가 CPU에서 실행&lt;/li>
&lt;li>선점 스케쥴링 시작점
&lt;ul>
&lt;li>인터럽트 핸들러를 처리하고 난 후 인터럽트가 발생하기 전에 코드로 되돌아가기 직전&lt;/li>
&lt;li>시스템 콜의 핸들러 함수를 처리하고 난 후 유저 공간으로 복귀하기 직전&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>비선점 스케쥴링
&lt;ul>
&lt;li>프로세스가 자발적으로 스케줄링 요청&lt;/li>
&lt;li>비선점 스케줄링 시작점
&lt;ul>
&lt;li>입출력(I/O) 동작을 시작할 때&lt;/li>
&lt;li>뮤텍스를 획득하지 못하고 휴먼 상태에 진입할 때&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="스케줄링-정책">스케줄링 정책&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#define%20SCHED_NORMAL%20%20%20%200%0a#define%20SCHED_FIFO%20%20%20%20%20%201%0a#define%20SCHED_RR%20%20%20%20%20%20%20%202%0a#define%20SCHED_BATCH%20%20%20%20%203%0a#define%20SCHED_IDLE%20%20%20%20%20%205%0a#define%20SCHED_DEADLINE%20%206">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SCHED_NORMAL 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SCHED_FIFO 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SCHED_RR 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SCHED_BATCH 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SCHED_IDLE 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define SCHED_DEADLINE 6&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="스케줄러-클래스">스케줄러 클래스&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>stop 스케줄러&lt;/p></description></item><item><title>linux-debug/synchronization</title><link>https://minuk.dev/wiki/linux-debug/synchronization/</link><pubDate>Wed, 11 Nov 2020 00:07:13 +0900</pubDate><guid>https://minuk.dev/wiki/linux-debug/synchronization/</guid><description>디버깅을 통해 배우는 리눅스 커널의 구조와 원리/동기화</description></item><item><title>linux-debug/timer</title><link>https://minuk.dev/wiki/linux-debug/timer/</link><pubDate>Tue, 10 Nov 2020 23:57:38 +0900</pubDate><guid>https://minuk.dev/wiki/linux-debug/timer/</guid><description>디버깅을 통해 배우는 리눅스 커널의 구조와 원리</description></item><item><title>linux-debug/workqueue</title><link>https://minuk.dev/wiki/linux-debug/workqueue/</link><pubDate>Tue, 10 Nov 2020 23:56:55 +0900</pubDate><guid>https://minuk.dev/wiki/linux-debug/workqueue/</guid><description>디버깅을 통해 배우는 리눅스 커널의 구조와 원리</description></item><item><title>linux-debug/interrupt</title><link>https://minuk.dev/wiki/linux-debug/interrupt/</link><pubDate>Tue, 10 Nov 2020 23:55:41 +0900</pubDate><guid>https://minuk.dev/wiki/linux-debug/interrupt/</guid><description>디버깅을 통해 배우는 리눅스 커널의 구조와 원리/인터럽트</description></item><item><title>linux-debug/process</title><link>https://minuk.dev/wiki/linux-debug/process/</link><pubDate>Tue, 10 Nov 2020 23:51:56 +0900</pubDate><guid>https://minuk.dev/wiki/linux-debug/process/</guid><description>디버깅을 통해 배우는 리눅스 커널의 구조와 원리/프로세스</description></item><item><title>linux input-method 삽질</title><link>https://minuk.dev/wiki/input-method/</link><pubDate>Tue, 10 Nov 2020 22:30:38 +0900</pubDate><guid>https://minuk.dev/wiki/input-method/</guid><description>그래도 fcitx 쓴다.</description></item><item><title>assembly</title><link>https://minuk.dev/wiki/assembly/</link><pubDate>Tue, 03 Nov 2020 20:28:40 +0900</pubDate><guid>https://minuk.dev/wiki/assembly/</guid><description>어셈블리 문법 및 배경지식</description></item><item><title>2020-10-24 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-10-24/</link><pubDate>Sat, 24 Oct 2020 20:21:46 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-10-24/</guid><description>&lt;h2 id="이전-할일">이전 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 이분 매칭 + 네트워크 플로우까지 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리눅스 커널의 구조의 원리 2편 30% 까지 읽기
&lt;ul>
&lt;li>커널 타이머까지 해서, 16% 정도 진행함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="회고">회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%b0%8d%ed%84%b4%ed%95%98%ea%b8%b0%eb%a1%9c%20%eb%90%ac%eb%8b%a4.%20%ed%9c%b4%ea%b0%80%20%eb%82%98%ea%b0%94%eb%8b%a4%ea%b0%80%20%ec%96%b4%ec%a0%9c%20%eb%8f%8c%ec%95%84%ec%99%94%eb%8b%a4.%0a%ed%9c%b4%ea%b0%80%20%eb%82%98%ea%b0%80%ec%84%9c%20%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%20%ec%bd%94%eb%94%a9%ec%9d%84%20%eb%aa%bb%ed%96%88%eb%8b%a4.%20%ec%95%84%eb%ac%b4%eb%9e%98%eb%8f%84%20%ec%9d%bc%ec%96%b4%eb%82%98%eb%8a%94%20%ec%8b%9c%ea%b0%84%ec%9d%b4%20%eb%b6%88%ea%b7%9c%ec%b9%99%ec%a0%81%ec%9d%b4%eb%8b%88%ea%b9%8c%20%ec%95%88%ed%95%98%ea%b2%8c%20%eb%90%ac%eb%8b%a4.%0a%ec%95%bd%ea%b0%84%ec%9d%98%20%ed%95%91%ea%b3%84%eb%a5%bc%20%eb%8c%80%eb%b3%b4%ec%9e%90%eb%a9%b4,%20%eb%8b%a4%ec%8b%9c%20%eb%8f%8c%ec%95%84%ec%99%80%ec%84%9c%20%ec%93%b8%ea%bb%84%20%ec%83%9d%ea%b0%81%ed%95%98%eb%8b%88,%20GUI%20%ec%84%b8%ed%8c%85%ec%9d%84%20%ed%95%98%ea%b8%b0%ea%b0%80%20%eb%b2%84%ea%b1%b0%ec%9b%a0%eb%8b%a4.%0a%ec%95%84%eb%ac%b4%eb%9e%98%eb%8f%84%2011%ec%9b%94%20%ec%a4%91%ec%88%9c%eb%b6%80%ed%84%b0%20%ec%84%9c%ec%9a%b8%ec%97%90%20%ea%b3%a0%ec%8b%9c%ec%9b%90%ec%9d%84%20%ec%9e%a1%ec%95%84%ec%84%9c,%20%ec%84%9c%ec%9a%b8%ec%97%90%ec%84%9c%20%ea%b3%b5%eb%b6%80%ed%95%a0%20%ec%98%88%ec%a0%95%ec%9d%b4%eb%8b%a4.%0a%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%20%ed%9a%8c%ea%b3%a0%ed%95%a0%ea%b2%8c%20%ec%97%86%eb%84%a4,%20%ea%b7%b8%eb%82%98%eb%a7%88%20%eb%8f%8c%ec%95%84%ec%98%ac%2015%ec%9d%bc%eb%82%a0%20%eb%aa%a8%ea%b0%81%ec%bd%94%20%ec%b1%84%eb%84%90%20%ec%82%ac%eb%9e%8c%eb%93%a4%20%eb%b3%b4%ea%b8%b0%eb%a1%9c%20%ed%96%88%eb%8b%a4%eb%8a%94%ea%b1%b0?%0a%ec%95%84!%20%ed%99%88%ed%8e%98%ec%9d%b4%ec%a7%80%eb%a5%bc%20hugo%20%ea%b8%b0%eb%b0%98%ec%97%90%ec%84%9c%20jekyll%20%ea%b8%b0%eb%b0%98%ec%9c%bc%eb%a1%9c%20%eb%b0%94%ea%bf%a8%eb%8b%a4.%20tag%20%ea%b8%b0%eb%8a%a5%ec%9d%b4%20%ec%a1%b0%ea%b8%88%20%ec%95%84%ec%89%bd%ea%b8%b4%20%ed%96%88%eb%8a%94%eb%8d%b0%20%ec%96%b4%ec%b0%8c%ec%a0%80%ec%b0%8c%20%ed%95%98%eb%8b%a4%eb%b3%b4%eb%8b%88%20%ec%9e%98%20%eb%90%ac%eb%8b%a4.%20%ec%a0%84%ec%b2%b4%ec%a0%81%ec%9c%bc%eb%a1%9c%20%eb%a7%8c%ec%a1%b1%ec%8a%a4%eb%9f%bd%ea%b2%8c%20%eb%b0%94%ea%bf%a8%eb%8b%a4.%0a%eb%b0%b1%ec%a4%80%20%eb%8b%a8%ea%b3%84%eb%b3%84%eb%a1%9c%20%ed%92%80%ea%b8%b0%eb%8a%94%20%ec%88%98%ed%95%99%20%ed%8c%8c%ed%8a%b8%20%ed%92%80%ea%b3%a0%20%ec%9e%88%eb%8a%94%eb%8d%b0%20%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98%20%ec%84%a4%eb%aa%85%ec%9d%84%20%ec%b0%be%ec%95%84%eb%b4%a4%eb%8a%94%eb%8d%b0%20%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%20%ec%96%b4%eb%a0%b5%ea%b3%a0,%20%ec%84%a4%eb%aa%85%eb%a7%8c%20%eb%b3%b4%ea%b3%a0%20%ea%b5%ac%ed%98%84%ed%95%98%ea%b3%a0%20%ec%8b%b6%ec%96%b4%ec%84%9c%20%ec%b2%9c%ec%b2%9c%ed%9e%88%20%ed%95%a0%20%ec%83%9d%ea%b0%81%ec%9d%b4%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>찍턴하기로 됬다. 휴가 나갔다가 어제 돌아왔다.
휴가 나가서 생각보다 코딩을 못했다. 아무래도 일어나는 시간이 불규칙적이니까 안하게 됬다.
약간의 핑계를 대보자면, 다시 돌아와서 쓸껄 생각하니, GUI 세팅을 하기가 버거웠다.
아무래도 11월 중순부터 서울에 고시원을 잡아서, 서울에서 공부할 예정이다.
생각보다 회고할게 없네, 그나마 돌아올 15일날 모각코 채널 사람들 보기로 했다는거?
아! 홈페이지를 hugo 기반에서 jekyll 기반으로 바꿨다. tag 기능이 조금 아쉽긴 했는데 어찌저찌 하다보니 잘 됬다. 전체적으로 만족스럽게 바꿨다.
백준 단계별로 풀기는 수학 파트 풀고 있는데 알고리즘 설명을 찾아봤는데 생각보다 어렵고, 설명만 보고 구현하고 싶어서 천천히 할 생각이다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="다음-회고-전까지-할일">다음 회고 전까지 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 백준 문자열 알고리즘 2까지 하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리눅스 커널의 구조와 원리 2편 30% 까지 읽기&lt;/li>
&lt;/ul></description></item><item><title>contextmenu</title><link>https://minuk.dev/wiki/contextmenu/</link><pubDate>Thu, 22 Oct 2020 03:41:33 +0900</pubDate><guid>https://minuk.dev/wiki/contextmenu/</guid><description>contextmenu is deprecated.</description></item><item><title>2020-10-09 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-10-09/</link><pubDate>Sat, 10 Oct 2020 00:09:46 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-10-09/</guid><description>&lt;h2 id="이전-할일">이전 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 스위핑 + 컨벡스 헐까지 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 한달 뒤에 회고한다면, 리눅스 커널의 구조와 원리 1편 끝내기
&lt;ul>
&lt;li>에고&amp;hellip; 변명같지만, [debug-linux]를 보면 알수 있듯이 거의 다 끝남. 농땡이 안부린다고 했는데 생각보다 오래걸리네&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="회고">회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%a0%84%ec%97%ad%ea%b9%8c%ec%a7%80%20%ec%9d%b4%ec%a0%9c%20%ec%a0%95%eb%a7%90%20%ec%96%bc%eb%a7%88%20%ec%95%88%eb%82%a8%ec%95%98%eb%8b%a4.%0a%ec%a0%95%ed%99%95%ed%9e%88%20%ec%96%b4%eb%96%bb%ea%b2%8c%20%eb%ad%98%20%ec%a4%80%eb%b9%84%ed%95%b4%ec%95%bc%ed%95%a0%ec%a7%80%20%eb%aa%a8%eb%a5%b4%ea%b2%a0%eb%8b%a4.%20%ec%a0%84%ec%97%ad%20%ec%9d%b4%ed%9b%84%20%ec%96%b4%eb%96%bb%ea%b2%8c%20%ec%82%b4%ea%b1%b4%ec%a7%80%20%ea%b3%84%ed%9a%8d%ec%9d%84%20%ea%b5%ac%ec%b2%b4%ec%a0%81%ec%9c%bc%eb%a1%9c%20%ec%84%b8%ec%9a%b8%eb%95%8c%ea%b0%80%20%ec%99%94%eb%8b%a4.%0a%ec%95%84%eb%a7%88%eb%8f%84%20%ed%9c%b4%ea%b0%80%eb%a5%bc%20%eb%82%98%ea%b0%80%ec%84%9c%20%ea%b5%90%ec%88%98%eb%8b%98%ec%9d%84%20%eb%a7%8c%eb%82%98%eb%b5%99%ea%b3%a0%20%ec%9d%bc%ed%95%98%eb%8a%94%ea%b2%8c%20%ea%b0%80%eb%8a%a5%ed%95%9c%ec%a7%80%20%eb%ac%bc%ec%96%b4%eb%b4%90%ec%95%bc%ea%b2%a0%eb%8b%a4.%0a%ec%98%81%ec%96%b4%eb%8a%94%20%ec%a3%bc%eb%b3%80%20%ec%82%ac%eb%9e%8c%eb%93%a4%ec%97%90%ea%b2%8c%20%ec%9d%b4%ea%b2%83%ec%a0%80%ea%b2%83%20%eb%ac%bc%ec%96%b4%eb%b3%b4%ea%b3%a0,%20%ec%a7%80%ea%b8%88%ec%9d%80%20Mr.Robot%20%ec%8a%a4%ed%81%ac%eb%a6%bd%ed%8a%b8%20%eb%a6%ac%eb%94%a9%ed%95%98%eb%8a%94%ea%b1%b8%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%0a%eb%82%b4%20%eb%b0%9c%ec%9d%8c%ec%9d%84%20%eb%85%b9%ec%9d%8c%ed%95%b4%eb%86%93%ea%b3%a0%20%eb%b9%84%ea%b5%90%ed%95%b4%eb%b3%b4%eb%a9%b4%ec%84%9c%20%ec%97%b0%ec%8a%b5%ed%95%98%ea%b3%a0%20%ec%8b%b6%ec%9d%80%eb%8d%b0,%20%ec%a0%84%ec%97%ad%ed%95%98%ea%b3%a0%20%ed%95%b4%ec%95%bc%eb%90%a0%ea%b2%83%20%ea%b0%99%eb%8b%a4.%20%ec%a0%84%ed%99%94%ec%98%81%ec%96%b4%eb%8f%84%20%ec%95%8c%ec%95%84%eb%b3%b4%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%20%ed%95%9c%20%eb%88%84%eb%82%98%ea%b0%80%20%ed%81%b0%20%eb%8f%84%ec%9b%80%ec%9d%84%20%ec%a4%ac%eb%8b%a4.%20%eb%82%98%ec%a4%91%ec%97%90%20%eb%a7%8c%eb%82%98%ea%b3%a0%20%ea%b3%a0%eb%a7%99%eb%8b%a4%ea%b3%a0%20%ec%9d%b8%ec%82%ac%ed%95%b4%ec%95%bc%ea%b2%a0%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>전역까지 이제 정말 얼마 안남았다.
정확히 어떻게 뭘 준비해야할지 모르겠다. 전역 이후 어떻게 살건지 계획을 구체적으로 세울때가 왔다.
아마도 휴가를 나가서 교수님을 만나뵙고 일하는게 가능한지 물어봐야겠다.
영어는 주변 사람들에게 이것저것 물어보고, 지금은 Mr.Robot 스크립트 리딩하는걸 하고 있다.
내 발음을 녹음해놓고 비교해보면서 연습하고 싶은데, 전역하고 해야될것 같다. 전화영어도 알아보고 있다. 한 누나가 큰 도움을 줬다. 나중에 만나고 고맙다고 인사해야겠다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="다음할일">다음할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 이분 매칭 + 네트워크 플로우까지 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리눅스 커널의 구조의 원리 2편 30% 까지 읽기&lt;/li>
&lt;/ul></description></item><item><title>others</title><link>https://minuk.dev/wiki/others/</link><pubDate>Thu, 01 Oct 2020 23:55:41 +0900</pubDate><guid>https://minuk.dev/wiki/others/</guid><description>어디에 넣어야할지 모르겠는 잡스러운 지식글들</description></item><item><title>2020-09-18 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-09-18/</link><pubDate>Fri, 18 Sep 2020 19:24:26 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-09-18/</guid><description>&lt;h2 id="이전-할일">이전 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> BOJ 단계별로 풀기 37 까지 전부 다 풀기 ~~어 뭐지 바뀌었나? 왜 33번이 문자열 알고리즘 1이고, 스위핑이 38이지? 그래서 45까지 풀기인데, 37로 바꿈, 원래대로면 38이지만 ~~&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 영어 컨텐츠를 즐기고 있기&lt;/li>
&lt;/ul>
&lt;h2 id="지금의-스케줄">지금의 스케줄&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>7:45 ~ 7:50 기상&lt;/p>
&lt;/li>
&lt;li>
&lt;p>7:50 ~ 8:10 기상&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8:10 ~ 8:15 준비&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8:15 ~ 8:30 이동&lt;/p>
&lt;/li>
&lt;li>
&lt;p>8:30 ~ 11:30 일 + 영어 단어 공부&lt;/p>
&lt;/li>
&lt;li>
&lt;p>11:30 ~ 12:10 점심시간&lt;/p>
&lt;/li>
&lt;li>
&lt;p>12:10 ~ 12:40 백준 풀이&lt;/p>
&lt;/li>
&lt;li>
&lt;p>12:40 ~ 12:45 양치&lt;/p></description></item><item><title>seccomp</title><link>https://minuk.dev/wiki/seccomp/</link><pubDate>Sun, 13 Sep 2020 19:37:24 +0900</pubDate><guid>https://minuk.dev/wiki/seccomp/</guid><description>&lt;h2 id="seccomp-secure-computing-mode">seccomp (secure computing mode)&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>참고 : &lt;a href="https://ko.wikipedia.org/wiki/Seccomp">https://ko.wikipedia.org/wiki/Seccomp&lt;/a>, &lt;a href="https://ssup2.github.io/theory_analysis/Linux_seccomp/">https://ssup2.github.io/theory_analysis/Linux_seccomp/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>system call filtering 기법&lt;/p>
&lt;/li>
&lt;li>
&lt;p>strict 와 filter 모드가 존재&lt;/p>
&lt;/li>
&lt;li>
&lt;p>strict 모드에서는 일부 시스템 콜만 허용(read, write, exit, sigreturn), 이외에 호출하면 SIGKILL 이 발생해서 죽음.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filter 모드에서는 각 system call 별로 수행 동작을 설정 가능.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>디버깅을 통해 배우는 리눅스 커널의 구조와 원리</title><link>https://minuk.dev/wiki/debug-linux/</link><pubDate>Tue, 08 Sep 2020 22:14:21 +0900</pubDate><guid>https://minuk.dev/wiki/debug-linux/</guid><description>&lt;h2 id="간략-소개">간략 소개&lt;/h2>
&lt;ul>
&lt;li>디버깅을 통해 배우는 리눅스 커널의 구조와 원리를 읽으면서 공부하는 내용 정리&lt;/li>
&lt;/ul>
&lt;h2 id="설치">설치&lt;/h2>
&lt;ul>
&lt;li>작업하고 있는 곳의 환경상, 라즈베리파이를 직접적으로 사용하기 어려워 qemu로 가상화하기로 했다.&lt;/li>
&lt;li>오로지 ssh로 붙어서 서버에서만 작업가능해야 한다.&lt;/li>
&lt;/ul>
&lt;h3 id="참고한-곳">참고한 곳&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://woodz.tistory.com/72">https://woodz.tistory.com/72&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mystrlight.tistory.com/90">https://mystrlight.tistory.com/90&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://procdiaru.tistory.com/78">https://procdiaru.tistory.com/78&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nautiluslee.blogspot.com/2019/01/debootstrap.html">https://nautiluslee.blogspot.com/2019/01/debootstrap.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tistory.0wn.kr/368">https://tistory.0wn.kr/368&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="이미지-다운로드-및-소스코드-다운로드">이미지 다운로드 및 소스코드 다운로드&lt;/h3>
&lt;h4 id="qemu-설치뇌피셜">qemu 설치(뇌피셜)&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="sudo%20apt%20install%20qemu%20qemu-system-x86">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install qemu qemu-system-x86&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>아마도 이렇게 하면 될것이다, 사실 qemu는 pintos 공부하면서 이미 설치를 다 해놔서&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h4 id="리눅스-커널-소스코드-다운로드">리눅스 커널 소스코드 다운로드&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.19.143.tar.xz&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="kernel-build">kernel build&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="make%20defconfig%0amake%20menuconfig">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>make defconfig
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make menuconfig&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>맨 마지막에 menuconfig 할때는 최하단 kernel hacking 에서 KGDB 체크한다. 나머진 참고한곳에 있는 3번째 칭크를 보고 했는데 정확히는 모르겠다.&lt;/li>
&lt;li>이렇게 하고 나서, deboostrap 을 설치해야한다는데, 4번을 참고했다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="sudo%20apt%20install%20debootstrap">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo apt install debootstrap&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;hr>
&lt;h4 id="이미지-굽기">이미지 굽기&lt;/h4>
&lt;ul>
&lt;li>5번 참고해서 create image 실행해주자.
해서 create-image.sh 실행해주자&lt;/li>
&lt;/ul>
&lt;h4 id="고생한-부분">고생한 부분&lt;/h4>
&lt;ul>
&lt;li>KASLR 을 해제했다고 생각해서 한참동안을 왜 에러가 나오지? 하고 있었다. 주의하자 무조건 해제해줘야한다. 안그러면 디버그 포인트를 지나간다.&lt;/li>
&lt;li>아 근데 왜 안되냐 ㅠ 안되서 다시 처음부터 해보고 있다.&lt;/li>
&lt;li>아 드디어 찾았다. kvm 옵션 끄니까 되네&lt;/li>
&lt;li>감격스러워서 스크린샷도 찍었다.&lt;/li>
&lt;li>&lt;img src="https://minuk.dev/wiki/images/debug_kernel-1.png" alt="debug-linux">&lt;/li>
&lt;/ul>
&lt;h4 id="qemu-실행-스크립트">qemu 실행 스크립트&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="qemu-system-x86_64%20%5c%0a%20-kernel%20./linux-4.19.143/arch/x86_64/boot/bzImage%20%5c%0a%20-append%20%22console=ttyS0%20root=/dev/sda%20rw%20debug%20nokaslr%22%20%5c%0a%20-hda%20buster.img%20%5c%0a%20-net%20user,hostfwd=tcp::10021-:22%20%5c%0a%20-net%20nic%20%5c%0a%20-nographic%20%5c%0a%20-m%202G%20%5c%0a%20-smp%202%20%5c%0a%20-s">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>qemu-system-x86_64 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -kernel ./linux-4.19.143/arch/x86_64/boot/bzImage &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -append &lt;span style="color:#e6db74">&amp;#34;console=ttyS0 root=/dev/sda rw debug nokaslr&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -hda buster.img &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -net user,hostfwd&lt;span style="color:#f92672">=&lt;/span>tcp::10021-:22 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -net nic &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -nographic &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -m 2G &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -smp &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -s&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>rw 옵션을 줘야지 안에서 실행 가능하다.&lt;/li>
&lt;/ul>
&lt;h3 id="vim-설정">vim 설정&lt;/h3>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;h2 id="책-따라하기">책 따라하기&lt;/h2>
&lt;h3 id="커널-디버깅과-코드-학습">커널 디버깅과 코드 학습&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>처음에 ftrace를 소개하는데, 잘 작동이 안된다. 이것도 config를 잘못한거였다. menuconfig -&amp;gt; kernel hacking -&amp;gt; tracer 에서 설정해주고 다시 빌드하자.&lt;/p></description></item><item><title>Filesystem in Userspace</title><link>https://minuk.dev/wiki/fuse/</link><pubDate>Fri, 04 Sep 2020 20:06:36 +0900</pubDate><guid>https://minuk.dev/wiki/fuse/</guid><description>&lt;h2 id="계기">계기&lt;/h2>
&lt;ul>
&lt;li>알게된 이유는, 옆에서 오라큰 파일 시스템이라는 단어를 말했는데 &lt;code>?????&lt;/code> 이라고 느껴서, 공부해보자고 찾아보면서 시작됬다.&lt;/li>
&lt;/ul>
&lt;h2 id="기본-개념">기본 개념&lt;/h2>
&lt;ul>
&lt;li>파일시스템을 유저레벨에서 하고자 하는 경우 사용한다. 보통은 속도보다는 보호와 보안, 백업 등의 용도로 사용한다.&lt;/li>
&lt;li>application(user) -&amp;gt; glib(user) -&amp;gt; vfs(kernel) -&amp;gt; fuse module(kernel) -&amp;gt; glib(user) -&amp;gt; libfuse(user) -&amp;gt; user filesystem(user) -&amp;gt; &amp;hellip;&lt;/li>
&lt;li>위와 같은 순서로 진행된다. 그러면 성능은? 이라는 생각이 들어서 찾아보니, FAST'17에서 나온 &lt;code>To FUSE or Not to FUSE: Performance of User-Space File Systems&lt;/code> 라는 논문이 있다. 간단하게 읽어보니, User Space Filesystem 을 가볍게 구성하고 ext4로 파일을 저장하게 할때, 성능을 분석한 거다. 링크를 참조하자 : &lt;a href="https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf">https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>회고/2020-08-30</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-08-30/</link><pubDate>Sun, 30 Aug 2020 23:09:33 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-08-30/</guid><description>&lt;h2 id="지난-할일">지난 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> LFS 논문 정리 끝내기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> BOJ 단계별로 풀기 40(문자열 알고리즘) 까지 전부 다 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 영어 드라마 하나 이상 보고 있기(또는 다 보기)&lt;/li>
&lt;/ul>
&lt;h2 id="회고">회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>이번 회고에서 키워드는 scpc와 알고리즘 공부, 논문 리딩, 통계학 공부 정도이다.
scpc를 지원해봤는데 광탈했다. 그냥 이것저것 잡념이 많이 든다. 집중하지 못했던게 가장 컷고, 종이로, 논리적으로 풀었어야 했는데 먼가 될꺼같다라는 생각만 가지고 한게 문제였다. 씁쓸하고, 공부를 더 열심히 해야겠다. 사실 정말 씁쓸하고 그날 하루 종일 기분이 좋지 않았다. 하지만 내가 그냥 못했던거고 공부를 더 열심히 하자는 결론이 가장 건강하다고 생각했고, 그렇게 하기로 했다.
두번째는 LFS 논문 정리? 를 나름대로 끝냈다. 다행이다. 근데 이해하지 못했고, 그럼으로써 아직 한참 모자라다는 걸 알게됬다. 이제 SimpleSSD를 다시 코드 보면서 그림 그리면서 정리할껀데, 이건 이해를 더 많이 하면 좋겠다.
세번째는 통계학 공부인데, 슬슬 복학할 생각을 하면 부전공 생각을 해야했다. 통계학 실력이 스스로도 별로라고 생각하고, 다시 공부할 필요성이 있긴 하다. 일단 전체 용어 정리를 다시 해보자.

지난 할일을 싲가하지 못했다. 영어 드라마 하나 이상 보고 있기라고 했는데, 영상 컨텐츠를 별로 좋아하지 않기도 하고, 딱히 마음에 드는 영어 드라마를 찾지도 못했다. 그나마 google io는 조금더 나을줄 알고 보려고 헀는데 그마저도 안봤다. 영어 컨텐츠를 즐기면서 영어 실력을 늘려야할텐데 걱정이다.

슬슬 복학하고 어떻게 공부할지를 생각할 시기인데, 대충 잡기는
12월-1월 : 토플 시험(8주), 학원을 등록해야겠지? 독학은 어려울듯
2월 : 휴식 &amp;#43; 운전면허
3월 : 복학으로 생각하고 있다.
이때 안 힘드려면 지금 영어 공부를 많이 해놔야할텐데 걱정이다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="다음-할일">다음 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> BOJ 단계별로 풀기 45 까지 전부 다 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 영어 컨텐츠를 즐기고 있기&lt;/li>
&lt;/ul></description></item><item><title>RAID(Redundant Array of Independent Disks)</title><link>https://minuk.dev/wiki/raid/</link><pubDate>Sun, 23 Aug 2020 20:50:40 +0900</pubDate><guid>https://minuk.dev/wiki/raid/</guid><description>&lt;h2 id="종류">종류&lt;/h2>
&lt;ul>
&lt;li>RAID 0 : stripping&lt;/li>
&lt;li>RAID 1 : mirroring&lt;/li>
&lt;li>RAID 5 : stripping + mirroring + parity (at least 3 disks)&lt;/li>
&lt;li>RAID 6 : stripping + mirroring + parity (at least 4 disks)&lt;/li>
&lt;li>RAID 0 + 1 : mirroring after stripping&lt;/li>
&lt;li>RAID 10 (1 + 0) : stripping after mirroring&lt;/li>
&lt;/ul>
&lt;h2 id="benchmark">Benchmark&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>SSD 에서의 밴치마크 : &lt;a href="https://www.phoronix.com/scan.php?page=article&amp;amp;item=linux55-ssd-raid&amp;amp;num=1">https://www.phoronix.com/scan.php?page=article&amp;amp;item=linux55-ssd-raid&amp;amp;num=1&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RAID 5 기준으로 작성 다른 RAID 같은 경우 위 링크 참조&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Btrfs&lt;/th>
 &lt;th>EXT4&lt;/th>
 &lt;th>F2FS&lt;/th>
 &lt;th>XFS&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Application Start-up Time v3.4.0 (Only Sequential Reads - Xterm)&lt;/td>
 &lt;td>8.69&lt;/td>
 &lt;td>0.20&lt;/td>
 &lt;td>5.51&lt;/td>
 &lt;td>8.76&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Application Start-up Time v3.4.0 (Sequential Reads + Writes - Xterm)&lt;/td>
 &lt;td>3.68&lt;/td>
 &lt;td>2.64&lt;/td>
 &lt;td>1.62&lt;/td>
 &lt;td>1.85&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Application Start-up Time v3.4.0 (Only Sequential Reads - GNOME Terminal)&lt;/td>
 &lt;td>22.70&lt;/td>
 &lt;td>30.39&lt;/td>
 &lt;td>15.26&lt;/td>
 &lt;td>39.19&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Application Start-up Time v3.4.0 (Only Sequential Reads - LibreOffice Writer)&lt;/td>
 &lt;td>14.34&lt;/td>
 &lt;td>22.94&lt;/td>
 &lt;td>10.28&lt;/td>
 &lt;td>28.06&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Application Start-up Time v3.4.0 (Sequential Reads + Writes - GNOME Terminal)&lt;/td>
 &lt;td>10.68&lt;/td>
 &lt;td>7.19&lt;/td>
 &lt;td>4.77&lt;/td>
 &lt;td>8.63&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Application Start-up Time v3.4.0 (Sequential Reads + Writes - LivreOffice Writer)&lt;/td>
 &lt;td>6.93&lt;/td>
 &lt;td>6.06&lt;/td>
 &lt;td>2.91&lt;/td>
 &lt;td>6.33&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SQLite v3.30.1 (Threads / Copies : 1)&lt;/td>
 &lt;td>83.30&lt;/td>
 &lt;td>40.36&lt;/td>
 &lt;td>46.17&lt;/td>
 &lt;td>46.38&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>SQLite v3.30.1 (Threads / Copies : 8)&lt;/td>
 &lt;td>227.68&lt;/td>
 &lt;td>308.02&lt;/td>
 &lt;td>412.05&lt;/td>
 &lt;td>221.80&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Flexible IO Tester v3.16 (Random Write)&lt;/td>
 &lt;td>115K&lt;/td>
 &lt;td>93K&lt;/td>
 &lt;td>85K&lt;/td>
 &lt;td>122K&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>대충 이정도만 정리 나머진 직접 링크 가서 확인&lt;/p></description></item><item><title>Storage</title><link>https://minuk.dev/wiki/storage/</link><pubDate>Sun, 23 Aug 2020 20:47:33 +0900</pubDate><guid>https://minuk.dev/wiki/storage/</guid><description>&lt;ul>
&lt;li>문서 양이 많아져서 분리할 필요가 있어짐에 따라 분리&lt;/li>
&lt;/ul>
&lt;h2 id="하위-분류">하위 분류&lt;/h2>
&lt;ul>
&lt;li>[[SSD]]&lt;/li>
&lt;li>[[database]]&lt;/li>
&lt;/ul>
&lt;h2 id="관련-논문들">관련 논문들&lt;/h2>
&lt;ul>
&lt;li>[[simplessd]]&lt;/li>
&lt;li>[[Endurable_Transient_Inconsistency_in_Byte_Addressable_Persistent_B+-Tree]]&lt;/li>
&lt;li>[[LFS]]&lt;/li>
&lt;li>[[ext4]]{The new ext4 filesystem: current status and future plans}&lt;/li>
&lt;li>[[F2FS]]&lt;/li>
&lt;/ul>
&lt;h2 id="용어">용어&lt;/h2>
&lt;ul>
&lt;li>[[cache]]&lt;/li>
&lt;li>[[RAID]]&lt;/li>
&lt;li>[[fuse]]&lt;/li>
&lt;li>[[blk-mq]]&lt;/li>
&lt;/ul></description></item><item><title>2020-08-17 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-08-17/</link><pubDate>Mon, 17 Aug 2020 00:49:05 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-08-17/</guid><description>&lt;h2 id="이전-할일">이전 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> LFS 논문 정리 끝내기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> BOJ 단계별로 풀기 30(동적 계획법 3) 까지 전부 다 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 영어 드라마 하나 이상 보고 있기(또는 다 보기)&lt;/li>
&lt;/ul>
&lt;h2 id="회고">회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%9a%94%ec%a6%98%20%ec%8a%ac%eb%9f%bc%ed%94%84%eb%8b%a4.%20%ec%9d%b4%ea%b2%83%ec%a0%80%ea%b2%83%20%ec%9e%a1%ec%83%9d%ea%b0%81%ec%9d%b4%20%eb%a7%8e%ec%9d%b4%20%eb%93%a0%eb%8b%a4.%20%ed%95%98%eb%a3%a8%20%ec%a2%85%ec%9d%bc%20%ec%9c%a0%ed%8a%9c%eb%b8%8c%eb%a7%8c%20%eb%b3%b8%eb%8b%a4.%20%ec%9c%a0%ed%8a%9c%eb%b8%8c%ec%97%90%ec%84%9c%20%eb%8d%94%ec%9d%b4%ec%83%81%20%eb%b3%bc%ea%b2%8c%20%ec%97%86%eb%8b%a4%eb%8a%94%ea%b2%8c%20%ec%8b%9c%ea%b0%84%ec%9d%84%20%eb%82%ad%eb%b9%84%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4%eb%8a%94%20%ea%b1%b4%eb%8d%b0%0a%ec%98%a4%eb%8a%98%eb%8f%84%20%eb%b3%bc%ea%b2%8c%20%ec%97%86%ec%97%88%eb%8b%a4.%e3%85%8e%20%ea%b7%b8%eb%82%98%eb%a7%88%20%eb%82%98%eb%a6%84%20%ec%a3%84%ec%b1%85%ea%b0%90%ec%9d%84%20%eb%8d%9c%ea%b8%b0%20%ec%9c%84%ed%95%b4%ec%84%9c%20%eb%b0%b1%ec%a4%80%ec%9d%84%20%ed%92%80%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%20%ec%98%a4%eb%8a%98%2014002%20%eb%b2%88%ec%9d%84%20%ed%91%b8%eb%8a%94%eb%8d%b0%20%ec%83%9d%ea%b0%81%eb%a7%8c%ed%81%bc%20%ec%9e%98%20%eb%90%98%ec%a7%80%20%ec%95%8a%ec%95%98%eb%8b%a4.%0a%ec%a7%80%eb%82%9c%eb%8b%ac%eb%b3%b4%eb%8b%a4%20%ec%82%ac%ec%a7%80%eb%b0%a9%ec%97%90%20%ec%98%a8%20%ec%8b%9c%ea%b0%84%ec%9d%80%20%eb%a7%8e%ec%9d%80%eb%8d%b0,%20%ec%8b%a4%ec%a0%9c%eb%a1%9c%20%eb%8d%94%20%eb%b0%9c%ec%a0%84%ed%95%9c%ea%b2%83%20%ea%b0%99%ec%a7%80%20%ec%95%8a%eb%8b%a4.%20%ea%b7%b8%eb%83%a5%20%ec%8b%9c%ea%b0%84%20%ec%b6%95%ec%9d%b4%ea%b8%b0%eb%a7%8c%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%0a%ec%98%81%ec%96%b4%ea%b3%b5%eb%b6%80%eb%8f%84%20%ec%95%88%ed%95%98%ea%b3%a0,%20%ea%b7%b8%eb%a0%87%eb%8b%a4%ea%b3%a0%20%eb%a8%bc%ea%b0%80%20%ec%83%9d%ec%82%b0%ec%a0%81%ec%9d%b8%20%ea%b1%b8%20%ed%95%98%eb%8a%94%20%ea%b2%83%eb%8f%84%20%ec%95%84%eb%8b%88%eb%8b%a4.%0a%ea%b3%a0%eb%af%bc%ec%9d%b4%20%eb%a7%8e%eb%8b%a4.%20%ec%a1%b0%ea%b8%88%20%eb%8d%94%20%eb%a7%88%ec%9d%8c%ec%9d%84%20%eb%8b%a4%ec%a0%b8%eb%b3%b4%ec%9e%90.%20%ec%b0%a9%ec%9e%a1%ed%95%b4%ec%a7%84%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>요즘 슬럼프다. 이것저것 잡생각이 많이 든다. 하루 종일 유튜브만 본다. 유튜브에서 더이상 볼게 없다는게 시간을 낭비하고 있다는 건데
오늘도 볼게 없었다.ㅎ 그나마 나름 죄책감을 덜기 위해서 백준을 풀고 있다. 오늘 14002 번을 푸는데 생각만큼 잘 되지 않았다.
지난달보다 사지방에 온 시간은 많은데, 실제로 더 발전한것 같지 않다. 그냥 시간 축이기만 하고 있다.
영어공부도 안하고, 그렇다고 먼가 생산적인 걸 하는 것도 아니다.
고민이 많다. 조금 더 마음을 다져보자. 착잡해진다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="다음-할일">다음 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> LFS 논문 정리 끝내기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> BOJ 단계별로 풀기 40(문자열 알고리즘) 까지 전부 다 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 영어 드라마 하나 이상 보고 있기(또는 다 보기)&lt;/li>
&lt;/ul></description></item><item><title>teamnote</title><link>https://minuk.dev/wiki/teamnote/</link><pubDate>Sat, 08 Aug 2020 00:10:21 +0900</pubDate><guid>https://minuk.dev/wiki/teamnote/</guid><description>알고리즘 문풀용 팀노트</description></item><item><title>git</title><link>https://minuk.dev/wiki/git/</link><pubDate>Fri, 31 Jul 2020 20:48:29 +0900</pubDate><guid>https://minuk.dev/wiki/git/</guid><description>git 쓰다가 종종 찾아보게 되는 내용들</description></item><item><title>2020년 7월 31일자 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-07-31/</link><pubDate>Fri, 31 Jul 2020 20:26:16 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-07-31/</guid><description>&lt;h2 id="지난번-할일-목록">지난번 할일 목록&lt;/h2>
&lt;h2 id="할일-목록">할일 목록&lt;/h2>
&lt;ul>
&lt;li>생각해보니 할일이라는게 회고때마다 생각날꺼 같아서 적은거 중장기인 목표들을 todo list에 적자.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 오디오북 듣기 시작하기 (일단 보류 지킬과 하이드 들어보니 별루여서, 일단 듣기는 보류합시다.)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 구글 결제 계정 문제 해결 (2020-06-19 해결)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 인바디 측정하기 (7월 9일)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> simplessd host 부분 끝내기 (언젠지는 딱히 기억이 안나네)&lt;/li>
&lt;/ul>
&lt;h2 id="이번-회고">이번 회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%a7%80%eb%82%9c%eb%b2%88%20%ed%9a%8c%ea%b3%a0%20%eb%95%8c,%20%ec%82%ac%ec%9d%b4%ed%81%b4%ec%9d%b4%20%eb%84%88%eb%ac%b4%20%ec%a7%a7%ec%95%84%ec%84%9c%20%ec%9d%b4%eb%b2%88%ec%97%90%eb%8a%94%20%ec%a1%b0%ea%b8%88%20%ea%b8%b8%ea%b2%8c%20%eb%91%ac%ec%95%bc%ea%b2%a0%eb%8b%a4%20%ed%96%87%eb%8a%94%eb%8d%b0%20%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%20%ea%b0%84%ea%b2%a9%ec%9d%b4%20%ea%b8%b8%ec%96%b4%ec%a0%b8%20%eb%b2%84%eb%a0%b8%eb%8b%a4.%0a%ec%a7%80%eb%82%9c%202%eb%8b%ac%ea%b0%84,%20%ec%9c%a0%ed%8a%9c%eb%b8%8c%20%ed%94%84%eb%a6%ac%eb%af%b8%ec%97%84%ec%9c%bc%eb%a1%9c%20impulse%20%eb%9d%bc%eb%8a%94%20%eb%93%9c%eb%9d%bc%eb%a7%88%eb%a5%bc%20%eb%b4%a4%ec%97%88%eb%8a%94%eb%8d%b0,%20%ec%a0%90%ed%8d%bc%ec%9d%98%20%ec%8a%a4%ed%95%80%ec%98%a4%ed%94%84%ec%97%ac%ec%84%9c%20%ec%9e%ac%eb%af%b8%ec%9e%88%ec%9d%84%20%ec%a4%84%20%ec%95%8c%ec%95%98%eb%8a%94%eb%8d%b0,%20%eb%82%b4%ea%b0%80%20%ec%83%9d%ea%b0%81%ed%95%98%eb%8d%98%20%eb%93%9c%eb%9d%bc%eb%a7%88%eb%8a%94%20%ec%95%84%eb%8b%88%ec%98%80%eb%8b%a4.%20%ec%98%81%ec%96%b4%20%ea%b3%b5%eb%b6%80%ea%b2%b8%20%ea%be%b8%ec%97%ad%ea%be%b8%ec%97%ad%20%ec%b0%b8%ea%b3%a0%20%eb%b4%a4%eb%8a%94%eb%8d%b0,%20%ec%a0%a0%eb%8d%94%20%ec%9d%b4%ec%8a%88%ea%b0%80%20%eb%84%88%eb%ac%b4%20%eb%a7%8e%ec%9d%b4%20%eb%93%a4%ec%96%b4%20%ec%9e%88%ec%96%b4%ec%84%9c%20%eb%b3%84%eb%a1%9c%20%ec%98%80%eb%8b%a4.%20%ec%a0%a0%eb%8d%94%ec%9d%b4%ec%8a%88%eb%8f%84%20%eb%ac%bc%eb%a1%a0%20%ec%a4%91%ec%9a%94%ed%95%98%ec%a7%80%eb%a7%8c,%20%ea%b7%b8%eb%b3%b4%eb%8b%a4%eb%8a%94%20%ec%82%ac%eb%9e%8c%eb%93%a4%ec%9d%b4%20%ea%b8%b0%eb%8c%80%ed%95%98%eb%8a%94%20%ec%a0%90%ed%8d%bc%20%ec%8a%a4%ed%95%80%ec%98%a4%ed%94%84%20%ec%aa%bd%ec%97%90%20%eb%ac%b4%ea%b2%8c%eb%a5%bc%20%ec%8b%a4%ec%97%88%ec%9c%bc%eb%a9%b4%20%ec%96%b4%eb%95%9f%ec%9d%84%ea%b9%8c%20%ec%8b%b6%eb%8b%a4.%0aSCPC%20%ec%8b%a0%ec%b2%ad%ec%9d%84%20%ed%95%98%eb%a9%b4%ec%84%9c,%20%eb%b0%b1%ec%a4%80%ec%9d%84%20%eb%8b%a4%ec%8b%9c%20%ed%92%80%ea%b8%b0%20%ec%8b%9c%ec%9e%91%ed%96%88%eb%8b%a4.%20%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%eb%8a%94%20%ec%9e%ac%eb%b0%8c%eb%8b%a4.%20%ec%a7%80%ea%b8%88%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8a%94%20%eb%8b%a4%eb%a5%b8%ea%b2%8c%20%eb%84%88%eb%ac%b4%20%eb%b3%84%eb%a1%9c%ec%97%ac%ec%84%9c%ec%9d%b8%ea%b0%80?%0a%ea%b7%b8%20%ed%99%88%ed%8e%98%ec%9d%b4%ec%a7%80%20%ec%9a%b4%ec%98%81%ec%a7%84%ec%9d%84%20%ea%b7%b8%eb%a7%8c%eb%92%80%eb%8b%a4.%20%ec%a0%95%ed%99%95%ed%9e%88%eb%8a%94%20%ec%98%a4%eb%8a%98%ec%9d%b4%20%eb%a7%88%ec%a7%80%eb%a7%89%ec%9d%b4%eb%8b%a4.%20%ec%9d%b8%ec%88%98%ec%9d%b8%ea%b3%84%eb%a5%bc%20%eb%8b%a4%20%ed%96%88%ec%9c%bc%eb%8b%88%20%ec%95%8c%ec%95%84%ec%84%9c%20%ed%95%98%ea%b2%a0%ec%a7%80.%20%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%20%ed%9b%84%eb%a0%a8%ed%95%98%eb%8b%a4.%0aZeroPage%20%eb%8f%99%ec%95%84%eb%a6%ac%20%ec%8a%ac%eb%9e%99%ec%9d%84%20%eb%8b%a4%ec%8b%9c%20%ed%95%98%ea%b2%8c%eb%90%ac%eb%8b%a4.%20%ec%95%bd%ea%b0%84%20%eb%91%90%eb%a0%a4%ec%9b%80%ec%9d%b4%20%ec%9e%88%ec%97%88%eb%8a%94%eb%8d%b0,%20%eb%8b%a4%eb%a5%b8%20%ec%82%ac%eb%9e%8c%eb%93%a4%ec%9d%b4%20%ec%95%88%20%ec%a2%8b%ec%95%84%ed%95%98%eb%8a%94%ea%b1%b4%20%ed%81%b0%20%ec%83%81%ea%b4%80%20%ec%97%86%eb%8b%a4%eb%8a%94%20%ec%83%9d%ea%b0%81%ec%9d%84%20%ed%95%98%ea%b3%a0%20%eb%82%98%eb%8b%88%20%ed%8e%b8%ed%95%b4%ec%a1%8c%eb%8b%a4.%0aQuestion%20%ec%b1%84%eb%84%90%ec%97%90%20LB%20%ec%97%90%20%eb%8c%80%ed%95%b4%ec%84%9c%20%ec%a7%88%eb%ac%b8%ed%96%88%eb%8a%94%eb%8d%b0,%20%eb%8b%b5%eb%b3%80%ec%9d%84%20%eb%b3%b4%ea%b3%a0%20%eb%b3%84%eb%a1%9c%20%ea%b8%b0%eb%b6%84%ec%9d%b4%20%ec%95%88%ec%a2%8b%ec%95%84%ec%a1%8c%ec%97%88%eb%8b%a4.%20%eb%94%b1%ed%9e%88%20%ec%8a%a4%ec%9c%84%ec%b9%98%20%ec%9b%90%eb%a6%ac%eb%a5%bc%20%eb%ac%bb%eb%8a%94%ea%b2%8c%20%ec%95%84%eb%8b%88%eb%9d%bc,%20OSI%207%20%ea%b3%84%ec%b8%b5%20%ea%b8%b0%ec%a4%80%ec%9c%bc%eb%a1%9c%20LB%ea%b0%80%207%ea%b3%84%ec%b8%b5%20%eb%82%b4%ec%9a%a9%ec%9d%84%20%ec%96%b4%eb%96%bb%ea%b2%8c%20%eb%b3%b4%ea%b3%a0%20sticky%20balancing%20%ea%b0%99%ec%9d%80%ea%b1%b8%20%ed%95%98%eb%8a%94%ec%a7%80%ea%b0%80%20%ea%b6%81%ea%b8%88%ed%96%88%eb%8d%98%20%ea%b1%b4%eb%8d%b0,%20%ed%95%9c%eb%b6%84%20%eb%b9%bc%ea%b3%a0%eb%8a%94%20%eb%84%a4%ed%8a%b8%ec%9b%8c%ed%81%ac%20%ea%b8%b0%eb%b3%b8%20%ec%a7%80%ec%8b%9d%ec%9d%84%20%eb%8b%b5%eb%b3%80%ed%95%b4%ec%a4%ac%eb%8b%a4.%20%ea%b7%b8%20%ec%a0%95%eb%8f%84%eb%8a%94%20%ea%b2%80%ec%83%89%ed%95%b4%eb%b3%b4%ea%b3%a0%20%ec%a7%88%eb%ac%b8%ed%96%88%ec%9d%84%20%ea%ba%bc%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%98%eb%8a%94%ea%b2%8c%20%eb%8b%b9%ec%97%b0%ed%95%9c%ea%b1%b0%20%ea%b0%99%ec%9d%80%eb%8d%b0,%20%eb%84%88%eb%ac%b4%20%ec%88%98%ec%a4%80%ec%9d%b4%20%ec%96%95%ea%b2%8c%20%eb%b3%b4%ec%9d%b8%ea%b2%83%20%ea%b0%99%ec%95%84%ec%84%9c%20%ea%b8%b0%eb%b6%84%ec%9d%b4%20%eb%b3%84%eb%a1%9c%20%ec%a2%8b%ec%a7%80%20%ec%95%8a%ec%95%98%eb%8b%a4.%20%ea%b7%b8%eb%9e%98%eb%8f%84%20%ed%95%9c%eb%b6%84%ec%9d%b4%20%ec%a0%95%ed%99%95%ed%9e%88%20%ec%96%b4%eb%96%a4%ea%b1%b8%20%ec%9b%90%ed%95%98%eb%8a%94%ec%a7%80%20%eb%8b%b5%eb%b3%80%ed%95%b4%ec%a3%bc%ec%85%a8%eb%8b%a4.%20%28%ec%a4%91%ea%b0%84%ec%97%90%20%ec%a1%b0%ea%b8%88%eb%8d%94%20%ec%a7%88%eb%ac%b8%ec%9d%84%20%ec%a0%95%ed%99%95%ed%9e%88%20%ec%a0%95%ec%a0%95%ed%95%b4%ec%84%9c%20%ea%b7%b8%eb%9f%b0%20%ea%b2%83%eb%8f%84%20%ec%9e%88%ec%a7%80%eb%a7%8c%29%0a%eb%8f%85%ec%84%b1%eb%a7%90%ed%88%ac%28toxic%20tone%29%20%ec%97%90%20%eb%8c%80%ed%95%b4%ec%84%9c%20%eb%8b%a4%ec%8b%9c%20%ec%83%9d%ea%b0%81%ed%95%b4%eb%b3%b4%ea%b2%8c%20%eb%90%98%eb%8a%94%20%ec%9d%bc%ec%9d%b4%ec%98%80%eb%8b%a4.%20%eb%94%b8%eb%9e%91%20%ea%b5%ac%ea%b8%80%20%eb%a7%81%ed%81%ac%20%ed%95%98%eb%82%98%eb%a5%bc%20%eb%8d%98%ec%a0%b8%ec%a3%bc%eb%8a%94%ea%b2%8c%20%ec%96%bc%eb%a7%88%eb%82%98%20%eb%b3%84%eb%a1%9c%ec%9d%b8%20%eb%8b%b5%eb%b3%80%ec%9d%b8%ec%a7%80%20%ec%95%8c%ea%b2%8c%20%eb%90%98%ec%97%88%eb%8b%a4.%20%eb%90%98%ec%83%88%ea%b8%b0%eb%8b%88%20%eb%8d%94%20%ed%99%94%eb%82%98%eb%84%a4,%20%ea%b7%b8%eb%9e%98%eb%8f%84%20%eb%94%b1%ed%9e%88%20%ea%b7%b8%eb%9f%b0%20%ed%8b%b0%20%ec%95%88%eb%82%b4%ea%b3%a0%20%eb%8b%b5%eb%b3%80%20%eb%8b%ac%ec%95%84%ec%a4%80%20%eb%aa%a8%eb%93%a0%20%ec%82%ac%eb%9e%8c%eb%93%a4%ec%97%90%ea%b2%8c%20%ea%b3%a0%eb%a7%99%eb%8b%a4%ea%b3%a0%20%ec%9d%b4%eb%aa%a8%ed%8b%b0%ec%bd%98%ec%9d%84%20%eb%82%a8%ea%b2%bc%eb%8b%a4.%20%28%ea%b0%9c%ec%9d%b8%ec%a0%81%ec%9c%bc%eb%a1%9c%eb%8a%94%20%ec%8a%a4%ec%8a%a4%eb%a1%9c%20%ea%b7%b8%eb%9f%b0%20%eb%8b%b5%eb%b3%80%ec%9d%84%20%ed%96%88%eb%8b%a4%eb%8a%94%20%ea%b1%b8%20%eb%b6%80%eb%81%84%eb%9f%ac%ec%9b%8c%ed%95%98%eb%a9%b4%20%ec%a2%8b%ea%b2%a0%eb%8a%94%eb%8d%b0%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>지난번 회고 때, 사이클이 너무 짧아서 이번에는 조금 길게 둬야겠다 햇는데 생각보다 간격이 길어져 버렸다.
지난 2달간, 유튜브 프리미엄으로 impulse 라는 드라마를 봤었는데, 점퍼의 스핀오프여서 재미있을 줄 알았는데, 내가 생각하던 드라마는 아니였다. 영어 공부겸 꾸역꾸역 참고 봤는데, 젠더 이슈가 너무 많이 들어 있어서 별로 였다. 젠더이슈도 물론 중요하지만, 그보다는 사람들이 기대하는 점퍼 스핀오프 쪽에 무게를 실었으면 어땟을까 싶다.
SCPC 신청을 하면서, 백준을 다시 풀기 시작했다. 생각보다는 재밌다. 지금 하고 있는 다른게 너무 별로여서인가?
그 홈페이지 운영진을 그만뒀다. 정확히는 오늘이 마지막이다. 인수인계를 다 했으니 알아서 하겠지. 생각보다 후련하다.
ZeroPage 동아리 슬랙을 다시 하게됬다. 약간 두려움이 있었는데, 다른 사람들이 안 좋아하는건 큰 상관 없다는 생각을 하고 나니 편해졌다.
Question 채널에 LB 에 대해서 질문했는데, 답변을 보고 별로 기분이 안좋아졌었다. 딱히 스위치 원리를 묻는게 아니라, OSI 7 계층 기준으로 LB가 7계층 내용을 어떻게 보고 sticky balancing 같은걸 하는지가 궁금했던 건데, 한분 빼고는 네트워크 기본 지식을 답변해줬다. 그 정도는 검색해보고 질문했을 꺼라고 생각하는게 당연한거 같은데, 너무 수준이 얕게 보인것 같아서 기분이 별로 좋지 않았다. 그래도 한분이 정확히 어떤걸 원하는지 답변해주셨다. (중간에 조금더 질문을 정확히 정정해서 그런 것도 있지만)
독성말투(toxic tone) 에 대해서 다시 생각해보게 되는 일이였다. 딸랑 구글 링크 하나를 던져주는게 얼마나 별로인 답변인지 알게 되었다. 되새기니 더 화나네, 그래도 딱히 그런 티 안내고 답변 달아준 모든 사람들에게 고맙다고 이모티콘을 남겼다. (개인적으로는 스스로 그런 답변을 했다는 걸 부끄러워하면 좋겠는데)&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="다음-할일">다음 할일&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> LFS 논문 정리 끝내기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> BOJ 단계별로 풀기 30(동적 계획법 3) 까지 전부 다 풀기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 영어 드라마 하나 이상 보고 있기(또는 다 보기)&lt;/li>
&lt;/ul></description></item><item><title>3공 노트</title><link>https://minuk.dev/wiki/3%EA%B3%B5%EB%85%B8%ED%8A%B8/</link><pubDate>Fri, 31 Jul 2020 20:18:56 +0900</pubDate><guid>https://minuk.dev/wiki/3%EA%B3%B5%EB%85%B8%ED%8A%B8/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>A4 를 사용하기에는 뭔가 줄이 있는게 좋아서, 3공 노트를 쓰자.&lt;/li>
&lt;li>가격은 약간 부담되더라도 이게 더 편한듯?&lt;/li>
&lt;li>&lt;a href="http://item.gmarket.co.kr/DetailView/Item.asp?goodscode=1526928349&amp;amp;GoodsSale=Y&amp;amp;jaehuid=200001169&amp;amp;NaPm=ct%3Dkda4v728%7Cci%3Db7fd057b0e1d72f65f34b632cb6137fa0a60c382%7Ctr%3Dsls%7Csn%3D24%7Chk%3D3c598e7ef7cffd32535d4d006230f116887ac3e6">지금 쓰는 3공 노트 속지&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>NAS</title><link>https://minuk.dev/wiki/nas/</link><pubDate>Tue, 21 Jul 2020 23:45:13 +0900</pubDate><guid>https://minuk.dev/wiki/nas/</guid><description>&lt;h2 id="정의">정의&lt;/h2>
&lt;ul>
&lt;li>Network Attached Storage&lt;/li>
&lt;li>LAN(Local Area Network)로 연결되는 단일 스토리지 디바이스&lt;/li>
&lt;/ul>
&lt;h2 id="비교">비교&lt;/h2>
&lt;ul>
&lt;li>DAS(Direct-Attached storage)&lt;/li>
&lt;li>SAN(Storage Area Network) - 여러 기기로 이루어진 로컬 네트워크&lt;/li>
&lt;/ul>
&lt;h2 id="구축">구축&lt;/h2>
&lt;h3 id="기존의-구축된걸-사용">기존의 구축된걸 사용&lt;/h3>
&lt;ul>
&lt;li>Synology, QNAP, Thecus, and Asustor&lt;/li>
&lt;/ul>
&lt;h3 id="직접-구축">직접 구축&lt;/h3>
&lt;ul>
&lt;li>네트워크 대역폭&lt;/li>
&lt;li>프로토콜 : WebDAV&lt;/li>
&lt;li>RAID&lt;/li>
&lt;li>파일시스템 : Lustre&lt;/li>
&lt;/ul></description></item><item><title>LFS Paper</title><link>https://minuk.dev/wiki/lfs/</link><pubDate>Thu, 16 Jul 2020 20:35:14 +0900</pubDate><guid>https://minuk.dev/wiki/lfs/</guid><description>The basic idea : collect large amounts of new data in a file cache in main memory</description></item><item><title>Flash Translation Layer</title><link>https://minuk.dev/wiki/ftl/</link><pubDate>Tue, 14 Jul 2020 19:32:21 +0900</pubDate><guid>https://minuk.dev/wiki/ftl/</guid><description>&lt;h2 id="ftl-">FTL ?&lt;/h2>
&lt;ul>
&lt;li>Flash Translation Layer의 약자.&lt;/li>
&lt;li>SSD를 Disk 처럼 사용할 수 있게 변환하는 Layer&lt;/li>
&lt;/ul>
&lt;h2 id="구성요소">구성요소&lt;/h2>
&lt;ul>
&lt;li>STL (Sector Translation Layer)
&lt;ul>
&lt;li>Address Mapping : Logical Address 를 Physical Address 로 변환&lt;/li>
&lt;li>Garbage Collection : 안 쓰는 NAND Memory를 초기화하여 쓰기 가능한 상태로 바꾸는 것.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wear Leveling : 특정한 NAND Memory에 쓰기가 몰리지 않게 하여, 전체적인 수명을 관리하는 것.&lt;/li>
&lt;li>BML (Bad-Block Management Layer)
&lt;ul>
&lt;li>BBM(Bad Block Management) : NAND 특성상, 새 NAND 조차 불량 블록이 있을수 있으며, 이런 블록을 관리.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LLD (Low Level Driver)
&lt;ul>
&lt;li>NAND Flash를 위한 Driver&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="address-mapping-in-ftl">Address Mapping in FTL&lt;/h2>
&lt;h3 id="page-level-maping">Page-level Maping&lt;/h3>
&lt;ul>
&lt;li>Page 단위 모든 Maping을 Mapping Table에 두는것&lt;/li>
&lt;li>Mapping Table 안에는 [[LPN]]과 [[PPN]]이 들어있다.&lt;/li>
&lt;li>장점
&lt;ul>
&lt;li>새로운 쓰기 요청을 사용중이 아닌 페이지라면 어디에든 쓸수 있다. 이는 랜덤 쓰기에서 높은 성능을 보여준다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>NAND Flash Memory 특성상, 쓰기는 페이지 단위로 할 수 있어도, 지우기는 Block 단위로 밖에 안되기 때문에, Free Space가 부족하게 될 경우, 공간을 확보하기 위해서 Copy를 통해 데이터를 모으게 되고, 이 과정에서 쓰기 성능이 매우 떨어지게 된다.&lt;/li>
&lt;li>Mapping Table의 크기가 상대적으로 커서 RAM영역을 많이 차지하게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="block-level-mapping">Block-level Mapping&lt;/h3>
&lt;ul>
&lt;li>Erase 의 단위인 Block단위로 관리하는 방법&lt;/li>
&lt;li>Maping Table에는 LBN(Logical Block Number)와 PBN(Physical Block Number)가 존재하며, 접근할때 PBN으로 Block을 찾은뒤, Page Offset을 통해서 접근한다.&lt;/li>
&lt;li>장점
&lt;ul>
&lt;li>Mapping Table의 크기가 작으며 순차쓰기에서 성능이 좋다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>랜덤 쓰기에서 Block Copy로 인해 성능이 떨어진다.&lt;/li>
&lt;li>(이건 개인적 생각) 수명 관리 측면에서도 좋지는 않을 듯&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="hybrid-mapping">Hybrid Mapping&lt;/h3>
&lt;ul>
&lt;li>위 방법 둘을 혼합한 것으로. 쓰기에 대해서 Log Block을 사용한다.&lt;/li>
&lt;/ul></description></item><item><title>PPN(Physical Page Number)</title><link>https://minuk.dev/wiki/ppn/</link><pubDate>Tue, 14 Jul 2020 19:29:54 +0900</pubDate><guid>https://minuk.dev/wiki/ppn/</guid><description>&lt;h2 id="같이-볼거리">같이 볼거리&lt;/h2>
&lt;ul>
&lt;li>[[FTL]]&lt;/li>
&lt;li>[[LPN]]&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>FTL에 의해 변환된 주소를 Page 단위에 따라서 나누고 여기에 번호를 붙인것.&lt;/li>
&lt;li>PBN(Page Block Number)의 변화와 상관없이 연속적으로 붙여진다.
&lt;ul>
&lt;li>예시 : Page Block에 4개의 Page가 들어갈 경우 0번 Page Block 은 PPN이 0&lt;del>3, 1번 Page Block은 4&lt;/del>7을 가지고 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>LPN(Logical Page Number)</title><link>https://minuk.dev/wiki/lpn/</link><pubDate>Tue, 14 Jul 2020 19:28:19 +0900</pubDate><guid>https://minuk.dev/wiki/lpn/</guid><description>&lt;h2 id="같이-볼거리">같이 볼거리&lt;/h2>
&lt;ul>
&lt;li>[[FTL]]&lt;/li>
&lt;li>[[PPN]]&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>Logical Page Number 이며, [[FTL]]에 의해 변환되기 전 논리적 Page 주소를 Page 단위로 나누고, 이 Page에 번호를 붙인것&lt;/li>
&lt;/ul></description></item><item><title>Load Balance</title><link>https://minuk.dev/wiki/load-balance/</link><pubDate>Mon, 13 Jul 2020 20:06:55 +0900</pubDate><guid>https://minuk.dev/wiki/load-balance/</guid><description>&lt;h2 id="기본-개념">기본 개념&lt;/h2>
&lt;ul>
&lt;li>한 대의 서버로 여러 Client의 요청을 처리할 수 없고, Client에겐 단일 point 로 보이고 싶을때 사용하는 방법&lt;/li>
&lt;li>Client가 Load Balancer (이하 LB) 에게 Request를 보내게 하고, LB는 일정한 알고리즘에 따라 Web Application Server(이하 WAS)에게 나눠주는 방법&lt;/li>
&lt;li>상황에 따라 L4, L7 이 필요하다.&lt;/li>
&lt;/ul>
&lt;h2 id="궁금점">궁금점&lt;/h2>
&lt;h3 id="was는-client를-어떻게-식별identification하나">WAS는 Client를 어떻게 식별(Identification)하나?&lt;/h3>
&lt;ul>
&lt;li>당연하게도 cookie 로 식별(Identification)할 수 있다. 하지만 cookie 없이 IP는 식별 불가능한가? 라는 생각이 든다.&lt;/li>
&lt;li>이를 위한 표준으로 &lt;code>Forwarded&lt;/code> 라는 값이 있고, 여기에 Proxy Ip들을 넣어주면 된다.&lt;/li>
&lt;/ul>
&lt;h3 id="was는-client를-어떻게-인증authentication-하나">WAS는 Client를 어떻게 인증(Authentication) 하나?&lt;/h3>
&lt;ul>
&lt;li>별도의 인증서버를 두는 방법, JWT 같은 변조 불가능한 Token을 사용하는 방법이 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="이런-구조에서-파일-업로드와-같은-기능은-어떻게-되는가">이런 구조에서 파일 업로드와 같은 기능은 어떻게 되는가?&lt;/h3>
&lt;ul>
&lt;li>별도의 NAS를 사용하는 방법, DB에 저장하는 방법 등이 있다.&lt;/li>
&lt;/ul></description></item><item><title>Cache</title><link>https://minuk.dev/wiki/cache/</link><pubDate>Mon, 06 Jul 2020 20:38:22 +0900</pubDate><guid>https://minuk.dev/wiki/cache/</guid><description>&lt;h1 id="관련-스크립트">관련 스크립트&lt;/h1>
&lt;h2 id="pagecache-해제">pagecache 해제&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="echo%201%20%3e%20/proc/sys/vm/drop_caches">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">1&lt;/span> &amp;gt; /proc/sys/vm/drop_caches&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="dentries-inodes-해제">dentries, inodes 해제&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="echo%202%20%3e%20/proc/sys/vm/drop_caches">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">2&lt;/span> &amp;gt; /proc/sys/vm/drop_caches&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="pagecache-dentries-inodes-모두-해제">pagecache, dentries, inodes 모두 해제&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="echo%203%20%3e%20/proc/sys/vm/drop_caches">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#ae81ff">3&lt;/span> &amp;gt; /proc/sys/vm/drop_caches&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="플러싱하기">플러싱하기&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="sync">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sync&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="출처">출처&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%BA%90%EC%8B%9C_%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%B9%84%EC%9A%B0%EA%B8%B0">https://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%BA%90%EC%8B%9C_%EB%A9%94%EB%AA%A8%EB%A6%AC_%EB%B9%84%EC%9A%B0%EA%B8%B0&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>Pinciple of Locality 에 따라 최근 접근한 데이터 또는 인접한 데이터를 빠르게 접근할수 있는 곳에 두고 접근하는 것.&lt;/li>
&lt;/ul>
&lt;h2 id="cache-의-종류">Cache 의 종류&lt;/h2>
&lt;ul>
&lt;li>출처 : &lt;a href="https://parksb.github.io/article/29.html">https://parksb.github.io/article/29.html&lt;/a>&lt;/li>
&lt;li>L1 Cache : 프로세서와 가장 가까운 캐시. 속도를 위해 &lt;code>I$&lt;/code> 와 &lt;code>D$&lt;/code> 로 나뉜다.
&lt;ul>
&lt;li>Instruction Cache (I$) : 메모리의 TEXT 영역 데이터를 다루는 캐시&lt;/li>
&lt;li>Data Cache (D$) : TEXT 영역을 제외한 모든 데이터를 다루는 캐시.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>L2 Cache : 용량이 큰 캐시, 크기를 위해 L1캐시처럼 나누지 않는다.&lt;/li>
&lt;li>L3 Cache : 멀티 코어 시스템에서 여러 코어가 공유하는 캐시&lt;/li>
&lt;/ul>
&lt;h3 id="궁금해서-찾아본-내-컴퓨터의-캐시-사이즈">궁금해서 찾아본 내 컴퓨터의 캐시 사이즈&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#%20lshw%20-C%20memory">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># lshw -C memory&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>linux에서 명령어로 확인해볼수 있다.&lt;/li>
&lt;li>아래 내용을 보면 확인 할수 있듯이 L1 은 32KiB, L2 는 256KiB, L3 는 3MiB 이다.&lt;/li>
&lt;li>지금 작업하는 곳이 대학교 입학할때 사용한 i3 4세대? 5세대? 쯤이니까 감안해서 보면 될듯.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code> *-firmware
 description: BIOS
 vendor: American Megatrends Inc.
 physical id: 0
 version: P02RDQ.029.160707.JJ
 date: 07/07/2016
 size: 64KiB
 capacity: 6080KiB
 capabilities: pci upgrade shadowing cdboot bootselect socketedrom edd int13floppy1200 int13floppy720 int13floppy2880 int5printscreen int14serial int17printer acpi usb biosbootspecification uefi
 *-cache:0
 description: L1 cache
 physical id: 38
 slot: L1 Cache
 size: 32KiB
 capacity: 32KiB
 capabilities: synchronous internal write-back data
 configuration: level=1
 *-cache:1
 description: L1 cache
 physical id: 39
 slot: L1 Cache
 size: 32KiB
 capacity: 32KiB
 capabilities: synchronous internal write-back instruction
 configuration: level=1
 *-cache:2
 description: L2 cache
 physical id: 3a
 slot: L2 Cache
 size: 256KiB
 capacity: 256KiB
 capabilities: synchronous internal write-back unified
 configuration: level=2
 *-cache:3
 description: L3 cache
 physical id: 3b
 slot: L3 Cache
 size: 3MiB
 capacity: 3MiB
 capabilities: synchronous internal write-back unified
 configuration: level=3
 *-memory
 description: System Memory
 physical id: 3e
 slot: System board or motherboard
 size: 4GiB
 *-bank:0
 description: SODIMM DDR3 Synchronous 1600 MHz (0.6 ns)
 product: 8KTF51264HZ-1G9P1
 vendor: Micron
 physical id: 0
 serial: 12CACA3A
 slot: ChannelA-DIMM0
 size: 4GiB
 width: 64 bits
 clock: 1600MHz (0.6ns)
 *-bank:1
 description: DIMM [empty]
 physical id: 1
 slot: ChannelB-DIMM0&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="cache-metrics">Cache Metrics&lt;/h2>
&lt;ul>
&lt;li>캐스의 성능을 측정할 때는 Hit latency 와 Miss Latency 가 중요 요인으로 꼽힌다.&lt;/li>
&lt;li>$$\text{Miss rate} = \frac{\text{Cache misses}}{\text{Cache accesses}}$$&lt;/li>
&lt;/ul>
&lt;h2 id="cache-organization">Cache Organization&lt;/h2>
&lt;h3 id="indexing">Indexing&lt;/h3>
&lt;ul>
&lt;li>주소값 전체를 키로 사용하지 않고, 그 일부만을 사용한다.&lt;/li>
&lt;/ul>
&lt;h3 id="tag-matching">Tag Matching&lt;/h3>
&lt;ul>
&lt;li>주소값의 일부를 Tag 로 사용하여 인덱스의 충돌을 줄인다.&lt;/li>
&lt;/ul>
&lt;h3 id="associative-cache">Associative Cache&lt;/h3>
&lt;ul>
&lt;li>서로 다른 두 주소가 같은 인덱스를 가지고 계속해서 둘다 접근된다면 캐시미스가 지속적으로 발생한다. 이를 Ping-pong problem이라한다. (이건 처음 듣는다. 위의 참조 에서 처음 들음)&lt;/li>
&lt;li>이를 태그 배열과 데이터 배열을 여러 개 만드는 식으로 개선한다.
&lt;ul>
&lt;li>Direct mapped : 인덱스당 가르키는 공간이 단 1개 (위에서 설명한 방식)&lt;/li>
&lt;li>Full associative : 인덱스가 어떤 공간이던지 가리킬수 있음 (충돌이 적지만 모든 블록을 탐색해야함. 속도가 느림)&lt;/li>
&lt;li>Set associative : 인덱스가 가리키는 공간이 두개 이상인 경우 n-way set associative 캐시라고 부른다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="handling-cache-writes">Handling Cache Writes&lt;/h3>
&lt;ul>
&lt;li>Cache에서 업데이트된 데이터를 언제 메모리에 쓸것인가&lt;/li>
&lt;li>Write-through : 캐시에 데이터가 바뀔때마다 바로바로 업데이트함.&lt;/li>
&lt;li>Write-back : dirty bit를 추가하여 데이터가 변경되었다면 1로 체크해준뒤 블록이 교체될때 dirty비트를 확인하여 메모리의 데이터를 변경하는 구조.&lt;/li>
&lt;/ul></description></item><item><title>UART (Universal asynchronous receiver/transmitter)</title><link>https://minuk.dev/wiki/uart/</link><pubDate>Mon, 06 Jul 2020 20:15:52 +0900</pubDate><guid>https://minuk.dev/wiki/uart/</guid><description>&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>범용 비동기화 송수신기 : 병렬 데이터의 형태를 직렬 방식으로 전환하여 데이터를 전송하는 컴퓨터 하드웨어의 일종&lt;/li>
&lt;/ul>
&lt;h2 id="데이터-송수신-형태">데이터 송수신 형태&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>비트수&lt;/th>
 &lt;th>1&lt;/th>
 &lt;th>2&lt;/th>
 &lt;th>3&lt;/th>
 &lt;th>4&lt;/th>
 &lt;th>5&lt;/th>
 &lt;th>6&lt;/th>
 &lt;th>7&lt;/th>
 &lt;th>8&lt;/th>
 &lt;th>9&lt;/th>
 &lt;th>10&lt;/th>
 &lt;th>11&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>시작 비트 (start bit)&lt;/td>
 &lt;td>5-8 데이터 비트&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>&lt;/td>
 &lt;td>패리티비트(parity bit)&lt;/td>
 &lt;td>종료 비트 (Stop bit(s))&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>Start&lt;/td>
 &lt;td>Data 0&lt;/td>
 &lt;td>Data 1&lt;/td>
 &lt;td>Data 3&lt;/td>
 &lt;td>Data 3&lt;/td>
 &lt;td>Data 4&lt;/td>
 &lt;td>Data 5&lt;/td>
 &lt;td>Data 6&lt;/td>
 &lt;td>Data 7&lt;/td>
 &lt;td>Parity&lt;/td>
 &lt;td>Stop&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>VHDCI (Very-high-dencity cable interconnect)</title><link>https://minuk.dev/wiki/vhdci/</link><pubDate>Mon, 06 Jul 2020 20:13:27 +0900</pubDate><guid>https://minuk.dev/wiki/vhdci/</guid><description>&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>68개의 pin connect로 구성되어 있으며 이는 SCSI-3에서 SPI-2 문서에 소개된다.&lt;/li>
&lt;/ul></description></item><item><title>boxplot</title><link>https://minuk.dev/wiki/boxplot/</link><pubDate>Mon, 06 Jul 2020 20:06:22 +0900</pubDate><guid>https://minuk.dev/wiki/boxplot/</guid><description>&lt;h2 id="잘-나와있는-곳">잘 나와있는 곳&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://boxnwhis.kr/2019/02/19/boxplot.html">https://boxnwhis.kr/2019/02/19/boxplot.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="같이-보면-좋은-자료">같이 보면 좋은 자료&lt;/h2>
&lt;ul>
&lt;li>[[quartile]]&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>사분위수(quartile) 을 시각화하여 쉽게 보는 그래프의 일종&lt;/li>
&lt;li>얼마나 데이터가 넓게 분포되어있는가를 확인한다.&lt;/li>
&lt;/ul></description></item><item><title>quartile (사분위수)</title><link>https://minuk.dev/wiki/quartile/</link><pubDate>Mon, 06 Jul 2020 20:03:22 +0900</pubDate><guid>https://minuk.dev/wiki/quartile/</guid><description>&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>quartile : 사분위수, 사분위 값으로 불리며, 통계에서 데이터의 분포를 확인할때 자주 쓰이며, 주로 [[boxplot]] 의 형태로 표현된다.&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Quart&lt;/th>
 &lt;th>의미&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>0&lt;/td>
 &lt;td>최소값&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>제 1 사분위수 (25%)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>제 2 사분위수 (50% 중간값)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3&lt;/td>
 &lt;td>제 3 사분위수 (75%)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>4&lt;/td>
 &lt;td>최대값&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>statistics</title><link>https://minuk.dev/wiki/statistics/</link><pubDate>Mon, 06 Jul 2020 20:02:25 +0900</pubDate><guid>https://minuk.dev/wiki/statistics/</guid><description>&lt;h2 id="기본-용어">기본 용어&lt;/h2>
&lt;ul>
&lt;li>[[quartile]]&lt;/li>
&lt;/ul>
&lt;h2 id="용어-정리">용어 정리&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>참고 : &lt;a href="https://blog.naver.com/mykepzzang">https://blog.naver.com/mykepzzang&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Probability&lt;/code> is the branch of mathematics concerning numerical descriptions of how likely an event is to occur or how likely it is that a proposition is true.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Sample Space&lt;/code> : the set of all possible outcomes or results of an experimentor random trial. Usually it is denoted using set notation and the possible ordered outcomes are listed as elements in the set.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Event&lt;/code> : the subset of &lt;code>sample space&lt;/code>&lt;/p></description></item><item><title>FSM (Finite State machine)</title><link>https://minuk.dev/wiki/fsm/</link><pubDate>Mon, 06 Jul 2020 19:56:41 +0900</pubDate><guid>https://minuk.dev/wiki/fsm/</guid><description>&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>유한 상태 기계&lt;/li>
&lt;li>흔히 (내 기준으로) 논리회로 설계와 오토마타 수업때 들을수 있으며 Mealy machine 과 Moore machine 의 형태로 배우게 된다.&lt;/li>
&lt;/ul>
&lt;h2 id="mealy-machine">Mealy Machine&lt;/h2>
&lt;ul>
&lt;li>Input 이 Output을 결정할때 관여한다.&lt;/li>
&lt;li>State Diagram 을 만들 때 Input과 Output 을 전부 작성한다.&lt;/li>
&lt;/ul>
&lt;h2 id="moore-machine">Moore Machine&lt;/h2>
&lt;ul>
&lt;li>현재 상태만이 Output을 결정하고 Input은 다음 상태를 결정한다.&lt;/li>
&lt;/ul></description></item><item><title>open-nvm</title><link>https://minuk.dev/wiki/open-nvm/</link><pubDate>Mon, 06 Jul 2020 19:38:43 +0900</pubDate><guid>https://minuk.dev/wiki/open-nvm/</guid><description>&lt;h2 id="기본-용어-정리">기본 용어 정리&lt;/h2>
&lt;ul>
&lt;li>[[FSM]]&lt;/li>
&lt;li>[[VHDCI]]&lt;/li>
&lt;li>[[UART]]&lt;/li>
&lt;/ul>
&lt;h2 id="공식-홈페이지">공식 홈페이지&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://open-fpga-nvm.github.io/home/">http://open-fpga-nvm.github.io/home/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="나름-정리">나름 정리&lt;/h2>
&lt;ul>
&lt;li>최근 몇년간, 여러 nvm 기술들이 현대 메모리 시스템들의 결정적인 문제(집적, 지연시간, 전력) 의 문제를 해결할 가능성이 있다는 것을 보여주었다. 이런 최첨단 NVMs 은 높은 저장 용량과 신뢰할만한 성능을 적은 전력 소모에서 보여주는 동안, 광범위한 연구가 이러한 NVMs 을 기존에 존재하던 다른 메모리 조직 층에 맞출려고 하고 있다.&lt;/li>
&lt;li>기존 연구들이 이론적인 NVM의 가능성을 을 탐구하고 NVM 시스템을 위한 메모리 관리 기술에서 전례없는 관점을 제공했음에도 불구하고 누구나 접근할수 있는 데이터들은 간단한 분석 모델 또는 검증되지 않은 현실 장비들로부터 생성된다. 현실 장비의 정확한 특성 셈픙른 NVM의 무궁무진한 진실된 가능성을 이해하는 것과, 메모리 계층에서 최적화된 위치를 식별하는데 중요하다.&lt;/li>
&lt;li>서로 다른 제조 업체에서 NVM 제품은 나올수 있지만, 널리 알려진 위치에서 적절한 NVM 컨트롤러와 평가 플랫폼의 부재는 이러한 떠오르는 NVM 기술에서 결정적인 데이터를 추출하는데에 있어서 주요 과제이다.&lt;/li>
&lt;li>생략&lt;/li>
&lt;/ul>
&lt;h2 id="소스코드">소스코드&lt;/h2>
&lt;ul>
&lt;li>ㅠ 어렵다. 잘 모르겠다.근데, 내가 생각하는 NVMe Controller 는 아니고, NVM 자체를 Hardware 마다 측정하는 것같다.&lt;/li>
&lt;/ul></description></item><item><title>MRAM (Magnetic Random Access Memory)</title><link>https://minuk.dev/wiki/mram/</link><pubDate>Mon, 06 Jul 2020 19:19:38 +0900</pubDate><guid>https://minuk.dev/wiki/mram/</guid><description>&lt;h2 id="출처">출처&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.samsungsemiconstory.com/1992">https://www.samsungsemiconstory.com/1992&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Magnetoresistive_random-access_memory">https://en.wikipedia.org/wiki/Magnetoresistive_random-access_memory&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="간단-요약">간단 요약&lt;/h2>
&lt;ul>
&lt;li>자성체 소자를 이용한 비휘발성 메모리, Flash Memory 대비 쓰기 속도가 약 1000배 빠르고 전력 소모가 적은 특징이 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="위키피디아-번역">위키피디아 번역&lt;/h2>
&lt;ul>
&lt;li>일반적인 RAM chip 기술과는 다르게, MRAM은 데이터를 전기 충전이나 흐름으로 저장하지 않고 자기 저장 요소를 사용한다. 이 자기 저장 요소는 2가지 강자성 판들로 구성되며, 각자 자기화 되어 있으며 얇은 절연판에 의해 분리되어 있다. 한 판은 영구적으로 구성되어 있으며, 다른 한판은 메모리를 저장하기 위한 외부 장에 맞추어 바뀌게 된다. 이런 설정은 magnetic tunnel junction 으로 널리 알려져 있으며 MRAM bit 의 가장 간단한 구조이다. &amp;hellip; 생략&lt;/li>
&lt;/ul>
&lt;h3 id="다른-시스템들과의-비교">다른 시스템들과의 비교&lt;/h3>
&lt;ul>
&lt;li>Density(밀도)&lt;/li>
&lt;li>Power consumption&lt;/li>
&lt;li>Data retention&lt;/li>
&lt;li>Speed&lt;/li>
&lt;li>Endurance&lt;/li>
&lt;li>Overall&lt;/li>
&lt;/ul></description></item><item><title>vfs - file</title><link>https://minuk.dev/wiki/file/</link><pubDate>Fri, 03 Jul 2020 20:49:21 +0900</pubDate><guid>https://minuk.dev/wiki/file/</guid><description>&lt;h2 id="heading">&lt;/h2>
&lt;h2 id="코드">코드&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20file%20%7b%0a%09union%20%7b%0a%09%09struct%20llist_node%09fu_llist;%0a%09%09struct%20rcu_head%20%09fu_rcuhead;%0a%09%7d%20f_u;%0a%09struct%20path%09%09f_path;%0a%09struct%20inode%09%09*f_inode;%09/*%20cached%20value%20*/%0a%09const%20struct%20file_operations%09*f_op;%0a%0a%09/*%0a%09%20*%20Protects%20f_ep_links,%20f_flags.%0a%09%20*%20Must%20not%20be%20taken%20from%20IRQ%20context.%0a%09%20*/%0a%09spinlock_t%09%09f_lock;%0a%09enum%20rw_hint%09%09f_write_hint;%0a%09atomic_long_t%09%09f_count;%0a%09unsigned%20int%20%09%09f_flags;%0a%09fmode_t%09%09%09f_mode;%0a%09struct%20mutex%09%09f_pos_lock;%0a%09loff_t%09%09%09f_pos;%0a%09struct%20fown_struct%09f_owner;%0a%09const%20struct%20cred%09*f_cred;%0a%09struct%20file_ra_state%09f_ra;%0a%0a%09u64%09%09%09f_version;%0a#ifdef%20CONFIG_SECURITY%0a%09void%09%09%09*f_security;%0a#endif%0a%09/*%20needed%20for%20tty%20driver,%20and%20maybe%20others%20*/%0a%09void%09%09%09*private_data;%0a%0a#ifdef%20CONFIG_EPOLL%0a%09/*%20Used%20by%20fs/eventpoll.c%20to%20link%20all%20the%20hooks%20to%20this%20file%20*/%0a%09struct%20list_head%09f_ep_links;%0a%09struct%20list_head%09f_tfile_llink;%0a#endif%20/*%20#ifdef%20CONFIG_EPOLL%20*/%0a%09struct%20address_space%09*f_mapping;%0a%09errseq_t%09%09f_wb_err;%0a%09errseq_t%09%09f_sb_err;%20/*%20for%20syncfs%20*/%0a%7d%20__randomize_layout%0a%20%20__attribute__%28%28aligned%284%29%29%29;%09/*%20lest%20something%20weird%20decides%20that%202%20is%20OK%20*/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> file {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">union&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">struct&lt;/span> llist_node	fu_llist;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">struct&lt;/span> rcu_head 	fu_rcuhead;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	} f_u;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> path		f_path;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> inode		&lt;span style="color:#f92672">*&lt;/span>f_inode;	&lt;span style="color:#75715e">/* cached value */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> file_operations	&lt;span style="color:#f92672">*&lt;/span>f_op;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 * Protects f_ep_links, f_flags.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 * Must not be taken from IRQ context.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">	 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">spinlock_t&lt;/span>		f_lock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">enum&lt;/span> rw_hint		f_write_hint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">atomic_long_t&lt;/span>		f_count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> 		f_flags;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">fmode_t&lt;/span>			f_mode;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> mutex		f_pos_lock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">loff_t&lt;/span>			f_pos;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> fown_struct	f_owner;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> cred	&lt;span style="color:#f92672">*&lt;/span>f_cred;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> file_ra_state	f_ra;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	u64			f_version;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef CONFIG_SECURITY
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">void&lt;/span>			&lt;span style="color:#f92672">*&lt;/span>f_security;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">/* needed for tty driver, and maybe others */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span>			&lt;span style="color:#f92672">*&lt;/span>private_data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef CONFIG_EPOLL
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#75715e">/* Used by fs/eventpoll.c to link all the hooks to this file */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> list_head	f_ep_links;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> list_head	f_tfile_llink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">/* #ifdef CONFIG_EPOLL */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	&lt;span style="color:#66d9ef">struct&lt;/span> address_space	&lt;span style="color:#f92672">*&lt;/span>f_mapping;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">errseq_t&lt;/span>		f_wb_err;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">errseq_t&lt;/span>		f_sb_err; &lt;span style="color:#75715e">/* for syncfs */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} __randomize_layout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">__attribute__&lt;/span>((&lt;span style="color:#a6e22e">aligned&lt;/span>(&lt;span style="color:#ae81ff">4&lt;/span>)));	&lt;span style="color:#75715e">/* lest something weird decides that 2 is OK */&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>kiocb</title><link>https://minuk.dev/wiki/kiocb/</link><pubDate>Fri, 03 Jul 2020 20:30:47 +0900</pubDate><guid>https://minuk.dev/wiki/kiocb/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>동기/비동기 IO 함수에게 완료할때 실행할 콜백함수를 전달하기 위한 구조체?&lt;/li>
&lt;/ul>
&lt;h2 id="매개변수-설명">매개변수 설명&lt;/h2>
&lt;ul>
&lt;li>&lt;code>ki_filp&lt;/code> : 해당 파일&lt;/li>
&lt;li>&lt;code>ki_complete&lt;/code> : 상태가 완료가 될때 실행되는 콜백함수&lt;/li>
&lt;li>나머진 아직 모르겠네 알게되면 추가로 정리함
&lt;ul>
&lt;li>&lt;code>private&lt;/code>&lt;/li>
&lt;li>&lt;code>ki_flags&lt;/code>&lt;/li>
&lt;li>&lt;code>ki_hint&lt;/code>&lt;/li>
&lt;li>&lt;code>ki_ioprio&lt;/code>&lt;/li>
&lt;li>&lt;code>ki_cookie&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="코드">코드&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20kiocb%20%7b%0a%09struct%20file%09%09*ki_filp;%0a%0a%09/*%20The%20%27ki_filp%27%20pointer%20is%20shared%20in%20a%20union%20for%20aio%20*/%0a%09randomized_struct_fields_start%0a%0a%09loff_t%09%09%09ki_pos;%0a%09void%20%28*ki_complete%29%28struct%20kiocb%20*iocb,%20long%20ret,%20long%20ret2%29;%0a%09void%09%09%09*private;%0a%09int%09%09%09ki_flags;%0a%09u16%09%09%09ki_hint;%0a%09u16%09%09%09ki_ioprio;%20/*%20See%20linux/ioprio.h%20*/%0a%09unsigned%20int%09%09ki_cookie;%20/*%20for%20-%3eiopoll%20*/%0a%0a%09randomized_struct_fields_end%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> kiocb {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">struct&lt;/span> file		&lt;span style="color:#f92672">*&lt;/span>ki_filp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/* The &amp;#39;ki_filp&amp;#39; pointer is shared in a union for aio */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	randomized_struct_fields_start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">loff_t&lt;/span>			ki_pos;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>ki_complete)(&lt;span style="color:#66d9ef">struct&lt;/span> kiocb &lt;span style="color:#f92672">*&lt;/span>iocb, &lt;span style="color:#66d9ef">long&lt;/span> ret, &lt;span style="color:#66d9ef">long&lt;/span> ret2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">void&lt;/span>			&lt;span style="color:#f92672">*&lt;/span>private;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">int&lt;/span>			ki_flags;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	u16			ki_hint;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	u16			ki_ioprio; &lt;span style="color:#75715e">/* See linux/ioprio.h */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>		ki_cookie; &lt;span style="color:#75715e">/* for -&amp;gt;iopoll */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	randomized_struct_fields_end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>VFS-Virtual File System</title><link>https://minuk.dev/wiki/vfs/</link><pubDate>Fri, 03 Jul 2020 20:30:09 +0900</pubDate><guid>https://minuk.dev/wiki/vfs/</guid><description>&lt;h2 id="용어">용어&lt;/h2>
&lt;ul>
&lt;li>[[file]]&lt;/li>
&lt;li>[[kiocb]]&lt;/li>
&lt;/ul></description></item><item><title>linux</title><link>https://minuk.dev/wiki/linux/</link><pubDate>Fri, 03 Jul 2020 20:29:46 +0900</pubDate><guid>https://minuk.dev/wiki/linux/</guid><description>&lt;h2 id="공부">공부&lt;/h2>
&lt;ul>
&lt;li>[[VFS]]&lt;/li>
&lt;li>[[input-method]]&lt;/li>
&lt;li>[[linux-study]]&lt;/li>
&lt;li>[[blk-mq]]&lt;/li>
&lt;/ul>
&lt;h2 id="참고-사이트">참고 사이트&lt;/h2>
&lt;h3 id="참고사이트-모음">참고사이트 모음&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://jake.dothome.co.kr/ref/">http://jake.dothome.co.kr/ref/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="자주-볼곳">자주 볼곳&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://jake.dothome.co.kr/">http://jake.dothome.co.kr/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://harryp.tistory.com/category/Computer/Linux?page=2">https://harryp.tistory.com/category/Computer/Linux?page=2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>F2FS- A New File System for Flash Storage</title><link>https://minuk.dev/wiki/f2fs-paper/</link><pubDate>Thu, 02 Jul 2020 22:31:19 +0900</pubDate><guid>https://minuk.dev/wiki/f2fs-paper/</guid><description>&lt;ul>
&lt;li>Changman Lee, Dongho Sim, Joo-Young Hwang, and Sangyeun Cho, Samsung Electronics Co., Ltd.&lt;/li>
&lt;li>USENIX Conference on File and Stoarage Technologies (FAST 15)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="1-introduction">1. Introduction&lt;/h1>
&lt;h2 id="a-flash-memory의-한계점">a. Flash Memory의 한계점&lt;/h2>
&lt;ul>
&lt;li>쓰기 작업 전 지우기 (erase-before-write requirement)&lt;/li>
&lt;li>순차적으로 지워진 Blocks에 쓰기 (need to write on erased blocks sequentially)&lt;/li>
&lt;li>제한된 쓰고 지우기 cycles (limited write cycles per erase block)&lt;/li>
&lt;/ul>
&lt;h2 id="b-flash-memory-사용의-증가">b. Flash Memory 사용의 증가&lt;/h2>
&lt;ul>
&lt;li>이때까지는 HDD를 계속해서 저장 매체로 썻으나 점점 더 많은 저장 매체가 필요하고 빠른걸 원하게 되었다.&lt;/li>
&lt;li>저장 매체의 필요성 증가에 의해 다수의 Flash chips를 controller에 연결해서 사용하는 해결책이 일반적이 되었다. (Flash Chip의 가격 하락으로)&lt;/li>
&lt;/ul>
&lt;h2 id="c-flash-memory에-대한-이해-부족으로-인한-단점">c. Flash Memory에 대한 이해 부족으로 인한 단점&lt;/h2>
&lt;ul>
&lt;li>위의 a의 문제점에 의해 HDD처럼 계속해서 I/O를 하면 Flash Memory의 특징을 잘 못살리게 된다.&lt;/li>
&lt;li>오히려 I/O latency 가 증가하고 수명을 빠르게 깍게 된다.&lt;/li>
&lt;/ul>
&lt;h2 id="d-기존의-연구">d. 기존의 연구&lt;/h2>
&lt;ul>
&lt;li>위와 같은 점들을 고려하여 선행연구에서 LFS(Log-Structured File System)의 접근 방법과 Copy-On-Write 전략으로 위의 한계점을 극복할수 있다.&lt;/li>
&lt;li>예시로 BTRFS(B+-Tree File System)과 NILFS2(이건 먼지 모르겠네요 ㅠ)가 NAND Flash SSD에서 잘 동작한다. (cf. NAND 기반과 NOR 기반으로 크게 나뉜다.)&lt;/li>
&lt;li>하지만 기존 선행 연구는 Flash Memory 의 특징을 전부 고려하지 못했고 성능과 수명 측면에서 좋지 않았다.&lt;/li>
&lt;li>따라서 새로운 F2FS를 제시한다.&lt;/li>
&lt;/ul>
&lt;h2 id="e-f2fs의-특징">e. F2FS의 특징&lt;/h2>
&lt;ul>
&lt;li>Flash-friendly on-disk layout : Segment, section and zone
&lt;ul>
&lt;li>Segment, section 그리고 zone이라는 개념을 통해 Flash에 친화적인 layout을 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cost-effective index structure : NAT (Node address table)
&lt;ul>
&lt;li>비용 측면(시간과 공간 둘다)에서 효율적인 index 구조를 필요로 한다.&lt;/li>
&lt;li>SSD나 Flash Memory는 LBA(Logical Base Address)가 존재하지 않지만, 이를 호환성 측면에서 제공해야하고 (FTL-Flash Translation Layer) 이를 효과적으로 제시한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Multi-head Logging
&lt;ul>
&lt;li>기존 연구의 LFS에서 착안하여 Logging Strucutre를 사용하지만 Multi-head를 사용하여 병렬처리를 하고, Hot/Cold 를 분류한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Adaptive Logging
&lt;ul>
&lt;li>dirty segment를 Cleaning 하지 않고 새로운 데이터를 기록한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>fsync&lt;/code> acceleration with roll-forward recovery
&lt;ul>
&lt;li>예시 상황 : sqlite3&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="2-design-and-implementation-of-f2fs">2. Design and Implementation of F2FS&lt;/h1>
&lt;p>&lt;img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/001cab83-197f-42b8-892b-0541b17acb77/layout.jpg" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/001cab83-197f-42b8-892b-0541b17acb77/layout.jpg">&lt;/p></description></item><item><title>english/proverb</title><link>https://minuk.dev/wiki/english/proverb/</link><pubDate>Sun, 28 Jun 2020 23:29:00 +0900</pubDate><guid>https://minuk.dev/wiki/english/proverb/</guid><description>&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://lemongrad.com/proverbs-with-meanings-and-examples/">https://lemongrad.com/proverbs-with-meanings-and-examples/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="proverb">Proverb&lt;/h2>
&lt;ul>
&lt;li>A bad workman always blames his tools. : 장인은 도구탓 안한다&lt;/li>
&lt;li>A bird in hand is worth two in the bush. : 손안에 든 이익이 더 좋다&amp;hellip;?&lt;/li>
&lt;li>Absense makes the heart grow fonder. : 멀수록 사이가 좋아진다.&lt;/li>
&lt;li>A cat has nine lives. : 고양이 목숨 - 위험천만하게 살아가는 사람에게 하는 말?&lt;/li>
&lt;li>A chain is only as strong as its weakest link. : 체인의 강도는 가장 약한 부분이 결정한다.&lt;/li>
&lt;li>Actions speak louder than words. : 말보다 행동&lt;/li>
&lt;li>A drowning man will clutch at a straw. : 지푸라기도 잡는 심정&lt;/li>
&lt;li>Adversity and loss make a man wise. : 경험이 성숙하게 만든다? 한국어 매칭이 있나?&lt;/li>
&lt;li>A fool and his money are soon parted. : 멍청이의 돈은 금방 사라진다? 현명할수록 돈을 모은다?&lt;/li>
&lt;li>A journey of thousand miles begins with a single step.&lt;/li>
&lt;li>A leopard can&amp;rsquo;t / doesn&amp;rsquo;t change its spots.&lt;/li>
&lt;li>All good things come to an end.&lt;/li>
&lt;li>All&amp;rsquo;s well that ends well.&lt;/li>
&lt;li>All that glitters is not gold.&lt;/li>
&lt;li>All&amp;rsquo;s fair in love and war.&lt;/li>
&lt;li>Always put your best foot forward.&lt;/li>
&lt;li>Among the blind the one-eyed man is king.&lt;/li>
&lt;li>An apple a day keeps the doctor away.&lt;/li>
&lt;li>An empty vessel makes much noise.&lt;/li>
&lt;li>An idle brain is the devil&amp;rsquo;s workshop.&lt;/li>
&lt;/ul></description></item><item><title>english</title><link>https://minuk.dev/wiki/english/</link><pubDate>Sun, 28 Jun 2020 23:28:18 +0900</pubDate><guid>https://minuk.dev/wiki/english/</guid><description>&lt;h2 id="참조-사이트">참조 사이트&lt;/h2>
&lt;ul>
&lt;li>사전 : &lt;a href="http://www.dictionary.com">http://www.dictionary.com&lt;/a>&lt;/li>
&lt;li>대체어 찾기 : &lt;a href="http://visualthesaurus.com">http://visualthesaurus.com&lt;/a>&lt;/li>
&lt;li>영어 문법 검사 : &lt;a href="http://grammarly.com">http://grammarly.com&lt;/a>&lt;/li>
&lt;li>영어 글 난이도 검사 : &lt;a href="http://hemingwayapp.com">http://hemingwayapp.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="proverb">Proverb&lt;/h2>
&lt;ul>
&lt;li>[[english/proverb]]&lt;/li>
&lt;/ul>
&lt;h2 id="링글">링글&lt;/h2>
&lt;ul>
&lt;li>[[링글/Metaverse]]&lt;/li>
&lt;li>[[링글/Autonomous]]&lt;/li>
&lt;li>[[ringle/Microsoft-x-Activision-Blizzard]]&lt;/li>
&lt;li>[[ringle/The-Metaverse]]&lt;/li>
&lt;li>[[ringle/Supply-and-Demand]]&lt;/li>
&lt;li>[[ringle/Netflix&amp;rsquo;s-historic-loss]]&lt;/li>
&lt;/ul></description></item><item><title>tool</title><link>https://minuk.dev/wiki/tool/</link><pubDate>Sat, 27 Jun 2020 15:17:31 +0900</pubDate><guid>https://minuk.dev/wiki/tool/</guid><description>&lt;h2 id="tool-모음">tool 모음&lt;/h2>
&lt;ul>
&lt;li>[[vim]]&lt;/li>
&lt;li>[[Nexus]]&lt;/li>
&lt;li>[[docker]]&lt;/li>
&lt;li>[[hugo]]&lt;/li>
&lt;li>[[linux command]]&lt;/li>
&lt;li>[[git]]&lt;/li>
&lt;li>[[ssh]]&lt;/li>
&lt;li>[[jupyter]]&lt;/li>
&lt;li>&lt;a href="https://gate2home.com/Korean-Keyboard">korean keyboard&lt;/a>&lt;/li>
&lt;li>한국어가 입력이 안되는 환경에서 복사 붙여넣기로 입력할수 있게 해주는 사이트&lt;/li>
&lt;li>[[tikz]]&lt;/li>
&lt;li>[[zsh]]&lt;/li>
&lt;li>[[nginx]]&lt;/li>
&lt;li>[[curl]]&lt;/li>
&lt;li>[[autoconf]]&lt;/li>
&lt;li>[[spring-boot-cli]]&lt;/li>
&lt;/ul>
&lt;h2 id="script">script&lt;/h2>
&lt;ul>
&lt;li>[[피시실]]&lt;/li>
&lt;li>[[사지방]]&lt;/li>
&lt;/ul>
&lt;h2 id="설정">설정&lt;/h2>
&lt;ul>
&lt;li>[[tool configuration]]&lt;/li>
&lt;/ul></description></item><item><title>verilog (베릴로그)</title><link>https://minuk.dev/wiki/verilog/</link><pubDate>Thu, 25 Jun 2020 20:46:51 +0900</pubDate><guid>https://minuk.dev/wiki/verilog/</guid><description>&lt;h1 id="개요">개요&lt;/h1>
&lt;ul>
&lt;li>opennvm가 verilog가 짜져있어서 읽을수 있을 수준까지 공부하는게 목표&lt;/li>
&lt;/ul>
&lt;h2 id="출처">출처&lt;/h2>
&lt;ul>
&lt;li>기본 문법 : &lt;a href="https://blog.naver.com/PostView.nhn?blogId=kyj0833&amp;amp;logNo=221490972642&amp;amp;from=search&amp;amp;redirect=Log&amp;amp;widgetTypeCall=true&amp;amp;directAccess=false">https://blog.naver.com/PostView.nhn?blogId=kyj0833&amp;amp;logNo=221490972642&amp;amp;from=search&amp;amp;redirect=Log&amp;amp;widgetTypeCall=true&amp;amp;directAccess=false&lt;/a>&lt;/li>
&lt;li>리눅스에서 verilog 사용하기 : &lt;a href="https://www.sapphosound.com/archives/1894">https://www.sapphosound.com/archives/1894&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.asic-world.com/verilog/intro1.html#Design_Styles">http://www.asic-world.com/verilog/intro1.html#Design_Styles&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="기본-문법">기본 문법&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20module_name%28port_list%29;%0a%0aport,%20reg,%20wire,%20parameter%20declaration%0asubmodule%20instance%0aprimitive%20gate%0aalways,%20initial%0aassign,%0afunciton,%20task%20declaration%0afunction,%20task%20definition%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> module_name(port_list);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port, &lt;span style="color:#66d9ef">reg&lt;/span>, &lt;span style="color:#66d9ef">wire&lt;/span>, &lt;span style="color:#66d9ef">parameter&lt;/span> declaration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>submodule instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">primitive&lt;/span> gate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span>, &lt;span style="color:#66d9ef">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>funciton, &lt;span style="color:#66d9ef">task&lt;/span> declaration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span>, &lt;span style="color:#66d9ef">task&lt;/span> definition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="hello-world">Hello World&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20main;%0a%20%20initial%0a%20%20begin%0a%20%20%20%20$display%28%22Hello%20World%22%29;%0a%20%20%20%20$finish;%0a%20%20end%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> main;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="d-flip-flop-code">D flip-flop Code&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20d_ff%20%28d,%20clk,%20q,%20q_bar%29;%0ainput%20d,%20clk;%0aoutput%20q,%20q_bar;%0awire%20d,%20clk;%0areg%20q,%20q_bar;%0a%0aalways%20@%20%28posedge%20clk%29%0a%0abegin%0a%20%20q%20%3c=%20d;%0a%20%20q_bar%20%3c=%20!d;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> d_ff (d, clk, q, q_bar);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> d, clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> q, q_bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> d, clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> q, q_bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q_bar &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="data-type-english">Data Type (English)&lt;/h3>
&lt;ul>
&lt;li>Hardware does have two kinds of drivers.&lt;/li>
&lt;li>A driver is a data type which can drive a load. Basically, in a physical circuit, a driver would be anything that electrons can move through/into.
&lt;ul>
&lt;li>Driver that can store a value (example: flip-flop).&lt;/li>
&lt;li>Driver that can not store value, but connects two points (example: wire).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The first type of driver is called a reg in Verilog (short for &amp;ldquo;register&amp;rdquo;). The Second data type is called a wire (for&amp;hellip; well, &amp;ldquo;wire&amp;rdquo;). You can refer to tidbits section to understand it better.&lt;/li>
&lt;/ul>
&lt;h3 id="data-type-한국어">Data Type (한국어)&lt;/h3>
&lt;ul>
&lt;li>하드웨어는 2가지 종류의 드라이버가 있으며, 기본적으로 물리적인 회로이며, 드라이버는 전자가 들어오거나 나갈수 있는 무엇이든 될 수 있다.
&lt;ul>
&lt;li>드라이버는 값을 저장할 수 있다. (예를 들어 플립플롯) -&amp;gt; reg(register의 준말)&lt;/li>
&lt;li>드라이버는 값을 저장하지 못하는 대신, 두 지점을 연결 시킬수 있다. (예를 들어 wire) -&amp;gt; wire&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="opertators">Opertators&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Operator Type&lt;/th>
 &lt;th>Operator Symbol&lt;/th>
 &lt;th>Operation Performed&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Arithmetic&lt;/td>
 &lt;td>&lt;code>*&lt;/code>&lt;/td>
 &lt;td>Multiply&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>/&lt;/code>&lt;/td>
 &lt;td>Division&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>+&lt;/code>&lt;/td>
 &lt;td>Add&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>-&lt;/code>&lt;/td>
 &lt;td>Subtract&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>%&lt;/code>&lt;/td>
 &lt;td>Modulus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>+&lt;/code>&lt;/td>
 &lt;td>Unary plus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>-&lt;/code>&lt;/td>
 &lt;td>Unary minus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Logical&lt;/td>
 &lt;td>&lt;code>!&lt;/code>&lt;/td>
 &lt;td>Logical negation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/td>
 &lt;td>Logical and&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>`&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Greater than&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
 &lt;td>Less than&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
 &lt;td>Greater than or equal&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
 &lt;td>Less than or equal&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Equality&lt;/td>
 &lt;td>&lt;code>==&lt;/code>&lt;/td>
 &lt;td>Equality&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>!=&lt;/code>&lt;/td>
 &lt;td>inequality&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Reduction&lt;/td>
 &lt;td>&lt;code>~&lt;/code>&lt;/td>
 &lt;td>Bitwize negation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>~&amp;amp;&lt;/code>&lt;/td>
 &lt;td>nand&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>`&lt;/td>
 &lt;td>`&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>`~&lt;/td>
 &lt;td>`&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>^&lt;/code>&lt;/td>
 &lt;td>xor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>^~&lt;/code>&lt;/td>
 &lt;td>xnor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>~^&lt;/code>&lt;/td>
 &lt;td>xnor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Shift&lt;/td>
 &lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Right shift&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
 &lt;td>Left shift&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Concatenation&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>Concatenation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Conditional&lt;/td>
 &lt;td>&lt;code>?&lt;/code>&lt;/td>
 &lt;td>conditional&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="control-statements">Control Statements&lt;/h3>
&lt;h3 id="if-else">If-else&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//%20begin%20and%20end%20act%20like%20curly%20braces%20in%20C/C&amp;#43;&amp;#43;.%0aif%20%28enable%20==%201%27b1%29%20begin%0a%20%20data%20=%2010;%20%20%20%20%20%20%20%20%20//%20Decimal%20assigned%0a%20%20address%20=%2016%27hDEAD;%20//%20Hexadecimal%0a%20%20wr_enable%20=%201%27b1;%20//%20Binary%0aend%20else%20begin%0a%20%20data%20=%2032%27b0;%0a%20%20wr_enable%20=%201%27b0;%0a%20%20address%20=%20address%20&amp;#43;1;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// begin and end act like curly braces in C/C++.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (enable &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#75715e">// Decimal assigned
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> address &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&amp;#39;hDEAD&lt;/span>; &lt;span style="color:#75715e">// Hexadecimal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> wr_enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>; &lt;span style="color:#75715e">// Binary
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wr_enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> address &lt;span style="color:#f92672">=&lt;/span> address &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="case">Case&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span>(address)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;It is 11:40PM&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;I am feeling sleepy&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;Let me skip this tutorial&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;Need to complete&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endcase&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="while">while&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="while%20%28free_time%29%20begin%0a%20%20$display%20%28%22Continue%20with%20webpage%20development%22%29;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> (free_time) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;Continue with webpage development&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="counter-example">Counter example&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> counter (clk, rst, enable, count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk, rst, enabl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk &lt;span style="color:#66d9ef">or&lt;/span> &lt;span style="color:#66d9ef">posedge&lt;/span> rst)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (rst) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> COUNT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (enable) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">disable&lt;/span> COUNT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="for-loop">For loop&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="for%20%28i%20=%200;%20i%20%3c%2015;%20i%20=%20i%20&amp;#43;%201%29%20begin%0a%20%20$display%20%28%22Current%20value%20of%20i%20is%20%25d%22,%20i%29;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;Current value of i is %d&amp;#34;&lt;/span>, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="repeat">Repeat&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="repeat%20%2816%29%20begin%0a%20%20$display%20%28%22Current%20value%20of%20i%20is%20%25d%22,%20i%29;%0a%20%20i%20=%20i%20&amp;#43;%201;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">repeat&lt;/span> (&lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;Current value of i is %d&amp;#34;&lt;/span>, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="initial-blocks">Initial Blocks&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="initial%20begin%0a%20%20clk%20=%200;%0a%20%20reset%20=%200;%0a%20%20req_0%20=%200;%0a%20%20req_1%20=%200;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req_0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req_1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="always-blocks">Always Blocks&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="always%20@%20%28a%20or%20b%20or%20sel%29%0abegin%0a%20%20y%20=%200;%0a%20%20if%20%28sel%20==%200%29%20begin%0a%20%20%20%20y%20=%20a;%0a%20%20end%20else%20begin%0a%20%20%20%20y%20=%20b;%0a%20%20end%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (a &lt;span style="color:#66d9ef">or&lt;/span> b &lt;span style="color:#66d9ef">or&lt;/span> sel)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (sel &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>?? 이건 근데 mux랑 똑같은거 아닌가? mux 만들어 놓고, initial block 에서 wire 연결 해두면 안되는 건가?&lt;/li>
&lt;li>always block의 쓰임을 잘 모르겠네, 어떻게 되는 거지?&lt;/li>
&lt;li>=&amp;gt; 주변에 있는 다른 분께 물어보니 같은 동작을 하는건 맞고, 실제 기판으로 나오는게 똑같으면 어떻게 코딩하든 상관 없다고 하심.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="always%20begin%0a%20%20#5%20clk%20=%20~clk;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="assign-statement">Assign Statement&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> out &lt;span style="color:#f92672">=&lt;/span> (enable) &lt;span style="color:#f92672">?&lt;/span> data &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bz;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="assign%20out%20=%20data;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> out &lt;span style="color:#f92672">=&lt;/span> data;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="task-and-function">Task and Function&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> parity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> parity &lt;span style="color:#f92672">^&lt;/span> data[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endfunction&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>흠&amp;hellip; for을 도는건 delay 없이 도는 거니 위에 내용은 실제로 컴파일 되면 data의 모든 bit를 한번에 xor하는 결과가 나오는건가?&lt;/li>
&lt;li>그래서 한번 만들고 compile 해봤다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> parity (d, p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">output&lt;/span> &lt;span style="color:#66d9ef">reg&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> parity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">integer&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> parity &lt;span style="color:#f92672">^&lt;/span> data[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">endfunction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">always&lt;/span> @ (d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> parity(d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>아래는 컴파일 된걸 연 결과다&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#!%20/usr/bin/vvp%0a:ivl_version%20%2210.1%20%28stable%29%22;%0a:ivl_delay_selection%20%22TYPICAL%22;%0a:vpi_time_precision%20&amp;#43;%200;%0a:vpi_module%20%22system%22;%0a:vpi_module%20%22vhdl_sys%22;%0a:vpi_module%20%22v2005_math%22;%0a:vpi_module%20%22va_math%22;%0aS_0x56211aafb800%20.scope%20module,%20%22parity%22%20%22parity%22%202%201;%0a%20.timescale%200%200;%0a%20%20%20%20.port_info%200%20/INPUT%2032%20%22d%22%0a%20%20%20%20.port_info%201%20/OUTPUT%201%20%22p%22%0ao0x7f15420240a8%20.functor%20BUFZ%2032,%20C4%3czzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz%3e;%20HiZ%20drive%0av0x56211ab1be30_0%20.net%20%22d%22,%2031%200,%20o0x7f15420240a8;%20%200%20drivers%0av0x56211ab1bf30_0%20.var%20%22p%22,%200%200;%0aE_0x56211aac3cc0%20.event%20edge,%20v0x56211ab1be30_0;%0aS_0x56211aafb9c0%20.scope%20function,%20%22parity%22%20%22parity%22%202%205,%202%205%200,%20S_0x56211aafb800;%0a%20.timescale%200%200;%0av0x56211aafbbb0_0%20.var%20%22data%22,%2031%200;%0av0x56211ab1bcb0_0%20.var/i%20%22i%22,%2031%200;%0av0x56211ab1bd90_0%20.var%20%22parity%22,%200%200;%0aTD_parity.parity%20;%0a%20%20%20%20%25pushi/vec4%200,%200,%201;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bd90_0,%200,%201;%0a%20%20%20%20%25pushi/vec4%200,%200,%2032;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bcb0_0,%200,%2032;%0aT_0.0%20;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bcb0_0;%0a%20%20%20%20%25cmpi/s%2032,%200,%2032;%0a%20%20%20%20%25jmp/0xz%20T_0.1,%205;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bd90_0;%0a%20%20%20%20%25load/vec4%20v0x56211aafbbb0_0;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bcb0_0;%0a%20%20%20%20%25part/s%201;%0a%20%20%20%20%25xor;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bd90_0,%200,%201;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bcb0_0;%0a%20%20%20%20%addi%201,%200,%2032;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bcb0_0,%200,%2032;%0a%20%20%20%20%25jmp%20T_0.0;%0aT_0.1%20;%0a%20%20%20%20%25end;%0a%20%20%20%20.scope%20S_0x56211aafb800;%0aT_1%20;%0a%20%20%20%20%25wait%20E_0x56211aac3cc0;%0a%20%20%20%20%25load/vec4%20v0x56211ab1be30_0;%0a%20%20%20%20%25store/vec4%20v0x56211aafbbb0_0,%200,%2032;%0a%20%20%20%20%25fork%20TD_parity.parity,%20S_0x56211aafb9c0;%0a%20%20%20%20%25join;%0a%20%20%20%20%25load/vec4%20%20v0x56211ab1bd90_0;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bf30_0,%200,%201;%0a%20%20%20%20%25jmp%20T_1;%0a%20%20%20%20.thread%20T_1,%20$push;%0a#%20The%20file%20index%20is%20used%20to%20find%20the%20file%20name%20in%20the%20following%20table.%0a:file_names%203;%0a%20%20%20%20%22N/A%22;%0a%20%20%20%20%22%3cinteractive%3e%22;%0a%20%20%20%20%22parity.v%22;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>#! /usr/bin/vvp
:ivl_version &amp;#34;10.1 (stable)&amp;#34;;
:ivl_delay_selection &amp;#34;TYPICAL&amp;#34;;
:vpi_time_precision &amp;#43; 0;
:vpi_module &amp;#34;system&amp;#34;;
:vpi_module &amp;#34;vhdl_sys&amp;#34;;
:vpi_module &amp;#34;v2005_math&amp;#34;;
:vpi_module &amp;#34;va_math&amp;#34;;
S_0x56211aafb800 .scope module, &amp;#34;parity&amp;#34; &amp;#34;parity&amp;#34; 2 1;
 .timescale 0 0;
 .port_info 0 /INPUT 32 &amp;#34;d&amp;#34;
 .port_info 1 /OUTPUT 1 &amp;#34;p&amp;#34;
o0x7f15420240a8 .functor BUFZ 32, C4&amp;lt;zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&amp;gt;; HiZ drive
v0x56211ab1be30_0 .net &amp;#34;d&amp;#34;, 31 0, o0x7f15420240a8; 0 drivers
v0x56211ab1bf30_0 .var &amp;#34;p&amp;#34;, 0 0;
E_0x56211aac3cc0 .event edge, v0x56211ab1be30_0;
S_0x56211aafb9c0 .scope function, &amp;#34;parity&amp;#34; &amp;#34;parity&amp;#34; 2 5, 2 5 0, S_0x56211aafb800;
 .timescale 0 0;
v0x56211aafbbb0_0 .var &amp;#34;data&amp;#34;, 31 0;
v0x56211ab1bcb0_0 .var/i &amp;#34;i&amp;#34;, 31 0;
v0x56211ab1bd90_0 .var &amp;#34;parity&amp;#34;, 0 0;
TD_parity.parity ;
 %pushi/vec4 0, 0, 1;
 %store/vec4 v0x56211ab1bd90_0, 0, 1;
 %pushi/vec4 0, 0, 32;
 %store/vec4 v0x56211ab1bcb0_0, 0, 32;
T_0.0 ;
 %load/vec4 v0x56211ab1bcb0_0;
 %cmpi/s 32, 0, 32;
 %jmp/0xz T_0.1, 5;
 %load/vec4 v0x56211ab1bd90_0;
 %load/vec4 v0x56211aafbbb0_0;
 %load/vec4 v0x56211ab1bcb0_0;
 %part/s 1;
 %xor;
 %store/vec4 v0x56211ab1bd90_0, 0, 1;
 %load/vec4 v0x56211ab1bcb0_0;
 %addi 1, 0, 32;
 %store/vec4 v0x56211ab1bcb0_0, 0, 32;
 %jmp T_0.0;
T_0.1 ;
 %end;
 .scope S_0x56211aafb800;
T_1 ;
 %wait E_0x56211aac3cc0;
 %load/vec4 v0x56211ab1be30_0;
 %store/vec4 v0x56211aafbbb0_0, 0, 32;
 %fork TD_parity.parity, S_0x56211aafb9c0;
 %join;
 %load/vec4 v0x56211ab1bd90_0;
 %store/vec4 v0x56211ab1bf30_0, 0, 1;
 %jmp T_1;
 .thread T_1, $push;
# The file index is used to find the file name in the following table.
:file_names 3;
 &amp;#34;N/A&amp;#34;;
 &amp;#34;&amp;lt;interactive&amp;gt;&amp;#34;;
 &amp;#34;parity.v&amp;#34;;&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>읽어보면, 실제로 loop돌고 jump 하는 것처럼 보인다.&lt;/li>
&lt;li>생각해보면 그럴수 밖에 없는 것 같기도 하고, 만약 1번에 끝내길 바랬으면 다르게 짜야지 싶기도 해서&lt;/li>
&lt;/ul>
&lt;h3 id="task-benches">Task Benches&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20arbiter%20%28%0aclock,%0areset,%0areq_0,%0areq_1,%0agnt_0,%0agnt_1%0a%29;%0a%0ainput%20clock,%20reset,%20req_0,%20req_1;%0aoutput%20gnt_0,%20gnt_1;%0a%0areg%20gnt_0,%20gnt_1;%0a%0aalways%20@%20%28posedge%20clock%20or%20posedge%20reset%29%0a%0aif%20%28reset%29%20begin%0a%20%20gnt_0%20%3c=%200;%0a%20%20gnt_1%20%3c=%200;%0aend%20else%20if%20%28req_0%29%20begin%0a%20%20gnt_0%20%3c=%201;%0a%20%20gnt_1%20%3c=%200;%0aend%20else%20if%20%28req_1%29%20begin%0a%20%20gnt_0%20%3c=%200;%0a%20%20gnt_1%20%3c=%201;%0aend%0a%0aendmodule%0a//%20Testbench%20Code%20Goes%20here%0amodule%20arbiter_tb;%0a%0areg%20clock,%20reset,%20req0,%20req1;%0awire%20gnt0,%20gnt1;%0a%0ainitial%20begin%0a%20%20$monitor%20%28%22req0=%25b,req1=%25b,gnt0=%25b,gnt1=%25b%22,%20req0,%20req1,%20gnt0,%20gnt1%29;%0a%20%20clock%20=%200;%0a%20%20reset%20=%200;%0a%20%20req0%20=%200;%0a%20%20req1%20=%200;%0a%20%20#5%20reset%20=%201;%0a%20%20#15%20reset%20=%200;%0a%20%20#10%20req0%20=%201;%0a%20%20#10%20req0%20=%200;%0a%20%20#10%20req1%20=%201;%0a%20%20#10%20req1%20=%200;%0a%20%20#10%20%7breq0,%20req1%7d%20=%202%27b11;%0a%20%20#10%20%7breq0,%20req1%7d%20=%202%27b00;%0a%20%20#10%20$finish;%0aend%0a%0aalways%20begin%0a%20%20#5%20clock%20=%20!clock;%0aend%0a%0aarbiter%20U0%20%28%0a.clock%20%28clock%29,%0a.reset%20%28reset%29,%0a.req_0%20%28req0%29,%0a.req_1%20%28req1%29,%0a.gnt_0%20%28gnt0%29,%0a.gnt_1%20%28gnt1%29%0a%29;%0a%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> arbiter (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>req_0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>req_1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gnt_0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gnt_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clock, reset, req_0, req_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> gnt_0, gnt_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> gnt_0, gnt_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clock &lt;span style="color:#66d9ef">or&lt;/span> &lt;span style="color:#66d9ef">posedge&lt;/span> reset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (reset) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (req_0) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (req_1) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Testbench Code Goes here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">module&lt;/span> arbiter_tb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clock, reset, req0, req1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> gnt0, gnt1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor (&lt;span style="color:#e6db74">&amp;#34;req0=%b,req1=%b,gnt0=%b,gnt1=%b&amp;#34;&lt;/span>, req0, req1, gnt0, gnt1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">15&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> {req0, req1} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b11&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> {req0, req1} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arbiter U0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.clock (clock),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.reset (reset),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.req_0 (req0),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.req_1 (req1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.gnt_0 (gnt0),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.gnt_1 (gnt1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>처음에 initial block 에서 monitor로 변수 값 바뀔때 tracking 해주고, req0 = 0, req1 = 0 이 설정 되고, gnt는 설정이 안되서 0, 0, x, x 가 나오고 나머지는 다 delay 걸려서 실행 안되고 있고, arbiter 호출해준다.&lt;/li>
&lt;li>5 delays 뒤에 reset 이 1 이 되면서 gnt_0, gnt_1 이 되면서 0, 0, 0, 0 이 출력&lt;/li>
&lt;li>10 delays 뒤에 req0 가 1이 되면서, 1, 0, 0, 0&lt;/li>
&lt;li>그러면서 1, 0, 1, 0&lt;/li>
&lt;li>그 뒤 req0 이 0 되면서 0, 0, 1 , 0&lt;/li>
&lt;li>req1 이 1 이 되면서 0, 1, 1, 0&lt;/li>
&lt;li>그 직후 0, 1, 0, 1&lt;/li>
&lt;li>0, 0, 0, 1&lt;/li>
&lt;li>1, 1, 0, 1&lt;/li>
&lt;li>1, 1, 1, 0&lt;/li>
&lt;li>0, 0, 1, 0&lt;/li>
&lt;li>순으으로 나오게 된다.&lt;/li>
&lt;li>처음에는 reset 이 0 으로 바뀌는걸 못봐서 한참 삽질했다.&lt;/li>
&lt;/ul>
&lt;h3 id="counter-design">Counter Design&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//-----%0a//%20Function%20:%20This%20is%20a%204%20bit%20up-counter%20with%0a//%20Synchronous%20active%20high%20reset%20and%0a//%20with%20active%20high%20enable%20signal%0a//-----%0amodule%20first_counter%20%28%0aclock,%0areset,%0aenable,%0acounter_out%0a%29;%0a%0ainput%20clock;%0ainput%20reset;%0ainput%20enable;%0a%0aoutput%20[3:0]%20counter_out;%0a%0awire%20clock;%0awire%20reset;%0awire%20enable;%0a%0areg%20[3:0]%20counter_out;%0a%0aalways%20@%20%28posedge%20clock%29%0abegin:%20COUNTER%20//%20Block%20Name%0a%20%20if%20%28reset%20==%201%27b1%29%20begin%0a%20%20%20%20counter_out%20%3c=%20#%204%27b0000;%0a%20%20end%0a%20%20%0a%20%20else%20if%20%28enable%20==%201%27b1%29%20begin%0a%20%20%20%20counter_out%20%3c=%20#1%20counter_out%20&amp;#43;%201;%0a%20%20end%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//-----
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Function : This is a 4 bit up-counter with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Synchronous active high reset and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// with active high enable signal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//-----
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">module&lt;/span> first_counter (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter_out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> reset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> reset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> COUNTER &lt;span style="color:#75715e">// Block Name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (reset &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter_out &lt;span style="color:#f92672">&amp;lt;=&lt;/span> # &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (enable &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter_out &lt;span style="color:#f92672">&amp;lt;=&lt;/span> #&lt;span style="color:#ae81ff">1&lt;/span> counter_out &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%60include%20%22first_counter.v%22%0amodule%20first_counter_tb%28%29;%0a//%20Declare%20inputs%20as%20regs%20and%20outputs%20as%20wires%0areg%20clock,%20reset,%20enable;%0awire%20[3:0]%20counter_out;%0a%0a//%20Initialize%20all%20variables%0a%0ainitial%20begin%0a%20%20$display%20%28%22time%5ct%20clk%20reset%20enable%20counter%22%29;%0a%20%20$monitor%20%28%22%25g%5ct%20%25b%20%25b%20%25b%20%25b%22%29;%0a%20%20%20%20$time,%20clock,%20reset,%20enable,%20counter_out;%0a%20%20%20%20%0a%20%20clock%20=%201;%0a%20%20reset%20=%200;%0a%20%20enable%20=%200;%0a%20%20#5%20reset%20=%201;%0a%20%20#10%20reset%20=%200;%0a%20%20#10%20enable%20=%201;%0a%20%20#100%20enable%20=%200;%0a%20%20#5%20$finish;%0aend%0a%0aalways%20begin%0a%20%20#5%20clock%20=%20~clock;%0aend%0a%0afirst_counter%20U_counter%20%28%0aclock,%0areset,%0aenable,%0acounter_out%0a%29;%0a%0aendmoudle">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;first_counter.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> first_counter_tb();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Declare inputs as regs and outputs as wires
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> clock, reset, enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Initialize all variables
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;time&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> clk reset enable counter&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor (&lt;span style="color:#e6db74">&amp;#34;%g&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %b %b %b %b&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $time, clock, reset, enable, counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">100&lt;/span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>first_counter U_counter (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter_out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>endmoudle&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>다른 module 을 부를때 `include 라는 문법을 쓰는걸 알게 되었다.&lt;/li>
&lt;li>나머진 예전에 배운 논리회로랑 똑같아서 스킵&lt;/li>
&lt;/ul>
&lt;h3 id="comments">Comments&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20This%20is%20a%0a%20%20Multi%20line%20comment%0a%20%20example%20*/%0amodule%20addbit%20%28%0aa,%0ab,%0aci,%0asum,%0aco%29;%0a%0ainput%20a;%0ainput%20b;%0ainput%20ci;%0aoutput%20sum;%0aoutput%20co;%0awire%20a;%0awire%20b;%0awire%20ci;%0awire%20sum;%0awire%20co;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* This is a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Multi line comment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> example */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> addbit (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sum,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>co);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="numbers-in-verilog">Numbers in Verilog&lt;/h3>
&lt;h4 id="integer-number">Integer Number&lt;/h4>
&lt;ul>
&lt;li>Syntax : &lt;!-- raw HTML omitted -->&amp;rsquo;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Integer&lt;/th>
 &lt;th>Stored as&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>00000000000000000000000000000001&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>8&amp;rsquo;hAA&lt;/td>
 &lt;td>10101010&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6&amp;rsquo;b10_0011&lt;/td>
 &lt;td>100011&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;lsquo;hF&lt;/td>
 &lt;td>00000000000000000000000000001111&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="real-numbers">Real Numbers&lt;/h4>
&lt;ul>
&lt;li>Syntax : &lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->, &lt;!-- raw HTML omitted -->E&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h3 id="modules">Modules&lt;/h3>
&lt;h4 id="ports">Ports&lt;/h4>
&lt;ul>
&lt;li>Syntax&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>input [range_val:range_var] list_of_identifier;
output [range_val:range_var] list_of_identifier;
inout [range_val:range_var] list_of_identifier;&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>Examples&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] data_in;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#f92672">&amp;amp;&lt;/span>;&lt;span style="color:#ae81ff">0&lt;/span>] count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">inout&lt;/span> data_bi;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20addbit%28%0aa,%0ab,%0aci,%20sum,%0aco%0a%29;%0ainput%20a;%0ainput%20b;%0ainput%20ci;%0aoutput%20sum;%0aoutput%20co;%0a%0awire%20a;%0awire%20b;%0awire%20ci;%0awire%20sum;%0awire%20co;%0a%0aassign%20%7bco,%20sum%7d%20=%20a%20&amp;#43;%20b%20&amp;#43;%20ci;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> addbit(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci, sum,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>co
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> {co, sum} &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b &lt;span style="color:#f92672">+&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="modules-connected-by-port-order-implicit">Modules connected by port order (implicit)&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> adder_implicit (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> crarry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u1 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">1&lt;/span>] ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">1&lt;/span>] ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u2 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">2&lt;/span>] ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">2&lt;/span>], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u3(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c3,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="modules-connected-by-name">Modules connected by name&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> adder_explicit (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (ci),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>co (c1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u1 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">1&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">1&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (c1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">1&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.co (c2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u2 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">2&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">2&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (c2),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">2&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.co (&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u3 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">3&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">3&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (c3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">3&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.co (carry)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="instantiating-a-module">Instantiating a module&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20parity%20%28%0aa,%0ab,%0ac,%0ad,%0ay%0a%29;%0a%0ainput%20a;%0ainput%20b;%0ainput%20c;%0ainput%20d;%0a%0aouput%20y;%0a%0awire%20a;%0awire%20b;%0awire%20c;%0awire%20d;%0awire%20y;%0a%0awire%20out_0;%0awire%20out_1;%0a%0axor%20u0%20%28out_0,%20a,%20b%29;%0axor%20u1%20%28out_1,%20c,%20d%29;%0a%0axor%20u2%20%28y,%20out_0,%20out_1%29;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> parity (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out_0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> u0 (out_0, a, b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> u1 (out_1, c, d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> u2 (y, out_0, out_1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="port-connection-rules">Port Connection Rules&lt;/h4>
&lt;ul>
&lt;li>Inputs : internally must always be of type net, externally the inputs can be connected to a variable of type reg or net.&lt;/li>
&lt;li>Outputs : internally can be of type net or reg, externally the outputs must be connected to a variable of type net.&lt;/li>
&lt;li>Inouts : internally or externally must always be type net, can only be connected to a variable net type.&lt;/li>
&lt;li>Width matching : it is legal to connect internal and external ports of different sizes. But beware, synthesis tools could report problems.&lt;/li>
&lt;li>Unconnected ports : unconnected ports are allowed by using a &amp;ldquo;,&amp;rdquo;.&lt;/li>
&lt;li>The net data types are used to connect structure.&lt;/li>
&lt;li>A net data type is required if a signal can be driven a structural connection.&lt;/li>
&lt;/ul>
&lt;h5 id="example---implicit-unconnected-port">Example - Implicit Unconnected Port&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20implicit%28%29;%0areg%20clk,%20d,%20rst,%20pre;%0awire%20q;%0a%0adff%20u0%20%28q,,%20clk,%20d,%20rst,%20pre%29;%0a%0aend%20module%0a%0amodule%20dff%20%28q,%20q_bar,%20clk,%20d,%20rst,%20pre%29;%0ainput%20clk,%20d,%20rst,%20pre;%0aoutput%20q,%20q_bar;%0areg%20q;%0a%0aassign%20a_bar%20=%20~q;%0a%0aalways%20@%20%28posedge%20clk%29%0a%0aif%209rst%20==1%27b1%29%20gegin%0a%20%20q%20%3c=%200;%0aend%20else%20if%20%28pre%20==%201%27b1%29%20begin%0a%20%20q%20%3c=%201;%0aend%20else%20being%0a%20%20q%20%3c=%20d;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> implicit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clk, d, rst, pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dff u0 (q,, clk, d, rst, pre);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">module&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> dff (q, q_bar, clk, d, rst, pre);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk, d, rst, pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> q, q_bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> a_bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>rst &lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) gegin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (pre &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> being
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="example---explicit-unconnected-port">Example - Explicit Unconnected Port&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20explicit%28%29;%0areg%20clk,%20d,%20rst,%20pre;%0awire%20q;%0a%0adff%20u0%20%28%0a.q%20%28q%29,%0a.d%20%28d%29,%0a.clk%20%28clk%29,%0a.q_bar%20%28%29,%0a.rst%20%28rst%29,%0a.pre%20%28pre%29%0a%29;%0a%0aendmodule%0a%0a%0amodule%20dff%20%28q,%20q_bar,%20clk,%20d,%20rst,%20pre%29;%0ainput%20clk,%20d,%20rst,%20pe;%0aoutput%20q,%20q-bar;%0areg%20q;%0a%0aassign%20q_bar%20=%20~q;%0a%0aalways%20@%20%28posedge%20clk%29%0a%0aif%20%28rst%20==%201%27b1%29%20begin%0a%20%20q%20%3c=%200;%0aend%20else%20if%20%28pre%20==%201%27b1%29%20begin%0a%20%20q%20%3c=%201;%0aend%20else%20begin%0a%20%20q%20%3c=%20d;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> explicit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clk, d, rst, pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dff u0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.q (q),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.d (d),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.clk (clk),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.q_bar (),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.rst (rst),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.pre (pre)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> dff (q, q_bar, clk, d, rst, pre);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk, d, rst, pe;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> q, q&lt;span style="color:#f92672">-&lt;/span>bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> q_bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (rst &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (pre &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="hierarchical-identifiers">Hierarchical Identifiers&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;addbit.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> adder_hier (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u0 (r1[&lt;span style="color:#ae81ff">0&lt;/span>], r2[&lt;span style="color:#ae81ff">0&lt;/span>],ci,result[&lt;span style="color:#ae81ff">0&lt;/span>],c1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u1 (r1[&lt;span style="color:#ae81ff">1&lt;/span>], r2[&lt;span style="color:#ae81ff">1&lt;/span>],c1,result[&lt;span style="color:#ae81ff">1&lt;/span>],c2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u2 (r1[&lt;span style="color:#ae81ff">2&lt;/span>], r2[&lt;span style="color:#ae81ff">2&lt;/span>],c2,result[&lt;span style="color:#ae81ff">2&lt;/span>],c3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u3 (r1[&lt;span style="color:#ae81ff">3&lt;/span>], r2[&lt;span style="color:#ae81ff">3&lt;/span>],c3,result[&lt;span style="color:#ae81ff">3&lt;/span>],carry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> tb();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1, r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ci &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> r1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> r2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> ci &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> $display(&lt;span style="color:#e6db74">&amp;#34;+-----------------+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adder_hier U (result, carry, r1, r2, ci);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;+---------------+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;|r1|r2|ci|u0.sum|u1.sum|u2.sum|u3.sum|&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;+---------------+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitoer(&lt;span style="color:#e6db74">&amp;#34;|%h|%h|%h|%h|h|%h|%h|&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r1, r2, ci, tb.U.u0.sum, tb.U.u1.sum, tb.U.u2.sum, tb.U.u3.sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="data-types">Data Types&lt;/h4>
&lt;ul>
&lt;li>Verilog Language has two primary data types:
&lt;ul>
&lt;li>Nets - Present structural connections between components.&lt;/li>
&lt;li>Registers - represent variables used to store data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Every signal has a data type associated with it:
&lt;ul>
&lt;li>Explicitly declared with a declaration in your Verilog code.&lt;/li>
&lt;li>Implicitly declared with no declaration when used to connect structural building blocks in your code. Implicit declaration is always a net type &amp;ldquo;wire&amp;rdquo; and is one bit wide.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="types-of-nets">Types of Nets&lt;/h5>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Net Data Type&lt;/th>
 &lt;th>Functionality&lt;/th>
 &lt;th>간략 번역&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>wire, tri&lt;/td>
 &lt;td>Interconnecting wire - nospecial resolution function&lt;/td>
 &lt;td>상호 연결&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>wor, trior&lt;/td>
 &lt;td>Wired outputs Or together (models ECL)&lt;/td>
 &lt;td>연결된 것들끼리 or한 값&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>wand, triand&lt;/td>
 &lt;td>Wired outputs And together (models open-collector)&lt;/td>
 &lt;td>연결된 것들끼리 and 한 값&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tri0, tri1&lt;/td>
 &lt;td>Net pulls-down or pulls-up when not driven&lt;/td>
 &lt;td>tri와 동일한데, z 일때 0이거나 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>supply0, supply1&lt;/td>
 &lt;td>Net has a constant logic 0 or logic 1 (supply strenth)&lt;/td>
 &lt;td>상수 ground, vdd&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>trireg&lt;/td>
 &lt;td>Retains last value, when driven by z(tristate).&lt;/td>
 &lt;td>z일때 예전 값을 기억&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h5 id="example---wor">Example - wor&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20test_wor%28%29;%0awor%20a;%0areg%20b,%20c;%0aassign%20a%20=%20b;%0aassign%20a%20=%20c;%0a%0ainitial%20begin%0a%20%20$monitor%28%22%25g%20a%20=%20%25b%20b%20=%20%25b%20c%20=%20%25b%22,%20$time,%20a,%20b,%20c%29;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20c%20=%200;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20c%20=%201;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20$finish;%0aend%0a%0aendmoudle">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>module test_wor();
wor a;
reg b, c;
assign a = b;
assign a = c;

initial begin
 $monitor(&amp;#34;%g a = %b b = %b c = %b&amp;#34;, $time, a, b, c);
 #1 b = 0;
 #1 c = 0;
 #1 b = 1;
 #1 b = 0;
 #1 c = 1;
 #1 b = 1;
 #1 b = 0;
 #1 $finish;
end

endmoudle&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h5 id="example---tri">Example - tri&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> test_tri();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">tri&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> b, c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> (b) &lt;span style="color:#f92672">?&lt;/span> c &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bz;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;%g a = %b b = %b c= %b&amp;#34;&lt;/span>, $time, a, b, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="example---trireg">Example - trireg&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> test_trireg();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">trireg&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> b, c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> (b) &lt;span style="color:#f92672">?&lt;/span> c &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bz;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;%g a = %b b = %b c= %b&amp;#34;&lt;/span>, $time, a, b, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="register-data-types">Register Data Types&lt;/h4>
&lt;ul>
&lt;li>Registers store the last value assigned to them until another assignment statement changes their value. (새로운 할당 전까지 그 값이 변하지 않고 저장한다.)&lt;/li>
&lt;li>Registers represent data storage constructs. (register는 data구성을 표현한다?)&lt;/li>
&lt;li>You can create regs arrays called memories. (memories 라고도 불리는 regs array를 만들수도 있다.)&lt;/li>
&lt;li>register data types are used as variables in procedural blocks. (register의 data type은 procedural block들 에서 변수로써 쓰인다.)&lt;/li>
&lt;li>A register data type is required if a signal is assigned a value within a procedural block (procedural block에서 변수의 값을 할당하려면 register의 data type이 필요하다.)&lt;/li>
&lt;li>Procedural blocks begin with keyword initial and always. (Procedural block 은 initial 과 always 키워드로 시작한다.)&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Data types&lt;/th>
 &lt;th>Functionality&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>reg&lt;/td>
 &lt;td>Unsigned variable&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>integer&lt;/td>
 &lt;td>Signed variable - 32 bits&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>time&lt;/td>
 &lt;td>Unsigned integer - 64 bits&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>real&lt;/td>
 &lt;td>Double precision floating point variable&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="strings">Strings&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Character&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>\n&lt;/td>
 &lt;td>New line character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>\t&lt;/td>
 &lt;td>Tab character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>\&lt;/td>
 &lt;td>Backslash () character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;quot;&lt;/td>
 &lt;td>Double quote (&amp;quot;) Character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>\ddd&lt;/td>
 &lt;td>A character specified in 1-3 octal digits (0 &amp;lt;= d &amp;lt;= 7)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>%%&lt;/td>
 &lt;td>Percent (%) character&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="gate-primitives">Gate Primitives&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20gates%28%29;%0a%0awire%20out0;%0awire%20out1;%0awire%20out2;%0areg%20in1,%20in2,%20in3,%20in4;%0a%0anot%20U1%28out0,%20in1%29;%0aand%20U2%28out1,%20in1,%20in2,%20in3,%20in4%29;%0axor%20U3%28out2,%20in1,%20in2,%20in3%29;%0a%0ainitial%20begin%0a%20%20$monitor%28%22in1%20=%20%25b%20in2=%20%25b%20in3=%25b%20out0=%25b%20out1=%25b%20out2=%25b%22,%0a%20%20%20%20in1,%20in2,%20in3,%20in4,%20out0,%20out1,%20out2%29;%0a%20%20in1%20=%200;%0a%20%20in2%20=%200;%0a%20%20in3%20=%200;%0a%20%20in4%20=%200;%0a%20%20%0a%20%20#1%20in1%20=%201;%0a%20%20#1%20in2%20=%201;%0a%20%20#1%20in3%20=%201;%0a%20%20#1%20in4%20=%201;%0a%20%20#1%20$finish;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> gates();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> in1, in2, in3, in4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">not&lt;/span> U1(out0, in1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">and&lt;/span> U2(out1, in1, in2, in3, in4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> U3(out2, in1, in2, in3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;in1 = %b in2= %b in3=%b out0=%b out1=%b out2=%b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in1, in2, in3, in4, out0, out1, out2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="transmission-gate-primitives">Transmission Gate Primitives&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20transmission_gates%28%29;%0a%0areg%20data_enable_low,%20in;%0awire%20data_bus,%20out1,%20out2;%0a%0abufif0%20u1%28data_bus,%20in,%20data_enable_low%29;%0abuf%20U2%28out1,%20in%29;%0anot%20U3%28out2,%20in%29;%0a%0ainitial%20begin%0a%20%20$monitor%28%0a%20%20%20%20%22@%25g%20in%20=%20%25b%20data_enable_low=%25b%20out1=%25b%20out2=%25b%20data_bus=%25b%22,%0a%20%20%20%20$time,%20in,%20data_enable_low,%20out1,%20out2,%20data_bus%29;%0a%20%20data_enable_low%20=%200;%0a%20%20in%20=%200;%0a%20%20#4%20data_enable_low%20=%201;%0a%20%20#8%20$finish;%0aend%0a%0aalways%20#2%20in%20=%20~in;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> transmission_gates();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> data_enable_low, in;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> data_bus, out1, out2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bufif0&lt;/span> u1(data_bus, in, data_enable_low);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">buf&lt;/span> U2(out1, in);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">not&lt;/span> U3(out2, in);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;@%g in = %b data_enable_low=%b out1=%b out2=%b data_bus=%b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $time, in, data_enable_low, out1, out2, data_bus);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data_enable_low &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">4&lt;/span> data_enable_low &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">8&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> #&lt;span style="color:#ae81ff">2&lt;/span> in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>in;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="switch-primitives">Switch Primitives&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20switch_primitives%28%29;%0a%0awire%20net1,%20net2,%20net3;%0awire%20n4,%20net5,%20net6;%0a%0atranif0%20my_gate1%20%28net1,%20net2,%20net3%29;%0artranif1%20my_gate2%20%28net4,%20net5,%20net6%29;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> switch_primitives();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> net1, net2, net3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> n4, net5, net6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">tranif0&lt;/span> my_gate1 (net1, net2, net3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">rtranif1&lt;/span> my_gate2 (net4, net5, net6);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="logic-values-and-signal-strengths">Logic Values and signal Strengths&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Logic Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>0&lt;/td>
 &lt;td>zero, low, false&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>one, high, true&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>z or Z&lt;/td>
 &lt;td>high impedance, floating&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>x or X&lt;/td>
 &lt;td>unknown, uninitialized, contention&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="verilog-strength-levels">Verilog Strength Levels&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Strengtth Level&lt;/th>
 &lt;th>Specification Keyword&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>7 Supply Drive&lt;/td>
 &lt;td>supply0 supply1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6 Strong Pull&lt;/td>
 &lt;td>strong0 strong1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>5 Pull Drive&lt;/td>
 &lt;td>pull0 pull1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>4 Large Capacitance&lt;/td>
 &lt;td>large&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3 Weak Drive&lt;/td>
 &lt;td>weak0 weak1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2 Medium Capacitance&lt;/td>
 &lt;td>medium&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>1 Small Capacitance&lt;/td>
 &lt;td>small&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>0 Hi Impedance&lt;/td>
 &lt;td>highz0 highz1&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="user-defined-primitives">User Defined Primitives&lt;/h3>
&lt;h4 id="syntax">Syntax&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="primitive%20udp_syntax%20%28%0aa,%0ab,%0ac,%0ad%0a%29;%0aoutput%20a;%0ainput%20b,c,d;%0a%0aendprimitive">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">primitive&lt;/span> udp_syntax (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b,c,d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endprimitive&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="udp-ports-rules">UDP ports rules&lt;/h4>
&lt;ul>
&lt;li>An UDP can contain only one output and up to 10 inputs.&lt;/li>
&lt;li>Output port should be the first port followed by one or more input ports.&lt;/li>
&lt;li>All UDP ports are scalar, i.e. Vector ports are not allowed.&lt;/li>
&lt;li>UDPs can not have bidirectional ports.&lt;/li>
&lt;li>The output terminal of a sequetial UDP requires an additional declaration as type reg.&lt;/li>
&lt;li>It is illegal to declare a reg for the output terminal of a combinational UDP&lt;/li>
&lt;/ul>
&lt;h4 id="body">Body&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="primitive%20udp_body%20%28%0aa,%0ab,%0ac%0a%29;%0a%0aouput%20a;%0ainput%20b,%20c;%0a%0a//%20A%20=%20B%20%7c%20C;%0atable%0a%20%20?%201%20:%201;%0a%20%201%20?%20:%201;%0a%20%200%200%20:%200;%0aendtable%0a%0aendprimitive">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">primitive&lt;/span> udp_body (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b, c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// A = B | C;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">table&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endtable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endprimitive&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%60include%20%22udp_body.v%22%0amodule%20udp_body_tb%28%29;%0a%0areg%20b,c;%0awire%20a;%0a%0audp_body%20udp%20%28a,%20b,%20c%29;%0a%0ainitial%20begin%0a%20%20$monitor%28%22%20B%20=%20%25b%20C%20=%20%25b%20A%20=%20%25b%22,%20b,%20c,%20a%29;%0a%20%20b%20=%200;%0a%20%20c%20=%200;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20c%20=%201;%0a%20%20#1%20b%20=%201%27bx;%0a%20%20#1%20c%20=%200;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20c%20=%201%27bx;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20$finish;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;udp_body.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> udp_body_tb();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> b,c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>udp_body udp (a, b, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34; B = %b C = %b A = %b&amp;#34;&lt;/span>, b, c, a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="symbols">Symbols&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Symbol&lt;/th>
 &lt;th>interpretation&lt;/th>
 &lt;th>Explanation&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>?&lt;/td>
 &lt;td>0 or 1 or X&lt;/td>
 &lt;td>? means the variable can be 0 or 1 or x&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>b&lt;/td>
 &lt;td>0 or 1&lt;/td>
 &lt;td>Same as ?, but x is not included&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>f&lt;/td>
 &lt;td>(10)&lt;/td>
 &lt;td>Falling edge on an input&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r&lt;/td>
 &lt;td>(01)&lt;/td>
 &lt;td>Rising edge on an input&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>p&lt;/td>
 &lt;td>(01) or (0x) or (x1) or (1z0 or (z1))&lt;/td>
 &lt;td>Rising edge including x and z&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>n&lt;/td>
 &lt;td>(10) or (1x) or (x0) or (0z) or (z0)&lt;/td>
 &lt;td>Falling edge including x and z&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>*&lt;/td>
 &lt;td>(??)&lt;/td>
 &lt;td>All transitions&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>-&lt;/td>
 &lt;td>No change&lt;/td>
 &lt;td>No Change&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="system-task-and-function">System Task and Function&lt;/h3>
&lt;ul>
&lt;li>&lt;code>$display(&amp;quot;format_string&amp;quot;, par_1, par_2, ...);&lt;/code>&lt;/li>
&lt;li>&lt;code>$strobe(&amp;quot;format_string&amp;quot;, par_1, par2, ...);&lt;/code>&lt;/li>
&lt;li>&lt;code>$monitor(&amp;quot;format_string&amp;quot;, par_1, par_2, ...);&lt;/code>&lt;/li>
&lt;li>&lt;code>$displayb (as above but defaults to binary..);&lt;/code>&lt;/li>
&lt;li>&lt;code>$strobeh (as above but defaults to hex..);&lt;/code>&lt;/li>
&lt;li>&lt;code>$monitoro (as above but defaults to octal..);&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>$time&lt;/code>, &lt;code>$stime&lt;/code>, &lt;code>$realtime&lt;/code> : the current simulation time as a 64-bit integer, a 32-bit integer, and a real number&lt;/li>
&lt;li>&lt;code>$reset&lt;/code>, &lt;code>$stop&lt;/code>, &lt;code>$finish&lt;/code> : &lt;code>$reset&lt;/code> resets the simulation back to time 0; &lt;code>$stop&lt;/code> halts the simulator and puts it in interactive mode where the user can enter commands; &lt;code>$finish&lt;/code> exits the simulator back to the operating system.&lt;/li>
&lt;li>&lt;code>$scope&lt;/code>, &lt;code>$showscope&lt;/code> : &lt;code>$scope(hierarchy_name)&lt;/code> sets the current hierarchical scope to hierarchy_name. &lt;code>$showscopes(n)&lt;/code> lists all modules, tasks and block names in (and below, if n is set to 1) the current scope.&lt;/li>
&lt;li>&lt;code>$random&lt;/code> generates a random integer every tie it is called. If the sequence is to be repeatable, teh first time one invokes random giving it a numerical argument (a seed). Otherwise the seed is derived from the computer clock.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>$dumpfile&lt;/code>, &lt;code>$dumpvar&lt;/code>, &lt;code>$dumpon&lt;/code>, &lt;code>$dumpoff&lt;/code>, &lt;code>$dumpall&lt;/code>&lt;/li>
&lt;li>&lt;code>$dumpfile(&amp;quot;filename.vcd&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>$dumpvar&lt;/code> : dumps all variables in the design.&lt;/li>
&lt;li>&lt;code>$dumpvar(1, top)&lt;/code> : dumps all the varaibles in module top and below, but not modules instantiated in top.&lt;/li>
&lt;li>&lt;code>$dumpvar(2, top)&lt;/code> : dumps all the variables in module top and 1 level below.&lt;/li>
&lt;li>&lt;code>$dumpvar(n, top)&lt;/code> : dumps all the variables in module top and n-1 levels below.&lt;/li>
&lt;li>&lt;code>$dumpvar(0, top)&lt;/code> : dumps all the variables in module top and all level below.&lt;/li>
&lt;li>&lt;code>$dumpon&lt;/code> : initiates the dump.&lt;/li>
&lt;li>&lt;code>$dumpoff&lt;/code> : stop dumping.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>$fopen&lt;/code>, &lt;code>$fdisplay&lt;/code>, &lt;code>$fstrobe&lt;/code>, &lt;code>$fmonitor&lt;/code> and &lt;code>$fwrite&lt;/code>&lt;/li>
&lt;li>&lt;code>$fopen&lt;/code> opens an output file and gives the open file a handle for use by the other commands.&lt;/li>
&lt;li>&lt;code>$fclose&lt;/code> : closes the file and lests other programs access it.&lt;/li>
&lt;li>&lt;code>$fdisplay&lt;/code> and &lt;code>$fwrite&lt;/code> write formatted data to a file whenever they are executed. They are the same except &lt;code>$fdisplay&lt;/code> inserts a new line after every execution and &lt;code>$write&lt;/code> does not.&lt;/li>
&lt;li>&lt;code>$disrobe&lt;/code> also writes to file when executed, but its waits until all other operations in the time step are complete before writing. Thus initial &lt;code>#1 a = 1; b= 0; $fstrobe(hand1, a,b); b=1;&lt;/code> will write write 1 1 for a and b.&lt;/li>
&lt;li>&lt;code>$fmonitor&lt;/code> writes to a file whenever any of tis arguments changes.&lt;/li>
&lt;li>&lt;code>handle1 = $fopen(&amp;quot;filenam1.suffix&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>handle2=$fopen(&amp;quot;filename2.suffix&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>$fstrobe(handle1, format, variable list)&lt;/code>&lt;/li>
&lt;li>&lt;code>$fdisplay(handle2, format, variable list)&lt;/code>&lt;/li>
&lt;li>&lt;code>$fwrite(handle2, format, variable list)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="실습">실습&lt;/h2>
&lt;ul>
&lt;li>단순히 문법만 배우니까 먼가 언어를 배우는 느낌이 안나서 코딩해보기로 했다.&lt;/li>
&lt;li>해보니까 새롭게 알게 된게 있어서 해보길 잘했다고 생각한다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20heap.v%20*/%0amodule%20heap%20%28%0a%20%20d,%0a%20%20is_insert,%0a%20%20ret,%0a%20%20enable,%0a%20%20clock,%0a%20%20reset%0a%29;%0a%0aparameter%20MAX_SIZE%20=%20128;%0a%0ainput%20wire%20[31:0]%20d;%0ainput%20wire%20is_insert;%0ainput%20wire%20enable;%0ainput%20wire%20clock;%0ainput%20wire%20reset;%0a%0aoutput%20reg%20signed%20[31:0]%20ret;%0a%0ainteger%20node[MAX_SIZE%20-%201:0];%0ainteger%20count;%0ainteger%20tmp1,%20tmp2,%20tmp3;%0ainteger%20i;%0a%0ainitial%0abegin%0a%20%20for%20%28i%20=%200;%20i%20%3c%20MAX_SIZE;%20i%20=%20i%20&amp;#43;%201%29%20begin%0a%20%20%20%20node[i]%20=%200;%0a%20%20end%0a%20%20$display%28%22time%20%7c%201%20%7c%202%20%7c%203%20%7c%204%20%7c%205%20%7c%206%20%7c%207%20%7c%208%20%22%29;%0a%20%20$monitor%28%22%25g%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%22,%0a%20%20%20%20%20%20$time,%20node[1],%20node[2],%20node[3],%20node[4],%20node[5],%20node[6],%20node[7],%20node[8]%29;%0a%20%20count%20=%200;%0aend%0a%0aalways%20@%20%28posedge%20clock%29%0abegin%0a%20%20if%20%28enable%29%20begin%0a%20%20%20%20/*%20insert%20*/%0a%20%20%20%20if%20%28is_insert%29%20begin%0a%20%20%20%20%20%20count%20=%20count%20&amp;#43;%201;%0a%20%20%20%20%20%20node[count]%20=%20d;%0a%20%20%20%20%20%20%0a%20%20%20%20%20%20tmp1%20=%20count;%0a%20%20%20%20%20%20while%20%28tmp1%20%3e%201%20&amp;amp;&amp;amp;%20node[tmp1%20/%202]%20%3c%20node[tmp1]%29%20begin%0a%20%20%20%20%20%20%20%20tmp2%20=%20node%20[tmp1/2];%0a%20%20%20%20%20%20%20%20node%20[tmp1/2]%20=%20node[tmp1];%0a%20%20%20%20%20%20%20%20node%20[tmp1]%20=%20tmp2;%0a%0a%20%20%20%20%20%20%20%20tmp1%20=%20tmp1%20/%202;%0a%20%20%20%20%20%20end%0a%20%20%20%20end%0a%20%20%20%20/*%20pop%20*/%0a%20%20%20%20else%20begin%0a%20%20%20%20%20%20ret%20=%20node[1];%0a%20%20%20%20%20%20%0a%20%20%20%20%20%20node[1]%20=%20node[count];%0a%20%20%20%20%20%20node[count]%20=%20node[1];%0a%20%20%20%20%20%20count%20=%20count%20-%201;%0a%0a%20%20%20%20%20%20tmp1%20=%201;%0a%20%20%20%20%20%20tmp2%20=%20tmp1%20*%202;%0a%20%20%20%20%20%20if%20%28tmp2%20&amp;#43;%201%20%3c=%20count%29%20begin%0a%20%20%20%20%20%20tmp2%20=%20%28node[tmp2]%20%3e%20node[tmp2%20&amp;#43;%201]%29%20?%20tmp2%20:%20tmp2%20&amp;#43;%201;%0a%20%20%20%20%20%20end%0a%0a%20%20%20%20%20%20while%20%28tmp2%20%3c=%20count%20&amp;amp;&amp;amp;%20node[tmp1]%20%3c%20node[tmp2]%29%20begin%0a%20%20%20%20%20%20%20%20tmp3%20=%20node[tmp1];%0a%20%20%20%20%20%20%20%20node[tmp1]%20=%20node[tmp2];%0a%20%20%20%20%20%20%20%20node[tmp2]%20=%20tmp3;%0a%0a%20%20%20%20%20%20%20%20tmp1%20=%20tmp2;%0a%20%20%20%20%20%20%20%20tmp2%20=%20tmp2%20*%202;%0a%0a%20%20%20%20%20%20%20%20if%20%28tmp2%20&amp;#43;%201%20%3c=%20count%29%20begin%0a%20%20%20%20%20%20%20%20%20%20tmp2%20=%20%28node[tmp2]%20%3e%20node[tmp2%20&amp;#43;1]%29%20?%20tmp2%20:%20tmp2%20&amp;#43;%201;%0a%20%20%20%20%20%20%20%20end%0a%20%20%20%20%20%20end%0a%0a%20%20%20%20%20%20node[count%20&amp;#43;%201]%20=%200;%20/*%20to%20display%20*/%0a%20%20%20%20end%0a%20%20end%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* heap.v */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> heap (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_insert,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">parameter&lt;/span> MAX_SIZE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> is_insert;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> reset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> &lt;span style="color:#66d9ef">reg&lt;/span> &lt;span style="color:#66d9ef">signed&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> node[MAX_SIZE &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> tmp1, tmp2, tmp3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> MAX_SIZE; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[i] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;time | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;%g | %d | %d | %d | %d | %d | %d | %d | %d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $time, node[&lt;span style="color:#ae81ff">1&lt;/span>], node[&lt;span style="color:#ae81ff">2&lt;/span>], node[&lt;span style="color:#ae81ff">3&lt;/span>], node[&lt;span style="color:#ae81ff">4&lt;/span>], node[&lt;span style="color:#ae81ff">5&lt;/span>], node[&lt;span style="color:#ae81ff">6&lt;/span>], node[&lt;span style="color:#ae81ff">7&lt;/span>], node[&lt;span style="color:#ae81ff">8&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (enable) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* insert */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (is_insert) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> count &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[count] &lt;span style="color:#f92672">=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (tmp1 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> node[tmp1 &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">&amp;lt;&lt;/span> node[tmp1]) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> node [tmp1&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node [tmp1&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> node[tmp1];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node [tmp1] &lt;span style="color:#f92672">=&lt;/span> tmp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> tmp1 &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* pop */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> node[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> node[count];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[count] &lt;span style="color:#f92672">=&lt;/span> node[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> count &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> tmp1 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> (node[tmp2] &lt;span style="color:#f92672">&amp;gt;&lt;/span> node[tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">?&lt;/span> tmp2 &lt;span style="color:#f92672">:&lt;/span> tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (tmp2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> node[tmp1] &lt;span style="color:#f92672">&amp;lt;&lt;/span> node[tmp2]) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp3 &lt;span style="color:#f92672">=&lt;/span> node[tmp1];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[tmp1] &lt;span style="color:#f92672">=&lt;/span> node[tmp2];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[tmp2] &lt;span style="color:#f92672">=&lt;/span> tmp3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> tmp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> tmp2 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> (node[tmp2] &lt;span style="color:#f92672">&amp;gt;&lt;/span> node[tmp2 &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">?&lt;/span> tmp2 &lt;span style="color:#f92672">:&lt;/span> tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[count &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">/* to display */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20test.v%20*/%0a%60include%20%22heap.v%22%20//%20to%20fix%20syntax%20highlight%60%0a%0amodule%20heap_test%28%29;%0a%0areg%20clock,%20reset,%20enable,%20is_insert;%0ainteger%20data;%0awire%20[31:0]%20ret;%0a%0ainitial%20begin%0a%20%20clock%20=%200;%0a%20%20reset%20=%200;%0a%20%20enable%20=%201;%0a%20%20is_insert%20=%201;%0a%20%20data%20=%200;%0a%20%20#5%20data%20=%205;%0a%20%20#10%20data%20=%2010;%0a%20%20#10%20data%20=%207;%0a%20%20#10%20is_insert%20=%200;%0a%20%20#5%20$finish;%0aend%0a%0aalways%20begin%20%0a%20%20#5%20clock%20=%20~clock;%0aend%0a%0aheap%20U%28data,%20is_insert,%20ret,%20enable,%20clock,%20reset%29;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* test.v */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;heap.v&amp;#34;&lt;/span> &lt;span style="color:#75715e">// to fix syntax highlight`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> heap_test();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clock, reset, enable, is_insert;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_insert &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> is_insert &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heap U(data, is_insert, ret, enable, clock, reset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>여기서 배운건 assign 할때 async하게 도는 것과 sync 하게 만드는 것 2개가 있다는 것을 알게 되었다. 일단 heap을 짤때 sync하게 짯는데 async 하게 짤수 있는 부분이 있는지 알아봐야겠다.&lt;/li>
&lt;li>&lt;a href="http://aboutmadlife.blogspot.com/2015/01/verilog-blocking-non-blocking.html">http://aboutmadlife.blogspot.com/2015/01/verilog-blocking-non-blocking.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>IOMMU (Input Output Memory Management Unit)</title><link>https://minuk.dev/wiki/iommu/</link><pubDate>Mon, 22 Jun 2020 19:35:53 +0900</pubDate><guid>https://minuk.dev/wiki/iommu/</guid><description>&lt;h2 id="iommu-">IOMMU ?&lt;/h2>
&lt;ul>
&lt;li>IOMMU : Input Output Memory Managment Unit&lt;/li>
&lt;li>출처 : &lt;a href="http://jake.dothome.co.kr/iommu/">http://jake.dothome.co.kr/iommu/&lt;/a>&lt;/li>
&lt;li>Device가 Main Memory 에 접근할때 디바이스 주소를 물리 주소로 매핑하는 역할&lt;/li>
&lt;/ul></description></item><item><title>delayed work</title><link>https://minuk.dev/wiki/delayed_work/</link><pubDate>Sun, 21 Jun 2020 19:42:23 +0900</pubDate><guid>https://minuk.dev/wiki/delayed_work/</guid><description>&lt;h2 id="참조-사이트">참조 사이트&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://egloos.zum.com/rousalome/v/9990982">http://egloos.zum.com/rousalome/v/9990982&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="delayed-work">delayed work&lt;/h2>
&lt;ul>
&lt;li>일정 시간 뒤에 지연시켜서 워크를 실행하는 방법&lt;/li>
&lt;/ul>
&lt;h2 id="사용방법">사용방법&lt;/h2>
&lt;ul>
&lt;li>출처 : &lt;a href="http://egloos.zum.com/rousalome/v/9982311">http://egloos.zum.com/rousalome/v/9982311&lt;/a>&lt;/li>
&lt;li>&lt;code>INIT_DELAYED_WORKWORK()&lt;/code>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="INIT_DELAYED_WORK%28&amp;amp;work,%20handler%29;%0a%0aqueue_delayed_work%28workqueue,%20&amp;amp;work,%20delayed_time%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">INIT_DELAYED_WORK&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>work, handler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">queue_delayed_work&lt;/span>(workqueue, &lt;span style="color:#f92672">&amp;amp;&lt;/span>work, delayed_time);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="같이보기-좋은-자료">같이보기 좋은 자료&lt;/h2>
&lt;ul>
&lt;li>[[workqueue]]&lt;/li>
&lt;/ul></description></item><item><title>회고/2020-06-21</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-06-21/</link><pubDate>Sun, 21 Jun 2020 01:12:48 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-06-21/</guid><description>2020년 6월 21일 회고</description></item><item><title>json web token(jwt)</title><link>https://minuk.dev/wiki/jwt/</link><pubDate>Sat, 20 Jun 2020 01:14:03 +0900</pubDate><guid>https://minuk.dev/wiki/jwt/</guid><description>&lt;h2 id="간단-설명">간단 설명&lt;/h2>
&lt;ul>
&lt;li>잘된 설명 주소 : &lt;a href="https://velopert.com/2389">https://velopert.com/2389&lt;/a>&lt;/li>
&lt;li>예전 (고등학교 시절)에 봤던 김포프의 유튜브 : &lt;a href="https://www.youtube.com/watch?v=MUUqogMpGiA">https://www.youtube.com/watch?v=MUUqogMpGiA&lt;/a>&lt;/li>
&lt;li>사실 설명을 굳이 하는 것보다 내가 jwt를 배웠던 링크만 정리하는게 맞을 것 같아서 이렇게 정리함.&lt;/li>
&lt;/ul></description></item><item><title>tmuxinator</title><link>https://minuk.dev/wiki/tmuxinator/</link><pubDate>Sat, 20 Jun 2020 01:04:36 +0900</pubDate><guid>https://minuk.dev/wiki/tmuxinator/</guid><description>&lt;h2 id="간단-설명">간단 설명&lt;/h2>
&lt;ul>
&lt;li>tmux 의 session 을 자동으로 열어주는 거다. 주로 프로젝트 환경을 구성할때 쓴다.&lt;/li>
&lt;li>[[vim-startify]] 와 함께 사용하면 굉장히 편하다.&lt;/li>
&lt;li>아쉬운점은 ruby로 구성되어 있어서 dependency가 있는 편이다.&lt;/li>
&lt;li>설치할때는 공식적인 방법(gem 을 이용하는) 편보다 데비안 계열이면 &lt;code>sudo apt install tmuxinator&lt;/code> 를 사용해서 조금 뒤쳐진 버전이더라도 쉽게 설치하는게 속이 편하다.&lt;/li>
&lt;/ul></description></item><item><title>vim-startify</title><link>https://minuk.dev/wiki/vim-staritfy/</link><pubDate>Sat, 20 Jun 2020 01:02:39 +0900</pubDate><guid>https://minuk.dev/wiki/vim-staritfy/</guid><description>&lt;h2 id="간단-설명">간단 설명&lt;/h2>
&lt;ul>
&lt;li>공홈 : &lt;a href="https://github.com/mhinz/vim-startify">https://github.com/mhinz/vim-startify&lt;/a>&lt;/li>
&lt;li>Session을 관리해주는 건데 나도 다른 분의 위키를 참고하다보니 알게되었다. 쓰다보니 좋아서 쓰고 있다.&lt;/li>
&lt;li>주로 [[tmuxinator]]와 함께 사용하면 엄청 편하다.&lt;/li>
&lt;/ul></description></item><item><title>my-page (나만의 홈페이지 만들기)</title><link>https://minuk.dev/wiki/my-page/</link><pubDate>Sat, 20 Jun 2020 00:40:20 +0900</pubDate><guid>https://minuk.dev/wiki/my-page/</guid><description>&lt;h1 id="시작">시작&lt;/h1>
&lt;ul>
&lt;li>예전에 React를 배우면서 구성하던 게 있었는데, 실제 사용성이 낮고 토이프로젝트로밖에 못쓴다고 생각했다. 물론 토이여도 상관 없을수 있지만 나는 장기적으로 내가 사용할수 있는 서비스를 구축해서 내가 스스로 쓰는게 목표이다.&lt;/li>
&lt;/ul>
&lt;h2 id="개발환경-설정">개발환경 설정&lt;/h2>
&lt;ul>
&lt;li>사실 이게 제일 귀찮다. 하지만 한번만 제대로 해놓으면 좋을 꺼라고 생각한다.&lt;/li>
&lt;li>그런 의미에서 항상 java로 개발할때 사용하던 Intellij 를 버리고, vim 환경에서 cli로만 짜보자는 생각을 하게되었다.&lt;/li>
&lt;li>물론 사실 요세 CLI와 GUI를 구별하는게 의미없다고 생각한다. 하지만 내가 주로 쓰는 툴들이 CLI, TUI 환경인 툴들이다 보니 (vimwiki, tig, tmux, tmuxinator) 당연하게도 spring은 왜 vim에서 못하나 생각이 들었다.&lt;/li>
&lt;/ul>
&lt;h3 id="spring-cli-설정">spring cli 설정&lt;/h3>
&lt;h4 id="sdkman">sdkman&lt;/h4>
&lt;ul>
&lt;li>&lt;code>sdkman&lt;/code> 이라는 패키지매니저? 프로그램 관리툴? 을 사용해서 spring-cli를 까는게 제일 일반적인것 같아서 깔았다.&lt;/li>
&lt;li>공홈 : &lt;a href="https://sdkman.io/install">https://sdkman.io/install&lt;/a>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -s &lt;span style="color:#e6db74">&amp;#34;https://get.sdkman.io&amp;#34;&lt;/span> | bash&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="spring-boot-cli-설정">spring boot cli 설정&lt;/h4>
&lt;ul>
&lt;li>공홈 : &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-installing-the-cli">https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started.html#getting-started-installing-the-cli&lt;/a>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="sdk%20install%20springboot">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sdk install springboot&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="open-jdk-설치">open-jdk 설치&lt;/h4>
&lt;ul>
&lt;li>실행해보니 JAVA_HOME 을 못잡는다. 생각해보니 한번도 java를 실행한적이 없다. jdk를 깔아주자&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="sudo%20apt%20install%20openjdk-11-jdk">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>sudo apt install openjdk-11-jdk&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h4 id="중간-잡담">중간 잡담&lt;/h4>
&lt;ul>
&lt;li>나름 잘된다. 물론 spring boot cli를 이용하는게 아니라 홈페이지에서 프로젝트 설정을 받는 방법도 있다. 하지만 개인적 취향이 아니므로 한번 하고싶은대로 하자. 어짜피 개인프로젝트인데, 실제 협업할때는 맘대로 하고싶어도 못할텐데&lt;/li>
&lt;/ul>
&lt;h4 id="vim-설정">vim 설정&lt;/h4>
&lt;ul>
&lt;li>기존에 나는 [[coc]]를 사용하고 있었다.&lt;/li>
&lt;li>coc java는 없나 싶어서 찾아보니 있다. 설치해주자&lt;/li>
&lt;li>공홈 : &lt;a href="https://github.com/neoclide/coc-java">https://github.com/neoclide/coc-java&lt;/a>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>:CocInstall coc-java&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>자동으로 maven 이나 gradle 설정을 찾아서 한다고 한다. 어짜피 spring boot cli 도 maven을 사용하니 신경쓰지 않고 사용해도 된다.&lt;/li>
&lt;/ul>
&lt;h4 id="tmuxinator-설정">tmuxinator 설정&lt;/h4>
&lt;ul>
&lt;li>매번 켜주기 귀찮다. [[tmuxinator]] 를 활용하자. 다른 프로젝트들도 그렇듯이 자동으로 프로젝트를 통째로 열수 있게 해놓자.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#%20~/.tmuxinator/page.yml%0a%0aname:%20page%0aroot:%20~/workspace/page%0a%0awindows:%0a%20%20-%20editor:%0a%20%20%20%20%20%20-%20nvim%20&amp;#43;%22SLoad%20page%22%0a%20%20-%20server:%20%0a%20%20-%20logs:%20">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code># ~/.tmuxinator/page.yml

name: page
root: ~/workspace/page

windows:
 - editor:
 - nvim &amp;#43;&amp;#34;SLoad page&amp;#34;
 - server: 
 - logs: &lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>여기서 vim 도 session 자동으로 열어주는 [[vim-staritfy]]를 사용해서 설정해놓았다.&lt;/li>
&lt;li>server 나 logs 부분은 아직 안적어 놓았다. 나중에 필요하면 적고, 일단은 빈 쉘이 열리도록 하자.&lt;/li>
&lt;/ul>
&lt;h3 id="개발">개발&lt;/h3>
&lt;ul>
&lt;li>올바른 설계 방법은 사실 기능에 집중하고 인증이나 부차적인 것을 나중에 집중하는게 맞다고 생각한다. 하지만 개인 플젝인걸 다시 한번 강조하고, 귀찮은 부분을 제일 처음 처리하고 싶어하는 성격을 고려하여&lt;/li>
&lt;li>인증 - 데이터베이스 - 패키지 구조 설계 - 서비스 및 관리용 cli 프로그램 - 웹 순서로 코딩할 생각이다.&lt;/li>
&lt;/ul>
&lt;h4 id="인증부분">인증부분&lt;/h4>
&lt;ul>
&lt;li>인증은 혹시라도 나중에 react 나 vue 같은 front-end framework 를 쓰고 싶어질수도 있다는 생각하에 (&lt;del>사실 지금은 SSR 같은 부분이 잘 지원안될것 같아서 하고 싶지 않다. front-end와 back-end 를 서로 다르게 구성하고 nginx 같은걸로 묶는 건 더 싫다. 개인적으로 모노리스 서비스가 좋다.&lt;/del>) [[jwt]]를 사용해보자.&lt;/li>
&lt;li>참고 자료 : &lt;a href="https://velog.io/@minholee_93/Spring-Security-JWT-Security-Spring-Boot-10">https://velog.io/@minholee_93/Spring-Security-JWT-Security-Spring-Boot-10&lt;/a>&lt;/li>
&lt;li>jwt spring 치면 제일 상단에 나오는 글 보고 하기로 했다.&lt;/li>
&lt;li>안되면 그냥 spring-security 공식 doc 보고 하면 될듯, 대충 찾아보면 대부분 양산형 블로그들이다. 그냥 공식 문서가 훨씬 퀄리티 좋다고 생각한다.&lt;/li>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>blk_mq</title><link>https://minuk.dev/wiki/blk_mq/</link><pubDate>Fri, 19 Jun 2020 20:23:19 +0900</pubDate><guid>https://minuk.dev/wiki/blk_mq/</guid><description>&lt;p>##blk_mq : Linux Block IO: Introducing Multi-queue SSD Access on Multi-core Systems&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.thomas-krenn.com/en/wiki/Linux_Multi-Queue_Block_IO_Queueing_Mechanism_(blk-mq)_Details">https://www.thomas-krenn.com/en/wiki/Linux_Multi-Queue_Block_IO_Queueing_Mechanism_(blk-mq)_Details&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>PRP (Physical Region Page)</title><link>https://minuk.dev/wiki/prp/</link><pubDate>Thu, 18 Jun 2020 20:15:03 +0900</pubDate><guid>https://minuk.dev/wiki/prp/</guid><description>&lt;h2 id="prp">PRP&lt;/h2>
&lt;ul>
&lt;li>출처 : &lt;a href="https://m.blog.naver.com/PostView.nhn?blogId=eldkrpdla121&amp;amp;logNo=220536014853&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F">https://m.blog.naver.com/PostView.nhn?blogId=eldkrpdla121&amp;amp;logNo=220536014853&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&lt;/a>&lt;/li>
&lt;li>흠.. Pysical Region Page 말 그대로다.&lt;/li>
&lt;li>혹시 모르니 위의 출처에 있는 말 그대로를 옮겨적자면,
&lt;ul>
&lt;li>PRP contains the 64-bit physical memory page address. The lower bits (n:2) of this field indicate the offset within the memory page. N is defined by the memory page size.&lt;/li>
&lt;li>PRP List contains a list of PRPs with generally no offsets.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>NUMA</title><link>https://minuk.dev/wiki/numa/</link><pubDate>Thu, 18 Jun 2020 19:29:33 +0900</pubDate><guid>https://minuk.dev/wiki/numa/</guid><description>&lt;h2 id="numa">NUMA&lt;/h2>
&lt;ul>
&lt;li>Non-Uniform Memory Access 의 약자, 멀티프로세서 환경에서 적용되는 메모리 접근 방식&lt;/li>
&lt;li>CPU 마다 메모리를 보유하고 있는데, CPU 가 자신의 메모리에 접근하는 것을 Local Access라고 부른다.&lt;/li>
&lt;li>노드 : CPU와 그에 해당하는 메모리를 합쳐서 부르는 말&lt;/li>
&lt;li>NUMA에서 다른 노드에 접근하는 것을 Remote Access 라고 부른다.&lt;/li>
&lt;/ul></description></item><item><title>회고/2020-06-17</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-06-17/</link><pubDate>Wed, 17 Jun 2020 20:18:56 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-06-17/</guid><description>&lt;h2 id="일기">일기&lt;/h2>
&lt;h3 id="생활-측면">생활 측면&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%98%a4%eb%8a%98%20%ea%b3%b5%eb%b6%80%eb%8a%94%20%ec%9d%b4%eb%af%b8%20%ea%b8%80%eb%9f%ac%eb%a8%b9%ec%97%88%ec%9c%bc%eb%8b%88%20%ed%9a%8c%ea%b3%a0%eb%a5%bc%20%ec%93%b4%eb%8b%a4.%0a%ec%98%a4%eb%8a%98%201%ec%8b%9c%ea%b0%84%2030%eb%b6%84%eb%8f%99%ec%95%88%20%ec%9c%a0%ed%8a%9c%eb%b8%8c%20%ed%94%84%eb%a6%ac%eb%af%b8%ec%97%84%20%ea%b2%b0%ec%a0%9c%eb%a5%bc%20%ec%8b%9c%eb%8f%84%ed%95%98%eb%8b%a4%ea%b0%80%20%ed%99%94%ea%b0%80%eb%82%98%ec%84%9c%20%ea%b2%b0%ea%b5%ad%ec%9d%80%20%ea%b3%84%ec%a0%95%ec%9d%84%20%ec%83%88%eb%a1%9c%20%ed%8c%a0%eb%8b%a4.%20%ea%b0%9c%eb%b0%9c%ec%9a%a9%20%ea%b3%84%ec%a0%95%ea%b3%bc%20%ec%82%ac%ec%a0%81%20%ea%b3%84%ec%a0%95%ec%9d%84%20%eb%b6%84%eb%a6%ac%ed%95%a0%20%ed%95%84%ec%9a%94%ea%b0%80%20%ec%9e%88%ea%b8%b4%20%ed%95%98%eb%8b%88%20%ea%b2%b8%ec%82%ac%ea%b2%b8%ec%82%ac%20%ed%95%9c%eb%8b%a4%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%9c%eb%8b%a4.%0a%28%eb%ad%90%20%ea%b7%b8%eb%9e%98%eb%8f%84%20%ec%98%88%ec%a0%84%20%ea%b3%84%ec%a0%95%ec%97%90%ec%84%9c%20%ea%b2%b0%ec%a0%9c%eb%ac%b8%ec%a0%9c%20%eb%8b%a4%20%ec%82%ac%eb%9d%bc%ec%a7%80%eb%a9%b4%20%eb%8b%a4%ec%8b%9c%20%eb%8f%8c%ec%95%84%ea%b0%80%ec%95%bc%ec%a7%80%29%0a%ec%a7%80%ea%b8%88%ec%9d%80%20%ec%b9%b4%ec%b9%b4%ec%98%a4%20%ed%8e%98%ec%9d%b4%eb%a1%9c%20%ec%97%b0%ea%b2%b0%eb%90%98%ec%96%b4%20%ec%9e%88%eb%8b%a4.%0a%0a%ec%b5%9c%ea%b7%bc%ec%97%90%20%ec%99%84%ec%9a%b0%ec%97%90%ea%b2%8c%ec%84%9c%20%ec%97%b0%eb%9d%bd%ec%9d%b4%20%ec%99%94%eb%8b%a4%20gcp%20%ec%84%a4%ec%a0%95%ed%95%b4%ec%84%9c%20ubuntu%20server%20%ec%97%90%ec%84%9c%20%ec%9e%91%ec%97%85%ed%95%98%eb%8a%90%eb%9d%bc%20vim%20%ec%82%ac%ec%9a%a9%eb%b2%95%ea%b3%bc%20%ea%b4%80%eb%a0%a8%eb%90%9c%20%ec%b9%b4%ed%86%a1%ec%9d%b4%ec%98%80%eb%8b%a4.%20%ea%b7%b8%eb%9f%ad%ec%a0%80%eb%9f%ad%20%ec%9e%98%ec%82%b4%ea%b3%a0%20%ec%9e%88%eb%8a%94%20%ea%b2%83%20%ea%b0%99%eb%8b%a4.%0a%0a%ec%98%81%ed%99%94%20%eb%8f%99%ec%95%84%eb%a6%ac%ec%97%90%ec%84%9c%20%eb%b4%84%eb%82%a0%ec%9d%80%20%ea%b0%84%eb%8b%a4%20%eb%a5%bc%20%ec%8b%9c%ec%b2%ad%ed%96%88%eb%8b%a4.%20%ec%9d%b4%eb%9f%b0%eb%a5%98%ec%9d%98%20%ec%98%81%ed%99%94%eb%8a%94%20%ec%98%81%20%eb%a7%9e%ec%a7%80%20%ec%95%8a%eb%8a%94%20%ea%b2%83%20%ea%b0%99%eb%8b%a4.%20%eb%81%9d%eb%a7%9b%ec%9d%b4%20%ec%a2%8b%ec%a7%80%eb%8a%94%20%ec%95%8a%ec%95%98%eb%8b%a4.%0a%0a%ec%95%84%ec%a7%81%eb%8f%84%20%ea%b2%8c%ec%9e%84%ec%9c%bc%eb%a1%9c%eb%8a%94%20%eb%a7%88%ed%81%ac%eb%a5%bc%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%20%ec%9e%bc%eb%af%bc%ec%9d%b4%20%ea%b0%99%ea%b2%a0%ec%a7%80%eb%a7%8c%20%ec%9e%ac%eb%b0%8b%eb%8b%a4.%0a%0a%ec%9a%b4%eb%8f%99%ec%9d%84%20%ec%8b%9c%ec%9e%91%ed%95%98%eb%8b%88%205%ea%b0%9c%ec%9b%94%20%ec%a0%95%eb%8f%84%20%eb%90%98%eb%8b%88%20%eb%82%98%eb%a6%84%20%ed%84%b1%ea%b1%b8%ec%9d%b4%eb%8f%84%20%ea%b7%b8%eb%9f%ad%ec%a0%80%eb%9f%ad%20%ed%95%98%ea%b2%8c%20%eb%90%98%ec%97%88%eb%8b%a4.%20%ec%9d%b8%eb%b0%94%eb%94%94%eb%a5%bc%20%ec%b8%a1%ec%a0%95%ed%95%b4%ec%84%9c%20%ec%96%b4%eb%8a%90%ec%a0%95%eb%8f%84%eb%a1%9c%20%eb%8d%94%20%ec%97%b4%ec%8b%ac%ed%9e%88%20%ed%95%b4%ec%95%bc%ed%95%98%eb%8a%94%ec%a7%80%20%ec%95%8c%ec%95%84%eb%b3%b4%ea%b3%a0%20%ec%8b%b6%ec%97%88%eb%8a%94%eb%8d%b0,%20%eb%a7%a4%eb%b2%88%20%ea%b0%88%eb%95%8c%eb%a7%88%eb%8b%a4%20%eb%8b%b4%eb%8b%b9%20%ec%9d%98%ec%82%ac%ea%b0%80%20%ec%97%86%ec%96%b4%ec%84%9c%20%eb%aa%bb%ec%9f%80%eb%8b%a4.%20%eb%8b%a4%ec%9d%8c%ec%97%90%20%eb%8b%a4%ec%8b%9c%20%ea%b0%80%ec%84%9c%20%ec%9e%ac%eb%b3%bc%eb%a0%a4%ea%b3%a0%20%ed%95%9c%eb%8b%a4.%0a%ec%95%84%ec%b0%b8,%20%ed%94%84%eb%a1%9c%ed%8b%b4%eb%8f%84%20%ec%83%80%eb%8b%a4.%20%28%ec%95%84%ec%a7%81%20%eb%b0%b0%ec%86%a1%ec%9d%b4%20%ec%95%88%ec%98%a4%ea%b8%b4%20%ed%96%88%ec%a7%80%eb%a7%8c%29%0a%0a%ec%a1%b0%ea%b8%88%20%eb%8d%94%20%ec%97%ac%ec%9c%a0%eb%a5%bc%20%ea%b0%80%ec%a7%80%eb%a9%b4%ec%84%9c%20%ec%82%b4%ec%95%84%eb%8f%84%20%eb%90%98%eb%82%98%20%ec%8b%b6%eb%8b%a4%ea%b0%80%eb%8f%84%20%ec%97%b4%ec%8b%ac%ed%9e%88%20%ed%95%b4%ec%95%bc%eb%90%9c%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%98%ea%b2%8c%20%eb%90%9c%eb%8b%a4.%20%ec%a1%b0%ea%b8%88%20%eb%8d%94%20%ec%b7%a8%eb%af%b8%eb%a5%bc%20%ea%b0%80%ec%a7%80%eb%8a%94%ea%b2%8c%20%ec%a2%8b%ec%9d%84%20%ea%b1%b0%20%ea%b0%99%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>오늘 공부는 이미 글러먹었으니 회고를 쓴다.
오늘 1시간 30분동안 유튜브 프리미엄 결제를 시도하다가 화가나서 결국은 계정을 새로 팠다. 개발용 계정과 사적 계정을 분리할 필요가 있긴 하니 겸사겸사 한다라고 생각한다.
(뭐 그래도 예전 계정에서 결제문제 다 사라지면 다시 돌아가야지)
지금은 카카오 페이로 연결되어 있다.

최근에 완우에게서 연락이 왔다 gcp 설정해서 ubuntu server 에서 작업하느라 vim 사용법과 관련된 카톡이였다. 그럭저럭 잘살고 있는 것 같다.

영화 동아리에서 봄날은 간다 를 시청했다. 이런류의 영화는 영 맞지 않는 것 같다. 끝맛이 좋지는 않았다.

아직도 게임으로는 마크를 하고 있다. 잼민이 같겠지만 재밋다.

운동을 시작하니 5개월 정도 되니 나름 턱걸이도 그럭저럭 하게 되었다. 인바디를 측정해서 어느정도로 더 열심히 해야하는지 알아보고 싶었는데, 매번 갈때마다 담당 의사가 없어서 못쟀다. 다음에 다시 가서 재볼려고 한다.
아참, 프로틴도 샀다. (아직 배송이 안오긴 했지만)

조금 더 여유를 가지면서 살아도 되나 싶다가도 열심히 해야된다고 생각하게 된다. 조금 더 취미를 가지는게 좋을 거 같다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h3 id="공부-측면">공부 측면&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%9d%b4%eb%b2%88%20%ed%9a%8c%ea%b3%a0%20%ec%82%ac%ec%9d%b4%ed%81%b4%ec%97%90%eb%8a%94%20%ed%95%98%ea%b3%a0%20%ec%98%81%ec%96%b4%20%ea%b3%b5%eb%b6%80%eb%a5%bc%20%ec%a1%b0%ea%b8%88%eb%8d%94%20%ec%97%b4%ec%8b%ac%ed%9e%88%20%eb%8b%a4%ec%8b%9c%20%ec%8b%9c%ec%9e%91%ed%96%88%eb%8b%a4.%20%ec%a3%bc%eb%a1%9c%20%eb%8b%a8%ec%96%b4%20%ec%9c%84%ec%a3%bc%eb%a1%9c%20%ed%95%98%ea%b3%a0%20%ec%9e%88%ea%b3%a0%20%ec%a7%80%ea%b8%88%ec%9d%80%20%ec%98%a4%eb%94%94%ec%98%a4%eb%b6%81%ec%9d%84%20%ec%95%8c%ec%95%84%eb%b3%b4%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%20TED%eb%8a%94%20%ec%95%84%eb%ac%b4%eb%9e%98%eb%8f%84%20script%20%ea%b0%80%20%ec%97%86%eb%8b%a4%eb%b3%b4%eb%8b%88%20%eb%8b%a8%ec%96%b4%20%ed%95%98%eb%82%98%ed%95%98%eb%82%98%eb%a5%bc%20%eb%93%a3%ea%b8%b0%ec%97%90%eb%8a%94%20%eb%82%98%ec%81%98%ec%a7%80%20%ec%95%8a%ec%a7%80%eb%a7%8c%20%ec%a0%84%ec%b2%b4%ec%a0%81%ec%9d%b8%20%eb%9c%bb%ec%9d%b4%eb%82%98%20%ec%86%8d%eb%8b%b4%20%ea%b0%99%ec%9d%80%ea%b1%b8%20%ec%b2%b4%eb%93%9d%ed%95%98%ea%b8%b0%ec%97%90%eb%8a%94%20%ec%a0%81%ed%95%a9%ed%95%98%ec%a7%80%20%ec%95%8a%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%96%88%eb%8b%a4.%0a%ea%b7%b8%eb%a6%ac%ea%b3%a0%20Endurable...%20%eb%85%bc%eb%ac%b8%20%ed%92%80%eb%84%a4%ec%9e%84%ec%9d%80%20%ea%b9%8c%eb%a8%b9%ec%97%88%ec%a7%80%eb%a7%8c%20B&amp;#43;%20tree%20%eb%a5%bc%20mysql%20%ec%97%90%ec%84%9c%20%ea%b5%ac%ed%98%84%ed%95%b4%eb%b3%b4%eb%a0%a4%ea%b3%a0%20mysql%20storage%20engine%20%ec%9d%84%20%ea%b3%b5%eb%b6%80%ed%96%88%eb%8b%a4.%20%eb%ac%bc%eb%a1%a0%20%eb%a7%98%ec%b2%98%eb%9f%bc%ec%9d%80%20%ec%95%88%eb%90%ac%eb%8b%a4.%20storage%20%ea%b0%80%20block%20io%eb%a5%bc%20%ed%95%98%eb%8a%94%eb%8d%b0,%20%ea%b2%b0%ea%b5%ad%20%eb%85%bc%eb%ac%b8%20%ec%9e%90%ec%b2%b4%eb%8a%94%20byte%20addressable%20%ec%9d%84%20%ea%b8%b0%eb%b0%98%ec%9c%bc%eb%a1%9c%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4%eb%b3%b4%eb%8b%88,%20%ec%86%8d%eb%8f%84%eb%a5%bc%20%ed%96%a5%ec%83%81%20%ec%8b%9c%ec%bc%9c%ec%84%9c%20%ea%b5%ac%ed%98%84%ed%95%98%ea%b8%b0%eb%8a%94%20%ec%96%b4%eb%a0%a4%ec%9a%b8%ea%ba%bc%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%96%88%eb%8b%a4.%20%ec%98%a4%ed%9e%88%eb%a0%a4%20byte%20%eb%8b%a8%ec%9c%84%eb%a1%9c%20%ec%93%b0%ea%b8%b0%eb%a5%bc%20%ed%95%98%eb%8b%88%20%ec%86%8d%eb%8f%84%20%ec%9e%90%ec%b2%b4%eb%8a%94%20%eb%8d%94%20%eb%8a%90%eb%a0%a4%ec%a7%88%ec%88%98%20%ec%9e%88%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%96%88%eb%8b%a4.%20%ea%b7%b8%eb%a6%ac%ea%b3%a0%20%ec%9d%b4%eb%b2%88%20%ea%b3%b5%eb%b6%80%eb%a5%bc%20%ed%86%b5%ed%95%b4%ec%84%9c%20storage%20%ec%97%90%20%eb%8c%80%ed%95%b4%ec%84%9c%20%ec%a0%9c%eb%8c%80%eb%a1%9c%20%ea%b3%b5%eb%b6%80%eb%a5%bc%20%eb%8b%a4%ec%8b%9c%20%ed%95%b4%ec%95%bc%eb%90%9c%eb%8b%a4%eb%8a%94%20%ea%b2%83%ec%9d%84%20%ec%95%8c%ea%b2%8c%20%eb%90%98%ec%97%88%ea%b3%a0%20simplessd%20%eb%a5%bc%20documentation%ec%9d%84%20%ec%9d%bd%ea%b8%b0%20%ec%8b%9c%ec%9e%91%ed%96%88%eb%8b%a4.%20%ec%9d%bd%ec%9c%bc%eb%a9%b4%ec%84%9c%20simplessd%20%eb%8a%94%20%ea%b2%b0%ea%b5%ad%20%20%ec%8b%9c%eb%ae%ac%eb%a0%88%ec%9d%b4%ed%84%b0%eb%8b%88%ea%b9%8c,%20%ec%8b%a4%ec%a0%9c%20linux%20code%20%ec%97%90%20%ed%95%b4%eb%8b%b9%ed%95%98%eb%8a%94%20%eb%b6%80%eb%b6%84%ec%9d%b4%20%ec%9e%88%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%96%88%ea%b3%a0%20linux%20kernel%20%ec%bd%94%eb%93%9c%ec%99%80%20%eb%b9%84%ea%b5%90%ed%95%b4%ea%b0%80%eb%a9%b4%ec%84%9c%20%ec%9d%bd%ec%96%b4%eb%b3%b4%ea%b8%b0%eb%a1%9c%20%ed%96%88%eb%8b%a4.%20%ec%9d%b4%eb%b2%88%ec%a3%bc%ec%97%90%eb%8a%94%20workqueue%20%ec%99%80%20scsi%20%ec%97%90%20%eb%8c%80%ed%95%b4%20%ea%b3%b5%eb%b6%80%ed%96%88%eb%8b%a4.%0a%eb%8c%80%ec%b6%a9%20%ea%b3%b5%eb%b6%80%eb%8a%94%20%ec%9d%b4%eb%a0%87%ea%b2%8c%20%eb%90%98%ea%b0%80%ea%b3%a0%20%ec%a0%95%ec%9a%b0%ec%97%90%ea%b2%8c%20aws42%28%eb%b8%94%eb%a1%9c%ea%b7%b8%ec%97%90%20%ea%b8%80%ec%93%b0%ea%b8%b0%20%ed%94%84%eb%a1%9c%ec%a0%9d%ed%8a%b8%29%eb%9d%bc%eb%8a%94%20%ed%8e%98%ec%9d%b4%ec%a7%80%ec%97%90%20%ea%b8%80%ec%9d%84%20%eb%82%a8%ea%b8%b0%eb%8b%88%28zeropage%20wiki%29,%20%ec%97%b0%eb%9d%bd%ec%9d%b4%20%ec%99%94%eb%8b%a4.%20%ec%9d%bc%eb%8b%a8%20%ed%95%b8%eb%93%9c%ed%8f%b0%20%ec%8b%9c%ea%b0%84%ec%9d%b4%20%eb%ac%b8%ec%a0%9c%ea%b0%80%20%ec%9e%88%ec%96%b4%ec%84%9c%20%ec%a3%bc%eb%a7%90%ec%97%90%20%eb%8b%a4%ec%8b%9c%20%ec%97%b0%eb%9d%bd%ed%95%98%ea%b8%b0%eb%a1%9c%20%ed%96%88%eb%8b%a4.%0a%0a%ec%a7%80%eb%82%9c%eb%b2%88%20%ed%9c%b4%ea%b0%80%eb%95%8c%20%ec%84%9c%eb%b2%84%ec%84%b8%ed%8c%85%28wol%20%ec%9d%b4%eb%82%98,%20ubuntu%20server%20%eb%a1%9c%20os%20%eb%b3%80%ea%b2%bd%20%eb%93%b1%29%ec%9d%b4%20%ec%a7%80%ea%b8%88%20%ed%81%b0%20%eb%8f%84%ec%9b%80%ec%9d%b4%20%eb%90%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%20%ec%a7%80%ea%b8%88%20%ec%9e%91%ec%84%b1%ed%95%98%eb%8a%94%20%ea%b2%83%eb%8f%84%20%ea%b7%b8%eb%a0%87%ea%b2%8c%20%ec%84%b8%ed%8c%85%ed%95%b4%eb%91%94%20%ed%99%98%ea%b2%bd%ec%97%90%ec%84%9c%20%ec%9e%91%ec%84%b1%ed%95%98%eb%8a%94%20%ea%b1%b0%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>이번 회고 사이클에는 하고 영어 공부를 조금더 열심히 다시 시작했다. 주로 단어 위주로 하고 있고 지금은 오디오북을 알아보고 있다. TED는 아무래도 script 가 없다보니 단어 하나하나를 듣기에는 나쁘지 않지만 전체적인 뜻이나 속담 같은걸 체득하기에는 적합하지 않다고 생각했다.
그리고 Endurable... 논문 풀네임은 까먹었지만 B&amp;#43; tree 를 mysql 에서 구현해보려고 mysql storage engine 을 공부했다. 물론 맘처럼은 안됬다. storage 가 block io를 하는데, 결국 논문 자체는 byte addressable 을 기반으로 하고 있다보니, 속도를 향상 시켜서 구현하기는 어려울꺼라고 생각했다. 오히려 byte 단위로 쓰기를 하니 속도 자체는 더 느려질수 있다고 생각했다. 그리고 이번 공부를 통해서 storage 에 대해서 제대로 공부를 다시 해야된다는 것을 알게 되었고 simplessd 를 documentation을 읽기 시작했다. 읽으면서 simplessd 는 결국 시뮬레이터니까, 실제 linux code 에 해당하는 부분이 있다고 생각했고 linux kernel 코드와 비교해가면서 읽어보기로 했다. 이번주에는 workqueue 와 scsi 에 대해 공부했다.
대충 공부는 이렇게 되가고 정우에게 aws42(블로그에 글쓰기 프로젝트)라는 페이지에 글을 남기니(zeropage wiki), 연락이 왔다. 일단 핸드폰 시간이 문제가 있어서 주말에 다시 연락하기로 했다.

지난번 휴가때 서버세팅(wol 이나, ubuntu server 로 os 변경 등)이 지금 큰 도움이 되고 있다. 지금 작성하는 것도 그렇게 세팅해둔 환경에서 작성하는 거다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="회고">회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%9d%b4%eb%b2%88%20%ed%9a%8c%ea%b3%a0%20%ec%82%ac%ec%9d%b4%ed%81%b4%ec%97%90%eb%8a%94%20%ea%bc%bc%ea%bc%bc%ed%9e%88%20%ec%82%b4%eb%a0%a4%ea%b3%a0%20%eb%85%b8%eb%a0%a5%ed%96%88%eb%8b%a4.%20%ec%a7%80%eb%82%9c%eb%b2%88%eb%b3%b4%eb%8b%a4%eb%8a%94%20%ec%97%ac%eb%9f%ac%20%ec%b8%a1%eb%a9%b4%ec%97%90%ec%84%9c%20%eb%82%98%ec%9d%80%ea%b2%83%20%ea%b0%99%eb%8b%a4.%20%ec%95%84%eb%ac%b4%eb%9e%98%eb%8f%84%20%ed%85%8c%eb%b8%94%eb%a6%bf%20%eb%b0%98%ec%b6%9c%ec%9d%98%20%ec%b6%a9%ea%b2%a9%ec%9c%bc%eb%a1%9c%20%ea%b3%b5%eb%b6%80%eb%a5%bc%20%ec%a2%8b%ea%b2%8c%20%eb%90%9c%20%ea%b2%83%20%eb%95%8c%eb%ac%b8%ec%97%90%20%ec%a7%80%eb%82%9c%20%ec%82%ac%ec%9d%b4%ed%81%b4%ec%9d%b4%20%ec%8d%a9%20%ec%a2%8b%ec%a7%80%20%ec%95%8a%ec%95%98%eb%8d%98%20%ea%b2%83%ec%9d%98%20%eb%b0%98%eb%93%b1%20%ed%9a%a8%ea%b3%bc%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%9c%eb%8b%a4.%0a%eb%94%b1%ed%9e%88%20%ed%81%ac%ea%b2%8c%20%eb%8a%90%eb%82%80%ea%b1%b0%eb%82%98%20%ed%9b%84%ed%9a%8c%ed%95%98%ea%b1%b0%eb%82%98%20%ed%95%98%eb%8a%94%20%ec%9d%bc%ec%9d%80%20%ec%97%86%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%9c%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>이번 회고 사이클에는 꼼꼼히 살려고 노력했다. 지난번보다는 여러 측면에서 나은것 같다. 아무래도 테블릿 반출의 충격으로 공부를 좋게 된 것 때문에 지난 사이클이 썩 좋지 않았던 것의 반등 효과라고 생각한다.
딱히 크게 느낀거나 후회하거나 하는 일은 없다고 생각한다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="할일-목록">할일 목록&lt;/h2>
&lt;ul>
&lt;li>생각해보니 할일이라는게 회고때마다 생각날꺼 같아서 적은거 중장기인 목표들을 todo list에 적자.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 오디오북 듣기 시작하기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 구글 결제 계정 문제 해결 (2020-06-19 해결)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 인바디 측정하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> simplessd host 부분 끝내기&lt;/li>
&lt;/ul></description></item><item><title>block layer</title><link>https://minuk.dev/wiki/block-layer/</link><pubDate>Tue, 16 Jun 2020 19:14:58 +0900</pubDate><guid>https://minuk.dev/wiki/block-layer/</guid><description>&lt;h2 id="block-layer">Block Layer&lt;/h2>
&lt;ul>
&lt;li>Linux 에서 device에 입출력 할때 request를 처리하는 layer&lt;/li>
&lt;li>&lt;a href="https://lwn.net/Articles/736534/">https://lwn.net/Articles/736534/&lt;/a>&lt;/li>
&lt;li>&lt;code>/dev&lt;/code> 에 있는 block device 에 접근할때 사용&lt;/li>
&lt;/ul>
&lt;h2 id="함수-호출-순서">함수 호출 순서&lt;/h2>
&lt;ul>
&lt;li>출처 : &lt;a href="http://egloos.zum.com/moonkh/v/4841748">http://egloos.zum.com/moonkh/v/4841748&lt;/a>&lt;/li>
&lt;li>&lt;code>read()&lt;/code>, &lt;code>write()&lt;/code> -&amp;gt; bio 구조체를 생성하고 필요한 정보를 할당 -&amp;gt; &lt;code>submit_bio()&lt;/code> 호출 -&amp;gt; &lt;code>generic_make_request()&lt;/code> 호출 - bio 구조체를 I/O 스케줄러에 등록 -&amp;gt; &lt;code>_make_request()&lt;/code> 호출, bio 를 request 로 만들고 request_queue 에 넣는다.&lt;/li>
&lt;/ul>
&lt;h3 id="submit_bio-구현부">&lt;code>submit_bio()&lt;/code> 구현부&lt;/h3>
&lt;ul>
&lt;li>&lt;code>block/blk-core.c&lt;/code>&lt;/li>
&lt;li>bootlin 링크 : &lt;a href="https://elixir.bootlin.com/linux/latest/source/block/blk-core.c#L1139">https://elixir.bootlin.com/linux/latest/source/block/blk-core.c#L1139&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="generic_make_request">&lt;code>generic_make_request()&lt;/code>&lt;/h3>
&lt;ul>
&lt;li>&lt;code>blcok/blk-core.c&lt;/code>&lt;/li>
&lt;li>bootlin 링크 : &lt;a href="https://elixir.bootlin.com/linux/latest/source/block/blk-core.c#L990">https://elixir.bootlin.com/linux/latest/source/block/blk-core.c#L990&lt;/a>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title>workqueue</title><link>https://minuk.dev/wiki/workqueue/</link><pubDate>Mon, 15 Jun 2020 20:14:50 +0900</pubDate><guid>https://minuk.dev/wiki/workqueue/</guid><description>&lt;h2 id="참조-사이트">참조 사이트&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://m.blog.naver.com/PostView.nhn?blogId=leojesus&amp;amp;logNo=80172478497&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F">https://m.blog.naver.com/PostView.nhn?blogId=leojesus&amp;amp;logNo=80172478497&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F&lt;/a>&lt;/li>
&lt;li>workqueue 사용법 : &lt;a href="https://selfish-developer.com/entry/workqueue-%EC%82%AC%EC%9A%A9%EB%B2%95">https://selfish-developer.com/entry/workqueue-%EC%82%AC%EC%9A%A9%EB%B2%95&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="workqueue">workqueue&lt;/h2>
&lt;ul>
&lt;li>지연처리를 하기 위해서 사용하는 자료구조 (다른 걸로는 SOFTIRQ, TASKLET 이 있음)&lt;/li>
&lt;/ul>
&lt;h2 id="사용방법">사용방법&lt;/h2>
&lt;ul>
&lt;li>출처 1: &lt;a href="http://egloos.zum.com/rousalome/v/9982311">http://egloos.zum.com/rousalome/v/9982311&lt;/a>&lt;/li>
&lt;li>출처 2: &lt;a href="http://egloos.zum.com/rousalome/v/9982570">http://egloos.zum.com/rousalome/v/9982570&lt;/a>&lt;/li>
&lt;li>&lt;code>INIT_WORK()&lt;/code> 나 &lt;code>DECLARE_WORK()&lt;/code>를 사용해서 초기화
&lt;ul>
&lt;li>&lt;code>INIT_WORK()&lt;/code> : 커널이 실제로 &lt;code>INIT_WORK()&lt;/code> 함수를 실행할때 워크를 초기화&lt;/li>
&lt;li>&lt;code>DELCARE_WORK()&lt;/code> : 커널이 컴파일 될때 세부정보가 포함된 전역 변수 생성&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="INIT_WORK%28&amp;amp;work,%20handler%29;%0a%0aschedule_work%28&amp;amp;work%29;%20/*%20enqueue%20work%20into%20system%20queue%20*/%0aqueue_work%28&amp;amp;workqueue,%20&amp;amp;work%29%20/*%20enqueue%20work%20*/%0aqueue_work_on%28cpu,%20&amp;amp;workqueue,%20&amp;amp;work%29%20/*%20enqueue%20work%20with%20exception%20handling%20*/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">INIT_WORK&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>work, handler);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">schedule_work&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>work); &lt;span style="color:#75715e">/* enqueue work into system queue */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">queue_work&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>workqueue, &lt;span style="color:#f92672">&amp;amp;&lt;/span>work) &lt;span style="color:#75715e">/* enqueue work */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">queue_work_on&lt;/span>(cpu, &lt;span style="color:#f92672">&amp;amp;&lt;/span>workqueue, &lt;span style="color:#f92672">&amp;amp;&lt;/span>work) &lt;span style="color:#75715e">/* enqueue work with exception handling */&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="같이보기-좋은-자료">같이보기 좋은 자료&lt;/h2>
&lt;ul>
&lt;li>[[delayed_work]]&lt;/li>
&lt;/ul></description></item><item><title>nvme</title><link>https://minuk.dev/wiki/nvme/</link><pubDate>Mon, 15 Jun 2020 20:13:59 +0900</pubDate><guid>https://minuk.dev/wiki/nvme/</guid><description>&lt;h1 id="시작">시작&lt;/h1>
&lt;ul>
&lt;li>아무것도 모르고 SSD 에 대해서 아는거라곤, 개발자를 위한 SSD 라는 카카오에서 올린 글(&lt;a href="https://tech.kakao.com/2016/07/13/coding-for-ssd-part-1/">https://tech.kakao.com/2016/07/13/coding-for-ssd-part-1/&lt;/a>) 와 [[simplessd]] 논문만 보고 무턱대고 시작한 공부&lt;/li>
&lt;/ul>
&lt;h2 id="linux-nvme-공부">Linux NVMe 공부&lt;/h2>
&lt;ul>
&lt;li>[[workqueue]]&lt;/li>
&lt;li>[[block layer]]&lt;/li>
&lt;li>[[IO mapping]]&lt;/li>
&lt;li>[[blk_mq]]&lt;/li>
&lt;li>[[IOMMU]]&lt;/li>
&lt;li>[[SGL]]{Scatter-Gatter List}&lt;/li>
&lt;/ul>
&lt;h2 id="nvme-자료구조">nvme 자료구조&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://testkernel.tistory.com/3">https://testkernel.tistory.com/3&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="의문점">의문점&lt;/h2>
&lt;ul>
&lt;li>linux/drivers/nvme/host 에 있는 nvme 함수들은 어떻게 호출되는가? -&amp;gt; scsi interface 를 사용해서&lt;/li>
&lt;li>-&amp;gt; 그러면 어디에 있지? source code를 찾아보고 싶다. -&amp;gt; 일단 request 는 찾았다. block device 에 접근 하려면 (실제로 block device는 아닐수도 있지만 SSD를 일단 Block 으로 사용하고 FTL 로 처리?할테니까)&lt;/li>
&lt;li>-&amp;gt; 흠? 그런데 찾아보니까 /include/nvme.h 라는 파일이 있는데? 이건 만약 nvme 가 단순히 scsi 로만 처리된다면 굳이 맨 바깥쪽 include 에 있을 필요는 없는거 아닌가? 이건 마친 nvme 가 단독으로 interface를 가지고 있는거 같은데?&lt;/li>
&lt;/ul>
&lt;h3 id="중간-결론">중간 결론&lt;/h3>
&lt;ul>
&lt;li>interface 마다 module 을 만들어 놓고 어떤 interface 를 사용하는지 KConfig 에 정의 되어있다.
&lt;ul>
&lt;li>&lt;code>BLK_DEV_NVME&lt;/code> : block device 로 생각하고 접근&lt;/li>
&lt;li>&lt;code>NVME_MULTIPATH&lt;/code> : NVMe multipath support&lt;/li>
&lt;li>&lt;code>NVME_HWMON&lt;/code> : hardware monitoring&lt;/li>
&lt;li>&lt;code>NVME_FABRICS&lt;/code> : 사용 X&lt;/li>
&lt;li>&lt;code>NVME_RDMA&lt;/code> : NVM Express over Fabrics RDMA host driver&lt;/li>
&lt;li>&lt;code>NVME_FC&lt;/code> : NVM Express over Fabrics FC host driver&lt;/li>
&lt;li>&lt;code>NVME_TCP&lt;/code> : NVM Express over Fabrics TCP host driver&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>일단 나는 block layer를 통하는 path 를 공부하는게 목표 : 이럴 경우 PCI 와 NVMe Core 부분만 보면 된다.&lt;/li>
&lt;/ul>
&lt;h4 id="pci-driver-structure-실제로-module-의-interface">PCI driver structure (실제로 module 의 interface)&lt;/h4>
&lt;ul>
&lt;li>참고 : PCI driver structure 설명 : &lt;a href="https://wiki.kldp.org/wiki.php/PCI%20Drivers">https://wiki.kldp.org/wiki.php/PCI%20Drivers&lt;/a>&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="static%20struct%20pci_driver%20nvme_driver%20=%20%7b%0a%09.name%09%09=%20%22nvme%22,%0a%09.id_table%09=%20nvme_id_table,%0a%09.probe%09%09=%20nvme_probe,%0a%09.remove%09%09=%20nvme_remove,%0a%09.shutdown%09=%20nvme_shutdown,%0a#ifdef%20CONFIG_PM_SLEEP%0a%09.driver%09%09=%20%7b%0a%09%09.pm%09=%20&amp;amp;nvme_dev_pm_ops,%0a%09%7d,%0a#endif%0a%09.sriov_configure%20=%20pci_sriov_configure_simple,%0a%09.err_handler%09=%20&amp;amp;nvme_err_handler,%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> pci_driver nvme_driver &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.name		&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;nvme&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.id_table	&lt;span style="color:#f92672">=&lt;/span> nvme_id_table,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.probe		&lt;span style="color:#f92672">=&lt;/span> nvme_probe,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.remove		&lt;span style="color:#f92672">=&lt;/span> nvme_remove,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.shutdown	&lt;span style="color:#f92672">=&lt;/span> nvme_shutdown,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifdef CONFIG_PM_SLEEP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	.driver		&lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		.pm	&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>nvme_dev_pm_ops,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>	.sriov_configure &lt;span style="color:#f92672">=&lt;/span> pci_sriov_configure_simple,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	.err_handler	&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>nvme_err_handler,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>하나씩 보면 &lt;code>name&lt;/code> 은 driver 이름, &lt;code>id_table&lt;/code> : driver 가 처리하는 id table 의 포인터&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="static%20const%20struct%20pci_device_id%20nvme_id_table[]%20=%20%7b%0a%09%7b%20PCI_VDEVICE%28INTEL,%200x0953%29,%0a%09%09.driver_data%20=%20NVME_QUIRK_STRIPE_SIZE%20%7c%0a%09%09%09%09NVME_QUIRK_DEALLOCATE_ZEROES,%20%7d,%0a%09%7b%20PCI_VDEVICE%28INTEL,%200x0a53%29,%0a%09%09.driver_data%20=%20NVME_QUIRK_STRIPE_SIZE%20%7c%0a%09%09%09%09NVME_QUIRK_DEALLOCATE_ZEROES,%20%7d,%0a%09%7b%20PCI_VDEVICE%28INTEL,%200x0a54%29,%0a%09%09.driver_data%20=%20NVME_QUIRK_STRIPE_SIZE%20%7c%0a%09%09%09%09NVME_QUIRK_DEALLOCATE_ZEROES,%20%7d,%0a%09%7b%20PCI_VDEVICE%28INTEL,%200x0a55%29,%0a%09%09.driver_data%20=%20NVME_QUIRK_STRIPE_SIZE%20%7c%0a%09%09%09%09NVME_QUIRK_DEALLOCATE_ZEROES,%20%7d,%0a%09%7b%20PCI_VDEVICE%28INTEL,%200xf1a5%29,%09/*%20Intel%20600P/P3100%20*/%0a%09%09.driver_data%20=%20NVME_QUIRK_NO_DEEPEST_PS%20%7c%0a%09%09%09%09NVME_QUIRK_MEDIUM_PRIO_SQ%20%7c%0a%09%09%09%09NVME_QUIRK_NO_TEMP_THRESH_CHANGE%20%7d,%0a%20%20/*%20%ec%9d%b4%ed%95%98%20%ec%83%9d%eb%9e%b5%20*/%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> pci_device_id nvme_id_table[] &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{ &lt;span style="color:#a6e22e">PCI_VDEVICE&lt;/span>(INTEL, &lt;span style="color:#ae81ff">0x0953&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		.driver_data &lt;span style="color:#f92672">=&lt;/span> NVME_QUIRK_STRIPE_SIZE &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				NVME_QUIRK_DEALLOCATE_ZEROES, },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{ &lt;span style="color:#a6e22e">PCI_VDEVICE&lt;/span>(INTEL, &lt;span style="color:#ae81ff">0x0a53&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		.driver_data &lt;span style="color:#f92672">=&lt;/span> NVME_QUIRK_STRIPE_SIZE &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				NVME_QUIRK_DEALLOCATE_ZEROES, },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{ &lt;span style="color:#a6e22e">PCI_VDEVICE&lt;/span>(INTEL, &lt;span style="color:#ae81ff">0x0a54&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		.driver_data &lt;span style="color:#f92672">=&lt;/span> NVME_QUIRK_STRIPE_SIZE &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				NVME_QUIRK_DEALLOCATE_ZEROES, },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{ &lt;span style="color:#a6e22e">PCI_VDEVICE&lt;/span>(INTEL, &lt;span style="color:#ae81ff">0x0a55&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		.driver_data &lt;span style="color:#f92672">=&lt;/span> NVME_QUIRK_STRIPE_SIZE &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				NVME_QUIRK_DEALLOCATE_ZEROES, },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	{ &lt;span style="color:#a6e22e">PCI_VDEVICE&lt;/span>(INTEL, &lt;span style="color:#ae81ff">0xf1a5&lt;/span>),	&lt;span style="color:#75715e">/* Intel 600P/P3100 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		.driver_data &lt;span style="color:#f92672">=&lt;/span> NVME_QUIRK_NO_DEEPEST_PS &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				NVME_QUIRK_MEDIUM_PRIO_SQ &lt;span style="color:#f92672">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				NVME_QUIRK_NO_TEMP_THRESH_CHANGE },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* 이하 생략 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>probe&lt;/code> : id 테이블과 매치한 뒤, 아직 다른 드라이버에 의해 처리되지 않은 모든 장치들에 대한 장치 검색 함수의 포인터, 0을 반환하면 driver가 device를 잘인식하고 쓴다는 것(원문은 device가 driver 를 accept 하면 이라고 써져 있는데, 평소 말하듯이 쓰면 이렇게 쓰는게 맞을듯?)&lt;/li>
&lt;/ul>
&lt;h4 id="nvme_probe-함수-nvme_driver-의-probe-부분">&lt;code>nvme_probe&lt;/code> 함수 (&lt;code>nvme_driver&lt;/code> 의 &lt;code>probe&lt;/code> 부분)&lt;/h4>
&lt;h5 id="하는일">하는일&lt;/h5>
&lt;ol>
&lt;li>
&lt;p>NUMA NODE 설정
1-2. &lt;code>dev_to_node&lt;/code> 를 통해서 [[NUMA]] NODE 를 가져온다. (단, &lt;code>CONFIG_NUMA&lt;/code> 가 선언되어 있지 않으면 아무것도 하지 않는다.)
1-3. device 에 numa 노드가 설정되지 않았다면, &lt;code>first_memory_node&lt;/code> 를 가져온다.&lt;/p></description></item><item><title>gem5</title><link>https://minuk.dev/wiki/gem5/</link><pubDate>Wed, 10 Jun 2020 20:12:01 +0900</pubDate><guid>https://minuk.dev/wiki/gem5/</guid><description>&lt;h2 id="짤막한-소개-공식홈페이지">짤막한 소개 (공식홈페이지)&lt;/h2>
&lt;ul>
&lt;li>Learning gem5 gives a prose-heavy introduction to using gem5 for computer architecture research written by Jason Lowe-Power. This is a great resource for junior researchers who plan on using gem5 heavily for a research project.&lt;/li>
&lt;li>오픈소스 시스템 레벨, 및 프로세서 시뮬레이터&lt;/li>
&lt;li>연구할때 하드웨어를 소프트웨어로 가상화 해서 돌려본다.&lt;/li>
&lt;li>Simplessd에서도 이걸 사용한다.&lt;/li>
&lt;/ul></description></item><item><title>simple-ssd</title><link>https://minuk.dev/wiki/simplessd/</link><pubDate>Wed, 10 Jun 2020 19:39:41 +0900</pubDate><guid>https://minuk.dev/wiki/simplessd/</guid><description>&lt;h2 id="새롭게-알게된-것">새롭게 알게된 것&lt;/h2>
&lt;ul>
&lt;li>[[gem5]]&lt;/li>
&lt;/ul>
&lt;h2 id="다운로드">다운로드&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://docs.simplessd.org/en/v2.0.12/instructions/start.html">simplessd 공홈&lt;/a>&lt;/li>
&lt;li>하라는 대로 하면 된다. (FullSystem은 example 을 실행해도 그대로 안되서, 그냥 standalone 을 먼저 봐보기로 했다.)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="문서-읽기">문서 읽기&lt;/h2>
&lt;ul>
&lt;li>그냥 홈페이지에 있는 문서를 읽어보자. 중요하니까 정리해놨겠지&lt;/li>
&lt;/ul>
&lt;h2 id="그림으로-그려보기">그림으로 그려보기&lt;/h2>
&lt;ul>
&lt;li>&lt;img src="https://minuk.dev/wiki/images/simplessd.png" alt="simplessd drawio">&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="host-interface-layer">Host Interface Layer&lt;/h3>
&lt;ul>
&lt;li>HIL 이라고도 불리는 Host Interface Layer에 대한 설명이다.&lt;/li>
&lt;li>HIL 은 host side에 있는 host controller, host controller 에게 추상화된 API를 제공해주는 SSD Interface&lt;/li>
&lt;/ul>
&lt;h4 id="host-controller">Host Controller&lt;/h4>
&lt;ul>
&lt;li>NVMe, SATA and UFS를 구현해 놓았으며, Open-Channel SSD 는 NVMe 를 상속받음.&lt;/li>
&lt;/ul>
&lt;h5 id="host-interface">Host Interface&lt;/h5>
&lt;ul>
&lt;li>&lt;code>hil/nvme/interface.hh&lt;/code> 에 &lt;code>SimpleSSD::DMAInterface&lt;/code>를 상속하여 선언된 &lt;code>SimpleSSD::HIL::NVMe::Interface&lt;/code> 를 보자.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DMAInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DMAInterface() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>DMAInterface() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">dmaRead&lt;/span>(&lt;span style="color:#66d9ef">uint64_t&lt;/span>, &lt;span style="color:#66d9ef">uint64_t&lt;/span>, &lt;span style="color:#66d9ef">uint8_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>, DMAFunction &lt;span style="color:#f92672">&amp;amp;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">dmaWrite&lt;/span>(&lt;span style="color:#66d9ef">uint64_t&lt;/span>, &lt;span style="color:#66d9ef">uint64_t&lt;/span>, &lt;span style="color:#66d9ef">uint8_t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>, DMAFunction &lt;span style="color:#f92672">&amp;amp;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Interface&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> SimpleSSD&lt;span style="color:#f92672">::&lt;/span>DMAInterface {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Controller &lt;span style="color:#f92672">*&lt;/span>pController;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> updateInterrupt(&lt;span style="color:#66d9ef">uint16_t&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">getVendorID&lt;/span>(&lt;span style="color:#66d9ef">uint16_t&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>, &lt;span style="color:#66d9ef">uint16_t&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>DMAInterface&lt;/code> 에서는 Direct Memory Access 를 위해서 &lt;code>dmaRead&lt;/code>, &lt;code>dmaWrite&lt;/code> 를 제공한다.&lt;/li>
&lt;li>&lt;code>updateInterrupt&lt;/code> 는 host의 특정 interrupt vector 에 interrupt를 보낸다.&lt;/li>
&lt;li>&lt;code>getVendorId&lt;/code> 는 NVMe의 &lt;code>Identify Controller&lt;/code>가 vendor Id와 subsystem vendor ID를 필요로 하기 때문에 존재하는 method 이다.&lt;/li>
&lt;/ul>
&lt;h5 id="controller-and-firmware">Controller and Firmware&lt;/h5>
&lt;ul>
&lt;li>NVMe controller/firmware 는 아래 3가지 컴포넌트 (Controller, Subsystem and Namespace)로 구성된다.
&lt;ul>
&lt;li>Controller는 모든 queue 연산(SQ 에서 request 를 읽고, CQ에 request를 쓰고, 인터럽트를 발생시키는)을 담당한다.&lt;/li>
&lt;li>Subsystem은 모든 NVMe의 admin commands를 다루며, Namespace를 제어하고, SSD Layer에 I/O를 실행한다.&lt;/li>
&lt;li>Namespace는 모든 NVMe의 I/O commands 를 다룬다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h6 id="controller">Controller&lt;/h6>
&lt;ul>
&lt;li>
&lt;p>모든 queue 연산을 담당하는 Controller는 &lt;code>hil/nvme/controller.hh&lt;/code>에 &lt;code>SimpleSSD::HIL::NVMe::Controller&lt;/code> 로 정의되어 있다.&lt;/p></description></item><item><title>mmap</title><link>https://minuk.dev/wiki/mmap/</link><pubDate>Fri, 05 Jun 2020 19:52:18 +0900</pubDate><guid>https://minuk.dev/wiki/mmap/</guid><description>&lt;h2 id="map_shared-vs-map_private">&lt;code>MAP_SHARED&lt;/code> vs &lt;code>MAP_PRIVATE&lt;/code>&lt;/h2>
&lt;ul>
&lt;li>이에 관한 내용을 검색해보니 많은 내용들이 나온다.&lt;/li>
&lt;li>그런데 대부분 공유하는 내용이랑 메뉴얼을 참조하라고만 하지 직접적 성능비교는 못찾았다.&lt;/li>
&lt;li>그래서 결국 생각이 미친게 innodb는 빠른 방법 혹은 느리더라도 사용해야할 이유가 있는 방법을 사용할 거다.&lt;/li>
&lt;li>innodb storage engine 코드에서 Fgrep으로 찾아보니,&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20os/os0proc.cc%20*/%0a%20ptr%20=%20mmap%28nullptr,%20size,%20PROT_READ%20%7c%20PROT_WRITE,%20MAP_PRIVATE%20%7c%20OS_MAP_ANON,%0a%20%20%20%20%20%20%20%20%20%20%20%20-1,%200%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* os/os0proc.cc */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ptr &lt;span style="color:#f92672">=&lt;/span> mmap(&lt;span style="color:#66d9ef">nullptr&lt;/span>, size, PROT_READ &lt;span style="color:#f92672">|&lt;/span> PROT_WRITE, MAP_PRIVATE &lt;span style="color:#f92672">|&lt;/span> OS_MAP_ANON,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;p>이 내용을 찾았고, 그래서 &lt;code>MAP_PRIVATE&lt;/code>를 b+-Tree를 만들때 사용하기로 했다.
추가적으로 &lt;code>addr&lt;/code> 를 &lt;code>null&lt;/code>을 줄 경우 자동으로 PAGE 단위에 맞게 준다는 걸 알았다.&lt;/p></description></item><item><title>B+ Tree</title><link>https://minuk.dev/wiki/b+tree/</link><pubDate>Fri, 05 Jun 2020 19:24:15 +0900</pubDate><guid>https://minuk.dev/wiki/b+tree/</guid><description>&lt;h2 id="유틸">유틸&lt;/h2>
&lt;ul>
&lt;li>일단 B+-Tree 를 In Memory가 아니라, File로 만들꺼니, 기본적인 Util 부분을 짜자.&lt;/li>
&lt;/ul>
&lt;h3 id="1-기본적인-아키텍쳐-레벨의-함수들-정리-및-사용하기-편하게-만들기">1. 기본적인 아키텍쳐 레벨의 함수들 정리 및 사용하기 편하게 만들기&lt;/h3>
&lt;ul>
&lt;li>일단 &lt;code>[[mmap]]&lt;/code> 으로 Page 단위로 memory에 올릴 꺼니, &lt;code>mmap&lt;/code> 부터 공부&lt;/li>
&lt;/ul></description></item><item><title>Database</title><link>https://minuk.dev/wiki/database/</link><pubDate>Thu, 04 Jun 2020 20:44:44 +0900</pubDate><guid>https://minuk.dev/wiki/database/</guid><description>&lt;h2 id="공부">공부&lt;/h2>
&lt;ul>
&lt;li>[[mysql]]&lt;/li>
&lt;li>[[Endurable_Transient_Inconsistency_in_Byte_Addressable_Persistent_B+-Tree]]&lt;/li>
&lt;li>[[b+tree]]&lt;/li>
&lt;/ul>
&lt;h2 id="구현">구현&lt;/h2></description></item><item><title>memory cache 비우기 (linux command)</title><link>https://minuk.dev/wiki/memory-cache-clean/</link><pubDate>Tue, 02 Jun 2020 20:39:40 +0900</pubDate><guid>https://minuk.dev/wiki/memory-cache-clean/</guid><description/></item><item><title>free (linux command)</title><link>https://minuk.dev/wiki/free/</link><pubDate>Tue, 02 Jun 2020 20:37:44 +0900</pubDate><guid>https://minuk.dev/wiki/free/</guid><description>&lt;h2 id="linux-command">linux command&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>-m : MB단위로 데이터 표시
-b : byte단위로 데이터 표시
-k : kilo byte 단위로 데이터 표시
-t : 맨 마지막에 total 량 표시
-o : buffer/cache 표시 안함
-s : 지정한 초단위(Regular interval)로 refresh
-l : low &amp;amp; High 메모리 크기 통계
-V : free명령의 버전 표시&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>예시 : &lt;code>free -m&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>clflush (cache line flush)</title><link>https://minuk.dev/wiki/clflush/</link><pubDate>Tue, 02 Jun 2020 19:15:07 +0900</pubDate><guid>https://minuk.dev/wiki/clflush/</guid><description>&lt;h2 id="출처">출처&lt;/h2>
&lt;p>&lt;a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_clflush&amp;amp;expand=678,679">https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_clflush&amp;amp;expand=678,679&lt;/a>&lt;/p>
&lt;h2 id="내용">내용&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> _mm_clflush (&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">*&lt;/span> p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;emmintrin.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>Instruction: clflush m8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CPUID Flags: SSE2&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> _mm_clflushopt (&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">*&lt;/span> p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;immintrin.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>Instruction: clflushopt m8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>CPUID Flags: CLFLUSHOPT&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>clflush&lt;/code> vs &lt;code>clflushopt&lt;/code>&lt;/li>
&lt;li>출처 : &lt;a href="https://software.intel.com/en-us/forums/software-tuning-performance-optimization-platform-monitoring/topic/712498">https://software.intel.com/en-us/forums/software-tuning-performance-optimization-platform-monitoring/topic/712498&lt;/a>&lt;/li>
&lt;li>clflushopt : clflush optimization&lt;/li>
&lt;/ul></description></item><item><title>C++ Language</title><link>https://minuk.dev/wiki/c++/</link><pubDate>Tue, 02 Jun 2020 19:14:04 +0900</pubDate><guid>https://minuk.dev/wiki/c++/</guid><description>&lt;h2 id="memory">Memory&lt;/h2>
&lt;ul>
&lt;li>[[clflush]]&lt;/li>
&lt;/ul>
&lt;h2 id="tips">Tips&lt;/h2>
&lt;h3 id="string">String&lt;/h3>
&lt;ul>
&lt;li>문자열 관련해서 사용하기 쉬운 함수들&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#define%20TRIM_SPACE%20%22%5ct%5cn%5cv%20%22%0avector%3cstring%3e%20split%28string%20input,%20char%20delimiter%29%20%7b%0a%20%20vector%3cstring%3e%20answer;%0a%20%20stringstream%20ss%28input%29;%0a%20%20string%20temp;%0a%0a%20%20while%20%28getline%28ss,%20temp,%20delimiter%29%29%20%7b%0a%20%20%20%20answer.push_back%28temp%29;%0a%20%20%7d%0a%20%20return%20answer;%0a%7d%0a%0astring%20trim%28string&amp;amp;%20s,%20const%20string&amp;amp;%20drop%20=%20TRIM_SPACE%29%20%7b%0a%20%20string%20r%20=%20s.erase%28s.find_last_not_of%28drop%29%20&amp;#43;%201%29;%0a%20%20return%20r.erase%280,%20r.find_first_not_of%28drop%29%29;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define TRIM_SPACE &amp;#34;\t\n\v &amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> split(string input, &lt;span style="color:#66d9ef">char&lt;/span> delimiter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> answer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream &lt;span style="color:#a6e22e">ss&lt;/span>(input);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (getline(ss, temp, delimiter)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer.push_back(temp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> answer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string &lt;span style="color:#a6e22e">trim&lt;/span>(string&lt;span style="color:#f92672">&amp;amp;&lt;/span> s, &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> drop &lt;span style="color:#f92672">=&lt;/span> TRIM_SPACE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string r &lt;span style="color:#f92672">=&lt;/span> s.erase(s.find_last_not_of(drop) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> r.erase(&lt;span style="color:#ae81ff">0&lt;/span>, r.find_first_not_of(drop));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="time">Time&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>시간 잴때 사용하는 코드 더미&lt;/p>
&lt;/li>
&lt;li>
&lt;p>minuk.h&lt;/p>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ifndef%20__MINUK_H__%0a#define%20__MINUK_H__%0a#include%20%3ctime.h%3e%0aunsigned%20long%20long%20calclock%28struct%20timespec%20*spclock,%20unsigned%20long%20long%20*total_time,%20unsigned%20long%20long%20*total_count%29;%0a#ifndef%20BILLION%0a#define%20BILLION%201000000000%0a#endif%20/*%20BILLION%20*/%0a#endif%20/*%20__MINUK_H__%20*/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifndef __MINUK_H__
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define __MINUK_H__
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#a6e22e">calclock&lt;/span>(&lt;span style="color:#66d9ef">struct&lt;/span> timespec &lt;span style="color:#f92672">*&lt;/span>spclock, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>total_time, &lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#f92672">*&lt;/span>total_count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#ifndef BILLION
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define BILLION 1000000000
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">/* BILLION */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#endif &lt;/span>&lt;span style="color:#75715e">/* __MINUK_H__ */&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>minuk.cc&lt;/p></description></item><item><title>사지방</title><link>https://minuk.dev/wiki/%EC%82%AC%EC%A7%80%EB%B0%A9/</link><pubDate>Tue, 02 Jun 2020 19:05:23 +0900</pubDate><guid>https://minuk.dev/wiki/%EC%82%AC%EC%A7%80%EB%B0%A9/</guid><description>사지방에서 사용하는 스크립트나 페이지들 모음</description></item><item><title>2020년 3월 회고</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/3%EC%9B%94/</link><pubDate>Sat, 30 May 2020 01:23:56 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/3%EC%9B%94/</guid><description>&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ec%98%a4%eb%9e%9c%eb%a7%8c%ec%97%90%20%ea%b8%80%ec%9d%84%20%ec%93%b0%ea%b2%8c%eb%90%9c%eb%8b%a4.%20%ea%b8%80%ec%9d%80%20%ec%9d%b4%ec%84%b1%ec%a0%81%ec%9d%b4%ec%97%ac%ec%95%bc%20%ed%95%9c%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%98%ec%a7%80%eb%a7%8c%20%ed%95%ad%ec%82%ac%20%ea%b0%90%ec%84%b1%ec%97%90%20%ec%a0%96%ec%9d%84%eb%95%8c%20%ec%93%b0%ea%b3%a0%20%ec%8b%b6%ec%96%b4%ec%a7%80%eb%8b%88%20%ec%95%84%ec%9d%b4%eb%9f%ac%eb%8b%88%ed%95%98%eb%8b%a4.%20%20%eb%a8%bc%ec%a0%80%20%ea%b8%80%ec%9d%84%20%ec%93%b8%eb%95%8c%eb%8a%94%20%ed%95%ad%ec%83%81%20%ec%a7%80%eb%82%9c%20%eb%82%98%eb%b3%b4%eb%8b%a4%eb%8a%94%20%ec%a7%80%ea%b8%88%20%eb%8d%94%20%eb%b0%9c%ec%a0%84%ed%96%88%eb%8a%94%ea%b0%80%eb%a5%bc%20%eb%94%b0%ec%a7%80%eb%8a%94%eb%8d%b0,%20%ec%9d%b4%eb%b2%88%20%ed%9a%8c%ea%b3%a0%eb%95%8c%eb%8a%94%20%ea%b7%b8%eb%9f%b0%ea%b2%83%20%ea%b0%99%ec%95%84%ec%84%9c%20%eb%8b%a4%ed%96%89%ec%9d%b4%eb%8b%a4.%20%ed%86%a0%ed%94%8c%20%ea%b3%b5%eb%b6%80%eb%8f%84%20%ec%8b%9c%ec%9e%91%ed%96%88%ea%b3%a0,%20%ec%95%8c%ea%b3%a0%eb%a6%ac%ec%a6%98%eb%8f%84%20%ec%a1%b0%ea%b8%88%eb%8d%94%20%ec%97%b4%ec%8b%ac%ed%9e%88%20%ed%92%80%eb%a9%b4%ec%84%9c,%20%eb%8d%b0%ec%9d%b4%ed%84%b0%ec%a4%91%ec%8b%ac%20%ec%96%b4%ed%94%8c%eb%a6%ac%ec%bc%80%ec%9d%b4%ec%85%98%20%ec%b1%85%eb%8f%84%20%ec%96%b4%eb%8a%90%ec%a0%95%eb%8f%84%20%ec%9d%bd%ec%97%88%ea%b3%a0,%20%eb%85%bc%eb%ac%b8%eb%8f%84%20%ed%95%ad%ec%83%81%ec%9d%80%20%ec%95%84%eb%8b%88%ec%a7%80%eb%a7%8c%20%ec%9d%bd%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%20%ea%b0%80%eb%81%94%20%ea%b0%9c%eb%b0%9c%ec%9d%b4%20%ec%83%9d%ea%b0%81%eb%82%98%ea%b8%b4%20%ed%95%98%ec%a7%80%eb%a7%8c%20%ea%b7%b8%eb%95%8c%20%eb%a7%88%ec%9d%8c%20%eb%a8%b9%ec%9d%80%ea%b2%83%ec%b2%98%eb%9f%bc%20%ec%a4%91%ec%9a%94%ed%95%9c%ea%b2%83%ec%97%90%20%ec%a7%91%ec%a4%91%ed%95%b4%ec%95%bc%ea%b2%a0%ec%a7%80%20%ed%95%98%eb%a9%b4%ec%84%9c%20%eb%8b%a4%ec%8b%9c%20%eb%a7%88%ec%9d%8c%ec%9d%84%20%ec%a0%91%eb%8a%94%eb%8b%a4.%0a%0a%ed%95%ad%ec%83%81%20%ea%b8%80%ec%9d%84%20%ec%93%b8%eb%95%8c%eb%a9%b4%20%ed%95%98%ea%b3%a0%ec%8b%b6%ec%9d%80%20%eb%a7%90%ec%9d%b4%20%eb%84%88%eb%ac%b4%20%eb%a7%8e%ec%95%84%ec%84%9c%20%eb%ad%90%eb%b6%80%ed%84%b0%20%ec%8d%a8%ec%95%bc%ed%95%a0%ec%a7%80%20%ea%b3%a0%eb%af%bc%ed%95%98%ea%b2%8c%20%eb%90%98%ea%b3%a0,%20%ed%95%98%ea%b3%a0%ec%8b%b6%ec%9d%80%20%eb%a7%90%ec%9d%84%20%ec%a0%84%eb%b6%80%eb%8b%a4%20%ec%8f%9f%ec%95%84%eb%b6%80%ec%96%b4%eb%b2%84%eb%a6%ac%eb%8b%88%20%eb%82%9c%ec%9e%a1%ed%95%b4%ec%a0%b8%eb%b2%84%eb%a6%b0%eb%8b%a4.%20%ec%96%b4%eb%a0%b5%eb%8b%a4.%0a%0a2020%eb%85%84%203%ec%9b%94%ec%9d%98%20%eb%82%98%eb%8a%94%20%ec%9d%b4%ec%a0%84%ec%9d%98%20%eb%82%98%eb%b3%b4%eb%8b%a4%eb%8a%94%20%ec%a1%b0%ea%b8%88%ec%9d%80%20%eb%8d%94%20%ea%b0%90%ec%a0%95%ec%a0%81%ec%9d%b4%ea%b3%a0,%20%ea%b1%b0%ec%a7%93%eb%a7%90%ec%9d%84%20%ed%95%9c%eb%8b%a4.%0a%0a%ec%a1%b0%ea%b8%88%20%eb%8d%94%20%ec%a3%bc%eb%b3%80%ec%82%ac%eb%9e%8c%eb%93%a4%ec%97%90%ea%b2%8c%20%ed%9c%98%eb%91%98%eb%a6%ac%ea%b8%b0%eb%8f%84%20%ed%95%98%ea%b3%a0,%20%ec%a6%90%ea%b1%b0%ec%9b%8c%ed%95%98%ea%b8%b0%eb%8f%84%20%ed%95%98%eb%a9%b0%20%ec%a7%80%eb%82%b4%ea%b3%a0%20%ec%9e%88%eb%8b%a4...%20%ec%9d%b4%eb%8c%80%eb%a1%9c%20%ec%82%b4%eb%a9%b4%20%ec%a1%b0%ea%b8%88%eb%8d%94%20%eb%82%b4%20%ec%b5%9c%ec%a2%85%20%eb%aa%a9%ed%91%9c%ec%97%90%ec%84%9c%20%eb%a9%80%ec%96%b4%ec%a0%b8%20%eb%8b%a4%ed%96%89%ec%9d%b4%eb%8b%a4.%20%ec%9a%94%ec%a6%98%ec%9d%80%20%ec%a1%b0%ea%b8%88%eb%8d%94%20%ea%b5%b3%ec%9d%b4%20%eb%81%9d%ec%9d%84%20%ec%9e%90%ec%82%b4%ec%9d%98%20%ed%98%95%ed%83%9c%eb%a1%9c%20%eb%a7%ba%ec%96%b4%ec%95%bc%ec%a7%80%eb%82%b4%ea%b0%80%20%ec%83%9d%ea%b0%81%ed%95%98%eb%8a%94%20%ec%99%84%eb%b2%bd%ed%95%a8%ea%b3%bc%20%eb%b9%84%ec%8a%b7%ed%95%9c%ea%b0%80?%20%eb%9d%bc%eb%8a%94%20%ec%83%9d%ea%b0%81%ec%9d%b4%20%eb%93%a0%eb%8b%a4...%20%ed%9a%8c%ea%b3%a0%ec%97%90%ec%84%9c%20%eb%8b%a4%eb%a3%b0%20%eb%82%b4%ec%9a%a9%ec%9d%80%20%ec%95%84%eb%8b%8c%ea%b2%83%20%ea%b0%99%eb%8b%a4.%20%ea%b8%80%ec%9d%84%20%eb%b6%84%eb%a6%ac%ed%95%b4%ec%84%9c%20%ec%8d%a8%ec%95%bc%ea%b2%a0%eb%8b%a4.%20%ec%98%a4%eb%8a%98%ec%9d%80%20%ec%97%ac%ea%b8%b0%ea%b9%8c%ec%a7%80">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>오랜만에 글을 쓰게된다. 글은 이성적이여야 한다고 생각하지만 항사 감성에 젖을때 쓰고 싶어지니 아이러니하다. 먼저 글을 쓸때는 항상 지난 나보다는 지금 더 발전했는가를 따지는데, 이번 회고때는 그런것 같아서 다행이다. 토플 공부도 시작했고, 알고리즘도 조금더 열심히 풀면서, 데이터중심 어플리케이션 책도 어느정도 읽었고, 논문도 항상은 아니지만 읽고 있다. 가끔 개발이 생각나긴 하지만 그때 마음 먹은것처럼 중요한것에 집중해야겠지 하면서 다시 마음을 접는다.

항상 글을 쓸때면 하고싶은 말이 너무 많아서 뭐부터 써야할지 고민하게 되고, 하고싶은 말을 전부다 쏟아부어버리니 난잡해져버린다. 어렵다.

2020년 3월의 나는 이전의 나보다는 조금은 더 감정적이고, 거짓말을 한다.

조금 더 주변사람들에게 휘둘리기도 하고, 즐거워하기도 하며 지내고 있다... 이대로 살면 조금더 내 최종 목표에서 멀어져 다행이다. 요즘은 조금더 굳이 끝을 자살의 형태로 맺어야지내가 생각하는 완벽함과 비슷한가? 라는 생각이 든다... 회고에서 다룰 내용은 아닌것 같다. 글을 분리해서 써야겠다. 오늘은 여기까지&lt;/code>&lt;/pre>
 
&lt;/div></description></item><item><title>mysql (storage engine)</title><link>https://minuk.dev/wiki/mysql/</link><pubDate>Thu, 28 May 2020 07:48:47 +0900</pubDate><guid>https://minuk.dev/wiki/mysql/</guid><description>&lt;h1 id="참고용-홈페이지">참고용 홈페이지&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://dev.mysql.com/doc/internals/en/custom-engine.html">https://dev.mysql.com/doc/internals/en/custom-engine.html&lt;/a>&lt;/li>
&lt;li>mysql architecture&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;img src="https://minuk.dev/wiki/images/mysql_architecture.png" alt="mysql architecture">&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;a href="https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_PFS_PSI.html">https://dev.mysql.com/doc/dev/mysql-server/latest/PAGE_PFS_PSI.html&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="환경-설정">환경 설정&lt;/h2>
&lt;ul>
&lt;li>일단 지금 집에다가 예전에 썻던 삼성 노트북을 wol 으로 설정하고 (완전히 꺼지면 안켜지니까 shutdown 을 alias 해놓고, suspend를 사용하는 식으로 했다.휴가 때 마다 혹은 가끔씩 reboot 해주면 되겠지?)&lt;/li>
&lt;li>github 에서 다운로드 해서 private repository 에다가 올려놨다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/mysql/mysql-server&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>참고용 홈페이지 1을 보면 알 수 있듯이 &lt;code>storage/example&lt;/code> 을 똑같이 카피했다.&lt;/li>
&lt;li>일단 지금 목표는 custom engine 을 만들어 보는 거고 가능하다면 2018년 FAST 에 나온 논문인 FAST_PAIR 를 만들어보는거다.&lt;/li>
&lt;li>일단 공부한 내용을 아래에 써놓겠다.&lt;/li>
&lt;/ul>
&lt;h2 id="겪었던-문제들">겪었던 문제들&lt;/h2>
&lt;ul>
&lt;li>git push 를 할때 너무 많아서 그런지 안올라가진다. -&amp;gt; 브랜치를 나눠서 올리면 된다. mysql 8.0.0 까진 수월하게 올라간다. mysql-8.0.0 브랜치까지 올리고 나머지 올리면 올라가진다. 용량이 커서 안올라가지는 것 같다.&lt;/li>
&lt;/ul>
&lt;h2 id="코딩할-때-알아야할-내용">코딩할 때 알아야할 내용&lt;/h2>
&lt;h3 id="mysysh-관련">mysys.h 관련&lt;/h3>
&lt;ol>
&lt;li>&lt;code>include/mysys.h&lt;/code> 에 사용할만한 함수들이 많이 정리되어 있다.&lt;/li>
&lt;li>File 관련 : &lt;code>my_create&lt;/code>, &lt;code>my_close&lt;/code>&lt;/li>
&lt;li>문자열 관련 : &lt;code>fn_format&lt;/code> (filename format) - &lt;code>to&lt;/code>(buffer variable), &lt;code>name&lt;/code>, &lt;code>dir&lt;/code>, &lt;code>extension&lt;/code>, &lt;code>flags&lt;/code> 순서&lt;/li>
&lt;li>Memory 관련 : &lt;code>my_malloc&lt;/code>, &lt;code>my_free&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="thd-mysql-thread-객체-관련">THD (mysql thread 객체) 관련&lt;/h3>
&lt;ol>
&lt;li>mysql thread 객체 (&lt;code>THD&lt;/code>) 에 변수로 넣으면 (&lt;code>THDVAR_SET&lt;/code>) 복사가 일어난다. (추측) -&amp;gt; 따라서 넣어야할 값이 있으면 my_malloc 하고 넣은다음에 my_free 해줘야한다. (Memory Leak 나지 않게 조심하자!)&lt;/li>
&lt;li>Mysql Thread 객체 (THD)에 값 확인, 넣기 : &lt;code>THDVAR(대상 Thread, 원하는 변수명)&lt;/code>, &lt;code>THDVAR_SET(대상 Thread, 원하는 변수명, 값의 주소)&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="debug">Debug&lt;/h3>
&lt;ol>
&lt;li>Debug를 위해서 return 같은거 할때 &lt;code>DBUG_RETURN&lt;/code> 을 적극적으로 활용하자&lt;/li>
&lt;/ol>
&lt;h1 id="참고용-홈페이지-읽고-정리하기">참고용 홈페이지 읽고 정리하기&lt;/h1>
&lt;h3 id="232-overview">23.2 Overview&lt;/h3>
&lt;ul>
&lt;li>&lt;code>handler&lt;/code>라는 interface를 구현하도록 되어 있는데, 각 connection 마다 thread가 생성되고 각 thread마다 handler instance를 생성하고 가지고 있도록 한다.
&lt;ul>
&lt;li>질문점 : 그러면 각 handler들이 같은 table에 접근하게 되면 어떻게 되나 : handler를 구현할때 알아서 해결해야 한다. 가장 단순한 해결법은 table마다 lock을 가지게 해서 동시에 handler들이 접근 못하도록 하는것. (생각해보면 read lock, write lock마다 구현법도 다양하고 mvcc같은거 고려하면 생각할게 너무 많을 텐데 당연하게도 storage engine이 알아서 처리하도록 하는게 맞다)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>read-only -&amp;gt; insert, update, delete -&amp;gt; indexing, transactions -&amp;gt; other advanced options 순서로 구현하라고 한다.&lt;/li>
&lt;/ul>
&lt;h3 id="233-creating-storage-engine-source-files">23.3 Creating Storage Engine Source Files&lt;/h3>
&lt;ul>
&lt;li>&lt;code>example&lt;/code> 을 복사해서 수정하는게 제일 단순하다 (사실 이렇게 공식 홈페이지 적어놓을만 한게, innobase(=innodb)코드를 보고 비슷하게 만들어보려고 시도했는데, 나에게는 이건 너무 어려웠다. ㅠ)&lt;/li>
&lt;/ul>
&lt;h3 id="234-adding-engine-specific-variables-and-parameters">23.4 Adding Engine Specific Variables and Parameters&lt;/h3>
&lt;ul>
&lt;li>구조가 Plugin 식으로 추가되는 식인것 같은데 그래서 Plugin 을 만드는 방법에 대해서 나와있다.&lt;/li>
&lt;li>이걸 열심히 공부하는것도 맞지만, 조금 목표와 멀어질 것 같아서 일단은 innobase 꺼 CMakeLists.txt 를 참고했고, 나중에 필요하면 다시 보면 될거라고 생각한다.&lt;/li>
&lt;/ul>
&lt;h3 id="235-creating-the-handlerton">23.5 Creating the handlerton&lt;/h3>
&lt;ul>
&lt;li>&lt;code>handlerton&lt;/code> (= handler singleton) : storage engine 마다 1개씩 있는 객체로, transaction을 다루는 commit, rollbacks 같은 기능을 제공하게 된다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="typedef%20struct%0a%20%20%7b%0a%20%20%20%20const%20char%20*name;%20/*%20storage%20engine%20%ec%9d%98%20%ec%9d%b4%eb%a6%84%20:%20CREATE%20TABLE%20...%20ENGINE=FOO;%20%ec%97%90%20%ec%93%b0%ec%9d%b8%eb%8b%a4.%20*/%0a%20%20%20%20SHOW_COMP_OPTION%20state;%20/*%20SHOW%20STORAGE%20ENGINES%20command%eb%a5%bc%20%ec%82%ac%ec%9a%a9%ed%95%98%eb%a9%b4%20%ec%b6%9c%eb%a0%a5%eb%90%98%eb%8a%94%20%ea%b0%92%20*/%0a%20%20%20%20const%20char%20*comment;%20/*%20SHOW%20%20STORAGE%20ENGINES%20command%eb%a5%bc%20%ec%82%ac%ec%9a%a9%ed%95%a0%eb%95%8c%20%ec%b6%9c%eb%a0%a5%eb%90%98%eb%8a%94%20%ec%84%a4%eb%aa%85%20*/%0a%20%20%20%20enum%20db_type%20db_type;%20/*%20custom%20engine%20%ec%9d%80%20%eb%b0%98%eb%93%9c%ec%8b%9c%20DB_TYPE_UNKNOWN%20%ec%9d%84%20%ec%82%ac%ec%9a%a9%ed%95%b4%ec%95%bc%ed%95%9c%eb%8b%a4%ea%b3%a0%20%ed%95%a9%eb%8b%88%eb%8b%a4.%20*/%0a%20%20%20%20bool%20%28*init%29%28%29;%20/*%20Server%20%ea%b0%80%20%ec%8b%9c%ec%9e%91%ed%95%a0%eb%95%8c%20%eb%94%b1%201%eb%b2%88%20%eb%b6%88%eb%a6%ac%ea%b2%8c%20%eb%90%98%ea%b3%a0,%20handler%ea%b0%80%20instance%20%ed%99%94%20%eb%90%98%ea%b8%b0%20%ec%a0%84%ec%97%90%20%ec%b2%98%eb%a6%ac%eb%90%98%ec%95%bc%ed%95%a0%20%eb%82%b4%ec%9a%a9%ec%9d%84%20%eb%84%a3%ec%9c%bc%eb%a9%b4%eb%90%9c%eb%8b%a4.%20*/%0a%20%20%20%20uint%20slot;%20/*%20storage%20engine%20%eb%a7%88%eb%8b%a4%20%ea%b3%a0%ec%9c%a0%ed%95%98%ea%b2%8c%20%ea%b0%80%ec%a7%80%ea%b3%a0%ec%9e%88%eb%8a%94%20%eb%a9%94%eb%aa%a8%eb%a6%ac%20%ec%98%81%ec%97%ad%20thd-%3eha_data[foo_hton.slot]%ec%9c%bc%eb%a1%9c%20%ec%a0%91%ea%b7%bc%ea%b0%80%eb%8a%a5%ed%95%98%ea%b3%a0,%20Rollback%20%ea%b5%ac%ed%98%84%ed%95%a0%eb%96%84%20%ec%b0%b8%ec%a1%b0%ed%95%98%eb%9d%bc%ea%b3%a0%20%ec%a0%81%ed%98%80%ec%9e%88%ec%9d%8c%20*/%0a%20%20%20%20uint%20savepoint_offset;%20/*%20savepoint%20%ec%9d%98%20%ec%9c%84%ec%b9%98,%200%ec%9d%b4%eb%a9%b4%20savepoint%20memory%ea%b0%80%20%ed%95%84%ec%9a%94%ed%95%98%ec%a7%80%20%ec%95%8a%eb%8b%a4.%20*/%0a%20%20%20%20int%20%20%28*close_connection%29%28THD%20*thd%29;%0a%20%20%20%20int%20%20%28*savepoint_set%29%28THD%20*thd,%20void%20*sv%29;%0a%20%20%20%20int%20%20%28*savepoint_rollback%29%28THD%20*thd,%20void%20*sv%29;%0a%20%20%20%20int%20%20%28*savepoint_release%29%28THD%20*thd,%20void%20*sv%29;%0a%20%20%20%20int%20%20%28*commit%29%28THD%20*thd,%20bool%20all%29;%0a%20%20%20%20int%20%20%28*rollback%29%28THD%20*thd,%20bool%20all%29;%0a%20%20%20%20int%20%20%28*prepare%29%28THD%20*thd,%20bool%20all%29;%0a%20%20%20%20int%20%20%28*recover%29%28XID%20*xid_list,%20uint%20len%29;%0a%20%20%20%20int%20%20%28*commit_by_xid%29%28XID%20*xid%29;%0a%20%20%20%20int%20%20%28*rollback_by_xid%29%28XID%20*xid%29;%0a%20%20%20%20void%20*%28*create_cursor_read_view%29%28%29;%0a%20%20%20%20void%20%28*set_cursor_read_view%29%28void%20*%29;%0a%20%20%20%20void%20%28*close_cursor_read_view%29%28void%20*%29;%0a%20%20%20%20handler%20*%28*create%29%28TABLE%20*table%29;%0a%20%20%20%20void%20%28*drop_database%29%28char*%20path%29;%0a%20%20%20%20int%20%28*panic%29%28enum%20ha_panic_function%20flag%29;%0a%20%20%20%20int%20%28*release_temporary_latches%29%28THD%20*thd%29;%0a%20%20%20%20int%20%28*update_statistics%29%28%29;%0a%20%20%20%20int%20%28*start_consistent_snapshot%29%28THD%20*thd%29;%0a%20%20%20%20bool%20%28*flush_logs%29%28%29;%0a%20%20%20%20bool%20%28*show_status%29%28THD%20*thd,%20stat_print_fn%20*print,%20enum%20ha_stat_type%20stat%29;%0a%20%20%20%20int%20%28*repl_report_sent_binlog%29%28THD%20*thd,%20char%20*log_file_name,%20my_off_t%20end_offset%29;%0a%20%20%20%20uint32%20flags;%0a%20%20%7d%20handlerton;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name; &lt;span style="color:#75715e">/* storage engine 의 이름 : CREATE TABLE ... ENGINE=FOO; 에 쓰인다. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SHOW_COMP_OPTION state; &lt;span style="color:#75715e">/* SHOW STORAGE ENGINES command를 사용하면 출력되는 값 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>comment; &lt;span style="color:#75715e">/* SHOW STORAGE ENGINES command를 사용할때 출력되는 설명 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">db_type&lt;/span> db_type; &lt;span style="color:#75715e">/* custom engine 은 반드시 DB_TYPE_UNKNOWN 을 사용해야한다고 합니다. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>init)(); &lt;span style="color:#75715e">/* Server 가 시작할때 딱 1번 불리게 되고, handler가 instance 화 되기 전에 처리되야할 내용을 넣으면된다. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint slot; &lt;span style="color:#75715e">/* storage engine 마다 고유하게 가지고있는 메모리 영역 thd-&amp;gt;ha_data[foo_hton.slot]으로 접근가능하고, Rollback 구현할떄 참조하라고 적혀있음 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint savepoint_offset; &lt;span style="color:#75715e">/* savepoint 의 위치, 0이면 savepoint memory가 필요하지 않다. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>close_connection)(THD &lt;span style="color:#f92672">*&lt;/span>thd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>savepoint_set)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>sv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>savepoint_rollback)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>sv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>savepoint_release)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>sv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>commit)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">bool&lt;/span> all);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>rollback)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">bool&lt;/span> all);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>prepare)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">bool&lt;/span> all);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>recover)(XID &lt;span style="color:#f92672">*&lt;/span>xid_list, uint len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>commit_by_xid)(XID &lt;span style="color:#f92672">*&lt;/span>xid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>rollback_by_xid)(XID &lt;span style="color:#f92672">*&lt;/span>xid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>create_cursor_read_view)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>set_cursor_read_view)(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>close_cursor_read_view)(&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">*&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handler &lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>create)(TABLE &lt;span style="color:#f92672">*&lt;/span>table);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>drop_database)(&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">*&lt;/span> path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>panic)(&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">ha_panic_function&lt;/span> flag);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>release_temporary_latches)(THD &lt;span style="color:#f92672">*&lt;/span>thd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>update_statistics)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>start_consistent_snapshot)(THD &lt;span style="color:#f92672">*&lt;/span>thd);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>flush_logs)();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>show_status)(THD &lt;span style="color:#f92672">*&lt;/span>thd, stat_print_fn &lt;span style="color:#f92672">*&lt;/span>print, &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">ha_stat_type&lt;/span> stat);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>repl_report_sent_binlog)(THD &lt;span style="color:#f92672">*&lt;/span>thd, &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>log_file_name, my_off_t end_offset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint32 flags;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } handlerton;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>적다보니 아래 부분은 transcation 을 구현할때나 필요한 부분이라 나중에 생각하기로 했다. 대충 공식 메뉴얼정도만 읽었고 굳이 번역해놓을 필요는 없을듯?&lt;/li>
&lt;/ul>
&lt;h3 id="236-handling-handler-instantiation">23.6 Handling Handler Instantiation&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="static%20handler*%20example_create_handler%20%28TABLE*%20table%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> handler&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">example_create_handler&lt;/span> (TABLE&lt;span style="color:#f92672">*&lt;/span> table);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>handler 생성 함수를 만들어야된다.&lt;/li>
&lt;li>handler constructor를 단순히 호출하는 형식으로 구현할 수도 있다. (아래 예시는 myisam 의 구현)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="static%20handler%20*myisam_create_handler%28TABLE%20*table%29%0a%20%20%7b%0a%20%20%20%20return%20new%20ha_myisam%28table%29;%0a%20%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> handler &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">myisam_create_handler&lt;/span>(TABLE &lt;span style="color:#f92672">*&lt;/span>table)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ha_myisam(table);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>constructor 의 구현 예시&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>ha_federated&lt;span style="color:#f92672">::&lt;/span>ha_federated(TABLE &lt;span style="color:#f92672">*&lt;/span>table_arg)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span>handler(&lt;span style="color:#f92672">&amp;amp;&lt;/span>federated_hton, table_arg),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mysql(&lt;span style="color:#ae81ff">0&lt;/span>), stored_result(&lt;span style="color:#ae81ff">0&lt;/span>), scan_flag(&lt;span style="color:#ae81ff">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ref_length(&lt;span style="color:#66d9ef">sizeof&lt;/span>(MYSQL_ROW_OFFSET)), current_position(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="237-defining-filename-extensions">23.7 Defining Filename Extensions&lt;/h3>
&lt;ul>
&lt;li>지원하는 확장자를 &lt;code>const char* []&lt;/code> 로 넘기면 처리해준다&lt;/li>
&lt;li>단 array 의 마지막 은 &lt;code>NullS&lt;/code> 로 끝나야함.&lt;/li>
&lt;li>아래 코드는 csv 예시&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="static%20const%20char%20*ha_tina_exts[]%20=%20%7b%0a%20%20%22.CSV%22,%0a%20%20NullS%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>ha_tina_exts[] &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;.CSV&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> NullS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>이렇게 정의된 array를 다음과 같이 설정해주면 됨.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">**&lt;/span>ha_tina&lt;span style="color:#f92672">::&lt;/span>bas_ext() &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> ha_tina_exts;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>DROP TABLE&lt;/code> 에서 table을 지웠을 때 파일이 삭제되는 기능을 딱히 구현하지 않고 생략해도 된다.&lt;/li>
&lt;li>근데 이건 필수가 아닌 건지, &lt;code>handler&lt;/code> class에 따로 선언되어 있지는 않다. -&amp;gt; 직접 구현했는데 혹시 문제가 생길수도 있으니 메모해놓는다.&lt;/li>
&lt;/ul>
&lt;h3 id="238-creating-tables">23.8 Creating Tables&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="virtual%20int%20create%28const%20char%20*name,%20TABLE%20*form,%20HA_CREATE_INFO%20*info%29=0;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name, TABLE &lt;span style="color:#f92672">*&lt;/span>form, HA_CREATE_INFO &lt;span style="color:#f92672">*&lt;/span>info)&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>위 함수를 반드시 구현하라고 한다.&lt;/li>
&lt;li>&lt;code>name&lt;/code> 은 &lt;code>table&lt;/code>의 이름&lt;/li>
&lt;li>&lt;code>form&lt;/code> 은 &lt;code>tablename&lt;/code> 이랑 매칭되는 &lt;code>TABLE&lt;/code> structure : &lt;code>tablename.frm&lt;/code> 이라는 파일에 이미 다 만들어 놨으니, Storage Engine은 이를 변경하면 안됨.&lt;/li>
&lt;li>&lt;code>info&lt;/code> 는 &lt;code>CREATE TABLE&lt;/code>을 했을 때 생기는 정보. &lt;code>handler.h&lt;/code>에 정의 되어 있으니 참조.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="typedef%20struct%20st_ha_create_information%0a%7b%0a%20%20%20%20CHARSET_INFO%20*table_charset,%20*default_table_charset;%0a%20%20%20%20LEX_STRING%20connect_string;%0a%20%20%20%20const%20char%20*comment,*password;%0a%20%20%20%20const%20char%20*data_file_name,%20*index_file_name;%0a%20%20%20%20const%20char%20*alias;%0a%20%20%20%20ulonglong%20max_rows,min_rows;%0a%20%20%20%20ulonglong%20auto_increment_value;%0a%20%20%20%20ulong%20table_options;%0a%20%20%20%20ulong%20avg_row_length;%0a%20%20%20%20ulong%20raid_chunksize;%0a%20%20%20%20ulong%20used_fields;%0a%20%20%20%20SQL_LIST%20merge_list;%0a%20%20%20%20enum%20db_type%20db_type;%0a%20%20%20%20enum%20row_type%20row_type;%0a%20%20%20%20uint%20null_bits;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20/*%20NULL%20bits%20at%20start%20of%20record%20*/%0a%20%20%20%20uint%20options;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20/*%20OR%20of%20HA_CREATE_%20options%20*/%0a%20%20%20%20uint%20raid_type,raid_chunks;%0a%20%20%20%20uint%20merge_insert_method;%0a%20%20%20%20uint%20extra_size;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20/*%20length%20of%20extra%20data%20segment%20*/%0a%20%20%20%20bool%20table_existed;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20/*%201%20in%20create%20if%20table%20existed%20*/%0a%20%20%20%20bool%20frm_only;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20/*%201%20if%20no%20ha_create_table%28%29%20*/%0a%20%20%20%20bool%20varchar;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20/*%201%20if%20table%20has%20a%20VARCHAR%20*/%0a%7d%20HA_CREATE_INFO;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">st_ha_create_information&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CHARSET_INFO &lt;span style="color:#f92672">*&lt;/span>table_charset, &lt;span style="color:#f92672">*&lt;/span>default_table_charset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LEX_STRING connect_string;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>comment,&lt;span style="color:#f92672">*&lt;/span>password;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>data_file_name, &lt;span style="color:#f92672">*&lt;/span>index_file_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>alias;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulonglong max_rows,min_rows;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulonglong auto_increment_value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong table_options;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong avg_row_length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong raid_chunksize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ulong used_fields;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SQL_LIST merge_list;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">db_type&lt;/span> db_type;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">row_type&lt;/span> row_type;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint null_bits; &lt;span style="color:#75715e">/* NULL bits at start of record */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint options; &lt;span style="color:#75715e">/* OR of HA_CREATE_ options */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint raid_type,raid_chunks;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint merge_insert_method;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> uint extra_size; &lt;span style="color:#75715e">/* length of extra data segment */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> table_existed; &lt;span style="color:#75715e">/* 1 in create if table existed */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> frm_only; &lt;span style="color:#75715e">/* 1 if no ha_create_table() */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> varchar; &lt;span style="color:#75715e">/* 1 if table has a VARCHAR */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} HA_CREATE_INFO;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>storage engine 이 파일 기반이라는 가정하에 &lt;code>form&lt;/code>, &lt;code>info&lt;/code>는 신경 쓰지 않아도 됨.&lt;/li>
&lt;li>csv engine 같은 경우 아래와 같이 구현되어 있음&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> ha_tina&lt;span style="color:#f92672">::&lt;/span>create(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name, TABLE &lt;span style="color:#f92672">*&lt;/span>table_arg,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HA_CREATE_INFO &lt;span style="color:#f92672">*&lt;/span>create_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">char&lt;/span> name_buff[FN_REFLEN];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File create_file;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DBUG_ENTER(&lt;span style="color:#e6db74">&amp;#34;ha_tina::create&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ((create_file&lt;span style="color:#f92672">=&lt;/span> my_create(fn_format(name_buff, name, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.CSV&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MY_REPLACE_EXT&lt;span style="color:#f92672">|&lt;/span>MY_UNPACK_FILENAME),&lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> O_RDWR &lt;span style="color:#f92672">|&lt;/span> O_TRUNC,MYF(MY_WME))) &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DBUG_RETURN(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_close(create_file,MYF(&lt;span style="color:#ae81ff">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DBUG_RETURN(&lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>흐음&amp;hellip;. 딱히 예제 코드에서 수정할게 없어보여서 거의 그대로 가져왔다.&lt;/li>
&lt;li>변경한 부분은 확장자 부분이랑, ccls에서 warning을 뱉길레 if문 안에 assignment구문을 넣지 않고 밖으로 뺴기만 했다.&lt;/li>
&lt;li>그리고 원래 example source에 thread variable 을 설정하는 예시로 현재 사용하고 있는 Thread(아마도 내 추측으로는 client의 connection과 동일한 맥락을 가질듯, server에서는 connection 당 1개의 thread가 붙어서 담당한다고 알고 있음, 이건 위에 Overview 참고)마다 생성시킨 Table 개수를 tracking 하는 코드가 있었는데, 굳이 문제가 안될것 같아서 냅뒀다.&lt;/li>
&lt;/ul>
&lt;h3 id="239-opening-a-table">23.9 Opening a Table&lt;/h3>
&lt;ul>
&lt;li>read나 write 연산 전에 반드시 table data와 index file(있다면)을 열도록 되어있다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="int%20open%28const%20char%20*name,%20int%20mode,%20int%20test_if_locked%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">open&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> &lt;span style="color:#f92672">*&lt;/span>name, &lt;span style="color:#66d9ef">int&lt;/span> mode, &lt;span style="color:#66d9ef">int&lt;/span> test_if_locked);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>은 table 의 이름&lt;/li>
&lt;li>&lt;code>mode&lt;/code>는 &lt;code>O_RDONLY&lt;/code>(Open read only) 또는 &lt;code>O_RDWR&lt;/code>(Open read/write)&lt;/li>
&lt;li>&lt;code>test_if_locked&lt;/code>는 파일을 열 때 확인해야할 내용에 대한 값이고,&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#define%20HA_OPEN_ABORT_IF_LOCKED%20%20%200%20%20%20/*%20default%20*/%0a#define%20HA_OPEN_WAIT_IF_LOCKED%20%20%20%201%0a#define%20HA_OPEN_IGNORE_IF_LOCKED%20%202%0a#define%20HA_OPEN_TMP_TABLE%20%20%20%20%20%20%20%20%204%20%20%20/*%20Table%20is%20a%20temp%20table%20*/%0a#define%20HA_OPEN_DELAY_KEY_WRITE%20%20%208%20%20%20/*%20Don%27t%20update%20index%20*/%0a#define%20HA_OPEN_ABORT_IF_CRASHED%20%2016%0a#define%20HA_OPEN_FOR_REPAIR%20%20%20%20%20%20%20%2032%20%20/*%20open%20even%20if%20crashed%20*/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_ABORT_IF_LOCKED 0 &lt;/span>&lt;span style="color:#75715e">/* default */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_WAIT_IF_LOCKED 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_IGNORE_IF_LOCKED 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_TMP_TABLE 4 &lt;/span>&lt;span style="color:#75715e">/* Table is a temp table */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_DELAY_KEY_WRITE 8 &lt;/span>&lt;span style="color:#75715e">/* Don&amp;#39;t update index */&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_ABORT_IF_CRASHED 16
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#define HA_OPEN_FOR_REPAIR 32 &lt;/span>&lt;span style="color:#75715e">/* open even if crashed */&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>이 값들중 하나이다.&lt;/li>
&lt;li>lock을 어떻게 다루는지 같은건 &lt;code>get_share()&lt;/code>와 &lt;code>free_share()&lt;/code>를 참조하라고 한다.&lt;/li>
&lt;/ul>
&lt;h4 id="코드-보면서-느낀거">코드 보면서 느낀거&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>&lt;code>handler::ha_open&lt;/code> 이라는 메서드가 존재하는데 얘가 &lt;code>handler::open&lt;/code>을 호출하는 구조이다. (정확히 여기서는 &lt;code>handler&lt;/code>를 상속받은 custom storage engine의 open이라는 메서드)&lt;/p></description></item><item><title>block group</title><link>https://minuk.dev/wiki/block-group/</link><pubDate>Thu, 30 Apr 2020 20:45:01 +0900</pubDate><guid>https://minuk.dev/wiki/block-group/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>ext2 에서는&lt;/li>
&lt;li>블록들의 모임으로, 같은 파일에 속하는 데이터 블록은 같은 블록 그룹에 저장하려고 노력하기 때문에 단편화 현상을 줄일수 있다.&lt;/li>
&lt;/ul></description></item><item><title>journal(journaling)</title><link>https://minuk.dev/wiki/journal/</link><pubDate>Thu, 30 Apr 2020 20:21:25 +0900</pubDate><guid>https://minuk.dev/wiki/journal/</guid><description>&lt;h2 id="설명">설명&lt;/h2>
&lt;ul>
&lt;li>파일을 기록하기 전, 안정성을 위해 복사본을 기록한 뒤 기록하는 방법&lt;/li>
&lt;/ul>
&lt;h2 id="ext3의-journaling의-3가지-단계">ext3의 journaling의 3가지 단계&lt;/h2>
&lt;ul>
&lt;li>Journal : 가장 낮은 위험모드로 파일 시스템에 commit 하기 전에 데이터와 메타데이터를 저널에 모두 기록한다. 이렇게 하면 그 파일 시스템 뿐만 아니라 모든 쓰여지는 파일의 일관성이 보장되지만 성능이 크게 저하될수 있다&lt;/li>
&lt;li>Ordered : 대부분의 Linux 배포판에서 기본 설정으로써, journal에 metadata를 쓰지만, 파일시스템에는 데이터를 직접 commit한다.
&lt;ol>
&lt;li>metadata가 journal에 commit 된다&lt;/li>
&lt;li>data가 FS에 기록된 다음에야 journal에 있는 연결된 metadata가 file에 쓰여지게 된다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>이로인해 가능한 연산 : 불안전한 쓰기를 삭제가능 : 충돌이 날때 쓰여지는 파일은 손상될 수 있지만, 이외의 파일과 파일 시스템은 안전하다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Writeback : ordered에서 순서보장 내용이 빠진것. : 파일 시스템 자체는 안전하지만 기록 중 또는 장애 전후로 기록된 파일은 불안정할 수 있다.&lt;/li>
&lt;/ul></description></item><item><title>group descriptor table</title><link>https://minuk.dev/wiki/group-descriptor-table/</link><pubDate>Thu, 30 Apr 2020 20:17:00 +0900</pubDate><guid>https://minuk.dev/wiki/group-descriptor-table/</guid><description>&lt;h2 id="설명">설명&lt;/h2>
&lt;ul>
&lt;li>슈퍼블록 바로 다음에 위치하며, 파일 시스템의 블록 그룹들에 대한 정보를 가지고 있다.&lt;/li>
&lt;li>Group Descriptor의 크기는 32bytes로, 블록 크기가 1KB이라면 하나의 블록에 총 32개의 Group Descriptor가 기록될수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="포함하는-주요-정보">포함하는 주요 정보&lt;/h2>
&lt;ul>
&lt;li>Block Bitmap의 블록 번호, Inode Bitmap의 블록 번호, 첫번째 Inode Table Block의 블록번호, 그룹안에 있는 빈블록 수, 그룹 안에 있는 inode 수, 그룹 안에 있는 빈 디렉토리 수 등이다.&lt;/li>
&lt;/ul></description></item><item><title>inode</title><link>https://minuk.dev/wiki/inode/</link><pubDate>Thu, 30 Apr 2020 20:08:55 +0900</pubDate><guid>https://minuk.dev/wiki/inode/</guid><description>&lt;h2 id="설명">설명&lt;/h2>
&lt;ul>
&lt;li>Unix에서 사용하는 전통적 파일 시스템에서 사용하는 자료 구조&lt;/li>
&lt;li>정규파일, 디렉토리 등 파일시스템에 대한 정보를 가지고 있다.&lt;/li>
&lt;li>일반적으로 inode에 포함된 정보&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>비트&lt;/th>
 &lt;th>내용&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>12-15&lt;/td>
 &lt;td>파일 형식(일반, 디렉터리, 문자 또는 블록 특별, 선입선출 파이프)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>9-11&lt;/td>
 &lt;td>실행 플레그&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>8&lt;/td>
 &lt;td>소유자 읽기 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>7&lt;/td>
 &lt;td>소유자 쓰기 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6&lt;/td>
 &lt;td>소유자 실행 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>5&lt;/td>
 &lt;td>그룹 읽기 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>4&lt;/td>
 &lt;td>그룹 쓰기 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3&lt;/td>
 &lt;td>그룹 실행 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2&lt;/td>
 &lt;td>다른 사용자 읽기 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>다른 사용자 쓰기 권한&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>0&lt;/td>
 &lt;td>다른 사용자 실행 권한&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>링크 수 : 이 아이노드에 대한 디렉터리 참조수&lt;/li>
&lt;li>소유자 아이디&lt;/li>
&lt;li>그룹 아이디&lt;/li>
&lt;li>파일 크기&lt;/li>
&lt;li>파일 주소 (주소 정보 39바이트)&lt;/li>
&lt;li>마지막 접근 시각&lt;/li>
&lt;li>마지막 수정 시각&lt;/li>
&lt;li>아이노드 수정 시각&lt;/li>
&lt;/ul></description></item><item><title>Superblock</title><link>https://minuk.dev/wiki/superblock/</link><pubDate>Thu, 30 Apr 2020 20:07:08 +0900</pubDate><guid>https://minuk.dev/wiki/superblock/</guid><description>&lt;h2 id="설명">설명&lt;/h2>
&lt;ul>
&lt;li>파일시스템을 대표하는 블록, 파일시스템의 주요 설정이 들어가있다.&lt;/li>
&lt;li>주로 블록의 크기(1KB인지 4KB인지&amp;hellip;), 총 블록의 개수, 블록 그룹의 개수, [[inode]]의 개수, 그룹당 block의 개수&lt;/li>
&lt;/ul></description></item><item><title>The new ext4 filesystem: current status and future plans</title><link>https://minuk.dev/wiki/ext4/</link><pubDate>Thu, 30 Apr 2020 19:42:16 +0900</pubDate><guid>https://minuk.dev/wiki/ext4/</guid><description>&lt;h2 id="abstract">Abstract&lt;/h2>
&lt;ul>
&lt;li>주요 키워드 : scalability, performance, reliability, stability&lt;/li>
&lt;li>2007 년 논문임을 가만하고 읽으면 좋다.&lt;/li>
&lt;/ul>
&lt;h2 id="1-introduction">1. Introduction&lt;/h2>
&lt;ul>
&lt;li>&lt;code>ext3&lt;/code>의 장점 : 안정성(stable), 엄격성(robust)&lt;/li>
&lt;li>&lt;code>ext3&lt;/code>의 단점 : 큰 규모에 한계 (큰 파일과 많은 파일)&lt;/li>
&lt;/ul>
&lt;h3 id="단점-극복에-관한-기존-방안">단점 극복에 관한 기존 방안&lt;/h3>
&lt;ul>
&lt;li>&lt;code>ext3&lt;/code>는 최대 16TB 만 지원가능&lt;/li>
&lt;li>이미 기업에선 한계점이 보임 (디스크 최대 용량은 매년 2배가 되고 있음)&lt;/li>
&lt;li>물론, &lt;code>larger filesystem capacity&lt;/code>와 &lt;code>extents mapping&lt;/code>을 담고 있는 패치를 2006년 선보였으나, 이 패치는 결국 disk의 형식을 변경하고 호환성을 버릴수 밖에 없었다.&lt;/li>
&lt;li>따라서 여기선 ext3를 버리고 ext4로 새로 분기 했다.&lt;/li>
&lt;/ul>
&lt;h3 id="주요-목표">주요 목표&lt;/h3>
&lt;ul>
&lt;li>scalability (확장성), performance (성능), reliability (신뢰성) 을 모두 고려한 주소 방식을 제시하는 것이 목표&lt;/li>
&lt;li>기존의 문제가 해결된 &lt;code>XFS&lt;/code> 기반이나, 혹은 아예 새로운 기반에서 시작하지 않는 이유 =&amp;gt; 호환성 문제 : ext3에서 ext4로 넘어오기 편하게 하기 위해서.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-scalability-enhancements">2. Scalability enhancements&lt;/h2>
&lt;h3 id="21-large-filesystem-파일-시스템의-최대-용량">2.1 Large filesystem (파일 시스템의 최대 용량)&lt;/h3>
&lt;ul>
&lt;li>ext3에선 32-bit block number 를 사용 =&amp;gt; ext4에서 48-bit block number 사용으로 전환 (용량 2의 16승 증가 =&amp;gt; 16,384배 증가)&lt;/li>
&lt;li>각 block 별 크기는 4KB가 기본이고 이를 계산해보면 2^(48+12) = 2^60 bytes = 1EB&lt;/li>
&lt;li>이에 따른 Metadata(
[[superblock]],
[[group descriptor table]]{group descriptor},
[[journal]]) 또한 변화해야한다.
&lt;ul>
&lt;li>따라서 새로운 32-bit fields 를 block group descriptor structure에 추가함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>주소 체계의 변화로 인해, journaling block layer(JBD) 또한 48bit를 지원하도록 수정해야한다. 따라서 JDB2로 분기했고, 아직(이 논문을 낼 당시) 32-bit와 64-bit filesystem이 모두 호환이 되는 JDB를 만들지는 못했다.&lt;/li>
&lt;li>질문점 : 왜 굳이 64가 아닌 48bit를 선택하였는가? 간략하게 설명하면 48 bit 만 사용해도 단순 계산으로 119년이 소모되고, 그 사이에 충분히 논의가 가능하다. 또한 실험을 통해 성능 체크를 해보았을때 64bit는 너무 많다.&lt;/li>
&lt;/ul>
&lt;h3 id="211-future-work">2.1.1 Future work&lt;/h3>
&lt;ul>
&lt;li>현재 (논문을 쓸 당시) 해결 못한 이슈로는 block groups의 수가 여전히 제한되어 있기 때문에 128MB(2^27 bytes) [[block group]] size를 그룹별로 나눠가지면, 최대 2^27/64 = 2^21 의 블록 groups 밖에 만들지 못한다.&lt;/li>
&lt;li>해결책으로 metablock group feture (META_BG) 를 사용해서 추가적으로 Block Group을 만들수 있게 하면 된다. 이럴 경우 block groups의 최대 개수는 2^32 가 되므로 1EB를 충분히 지원할수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="22-extents">2.2 Extents&lt;/h3>
&lt;ul>
&lt;li>ext3에서 사용하던 indirect block mapping은 logical block 과 disk block 이 동일하다. 물론 크기가 작은 파일에 대해서는 효율적이지만 큰파일에 대해서는 그리 효율적이지 않다.&lt;/li>
&lt;li>따라서 ext4_extent structure를 제시하여 length 를 지정할수 있게 한다.&lt;/li>
&lt;li>이때 호환성을 생각해서 ext4_extent_header를 제시한다.
&lt;ul>
&lt;li>eh_entries (몇개의 속성들이 있는지), eh_max (최대 몇개의 속성을 넣을수 있는지), eh_depth (tree의 depth, 0이면 datablock), eh_generation (tree의 세대, 종류를 나타내려고 만듬)&lt;/li>
&lt;li>추가적으로 magic number&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>tree 구조로 파일을 쌓을 꺼기 때문에 ext4_extent_idx 라는 구조를 만들어
&lt;ul>
&lt;li>ei_block(해당하는 block), ei_leaf, ei_leaf_hi, ef_unused 를 제시한다.&lt;/li>
&lt;li>자세한 구조는 논문의 Figure2. Ext4 extent tree layout 을 참조하면 도움이 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="221-future-work">2.2.1 Future work&lt;/h3>
&lt;ul>
&lt;li>사실 extents 자체가 작은 파일들, 매우 단편화된 파일들에서는 효율적이지는 않음.&lt;/li>
&lt;li>그래서 호환성을 생각하면서 ext4_extent_header를 제시해놓았으니 이를 바꿔가면서 이런 파일들을 처리하는 것을 제시해야함.&lt;/li>
&lt;li>속성을 4개 이상 추가하길 원하면 extent tail(inode number랑 inode generation을 포함해서)을 만든 다음 뒤에다가 붙이는 식으로 만들면 됨.&lt;/li>
&lt;/ul>
&lt;h3 id="23-large-files">2.3 Large files&lt;/h3>
&lt;ul>
&lt;li>Linux에서 inode 특성상 ext4에선 2TB만 가능하게 설정되게 되는데 (filesystem 에서 1 block의 크기는 4KB이더라도 disk sector의 크기가 512 Bytes라서, ext4 에서 사용하는 변수의 크기가 32bit임을 감안하면 2^32 * 512 bytes = 2^41 = 2TB, 근데 여기 부분에서 filesystem 1 block 의 크기가 아니라 왜 sector의 크기를 곱하는지 이해가 안됨.)&lt;/li>
&lt;li>따라서 HUGE_FILE flag를 도입 (EXT4_HUGE_FILE_FL), flag 값을 확인하여 처리&lt;/li>
&lt;/ul>
&lt;h3 id="24-large-number-of-files">2.4 Large number of files&lt;/h3>
&lt;ul>
&lt;li>이론적으로 수백억개가 가능하겠지만 inode table의 통계적 수치분석 결과 다 못사용하고 있음.&lt;/li>
&lt;li>inode의 최대개수를 제한(fix)하고 사용해도 괜찮다는 결론이 나옴 (무한히 생성가능하도록 만들 필요가 없음)&lt;/li>
&lt;li>따라서 아래 3가지 관점을 가지고 접근했는데
&lt;ul>
&lt;li>Performance : inode만 보고 바로 block에 접근 가능해야함. (빠르게)&lt;/li>
&lt;li>Robustness : filesystem이 고장나도 e2fsck 가 흩어져 있는 inode table blocks을 찾을수 있어아함.&lt;/li>
&lt;li>Compatibility : 64 bit inode 가 32bit 시스템에서 overflow 되더라도 잘 작동해야함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>미정리 : 그림 참조&lt;/li>
&lt;/ul>
&lt;h3 id="25-directory-scalability">2.5 Directory scalability&lt;/h3>
&lt;ul>
&lt;li>무한 sub directory 기능을 지원하도록 설정해야함.&lt;/li>
&lt;li>많은 수의 entries를 가진 큰 디렉토리도 지원해야하기 때문에 HTree(32bit hashing을 응용해서 BTree를 변형, 그림 참조)&lt;/li>
&lt;/ul>
&lt;h3 id="251-future-work">2.5.1 Future work&lt;/h3>
&lt;ul>
&lt;li>HTree 의 최대 높이가 제한되어 있는데 (2로), 이를 풀어야함.&lt;/li>
&lt;li>디렉토리 내부의 파일 리스트가 파일 이름을 기반으로 정렬되어 있기 때문에, readdir(디렉토리 내부 파일 리스트 출력) 실제론 디스크에서 랜덤 엑세스하는 것과 동일해진다. 따라서 hash 순서로 돌도록 조정해주어야 한다.&lt;/li>
&lt;li>이를 해결하기 위해서 생각한 방법중 하나는, directory entry(inode 를 reference 하고 있는 데이터)가 아니라, inode 자체를 directory에다 넣는 방법을 생각해보았는데, 이러면 readdir 과정에서 inode를 찾느라고 디스크를 계속 읽을 필요 없이, 이미 memory에 올라온 데이터를 읽으면 된다.&lt;/li>
&lt;li>위에서 말한 방법이면 dynamic inode allocation도 가능해지는데 directory가 inode 의 container 개념이 되게 된다.&lt;/li>
&lt;li>hard linked file 같은 경우 여러개의 directory에 동시에 생성되면 되고, inode 자체적으로 link count를 조정하게 할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="26-large-inode-and-fast-extended-attributes">2.6 Large inode and fast extended attributes&lt;/h3>
&lt;ul>
&lt;li>ext3에서는 inode size가 다양하게 되는걸 지원했다.&lt;/li>
&lt;li>ext4에서는 일정 이상 커지면 고정된 128 bytes를 추가하도록 했다. 이렇게 하면, e2fsck가 많은 코드를 짤 필요가 없어진다.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-block-allocation-enhancements">3. Block allocation enhancements&lt;/h2>
&lt;ul>
&lt;li>현대 파일시스템 모두의 목표인 향상된 처리량(increased filesystem throughput)에 대해서 이야기한다.&lt;/li>
&lt;li>단편화(fragmentation), 추가된 metadata들이 일으키는 오버헤드에 대해서 논하고, ext4에 추가된 기능이 얼마나 장점이 많고 block allocation을 잘해서 단편화를 줄이는지 이야기한다.&lt;/li>
&lt;/ul>
&lt;h3 id="31-persistent-preallocation">3.1 Persistent preallocation&lt;/h3>
&lt;ul>
&lt;li>재시작되도 영구적으로 유지되는 사전 할당을 한다.&lt;/li>
&lt;li>사전 할당은 최대한 파일이 연속적으로 할당 되는데 도움이 되고, 사전할당된 영역에 쓰기가 가능하도록 보장해준다. (파일 영역이 커진다고 해서 추가적으로 할당할 일이 없어 단편화 문제를 논하는 듯)&lt;/li>
&lt;li>대부분의 프로그램은 연속적으로 파일을 쓰기때문에 충분하다고 생각하지만, database같이 랜덤한 부분에 쓰는 프로그램들도 고려해주어야함&lt;/li>
&lt;li>ext4_extent 에서 초기화되어있는지 여부에 대한 플레그도 만들어 놨으니 잘 사용할수 있음.&lt;/li>
&lt;li>직접적으로 이 기능을 쓰고 싶으면 posix_fallocate API에 기능을 mapping 해놓았으니 쓰면됨.&lt;/li>
&lt;/ul>
&lt;h3 id="32-delayed-and-multiple-block-allocation">3.2 Delayed and multiple block allocation&lt;/h3>
&lt;h3 id="33-online-defragmentation">3.3 Online defragmentation&lt;/h3>
&lt;h2 id="4-reliability-enhancements">4. Reliability enhancements&lt;/h2>
&lt;h3 id="41-unused-inode-count-and-fast-e2fsck">4.1 Unused inode count and fast e2fsck&lt;/h3>
&lt;h3 id="42-checksumming">4.2 Checksumming&lt;/h3>
&lt;h2 id="5-other-new-features">5. Other new features&lt;/h2>
&lt;h2 id="6-migration-tool">6. Migration tool&lt;/h2>
&lt;h3 id="61-upgrading-from-ext3-to-ext4">6.1 Upgrading from ext3 to ext4&lt;/h3>
&lt;h3 id="62-downgrading-from-ext4-to-ext3">6.2 Downgrading from ext4 to ext3&lt;/h3>
&lt;h2 id="7-performance-evaluation">7. Performance evaluation&lt;/h2>
&lt;h3 id="71-ffsb-comparison">7.1 FFSB comparison&lt;/h3>
&lt;h3 id="72-postmark-comparison">7.2 Postmark comparison&lt;/h3>
&lt;h3 id="73-iozone-comparison">7.3 IOzone comparison&lt;/h3>
&lt;h2 id="8-conclusion">8. Conclusion&lt;/h2></description></item><item><title>계룡 개발 모임</title><link>https://minuk.dev/wiki/%EA%B3%84%EB%A3%A1-%EA%B0%9C%EB%B0%9C-%EB%AA%A8%EC%9E%84/</link><pubDate>Tue, 28 Apr 2020 21:48:13 +0900</pubDate><guid>https://minuk.dev/wiki/%EA%B3%84%EB%A3%A1-%EA%B0%9C%EB%B0%9C-%EB%AA%A8%EC%9E%84/</guid><description>&lt;h2 id="이벤트">이벤트&lt;/h2>
&lt;ul>
&lt;li>[[설대회]]&lt;/li>
&lt;li>[[송편대회]]&lt;/li>
&lt;li>[[Memory_Leak]]&lt;/li>
&lt;li>[[썩어버린 Query Language]]&lt;/li>
&lt;/ul>
&lt;h2 id="논문-스터디">논문 스터디&lt;/h2>
&lt;ul>
&lt;li>[[Endurable_Transient_Inconsistency_in_Byte_Addressable_Persistent_B+-Tree]]&lt;/li>
&lt;li>[[ext4]]{The new ext4 filesystem: current status and future plans}&lt;/li>
&lt;li>[[F2FS]]&lt;/li>
&lt;/ul>
&lt;h2 id="공부한-논문-리스트일자-논문-발표자">공부한 논문 리스트(일자-논문-발표자)&lt;/h2>
&lt;h3 id="2019">2019&lt;/h3>
&lt;ul>
&lt;li>2019/11/09 - F2FS: A New File System for Flash Storage - 이민욱&lt;/li>
&lt;li>2019/11/16 - A Theory of Type Polymorphism in Programming - 최영서&lt;/li>
&lt;li>2019/11/23 - Theorems for Free! - 최성은&lt;/li>
&lt;li>2019/11/30 - Faster algorithms for some optimization problems on collinear points - 구본호&lt;/li>
&lt;li>2019/12/14 - SimpleSSD: Modeling Solid State Drives for Holistic System Simulation - 이민욱&lt;/li>
&lt;li>2019/12/21 - APPx: An Automated App Acceleration Framework for Low Latency Mobile App - 최영서&lt;/li>
&lt;li>2019/12/28 - Coloring of cartesian product of cycle graph, C_7 X C_n - 구본호&lt;/li>
&lt;/ul>
&lt;h3 id="2020">2020&lt;/h3>
&lt;ul>
&lt;li>2020/01/04 - A Categorical Programming Language - 최성은&lt;/li>
&lt;li>2020/01/18 - Endurable Transient Inconsistency in Byte-Addressable Persistent B+ Tree - 이민욱&lt;/li>
&lt;li>2020/01/25 - Optimising Existing Software with Genetic Programming - 최영서&lt;/li>
&lt;li>2020/02/15 - Notion of Computation and Monad - 최성은&lt;/li>
&lt;li>2020/02/22 - The dark side of UX design - 구본호&lt;/li>
&lt;li>2020/02/29 - Spectre Attacks: Exploiting Speculative Execution - 하재형&lt;/li>
&lt;li>2020/03/07 - Why Should I Trust You - Explaining the Predictions of Any Classifier - 백동진&lt;/li>
&lt;li>2020/03/14 - An In-Depth Study of Next Generation Interface for Emerging Non-Volatile Memories - 이민욱&lt;/li>
&lt;li>2020/03/21 - Computing the Galois Group of a Polynomial - 최성은&lt;/li>
&lt;li>2020/03/28 - Terrain Synthesis from Digital Elevation Models - 이도운&lt;/li>
&lt;li>2020/04/04 - MapReduce: Simplified Data Processing on Large Clusters - 최영서&lt;/li>
&lt;li>2020/04/11 - Skip lists: A probabilistic alternative to balanced tree - 구본호&lt;/li>
&lt;li>2020/04/18 - The Web&amp;rsquo;s Identity Crisis : Understanding the Effectiveness of Website Identity Indicators. - 하재형&lt;/li>
&lt;li>2020/04/25 - Transforming Auto-encoders - 백동진&lt;/li>
&lt;li>2020/05/02 - Ext4: The Next Generation of Ext2/3 Filesystem - 이민욱&lt;/li>
&lt;li>2020/05/09 - Ghosts of Departed Proofs (Functional Pearl) - 최성은&lt;/li>
&lt;li>2020/05/16 - Physically-Based Shading at Disney - 이도운&lt;/li>
&lt;/ul></description></item><item><title>SSD</title><link>https://minuk.dev/wiki/ssd/</link><pubDate>Tue, 28 Apr 2020 21:46:46 +0900</pubDate><guid>https://minuk.dev/wiki/ssd/</guid><description>&lt;h2 id="다른-링크">다른 링크&lt;/h2>
&lt;ul>
&lt;li>[[SSD 공부자료 모음]]&lt;/li>
&lt;li>[[SSD(Solid-State Drive)]]&lt;/li>
&lt;li>[[simplessd]]&lt;/li>
&lt;li>[[nvme]]&lt;/li>
&lt;li>[[verilog]]&lt;/li>
&lt;li>[[MRAM]]&lt;/li>
&lt;li>[[open-nvm]]&lt;/li>
&lt;/ul>
&lt;h2 id="용어">용어&lt;/h2>
&lt;ul>
&lt;li>[[FTL]]
&lt;ul>
&lt;li>[[LPN]]&lt;/li>
&lt;li>[[PPN]]&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>gutentags</title><link>https://minuk.dev/wiki/gutentags/</link><pubDate>Tue, 28 Apr 2020 21:21:45 +0900</pubDate><guid>https://minuk.dev/wiki/gutentags/</guid><description>&lt;h2 id="발생한-문제점">발생한 문제점&lt;/h2>
&lt;ul>
&lt;li>&lt;code>git&lt;/code> 에서 커밋할때마다 아래와 같은 에러로그가 뜬다&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>hint: Waiting for your editor to close the file...
Error detected while processing DirChanged Autocommands for &amp;#34;*&amp;#34;:
E475: Invalid argument: Channel doesn&amp;#39;t exist
E475: Invalid argument: Channel doesn&amp;#39;t exist
Error detected while processing function &amp;lt;SNR&amp;gt;149_nvim_job_exit_wrapper[1]..gutentags#ctags#on_job_exit[1]..gutentags#remove_job_by_data[2]..gutentags#remove_job:
line 22:&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>해결책 : 아래줄을 추가해줘서 특정 filetypes를 제외해준다. 일단 지금은 gitcommit 만 필요해서 처리했고 나머진 나중에 천천히 추가할 예정&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vimrc" data-lang="vimrc">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">gutentags_exclude_filetypes&lt;/span> = [&lt;span style="color:#e6db74">&amp;#39;gitcommit&amp;#39;&lt;/span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Modern C++ Design Pattern/Chatper 18. 메멘토</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-18--%EB%A9%94%EB%A9%98%ED%86%A0/</link><pubDate>Tue, 28 Apr 2020 21:07:07 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-18--%EB%A9%94%EB%A9%98%ED%86%A0/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>커맨드 패턴에서 이론적으로 과거의 어떤 지점으로 상태를 되돌릴수 있다&lt;/li>
&lt;li>메멘토 패턴은 모든 임의의 과거가 아니라 필요할 때 특정 시점으로 되돌리기만 하면 될때 사용한다.&lt;/li>
&lt;li>특정 시점의 시스템 상태를 저장하고, 읽기 전용 속성을 가지고 자체적으로 아무 동작을 안하는 객체를 만든다 (이걸 토큰이라고 부르기도 한다)&lt;/li>
&lt;/ul>
&lt;h2 id="특징">특징&lt;/h2>
&lt;ul>
&lt;li>불변 속성을 가진다. 저장된 잔고 값이 나중에 변경될 수 있다면 존재한 적 없는 과거 상태로 되돌리는게 가능해져 버린다.&lt;/li>
&lt;li>대상 객체에 friend로 선언한다. 필드 변수에 접근하기 위해 필수적으로 필요하다. 물론 종첩 클래스로 만들어 접근할 수도 있다.&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 17. 매개자</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-17--%EB%A7%A4%EA%B0%9C%EC%9E%90/</link><pubDate>Mon, 27 Apr 2020 21:43:50 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-17--%EB%A7%A4%EA%B0%9C%EC%9E%90/</guid><description>&lt;h2 id="간단-설명">간단 설명&lt;/h2>
&lt;ul>
&lt;li>서로 다른 컴포넌트 간에 포인터나 직접적인 참조를 통한 커뮤니케이션이 필요하다&lt;/li>
&lt;li>일부 경우 상대방 객체의 존재를 알아야하는점, 객체의 생성/소멸 시점에대한 관리 때문에 포인터나 참조로 접근하는게 불안정할 수 있다.&lt;/li>
&lt;li>이를 위한 매커니즘&lt;/li>
&lt;li>전역 정적 변수이거나 모든 컴포넌트에 그 참조가 노출되어야 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="내용">내용&lt;/h2>
&lt;ul>
&lt;li>여기서는 &lt;code>Boost.Signals2&lt;/code> 라이브러리를 사용해서 구현한다.&lt;/li>
&lt;li>잘 모르겠다. 일단 요약부분만 적고 나중에 필요하면 찾아보자&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>매개자 디자인 패턴은 시스탬 내 컴포넌트 모두가 참조할 수 있는 어떤 중간자를 컴포넌트 간에 서로 직접적으로 참조하지 않더라도 커뮤니케이션을 할수 있게 한다는 것을 기본아이디어로 한다.&lt;/li>
&lt;li>가장 단순한 구현 형태는 맴버 변수로 리스트를 두고 그 리스트를 검사하여 필요한 항목만 선택적으로 처리하는 함수를 만드는 것이다.&lt;/li>
&lt;/ul></description></item><item><title>boj</title><link>https://minuk.dev/wiki/boj/</link><pubDate>Mon, 27 Apr 2020 21:37:43 +0900</pubDate><guid>https://minuk.dev/wiki/boj/</guid><description>&lt;ul>
&lt;li>[[정우 대회]]&lt;/li>
&lt;/ul>
&lt;h2 id="리스트">리스트&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 10830 제출 (MOD 주의하자)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 1300 제출 (long long 주의하자)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2261 line sweep으로 푼거 다시 제출 (시간복잡도 잘 생각하기)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 1167 dfs 를 주의하면서 짜자&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 11725&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 12025 index_tree 로 풀어보기 (압축하는데 시간이 생각보다 많이드나? ㅠ 조금더 고민해보자)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 1967 : 1167 하고 똑같네&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 1086 : 50자 때문에 삽질을 엄청 많이 했다.. 입력이 숫자라고 해서 항상 long long 으로 입력 받을수 있는 건 아니란걸 다시 상기하게 됬다. 이외에도 자리수를 셀때 모듈러 한걸 그 숫자라고 생각해서 삽질을 많이 했다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2618 : 경찰차 - 2일 정도 고민했는데 도저히 모르겠어서 구글링해서 답지를 봤다. 나름 변명하자면, 전부 다 본건 아니고 dp 조건이 뭔지 봤다.(사실 이거면 다 본게 맞긴하지만) 처음 보는 형태여서, 답지를 본게 크게 후회되지는 않는다. 새로 배운걸 요약하자면, 굳이 dp table을 모두 채울 필요도 없고, 여러 index 중 1개가 우리가 구하는 조건일수 있다. ~~흠.. 머라 서술할지가 어렵네 ~~ 그리고 dp table 에 대해서 조금더 생각하게 됬고, dp index로 둔것끼리 중복된 역할을 하는지 의심해봐야된다는 것이다. dp 자체가 메모리를 적게 사용하는건 아니니, 결정하는 최소 조건만이 들어가야지 공간, 시간 복잡도가 안터진다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 13344 : Chess Tournament - 단순한 위상정렬 문제이다. solved.ac 에서 플레티넘 5로 책정됬길레 공부가 될것 같아서 풀었는데, 별 큰 도움 안됬다. 그냥 단순히 Union-Find + Indegree 문제라서, 골드 1로 측정되도 괜찮을것 같은데, 아마도 2개 섞인거라 다들 플레티넘 준듯&amp;hellip; 큰 이득이 없었다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 11266 : 단절점 - 예전에 주변에서 공부하라고 했는데, 공부 안하다가 DFS Spanning Tree 문제에 크게 당한 이후로 공부해야 겠다고 생각만 하다가 오늘 문제를 풀어봤다. 개념만 보고 풀었는데 통과해서 다행이다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 11500 : 단절선 - &lt;del>단절점에서 조금 더 공부하면 될것 같아서 적어둠&lt;/del> 그냥 생각 조금만 틀면 되서 해결함. 문제 조건을 잘 봐야한다는걸 다시 깨달음. 정렬을 안해서 1번 틀림.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 2150 : Strongly Connected Component - 강결합컴포넌트(SCC) 라고 불리는 문제이다. 코사라주(Kosaraju) 알고리즘을 배웠는데, 생각보다 구현이 간단하다고 생각해서 풀어봤다. 중간에 &lt;code>push_back(move(data))&lt;/code>을 해줬는데, vector 의 deep copy가 일어날까봐 걱정한것 빼고는 크게 특별한게 없는 문제였다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 13510 : 트리와 쿼리 1 - 처음에 보고 한참동안 몰라서 초록책을 계속 뒤져보다가 트리 거의 마지막에 나와있길레, 이거다 싶어서 구현을 시작했다. 책만 보고 구현하는게 목표여서 점심시간, 모각코 시간마다 코딩했는데 계속 틀려서 30번 가량 틀렸다. 중간에 이걸로 푸는게 아닌가?? 하면서 다른 사람 구현체를 가져다가 채점해봤는데, 맞더라&amp;hellip;. 구현이 틀렸다는걸 알고 다시 한번 읽어보니까 놓친 부분이 있더라
&lt;ul>
&lt;li>사용하는 개념은 Heavy-Light Decomposition 이라는 건데, 예전에 아는 형이 알려줬던 트리 펼치기와 비슷하지만, 연속성 보장 등 측면에서 그 다음단계 알고리즘 인것같다. 아이디어가 굉장히 참신하다고 생각했다. 틀린건 Heavy Path 안에서 index의 연속을 보장하기 위해서, dfs 순서를 신경써줘야 되는데, 대부분의 구현체에서는 이를 edge의 0번 index가 항상 heavy 하도록 구현하는 것인데, 나는 괜히 heavy 배열을 만들어서 이를 해결하려다가 dfs 순서 보장이 안되서 틀렸었다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 14888 : 처음에는 dp로도 되겠는데? 라고 접근 했다가 한번 틀렸다. 곱하기나 나누기를 조금만 생각해보면 dp조건이 성립하지 않았다는 걸 알수 있었다. 그냥 전부 돌아보는 방법으로 해결했다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 15481 : 두번째로 큰 스페닝 트리를 도저히 못풀겠어서 파란책(하얀책이라고도 불림)을 뒤져봐도 두번째로 큰스페닝 트리의 시작복잡도는 O(VE)라고 나와있어서, 결국 검색해봤다. 생각보다 단순한 테크닉이여서 허무했다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 17412 : 네트워크 플로우 문제이다. 예전에 찾아둔걸 참고해서 제출했다. 그런데 백지상태에서 똑같이 코드를 짜보니까 flowing 함수를 잘 못짜겠어서 다시 공부해야한다.&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 1626 : 두번째로 작은 스패닝 트리- 15481 에서 단순히 그냥 2번째 값을 출력하면 될줄 알고 계속 시도하다가 많이 틀렸다. 코너케이스를 결국 못찾아서 검색해봤다&amp;hellip;. 이런 간단한 것도 생각 못하다니 바보같다. maxEdge를 구할때 현재 추가 되고 있는 Edge와 같은 값이 경로상에서 나오면, 그 다음걸 선택해야하는걸 나중에 알게되었다. 처음에는 단순히 long long overflow 인줄 알았는데 ㅠ. 새로운 개념을 공부한다고 잘해지는건 아닌데 마치 잘해진것처럼 착각만 하고 있었다. 이런걸 생각해낼수 있도록 더 열심히 해야겠다.
&lt;ul>
&lt;li>이거 틀렸었는데 통과됬었다&amp;hellip;. 생각해보니 그냥 except이면 다른애를 선택하는게 아니라, 항상 모든 경우에 대해서 1, 2번쨰로 큰 애들을 고려해야하는데, 이게 고려가 안됬었다. 데이터 추가 요청 했다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7966 - template : stl 사용법을 잘못 알고 있어서 한참을 틀렸다. multiset을 다시 공부해야겠다. 2주 넘게 고민하다가 결국 아는 형에게 도움을 청해서 풀었다. 그러고도 잘 모르겠어서 구사과 블로그도 참고했다. 나중에 꼭 다시 풀어봐야할 문제이다.&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3878 - Separate Points







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%eb%b3%b4%ec%a1%b0%ec%a0%95%eb%a6%ac%201.%20%ec%9e%84%ec%9d%98%ec%9d%98%20%eb%91%90%20%eb%b3%bc%eb%a1%9d%20%eb%8b%a4%ea%b0%81%ed%98%95%20A,%20B%ea%b0%80%20%ec%84%9c%eb%a1%9c%20%eb%b6%84%eb%a6%ac%ea%b0%80%20%ea%b0%80%eb%8a%a5%ed%95%98%eb%8b%a4%eb%a9%b4,%20%eb%b6%84%eb%a6%ac%ed%95%98%eb%8a%94%20%ec%9e%84%ec%9d%98%ec%9d%98%20%ec%84%a0%20%ec%a4%91%ec%97%90%20%eb%b3%bc%eb%a1%9d%20%eb%8b%a4%ea%b0%81%ed%98%95%20A%20%eb%98%90%eb%8a%94%20B%eb%a5%bc%20%ea%b5%ac%ec%84%b1%ed%95%98%eb%8a%94%20%eb%b3%80%ea%b3%bc%20%ed%8f%89%ed%96%89%ed%95%9c%20%ec%84%a0%eb%b6%84%ec%9d%b4%20%ec%a1%b4%ec%9e%ac%ed%95%9c%eb%8b%a4.">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>보조정리 1. 임의의 두 볼록 다각형 A, B가 서로 분리가 가능하다면, 분리하는 임의의 선 중에 볼록 다각형 A 또는 B를 구성하는 변과 평행한 선분이 존재한다.&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;/li>
&lt;/ul>
&lt;p>보조정리 2. 제 1, 2사분면 위에 존재하는 임의의 볼록다각형 A의 꼭짓점 중, 가장 x축과 가까운 꼭짓점은 변의 기울기가 음수에서 양수로 되는 점들과, x축에 평행한 변들의 꼭짓점 중에 존재한다.
정리. 임의의 두 볼록 다각형 A, B에 대해, 한 볼록 다각형 A의 임의의 변을 a 라 하고 a의 기울기를 a&amp;rsquo;라 할때, B 중 기울기가 a&amp;rsquo;이거나, a&amp;rsquo;와 가장 가까운 두변들의 꼭짓점들이 모두 변 a의 바깥쪽에 있다면 두 볼록다각형은 겹쳐져 있지 않다.
```
* 지금 AC 받은 풀이는 convex hull + n^2 짜리 탐색인데, 슬랙에서 아시는분이 nlgn 도 가능할거라고 하면서 이해하는걸 도와줬다. 아직까지는 논리적으로 맞는거 같아서 구현해보고 제출해볼 예정이다.&lt;/p></description></item><item><title>Modern C++ Design Pattern/Chatper 16. 반복자</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-16--%EB%B0%98%EB%B3%B5%EC%9E%90/</link><pubDate>Tue, 21 Apr 2020 23:12:43 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-16--%EB%B0%98%EB%B3%B5%EC%9E%90/</guid><description>&lt;h2 id="간략-설명">간략 설명&lt;/h2>
&lt;ul>
&lt;li>복잡한 데이터 구조를 다루어야 할 때 데이터 순회 문제를 해결하는 방법&lt;/li>
&lt;/ul>
&lt;h2 id="표준-라이브러리의-반복자">표준 라이브러리의 반복자&lt;/h2>
&lt;ul>
&lt;li>&lt;code>begin&lt;/code>&lt;/li>
&lt;li>&lt;code>end&lt;/code>&lt;/li>
&lt;li>&lt;code>rbegin&lt;/code>&lt;/li>
&lt;li>&lt;code>rend&lt;/code>&lt;/li>
&lt;li>&lt;code>cbegin&lt;/code>&lt;/li>
&lt;li>&lt;code>cend&lt;/code>&lt;/li>
&lt;li>&lt;code>crbegin&lt;/code>&lt;/li>
&lt;li>&lt;code>crend&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="이진-트리의-탐색">이진 트리의 탐색&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> U&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PreOrderIterator&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BinaryTree&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>left &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>right &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>parent &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BinaryTree&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> tree &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> T&lt;span style="color:#f92672">&amp;amp;&lt;/span> value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> value(value) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node(&lt;span style="color:#66d9ef">const&lt;/span> T&lt;span style="color:#f92672">&amp;amp;&lt;/span> value, Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> left, Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> value(value), left(left), right(right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>left&lt;span style="color:#f92672">-&amp;gt;&lt;/span>tree &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>right&lt;span style="color:#f92672">-&amp;gt;&lt;/span>tree &lt;span style="color:#f92672">=&lt;/span> tree;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>left&lt;span style="color:#f92672">-&amp;gt;&lt;/span>parent &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">-&amp;gt;&lt;/span>right&lt;span style="color:#f92672">-&amp;gt;&lt;/span>parent &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_tree&lt;/span>(BinaryTree&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> t)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tree &lt;span style="color:#f92672">=&lt;/span> t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (left) left&lt;span style="color:#f92672">-&amp;gt;&lt;/span>set_tree(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (right) right&lt;span style="color:#f92672">-&amp;gt;&lt;/span>set_tree(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BinaryTree&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> root &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">BinaryTree&lt;/span>(Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> root)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> root{ root }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root&lt;span style="color:#f92672">-&amp;gt;&lt;/span>set_tree(&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typedef&lt;/span> PreOrderIterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&lt;/span> iterator;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iterator &lt;span style="color:#a6e22e">begin&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;*&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (n&lt;span style="color:#f92672">-&amp;gt;&lt;/span>left)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#f92672">=&lt;/span> n&lt;span style="color:#f92672">-&amp;gt;&lt;/span>left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> iterator{ n }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> iterator &lt;span style="color:#a6e22e">end&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> iteraotr { &lt;span style="color:#66d9ef">nullptr&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> U&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PreOrderIterator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>U&lt;span style="color:#f92672">&amp;gt;*&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">PreOrderIterator&lt;/span>(Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>U&lt;span style="color:#f92672">&amp;gt;*&lt;/span> current)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> current(current)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">!=&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> PreOrderIterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>U&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> other)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> current &lt;span style="color:#f92672">!=&lt;/span> other.current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>U&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">*&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>current; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PreOrderIterator&lt;span style="color:#f92672">&amp;lt;&lt;/span>U&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">++&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (current&lt;span style="color:#f92672">-&amp;gt;&lt;/span>right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#f92672">=&lt;/span> current&lt;span style="color:#f92672">-&amp;gt;&lt;/span>right;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (current&lt;span style="color:#f92672">-&amp;gt;&lt;/span>left)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#f92672">=&lt;/span> current&lt;span style="color:#f92672">-&amp;gt;&lt;/span>left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>U&lt;span style="color:#f92672">&amp;gt;*&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> current&lt;span style="color:#f92672">-&amp;gt;&lt;/span>parent;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (p &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> current &lt;span style="color:#f92672">==&lt;/span> p&lt;span style="color:#f92672">-&amp;gt;&lt;/span>right)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#f92672">=&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> p&lt;span style="color:#f92672">-&amp;gt;&lt;/span>parent;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#f92672">=&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="코루틴을-이용한-순회">코루틴을 이용한 순회&lt;/h2>
&lt;ul>
&lt;li>흐음&amp;hellip; 잘 모르겠다. 아직 이런 불편함을 안겪어봐서인듯&lt;/li>
&lt;/ul></description></item><item><title>회고/2020.04.20</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-04-20/</link><pubDate>Mon, 20 Apr 2020 23:11:34 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-04-20/</guid><description>&lt;h2 id="회고">회고&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%ea%b3%a0%ec%9e%91%2012%ec%9d%bc%20%eb%a7%8c%ec%97%90%20%ec%93%b0%eb%8a%94%20%ed%9a%8c%ea%b3%a0%eb%8b%a4.%20%ec%95%84%eb%ac%b4%eb%9e%98%eb%8f%84%20%ec%9c%84%ed%82%a4%eb%a5%bc%20%ea%b3%84%ec%86%8d%20%ec%82%ac%ec%9a%a9%ed%95%98%eb%8b%a4%eb%b3%b4%eb%8b%88%20%ed%9a%8c%ea%b3%a0%ea%b0%80%20%eb%88%88%ec%97%90%0a%eb%9d%84%ec%97%ac%ec%84%9c%20%ec%93%b0%ea%b2%8c%eb%90%98%eb%8a%94%20%ea%b2%83%20%ea%b0%99%eb%8b%a4.%0a%ec%a7%80%eb%82%9c%2012%ec%9d%bc%20%ea%b0%84%20%ed%81%b0%20%ec%9d%bc%ec%9d%80%20%ec%97%86%eb%8b%a4.%20%ec%95%84%eb%a7%88%eb%8f%84?%0a%ec%9e%a5%ed%98%81%ec%a7%84%20%ec%84%a0%eb%b0%b0%ec%97%90%ea%b2%8c%20%ec%83%81%ec%9e%a5%ec%9d%84%20%ec%b9%b4%ed%86%a1%ec%9c%bc%eb%a1%9c%20%eb%b0%9b%ec%95%98%eb%8b%a4.%20%28%ec%8b%a4%eb%ac%bc%eb%a1%9c%20%eb%b0%9b%ec%9c%bc%eb%a9%b4%20%ec%a2%8b%ea%b2%a0%ec%a7%80%eb%a7%8c%29%0a%ec%97%ac%ec%a0%84%ed%9e%88%20%ed%9c%b4%ea%b0%80%eb%8a%94%20%eb%aa%bb%eb%82%98%ea%b0%80%eb%8a%94%20%ec%83%81%ed%83%9c%ec%9d%b4%eb%8b%a4.%20%ec%bd%94%eb%a1%9c%eb%82%98%20%ec%82%ac%ed%83%9c%ea%b0%80%20%ec%83%9d%ea%b0%81%eb%b3%b4%eb%8b%a4%20%ec%9e%a5%ea%b8%b0%ed%99%94%20%eb%90%98%ea%b3%a0%20%ec%9e%88%eb%8b%a4%0a%eb%aa%a8%ea%b0%81%ec%bd%94%28%eb%aa%a8%ec%97%ac%ec%84%9c%20%ea%b0%81%ec%9e%90%20%ec%bd%94%eb%94%a9%29%ec%9d%84%20%ec%98%a4%eb%8a%98%20%ec%8b%9c%eb%8f%84%ed%96%88%eb%8b%a4.%20%ed%98%84%ec%9e%ac%eb%8a%94%20%eb%8f%84%ec%9a%b4%ec%9d%b4%ed%98%95%eb%a7%8c%20%ea%b0%99%ec%9d%b4%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8a%94%eb%8d%b0%0a%eb%82%98%ec%a4%91%ec%97%90%eb%8a%94%20%ec%a1%b0%ea%b8%88%eb%8d%94%20%eb%a7%8e%ec%9d%80%20%ec%82%ac%eb%9e%8c%eb%93%a4%ec%9d%b4%20%ed%96%88%ec%9c%bc%eb%a9%b4%20%ec%a2%8b%ea%b2%a0%eb%8b%a4.%20%ec%9d%b4%eb%b2%88%ec%97%90%eb%8a%94%207%ec%8b%9c%eb%b6%80%ed%84%b0%209%ec%8b%9c%ea%b9%8c%ec%a7%80%20%ec%a7%84%ed%96%89%ed%96%88%eb%8b%a4.%0a%eb%82%98%eb%8a%94%20%eb%b0%b1%ec%a4%80%ec%9d%84%20%ed%92%80%ec%97%88%ea%b3%a0,%20%eb%8f%84%ec%9a%b4%ec%9d%b4%20%ed%98%95%ec%9d%80%20C&amp;#43;&amp;#43;%eb%a1%9c%20%eb%84%a4%ed%8a%b8%ec%9b%8c%ed%81%ac%20%ed%94%84%eb%a0%88%ec%9e%84%ec%9b%8c%ed%81%ac%eb%a5%bc%20%ec%a7%9c%ea%b3%a0%ec%9e%88%eb%8a%94%20%eb%93%af%20%ed%95%98%eb%8b%a4.%0ashared_ptr,%20unique_ptr%ec%9d%98%20protected%20destructor%ec%97%90%20%eb%8c%80%ed%95%b4%ec%84%9c%20%ec%9d%b4%ec%95%bc%ea%b8%b0%eb%a5%bc%20%ed%96%88%eb%8b%a4.%0a%ec%83%9d%ed%99%9c%ea%b4%80%ec%97%90%ec%84%9c%eb%8a%94%20%eb%82%98%eb%a6%84%20%ed%8e%b8%ec%95%88%ed%95%98%eb%8b%a4.%20%ec%95%84%eb%ac%b4%eb%9e%98%eb%8f%84%20%eb%ac%b8%ec%a0%9c%ea%b0%80%20%eb%90%ac%eb%8d%98%20%ec%82%ac%eb%9e%8c%ec%9d%b4%20%eb%82%98%ea%b0%80%ec%84%9c%20%ea%b7%b8%eb%9f%b0%ea%b2%83%20%ea%b0%99%eb%8b%a4.%0a%ec%98%81%ec%96%b4%20%ea%b3%b5%eb%b6%80%ea%b0%80%20%ec%86%90%ec%97%90%20%ec%9e%a1%ed%9e%88%ec%a7%80%20%ec%95%8a%eb%8a%94%eb%8b%a4%e3%85%a0%20%eb%8b%a8%ec%96%b4%eb%8a%94%20%ec%96%b4%eb%96%bb%ea%b2%8c%eb%93%a0%20%ed%95%98%ea%b3%a0%20%ec%9e%88%eb%8a%94%eb%8d%b0%20%ec%98%81%ec%96%b4%20%eb%a6%ac%eb%94%a9%ec%9d%80%20%ec%89%bd%ec%a7%80%0a%ec%95%8a%eb%8b%a4.%20%eb%a8%bc%ea%b0%80%20%ec%8b%9c%ec%9e%91%ed%95%b4%ec%95%bc%eb%90%98%eb%8a%94%eb%8d%b0%20%eb%9d%bc%ea%b3%a0%20%ec%83%9d%ea%b0%81%eb%a7%8c%20%ed%95%98%ea%b3%a0%20%ec%b1%85%ec%9d%80%20%ec%95%88%20%ed%8e%bc%ec%b3%90%eb%b3%b4%ea%b3%a0%20%ec%9e%88%eb%8b%a4.%0a%ea%b3%84%eb%a3%a1%ec%a0%84%ec%82%b0%ed%95%9c%eb%a7%88%eb%8b%b9%203%eb%a5%bc%20%ec%a4%80%eb%b9%84%ed%95%98%ea%b8%b0%20%ec%8b%9c%ec%9e%91%ed%96%88%eb%8b%a4.%20%ec%96%b4%eb%96%bb%ea%b2%8c%20%ec%a7%84%ed%96%89%ed%95%a0%ec%a7%80%20%eb%a7%89%eb%a7%89%ed%95%98%eb%8b%a4.%20%ed%95%9c%eb%b2%88%ec%9d%80%20%ed%9a%8c%ec%9d%98%ec%97%90%ec%84%9c%0a%eb%aa%a8%ec%95%84%ec%84%9c%20%ec%9d%b4%ec%95%bc%ea%b8%b0%ed%95%98%eb%8a%94%ea%b2%8c%20%ec%a2%8b%ec%9d%84%20%ea%b2%83%20%ea%b0%99%ec%9d%80%eb%8d%b0...%20%eb%82%98%eb%9d%bc%eb%8a%94%20%ec%82%ac%eb%9e%8c%20%ec%9e%90%ec%b2%b4%ea%b0%80%20%ec%96%b4%ea%b7%b8%eb%a1%9c%eb%8a%94%0a%ec%9e%98%eb%81%84%eb%8a%94%eb%8d%b0%28%ed%9a%8c%ec%9e%a5%ec%9d%b4%20%eb%90%98%ea%b8%b0%ec%97%90%20%ec%a2%8b%ec%95%84%eb%b3%b4%ec%9d%b4%eb%8a%94%29%20%ec%8b%a4%ec%a0%9c%eb%a1%9c%20%eb%a7%a1%ec%9d%80%20%eb%92%a4%ec%97%90%20%ec%a7%84%ed%96%89%ec%9d%84%20%ec%9e%98%20%eb%aa%bb%ed%95%98%eb%8a%94%ea%b1%b4%ea%b0%80%20%ec%8b%b6%eb%8b%a4.%0a%ed%9d%90%ec%9d%8c...%20%ec%95%9e%ec%9c%bc%eb%a1%9c%20%ec%9e%90%ec%a3%bc%20%ec%93%b8%ea%ba%bc%20%ea%b0%99%ec%9c%bc%eb%8b%88%20%ec%98%a4%eb%8a%98%ec%9d%80%20%ec%97%ac%ea%b8%b0%ea%b9%8c%ec%a7%80">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>고작 12일 만에 쓰는 회고다. 아무래도 위키를 계속 사용하다보니 회고가 눈에
띄여서 쓰게되는 것 같다.
지난 12일 간 큰 일은 없다. 아마도?
장혁진 선배에게 상장을 카톡으로 받았다. (실물로 받으면 좋겠지만)
여전히 휴가는 못나가는 상태이다. 코로나 사태가 생각보다 장기화 되고 있다
모각코(모여서 각자 코딩)을 오늘 시도했다. 현재는 도운이형만 같이 하고 있는데
나중에는 조금더 많은 사람들이 했으면 좋겠다. 이번에는 7시부터 9시까지 진행했다.
나는 백준을 풀었고, 도운이 형은 C&amp;#43;&amp;#43;로 네트워크 프레임워크를 짜고있는 듯 하다.
shared_ptr, unique_ptr의 protected destructor에 대해서 이야기를 했다.
생활관에서는 나름 편안하다. 아무래도 문제가 됬던 사람이 나가서 그런것 같다.
영어 공부가 손에 잡히지 않는다ㅠ 단어는 어떻게든 하고 있는데 영어 리딩은 쉽지
않다. 먼가 시작해야되는데 라고 생각만 하고 책은 안 펼쳐보고 있다.
계룡전산한마당 3를 준비하기 시작했다. 어떻게 진행할지 막막하다. 한번은 회의에서
모아서 이야기하는게 좋을 것 같은데... 나라는 사람 자체가 어그로는
잘끄는데(회장이 되기에 좋아보이는) 실제로 맡은 뒤에 진행을 잘 못하는건가 싶다.
흐음... 앞으로 자주 쓸꺼 같으니 오늘은 여기까지&lt;/code>&lt;/pre>
 
&lt;/div></description></item><item><title>Modern C++ Design Pattern/Chatper 15. 인터프리터</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-15--%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/</link><pubDate>Mon, 20 Apr 2020 22:46:23 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-15--%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/</guid><description>&lt;h2 id="인터프리터-디자인-패턴">인터프리터 디자인 패턴?&lt;/h2>
&lt;ul>
&lt;li>입력 데이터를 해석하는 것&lt;/li>
&lt;li>대부분 텍스트이지만 텍스트에 한정되지는 않음.&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>&amp;hellip; 이책에서 굳이 이 내용을 다루는 이유를 모르겠다. 차라리 &lt;code>Lex/Yacc&lt;/code>를
보는게 좋다고 생각한다.&lt;/li>
&lt;li>아마도 &lt;code>Boost.Spirit&lt;/code>을 알려주고 싶어서 굳이 끼워넣은 느낌?&lt;/li>
&lt;li>키워드만 정리하자면, &lt;code>AST&lt;/code>, &lt;code>Lex/Yacc&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 14. 커맨드</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-14--%EC%BB%A4%EB%A7%A8%EB%93%9C/</link><pubDate>Sun, 19 Apr 2020 21:40:23 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-14--%EC%BB%A4%EB%A7%A8%EB%93%9C/</guid><description>&lt;h2 id="필요성">필요성&lt;/h2>
&lt;ul>
&lt;li>어떤 객체를 활용할 때 직접 그 객체의 API를 호출하여 조작하는 대신, 작업을 어떻게 하라고 명령을 보내는 방식을 제안한다.&lt;/li>
&lt;/ul>
&lt;h2 id="시나리오">시나리오&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20BankAccount%0a%7b%0a%20%20int%20balance%20=%200;%0a%20%20int%20overdraft_limit%20=%20-500;%0a%0a%20%20void%20deposit%28int%20amount%29%0a%20%20%7b%0a%20%20%20%20balance%20&amp;#43;=%20amount;%0a%20%20%20%20cout%20%3c%3c%20%22deposited%20%22%20%3c%3c%20amount%20%3c%3c%20%22,%20balance%20is%20now%20%22%20%3c%3c%20balance%20%3c%3c%20%22%5cn%22;%0a%20%20%7d%0a%0a%20%20void%20withdraw%28int%20amount%29%0a%20%20%7b%0a%20%20%20%20if%20%28balance%20-%20amount%20%3e=%20overdraft_limit%29%0a%20%20%20%20%7b%0a%20%20%20%20%20%20balance%20-=%20amount;%0a%20%20%20%20%20%20cout%20%3c%3c%20%22withdrew%20%22%20%3c%3c%20amount%20%3c%3c%20%22,%20balance%20is%20now%20%22%20%3c%3c%20balance%20%3c%3c%20%22%5cn%22;%0a%20%20%20%20%7d%0a%20%20%7d%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BankAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> balance &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> overdraft_limit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">500&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">deposit&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> balance &lt;span style="color:#f92672">+=&lt;/span> amount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;deposited &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> amount &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, balance is now &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> balance &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">withdraw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (balance &lt;span style="color:#f92672">-&lt;/span> amount &lt;span style="color:#f92672">&amp;gt;=&lt;/span> overdraft_limit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> balance &lt;span style="color:#f92672">-=&lt;/span> amount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;withdrew &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> amount &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, balance is now &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> balance &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="커맨드-패턴의-구현">커맨드 패턴의 구현&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BankAccountCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount&lt;span style="color:#f92672">&amp;amp;&lt;/span> account;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Action&lt;/span> { deposit, withdraw } action;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> amount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccountCommand(BankAccount&lt;span style="color:#f92672">&amp;amp;&lt;/span> account, &lt;span style="color:#66d9ef">const&lt;/span> Action action, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> account(account), action(action), amount(amount) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (action)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> deposit:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.deposit(amount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> withdraw:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.withdraw(amount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">BankAccount ba;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">BankAccountCommand cmd{ba, BankAccountCommand::deposit, 100};
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">cmd.call();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="되돌리기undo-작업">되돌리기(Undo) 작업&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BankAccount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">widthdraw&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (balance &lt;span style="color:#f92672">-&lt;/span> amount &lt;span style="color:#f92672">&amp;gt;=&lt;/span> overdraft_limit)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> balance &lt;span style="color:#f92672">-=&lt;/span> amount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;widthdrew &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> amount &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;, balance now &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> balance &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> true;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> flase;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Command&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">undo&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BankAccountCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccount&lt;span style="color:#f92672">&amp;amp;&lt;/span> account;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Action&lt;/span> { deposit, withdraw } action;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> amount;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> widthdrawal_succeeded;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> BankAccountCommand(BankAccount&lt;span style="color:#f92672">&amp;amp;&lt;/span> account, &lt;span style="color:#66d9ef">const&lt;/span> Action action, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> amount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> account(account), action(action), amount(amount), widthdrawal_succeeded{false} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (action)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> deposit:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.deposit(amount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> withdraw:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> widthdrawal_succeeded &lt;span style="color:#f92672">=&lt;/span> account.withdraw(amount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">undo&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span> (action)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> widthdraw:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (widthdrawal_succeeded)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.deposit(amount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> deposit:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> account.widthdraw(amount);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">BankAccount ba;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">BankAccountCommand cmd{ba, BankAccountCommand::deposit, 100};
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">cmd.call();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="컴포지트-커맨드">컴포지트 커맨드&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">CompositeBankAccountCommand&lt;/span> &lt;span style="color:#f92672">:&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>BankAccountCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>, Command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CompositeBankAccountCommand(&lt;span style="color:#66d9ef">const&lt;/span> initializer_list&lt;span style="color:#f92672">&amp;lt;&lt;/span>value_type&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> items)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>BankAccountCommand&lt;span style="color:#f92672">&amp;gt;&lt;/span>(items) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> cmd : &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmd.call();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">undo&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> it &lt;span style="color:#f92672">=&lt;/span> rbegin(); it &lt;span style="color:#f92672">!=&lt;/span> rend(); &lt;span style="color:#f92672">++&lt;/span>it)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>undo();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> succeeded;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="명령과-조회의-분리">명령과 조회의 분리&lt;/h2>
&lt;ul>
&lt;li>Command Query Separation (CQS)&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>작업 지시 내용을 감싸는 특별한 객체를 두어 객체와 커뮤니케이션 하게 한다.&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 13. 책임사슬(Chain of Responsibility)</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-13--%EC%B1%85%EC%9E%84%EC%82%AC%EC%8A%ACchain-of-responsibility/</link><pubDate>Sat, 18 Apr 2020 22:14:11 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-13--%EC%B1%85%EC%9E%84%EC%82%AC%EC%8A%ACchain-of-responsibility/</guid><description>&lt;h2 id="시나리오">시나리오&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20Creature%0a%7b%0a%20%20string%20name;%0a%20%20int%20attack,%20defense;%0a%20%20//%20Constructor,%20operator...%0a%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Creature&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> attack, defense;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Constructor, operator...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="포인터-사슬">포인터 사슬&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CreatureModifier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CreatureModifier&lt;span style="color:#f92672">*&lt;/span> next{&lt;span style="color:#66d9ef">nullptr&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creture; &lt;span style="color:#75715e">// reference, pointer or shared_ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> CreatureModifier(Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creature)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> creature(creture) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(CreatureModifier&lt;span style="color:#f92672">*&lt;/span> cm)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (next) next&lt;span style="color:#f92672">-&amp;gt;&lt;/span>add(cm);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> next &lt;span style="color:#f92672">=&lt;/span>cm;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handle&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (next) next&lt;span style="color:#f92672">-&amp;gt;&lt;/span>handle();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>참조를 넘겨받아 저장하고 변경할 준비&lt;/li>
&lt;li>추상 클래스가 아님&lt;/li>
&lt;li>&lt;code>next&lt;/code>는 다음 변경 작업을 가리킴&lt;/li>
&lt;li>&lt;code>add()&lt;/code>를 통해서 작업 사슬에 연결하여 추가&lt;/li>
&lt;li>&lt;code>handle()&lt;/code> 맴버 함수는 단순히 다음 항목을 처리한다. 원한다면 오버라이딩해서
처리한다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoubleAttackModifier&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> CreatureModifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> DoubleAttackModifier(Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creature)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> CreatureModifier(creature) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handle&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> creature.attack &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CreatureModifier&lt;span style="color:#f92672">::&lt;/span>handle();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">NoBonusesModifier&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> CreatureModifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> NoBonusesModifer(Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creature)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> CreatureModifier(creature) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">handle&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Do Nothing
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="브로커-사슬">브로커 사슬&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20Game%0a%7b%0a%20%20signal%3cvoid%28Query&amp;amp;%29%3e%20queries;%20//%20Boost.Signals2%0a%7d;%0a%0astruct%20Query%0a%7b%0a%20%20string%20creature_name;%0a%20%20enum%20Argumnet%20%7b%20attack,%20defense%20%7d%20argument;%0a%20%20int%20result;%0a%7d;%0a%0aclass%20Creature%0a%7b%0a%20%20Game&amp;amp;%20game;%0a%20%20int%20attack,%20defense;%0apublic:%0a%20%20string%20name;%0a%20%20Creature%28Game&amp;amp;%20game,%20...%29%20:%20game%7bgame%7d,%20...%20%7b%20...%20%7d%0a%20%20//%20Other%20Members%0a%7d;%0a%0aint%20Creature::get_attack%28%29%20const%0a%7b%0a%20%20Query%20q%7b%20name,%20Query::Argument::attack,%20attack%20%7d;%0a%20%20game.queries%28q%29;%0a%20%20return%20q.result;%0a%7d%0a%0aclass%20CreatureModifier%0a%7b%0a%20%20Game&amp;amp;%20game;%0a%20%20Creature&amp;amp;%20creature;%0apublic:%0a%20%20CreatureModifier%28Game&amp;amp;%20game,%20Creature&amp;amp;%20creature%29%0a%20%20%20%20:%20game%28game%29,%20creature%28creature%29%20%7b%7d%0a%7d;%0a%0aclass%20DoubleAttackModifier%20:%20public%20CreatureModifier%0a%7b%0a%20%20connection%20conn;%0apublic:%0a%20%20DoubleAttackModifier%28Game&amp;amp;%20game,%20Creature&amp;amp;%20creature%29%0a%20%20%20%20:%20CreatureModifier%28game,%20creature%29%0a%20%20%7b%0a%20%20%20%20conn%20=%20game.queries.connect%28[&amp;amp;]%28Query&amp;amp;%20q%29%20%7b%0a%20%20%20%20%20%20if%20%28q.creature_name%20==%20creature.name%20&amp;amp;&amp;amp;%0a%20%20%20%20%20%20%20%20q.argument%20==%20Query::Argument::attack%29%0a%20%20%20%20%20%20%20%20q.result%20*=%202;%0a%20%20%20%20%7d%29%0a%20%20%7d%0a%0a%20%20~DoubleAttackModifier%28%29%20%7b%20conn.disconnect%28%29;%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Game&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> signal&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">void&lt;/span>(Query&lt;span style="color:#f92672">&amp;amp;&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span> queries; &lt;span style="color:#75715e">// Boost.Signals2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Query&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string creature_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Argumnet&lt;/span> { attack, defense } argument;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Creature&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Game&lt;span style="color:#f92672">&amp;amp;&lt;/span> game;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> attack, defense;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Creature(Game&lt;span style="color:#f92672">&amp;amp;&lt;/span> game, ...) &lt;span style="color:#f92672">:&lt;/span> game{game}, ... { ... }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Other Members
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> Creature&lt;span style="color:#f92672">::&lt;/span>get_attack() &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Query q{ name, Query&lt;span style="color:#f92672">::&lt;/span>Argument&lt;span style="color:#f92672">::&lt;/span>attack, attack };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> game.queries(q);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> q.result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">CreatureModifier&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Game&lt;span style="color:#f92672">&amp;amp;&lt;/span> game;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CreatureModifier(Game&lt;span style="color:#f92672">&amp;amp;&lt;/span> game, Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creature)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> game(game), creature(creature) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DoubleAttackModifier&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> CreatureModifier
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connection conn;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DoubleAttackModifier(Game&lt;span style="color:#f92672">&amp;amp;&lt;/span> game, Creature&lt;span style="color:#f92672">&amp;amp;&lt;/span> creature)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> CreatureModifier(game, creature)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn &lt;span style="color:#f92672">=&lt;/span> game.queries.connect([&lt;span style="color:#f92672">&amp;amp;&lt;/span>](Query&lt;span style="color:#f92672">&amp;amp;&lt;/span> q) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (q.creature_name &lt;span style="color:#f92672">==&lt;/span> creature.name &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.argument &lt;span style="color:#f92672">==&lt;/span> Query&lt;span style="color:#f92672">::&lt;/span>Argument&lt;span style="color:#f92672">::&lt;/span>attack)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.result &lt;span style="color:#f92672">*=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">~&lt;/span>DoubleAttackModifier() { conn.disconnect(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>컴포넌트들이 어떤 명령이나 조회 작업을 차례로 처리할 수 있게 하는 매우 단순한
디자인 패턴이다.&lt;/li>
&lt;li>이론적으로 포인터 사슬은 보통 &lt;code>vector&lt;/code>나 &lt;code>list&lt;/code>로 대체될 수 있다.&lt;/li>
&lt;li>좀 더 복잡한 브로커 사슬의 구현에서는 매개자 패턴과 관찰자 패턴을 활용한다.&lt;/li>
&lt;/ul></description></item><item><title>coc (vim plugin coc)</title><link>https://minuk.dev/wiki/coc/</link><pubDate>Wed, 15 Apr 2020 23:13:04 +0900</pubDate><guid>https://minuk.dev/wiki/coc/</guid><description>coc 설정 + ccls 설정</description></item><item><title>Regular Expression (regex)</title><link>https://minuk.dev/wiki/regex/</link><pubDate>Mon, 13 Apr 2020 23:48:20 +0900</pubDate><guid>https://minuk.dev/wiki/regex/</guid><description>&lt;h2 id="정규-표현식-문법">정규 표현식 문법&lt;/h2>
&lt;ul>
&lt;li>&lt;code>^x&lt;/code> : x문자로 시작됨&lt;/li>
&lt;li>&lt;code>x$&lt;/code> : x문자로 종료됨&lt;/li>
&lt;li>&lt;code>.x&lt;/code> : 임의의 문자&lt;/li>
&lt;/ul>
&lt;h2 id="자주-쓰는-정규표현식">자주 쓰는 정규표현식&lt;/h2>
&lt;h3 id="이메일--a-z0-9_-a-z0-9a-z0-924">이메일 : &lt;code>^[a-z0-9_+.-]+@([a-z0-9]+\.)+[a-z0-9]{2,4}$&lt;/code>&lt;/h3>
&lt;h3 id="url--filegophernewsnntptelnethttpsftpssftpa-z0-9-a-z0-924">URL : &lt;code>^(file|gopher|news|nntp|telnet|https?|ftps?|sftp):\/\/([a-z0-9-]+\.)+[a-z0-9]{2,4}.*$&lt;/code>&lt;/h3>
&lt;h3 id="html--">HTML : &lt;code>\&amp;lt;(/?[^\&amp;gt;]+)\&amp;gt;/&lt;/code>&lt;/h3>
&lt;h3 id="전화번호--d3d3-4d4">전화번호 : &lt;code>(\d{3}).*(\d{3, 4}).*(\d{4})&lt;/code>&lt;/h3>
&lt;h3 id="특정-확장자를-가진-파일명--sjpgpngmp32">특정 확장자를 가진 파일명 : &lt;code>([^\s]+(?=\.(jpg|png|mp3))\.\2)&lt;/code>&lt;/h3>
&lt;h3 id="1부터-50-사이의-번호---1과-50-포함--1-911-410-9150">1부터 50 사이의 번호 - 1과 50 포함 : &lt;code>^[1-9]{1}|^[1-4]{1}[0-9]{1}$|^50&lt;/code>&lt;/h3>
&lt;h3 id="16-진수-색-코드--a-fa-f0-93a-fa-f0-93">16 진수 색 코드 : &lt;code>#?([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?&lt;/code>&lt;/h3>
&lt;h3 id="적어도-소문자-하나-대문자-하나-숫자-하나가-포함되어-있는-8글자15글자--da-za-z815">적어도 소문자 하나, 대문자 하나, 숫자 하나가 포함되어 있는 8글자~15글자 : &lt;code>(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}&lt;/code>&lt;/h3></description></item><item><title>glob</title><link>https://minuk.dev/wiki/glob/</link><pubDate>Mon, 13 Apr 2020 22:06:38 +0900</pubDate><guid>https://minuk.dev/wiki/glob/</guid><description>&lt;h2 id="glob">glob&lt;/h2>
&lt;h3 id="wikipedia">Wikipedia&lt;/h3>
&lt;p>In computer programming, glob patterns specify sets of filenames with wildcard characters. For example, the Unix Bash shell command mv *.txt textfiles/ moves (mv) all files with names ending in .txt from the current directory to the directory textfiles. Here, * is a wildcard standing for &amp;ldquo;any string of characters&amp;rdquo; and *.txt is a glob pattern. The other common wildcard is the question mark (?), which stands for one character. In addition to matching filenames, globs are also used widely for matching arbitrary strings (wildcard matching). In this capacity a common interface is fnmatch.&lt;/p></description></item><item><title>Modern C++ Design Pattern/Chapter 12. 프록시</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-12--%ED%94%84%EB%A1%9D%EC%8B%9C/</link><pubDate>Sun, 12 Apr 2020 23:10:03 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-12--%ED%94%84%EB%A1%9D%EC%8B%9C/</guid><description>&lt;h2 id="스마트-포인터">스마트 포인터&lt;/h2>
&lt;ul>
&lt;li>가장 단순하면서도 직접적인 프록시 패턴의 예&lt;/li>
&lt;/ul>
&lt;h2 id="속성-프록시">속성 프록시&lt;/h2>
&lt;ul>
&lt;li>다른 프로그래밍 언어에서는 &lt;code>get/set&lt;/code> 메서드를 지원하는 경우도 있음.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="template%20%3ctypename%20T%3e%20struct%20Property%0a%7b%0a%20%20T%20value;%0a%20%20Property%28const%20T%20initial_value%29%0a%20%20%7b%0a%20%20%20%20*this%20=%20initial_value;%0a%20%20%7d%0a%20%20operate%20T%28%29%0a%20%20%7b%0a%20%20%20%20return%20value;%0a%20%20%7d%0a%20%20T%20operator=%28T%20new_value%29%0a%20%20%7b%0a%20%20return%20value%20=%20new_value;%0a%20%20%7d%0a%7d%0a%0a%0astruct%20Creature%0a%7b%0a%20%20Property%3cint%3e%20strength%7b%2010%20%7d;%0a%20%20Property%3cint%3e%20agility%7b%205%20%7d;%0a%7d%0a%0aCreature%20creature;%0acreature.agility%20=%2020;%0aauto%20x%20=%20creature.strength;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Property&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Property(&lt;span style="color:#66d9ef">const&lt;/span> T initial_value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#f92672">=&lt;/span> initial_value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> operate &lt;span style="color:#a6e22e">T&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(T new_value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> value &lt;span style="color:#f92672">=&lt;/span> new_value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Creature&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Property&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> strength{ &lt;span style="color:#ae81ff">10&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Property&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> agility{ &lt;span style="color:#ae81ff">5&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Creature creature;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>creature.agility &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">auto&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> creature.strength;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="가상-프록시">가상 프록시&lt;/h2>
&lt;ul>
&lt;li>&lt;code>nullptr&lt;/code>나 초기화되지 않은 포인터를 역참조하면 크래시가 발생함.&lt;/li>
&lt;li>&lt;code>lazy instantiation&lt;/code>을 하여 불필요하게 일찍 자원이 할당되지 않게 할수 있다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Image&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Bitmap&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Bitmap(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Loading image from &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> filename &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Drawing Image &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> filename &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">LazyBitmap&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LazyBitmap(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> filename(filename) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">~&lt;/span>LazyBitmap() { &lt;span style="color:#66d9ef">delete&lt;/span> bmp; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>bmp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bmp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Bitmap(filename);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bmp&lt;span style="color:#f92672">-&amp;gt;&lt;/span>draw();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Bitmap &lt;span style="color:#f92672">*&lt;/span>bmp(&lt;span style="color:#66d9ef">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string filename;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="커뮤니케이션-프록시">커뮤니케이션 프록시&lt;/h2>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>[[Modern C++ Design Pattern/Chapter 9. 데코레이터]]{데코레이터 패턴}과는 다르게 프록시는 어떤 객체에 새로운 맴버를 추가하여 기능을 확장하지 않는다.&lt;/li>
&lt;li>프록시에는 다양한 종류가 있다.
&lt;ul>
&lt;li>속성 프록시는 필드를 대신하여 클래스에 내장되는 객체로 접근/대입 연사자가 구동될 때 추가적인 작업을 수행할 수 있게 한다.&lt;/li>
&lt;li>버츄얼 프록시는 감싸고 있는 객체에 가상으로 접근할 수 있게 한다. 이를 통해 느긋한 객체의 로딩을 구현할 수 있다.&lt;/li>
&lt;li>커뮤니케이션 프록시는 객체의 물리적 위치를 바꾸면서도 API를 기존과 거의 동일하게 유지할 수 있게 해준다.&lt;/li>
&lt;li>로깅 프록시는 감싸진 함수가 호출될 때 로깅과 같은 추가적인 작업을 수행할 수 있게 해준다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>hugo</title><link>https://minuk.dev/wiki/hugo/</link><pubDate>Sun, 12 Apr 2020 20:41:09 +0900</pubDate><guid>https://minuk.dev/wiki/hugo/</guid><description>&lt;h2 id="draft가-true인-것들-보기">&lt;code>draft&lt;/code>가 &lt;code>true&lt;/code>인 것들 보기&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="$%20hugo%20list%20drafts">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ hugo list drafts&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>tee (Linux Command)</title><link>https://minuk.dev/wiki/tee/</link><pubDate>Sun, 12 Apr 2020 20:29:35 +0900</pubDate><guid>https://minuk.dev/wiki/tee/</guid><description>&lt;h2 id="사용-용도">사용 용도&lt;/h2>
&lt;ul>
&lt;li>&lt;code>stdin&lt;/code>을 &lt;code>stdout&lt;/code> 과 파일로 모두 보내고 싶을때&lt;/li>
&lt;/ul></description></item><item><title>rm (Linux Command)</title><link>https://minuk.dev/wiki/rm/</link><pubDate>Sun, 12 Apr 2020 20:22:32 +0900</pubDate><guid>https://minuk.dev/wiki/rm/</guid><description>&lt;h2 id="자주-사용하는-거-모음">자주 사용하는 거 모음&lt;/h2>
&lt;h3 id="특정-파일-제외하고-지우기">특정 파일 제외하고 지우기&lt;/h3>
&lt;ul>
&lt;li>단일&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="$%20rm%20-v%20!%28%22filename%22%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rm -v !&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;filename&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>다중&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="$%20rm%20-v%20!%28%22filename1%22%20%7c%20%22filename2%22%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ rm -v !&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;filename1&amp;#34;&lt;/span> | &lt;span style="color:#e6db74">&amp;#34;filename2&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>만약 zsh을 쓰고 있다면&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="$%20setopt%20extendedglob%0a$%20rm%20%5e%28%22filename1%22%20%7c%20%22filename2%22%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-zsh" data-lang="zsh">&lt;span style="display:flex;">&lt;span>$ setopt extendedglob
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ rm ^&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;filename1&amp;#34;&lt;/span> | &lt;span style="color:#e6db74">&amp;#34;filename2&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="delete-files-using-extended-pattern-matching-operators">Delete Files Using Extended Pattern Matching Operators&lt;/h2>
&lt;ul>
&lt;li>&lt;code>*(pattern-list)&lt;/code> : matches zero or more occurrences of the specified patterns&lt;/li>
&lt;li>&lt;code>?(pattern-list)&lt;/code> : matches zero or one occurence of the specified patterns&lt;/li>
&lt;li>&lt;code>+(pattern-list)&lt;/code> : matches one or more occurrences of the spcified patterns&lt;/li>
&lt;li>&lt;code>@(pattern-list)&lt;/code> : matches one of the spcified patterns&lt;/li>
&lt;li>&lt;code>!(pattern-list)&lt;/code> : matches anytthing except one of the given patterns&lt;/li>
&lt;li>자세한건 [[glob]] 참고&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chapter 11. 플라이웨이트</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-11--%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8/</link><pubDate>Sat, 11 Apr 2020 23:28:27 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-11--%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8/</guid><description>&lt;ul>
&lt;li>플라이웨이트 패턴 : 많은 수의 가벼운 임시 객체들을 &amp;ldquo;스마트 참조&amp;quot;로 사용하는 것을 말하며, 그러한 객체들을 플라이웨이트라고 부른다.&lt;/li>
&lt;/ul>
&lt;h2 id="사용자-이름">사용자 이름&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>User(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> first_name, &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> last_name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> first_name{add(first_anem)}, last_name{add(last_name)} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> key first_name, last_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> bimap&lt;span style="color:#f92672">&amp;lt;&lt;/span>key, string&lt;span style="color:#f92672">&amp;gt;&lt;/span> names; &lt;span style="color:#75715e">// boost:bimap(양방향 map)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> key seed;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> key &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> s) { ...}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">static&lt;/span> key &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> it &lt;span style="color:#f92672">=&lt;/span> names.right.find(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (it &lt;span style="color:#f92672">==&lt;/span> names.right.end())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> names.insert({&lt;span style="color:#f92672">++&lt;/span>seed, s});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> seed;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> it&lt;span style="color:#f92672">-&amp;gt;&lt;/span>second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> get_first_name() &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> names.left.find(last_name)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> get_last_name9) &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> names.left.find(last_name)&lt;span style="color:#f92672">-&amp;gt;&lt;/span>second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="boostflyweight">&lt;code>Boost.Flyweight&lt;/code>&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BetterFormattedText&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">TextRange&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> start, end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> capitalize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">covers&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> position) &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> position &lt;span style="color:#f92672">&amp;gt;=&lt;/span> start &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> position &lt;span style="color:#f92672">&amp;lt;=&lt;/span> end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string plain_text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>TextRange&lt;span style="color:#f92672">&amp;gt;&lt;/span> formatting;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TextRange&lt;span style="color:#f92672">&amp;amp;&lt;/span> get_range(&lt;span style="color:#66d9ef">int&lt;/span> start, &lt;span style="color:#66d9ef">int&lt;/span> end)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> formatting.emplace_back(TextRange{ start, end });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>formatting.rbegin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">friend&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>ostream&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>ostream&lt;span style="color:#f92672">&amp;amp;&lt;/span> os,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> BetterFormattedText&lt;span style="color:#f92672">&amp;amp;&lt;/span> obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (size_t i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> obj.plain_text.length(); i&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> obj.plain_text[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> rng : obj.formatting)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (rng.covers(i) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rng.capitalize)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> toupper(c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#f92672">+=&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> os &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>기본적으로 공간 절약을 위한 테크닉이다.&lt;/li>
&lt;li>다른 예로는 API 토큰을 전달 받는 경우 등의로 활용 가능하다.&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chapter 10. 퍼사드</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-10--%ED%8D%BC%EC%82%AC%EB%93%9C/</link><pubDate>Thu, 09 Apr 2020 23:56:51 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-10--%ED%8D%BC%EC%82%AC%EB%93%9C/</guid><description>&lt;h2 id="퍼사드는-어디에-있는가">퍼사드는 어디에 있는가?&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Console&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Viewport&lt;span style="color:#f92672">*&amp;gt;&lt;/span> viewports;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Size charSize, gridSize;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console&lt;span style="color:#f92672">::&lt;/span>Console(&lt;span style="color:#66d9ef">bool&lt;/span> fullscreen, &lt;span style="color:#66d9ef">int&lt;/span> char_width, &lt;span style="color:#66d9ef">int&lt;/span> char_height,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> width, &lt;span style="color:#66d9ef">int&lt;/span> height, optional&lt;span style="color:#f92672">&amp;lt;&lt;/span>Size&lt;span style="color:#f92672">&amp;gt;&lt;/span> client_size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Implement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Console&lt;span style="color:#f92672">::&lt;/span>Console(&lt;span style="color:#66d9ef">const&lt;/span> ConsoleCreateionParamters&lt;span style="color:#f92672">*&lt;/span> ccp) { ... }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ConsoleCreationParameters&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> optional&lt;span style="color:#f92672">&amp;lt;&lt;/span>Size&lt;span style="color:#f92672">&amp;gt;&lt;/span> client_size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> character_width{&lt;span style="color:#ae81ff">10&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> character_height{&lt;span style="color:#ae81ff">14&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> width{&lt;span style="color:#ae81ff">20&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> height{&lt;span style="color:#ae81ff">30&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> fullscreen{false};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> create_default_view_and_buffer{true};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>하나 이상의 복잡한 서브 시스템 앞에 단순한 인터페이스를 두기 위한 방법&lt;/li>
&lt;/ul></description></item><item><title>Effective Debugging/Chatper 7. 컴파일 시간 기법</title><link>https://minuk.dev/wiki/effective-debugging/chapter-7--%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84-%EA%B8%B0%EB%B2%95/</link><pubDate>Thu, 09 Apr 2020 22:13:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chapter-7--%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84-%EA%B8%B0%EB%B2%95/</guid><description>&lt;h2 id="item-54-테스트-케이스를-작성하여-오류-찾기">Item 54. 테스트 케이스를 작성하여 오류 찾기&lt;/h2>
&lt;ul>
&lt;li>문제를 안정적으로 재현할 수 있도록 테스트 케이스 작성&lt;/li>
&lt;li>테스트 케이스를 최소한으로 간소화&lt;/li>
&lt;li>안정장치 확보 (찾아낸 문제만 걸러내는 단위 테스트나 회귀 테스트를 코드에 추가한다.)&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>제대로 작성된 최소한의 테스트 케이스를 통해 오류가 발생하는 지점과 해결책을 찾을 수 있다.&lt;/li>
&lt;li>사용한 테스트 케이스는 단위 테스트나 회귀 테스트 형태로 소프트웨어에 추가한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-55-오류가-발생한-즉시-프로그램-중단하기">Item 55. 오류가 발생한 즉시 프로그램 중단하기&lt;/h2>
&lt;ul>
&lt;li>루틴의 입력값을 검사하거나 호출한 API가 정상적으로 실행됬는지 확인할 때 Assertion을 활용한다.&lt;/li>
&lt;li>라이브러리에서 검사를 엄격히 수행하도록 설정한다.&lt;/li>
&lt;li>동적 프로그램 분석 기법을 이용하여 프로그램의 연산 과정을 검사한다.&lt;/li>
&lt;li>유닉스 쉘 스크립트를 작성할 때 -e 옵션을 설정해서 명령어가 에러로 인해 종료하면 스크립트가 종료되게 만든다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-56-애플리케이션-로그-파일-분석하기">Item 56. 애플리케이션 로그 파일 분석하기&lt;/h2>
&lt;ul>
&lt;li>&lt;code>/var/log&lt;/code> 에 남는 로그파일 목록
&lt;ul>
&lt;li>인증 관련 : auth.log&lt;/li>
&lt;li>백그라운드 프로세스 : daemon.log&lt;/li>
&lt;li>커널 : kern.log&lt;/li>
&lt;li>디버그 정보 : debug&lt;/li>
&lt;li>기타 메시지 : messages&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-1">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>오류가 발생한 애플리케이션의 로그 파일부터 분석한다.&lt;/li>
&lt;li>오류의 원인이 드러날 정도로 애플리케이션 로그 출력의 상세한 정도를 높인다.&lt;/li>
&lt;li>해결하려는 문제만 드러나도록 로그 파일의 출력 범위를 설정하거 나 로그에 나온 내용을 필터링한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-57-시스템-및-프로세스-연산에-대한-프로파일-분석하기">Item 57. 시스템 및 프로세스 연산에 대한 프로파일 분석하기&lt;/h2>
&lt;ul>
&lt;li>성능에 관련된 문제를 분석할 때는 CPU와 I/O, 메모리에 대한 사용량과 포화도를 살펴본다.&lt;/li>
&lt;li>프로세스의 CPU 및 메모리 사용 현황에 대한 프로파일을 분석하여 성능에 관련딘 문제를 발생하는 코드 영역의 범위를 좁혀나간다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-58-실행-흐름-추적하기">Item 58. 실행 흐름 추적하기&lt;/h2>
&lt;ul>
&lt;li>디버깅하는 애플리케이션에 로깅 기능이 없어도 데이터를 뽑아낼 수 있다.&lt;/li>
&lt;li>문제를 해결하기 위해 소프트웨어를 디버깅 버전으로 만들다 보면 문제를 가려버리거나 찾기 힘들게 될 수도 있는데, 실행 흐름을 뽑아내면 디버깅 버전을 따로 만들지 않아도 된다.&lt;/li>
&lt;li>GUI 디버거를 사용할 때에 비해 시스템에 주는 부담이 적어서 실전 환경에서도 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-2">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>시스템 함수나 라이브러리 호출의 실행 흐름을 추적하는 도구를 사용하면 소스 코드를 직접 건드리지 않고도 프로그램의 동작을 관찰할 수 있다.&lt;/li>
&lt;li>윈도우 시스템이라면 윈도우 성능 툴킷, 리눅스라면 SystemTap, macOS나 솔라리스, FreeBSD를 사용한다면 DTrace 도구의 사용법을 익혀서 이를 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-59-동적-프로그램-분석-도구-활용하기">Item 59. 동적 프로그램 분석 도구 활용하기&lt;/h2>
&lt;ul>
&lt;li>동적 프로그램 분석도구를 사용하면 코드를 실제로 실행할 때 발생하는 문제를 찾을 수 있다.&lt;/li>
&lt;/ul></description></item><item><title>Effective Debugging/Chatper 8. 멀티스레드 코드 디버깅</title><link>https://minuk.dev/wiki/effective-debugging/chapter-8--%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%EB%94%94%EB%B2%84%EA%B9%85/</link><pubDate>Thu, 09 Apr 2020 22:13:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chapter-8--%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%BD%94%EB%93%9C-%EB%94%94%EB%B2%84%EA%B9%85/</guid><description>&lt;h2 id="item-60-사후-디버깅으로-교착-상태-분석하기">Item 60. 사후 디버깅으로 교착 상태 분석하기&lt;/h2>
&lt;ul>
&lt;li>교착상태를 디버깅할 때는 교착 상태에 빠진 시점의 프로그램 상태(스냅샵)를 구한 뒤, 스레드나 코드 흐름에서 자원을 기다리는 코드 지점을 찾아낸다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-61-프로그램의-실행-흐름을-기록한-뒤-재생하기">Item 61. 프로그램의 실행 흐름을 기록한 뒤 재생하기&lt;/h2>
&lt;ul>
&lt;li>발생 빈도가 낮은 동시성 오류를 찾을때는 오류가 발생하는 상황을 기록하고, 그 내용을 분석해서, 기록된 데이터를 다시 디버거로 재생하는 방식으로 작업한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-62-전문-도구로-교착-상태와-경쟁-상태-찾기">Item 62. 전문 도구로 교착 상태와 경쟁 상태 찾기&lt;/h2>
&lt;ul>
&lt;li>정적 분석 도구를 이용하여 멀티스레드 프로그램에 존재하는 동기화 및 잠금 관련 에러를 걸러낸다.&lt;/li>
&lt;li>동적 분석 도구를 이용하여 멀티스레드 프로그램에서 API를 잘못 사용하는 부분, 교착 상태나 데이터 경쟁 현상이 발생할 가능성이 있는 부분이 있는지 검사한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-63-예측할-수-없는-부분을-분리하거나-제거하기">Item 63. 예측할 수 없는 부분을 분리하거나 제거하기&lt;/h2>
&lt;ul>
&lt;li>코드에서 동시에 실행되는 부분을 따로 분리한다. 그러면 각 여역에 가장 적합한 디버깅 도구와 기법을 적용하기 쉽다.&lt;/li>
&lt;li>예측하기 힘든 부분을 모의 객체로 분리하거나 예측할 수 있는 형태로 바꾸는 기법으로 테스팅 및 디버깅용 환경을 구성한다. 그러면 코드를 반복해서 실행해볼 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-64-자원-경쟁으로-인해-발생한-성능-확장성-문제-분석하기">Item 64. 자원 경쟁으로 인해 발생한 성능 확장성 문제 분석하기&lt;/h2>
&lt;ul>
&lt;li>멀티스레드 프로그램에서 성능에 대한 확장성 문제가 발생하면 프로파일링 도구를 이요하여 자원 경쟁이 발생하는지 확인한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-65-성능-카운터를-이용하여-거짓-공유-발생-지점-찾기">Item 65. 성능 카운터를 이용하여 거짓 공유 발생 지점 찾기&lt;/h2>
&lt;ul>
&lt;li>거짓 공유 문제를 분석하기 위해 성능 카운터를 모니터링할 때는 프로파일링 도구에서 제공하는 기능을 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-66-고수준-추상화를-사용하도록-코드-다시-작성하기">Item 66. 고수준 추상화를 사용하도록 코드 다시 작성하기&lt;/h2>
&lt;ul>
&lt;li>동시성 관련 오류가 발생할 가능성이 높은 부분은 특수한 프로그래밍 언어와 프로세스, 도구, 프레임워크, 라이브러리에서 제공하는 고수준의 구문을 최대한 활요하도록 새로 작성한다.&lt;/li>
&lt;/ul></description></item><item><title>TODO Lists</title><link>https://minuk.dev/wiki/todo/</link><pubDate>Wed, 08 Apr 2020 23:56:59 +0900</pubDate><guid>https://minuk.dev/wiki/todo/</guid><description>해야할 일들</description></item><item><title>vim</title><link>https://minuk.dev/wiki/vim/</link><pubDate>Wed, 08 Apr 2020 23:44:39 +0900</pubDate><guid>https://minuk.dev/wiki/vim/</guid><description>&lt;h2 id="사용할만한-plugin-정리">사용할만한 Plugin 정리&lt;/h2>
&lt;ul>
&lt;li>TODO:
&lt;ul>
&lt;li>[[vim-go]]&lt;/li>
&lt;li>context.vim&lt;/li>
&lt;li>coc&lt;/li>
&lt;li>airline&lt;/li>
&lt;li>indentLine&lt;/li>
&lt;li>tagbar&lt;/li>
&lt;li>fzf.vim&lt;/li>
&lt;li>ripgrep.vim&lt;/li>
&lt;li>trailingspace&lt;/li>
&lt;li>vim-startify&lt;/li>
&lt;li>syntatistic&lt;/li>
&lt;li>vim-bufkill&lt;/li>
&lt;li>delimitMate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="vimwiki">vimwiki&lt;/h2>
&lt;ul>
&lt;li>[[vimwiki]]&lt;/li>
&lt;/ul>
&lt;h2 id="coc">coc&lt;/h2>
&lt;ul>
&lt;li>[[coc]]&lt;/li>
&lt;/ul>
&lt;h2 id="tag">tag&lt;/h2>
&lt;ul>
&lt;li>[[gutentags]]&lt;/li>
&lt;/ul></description></item><item><title>vimwiki</title><link>https://minuk.dev/wiki/vimwiki/</link><pubDate>Wed, 08 Apr 2020 22:51:20 +0900</pubDate><guid>https://minuk.dev/wiki/vimwiki/</guid><description>vimwiki 사용하면서 깨달은 것들</description></item><item><title>회고/2020-04-08</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-04-08/</link><pubDate>Wed, 08 Apr 2020 13:38:46 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-04-08/</guid><description>2020-04-08 회고</description></item><item><title>cloudatcost</title><link>https://minuk.dev/wiki/cloudatcost/</link><pubDate>Tue, 07 Apr 2020 22:55:20 +0900</pubDate><guid>https://minuk.dev/wiki/cloudatcost/</guid><description>&lt;h1 id="cloudatcost">CloudatCost&lt;/h1>
&lt;h2 id="panel-주소">panel 주소&lt;/h2>
&lt;pre>&lt;code>https://panel.cloudatcost.com/index.php#
&lt;/code>&lt;/pre>
&lt;h2 id="idpw">ID/PW&lt;/h2>
&lt;pre>&lt;code>아이디는 네이버 메일, 패스워드는 네이버 메일에서 cloudatcost 검색하면 최근에 reset한 메일이 있다.
panel 은 패스워드가 다르다 맨마지막쯔음에 저장되어 있다.
&lt;/code>&lt;/pre></description></item><item><title>web</title><link>https://minuk.dev/wiki/web/</link><pubDate>Tue, 07 Apr 2020 22:52:05 +0900</pubDate><guid>https://minuk.dev/wiki/web/</guid><description>&lt;h2 id="tool">Tool&lt;/h2>
&lt;ul>
&lt;li>[[nginx]]&lt;/li>
&lt;li>[[cloudatcost]]&lt;/li>
&lt;li>[[gandi.net]]&lt;/li>
&lt;/ul>
&lt;h2 id="projects">Projects&lt;/h2>
&lt;ul>
&lt;li>[[my-page]]&lt;/li>
&lt;/ul>
&lt;h2 id="basics">Basics&lt;/h2>
&lt;ul>
&lt;li>[[Load-Balance]]&lt;/li>
&lt;li>[[NAS]]&lt;/li>
&lt;li>[[contextmenu]]&lt;/li>
&lt;/ul></description></item><item><title>nginx</title><link>https://minuk.dev/wiki/nginx/</link><pubDate>Tue, 07 Apr 2020 22:51:14 +0900</pubDate><guid>https://minuk.dev/wiki/nginx/</guid><description>&lt;h1 id="nginx-관련">Nginx 관련&lt;/h1>
&lt;h2 id="lmumakerdark98dev-설정">lmu.makerdark98.dev 설정&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>server {
	listen 80 default_server;
	listen [::]:80 default_server;

	server_name _;
}

map $http_upgrade $connection_upgrade {
	default upgrade;
	&amp;#39;&amp;#39; close;
}

charset utf-8;

server {
	charset utf-8;
	server_name lmu.makerdark98.dev; # managed by Certbot
	rewrite ^/rstudio$ $scheme://$http_host/rstudio/ permanent;
	rewrite ^/api$ $scheme://$http_host/api/ permanent;

	location / {
		proxy_pass http://localhost:3000;
		proxy_redirect http://localhost:3000/ $scheme://$http_host/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_read_timeout 20d;
	}

	location /api/ {
		rewrite ^/api/(.*)$ /$1 break;
		proxy_pass http://localhost:9999;
		proxy_redirect http://localhost:9999/ $scheme://$http_host/api;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_read_timeout 20d;
	}
	location /rstudio/ {
		rewrite ^/rstudio/(.*)$ /$1 break;
		client_max_body_size 50M;
		proxy_pass http://localhost:8787;
		proxy_redirect http://localhost:8787/ $scheme://$http_host/rstudio/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_read_timeout 20d;
	}

	location /jupyter/ {
		rewrite ^/(.*)$ /$1 break;
		client_max_body_size 50M;
		proxy_pass http://localhost:8888;
		proxy_redirect http://localhost:8888 $scheme://$http_host/;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header Host $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		# websocket headers
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;
		proxy_set_header X-Scheme $scheme;
		proxy_buffering off;
	}

	listen [::]:443 ssl ipv6only=on; # managed by Certbot
		listen 443 ssl; # managed by Certbot
		ssl_certificate /etc/letsencrypt/live/lmu.makerdark98.dev/fullchain.pem; # managed by Certbot
		ssl_certificate_key /etc/letsencrypt/live/lmu.makerdark98.dev/privkey.pem; # managed by Certbot
		include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
		ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}
server {
	if ($host = lmu.makerdark98.dev) {
		return 301 https://$host$request_uri;
	} # managed by Certbot


	listen 80 ;
	listen [::]:80 ;
	server_name lmu.makerdark98.dev;
	return 404; # managed by Certbot


}&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="nginx-log위치">Nginx log위치&lt;/h2>
&lt;pre>&lt;code>/var/log/nginx/access.log
/var/log/nginx/error.log
&lt;/code>&lt;/pre></description></item><item><title>Understanding Linux Kernel</title><link>https://minuk.dev/wiki/understanding-linux-kernel/</link><pubDate>Tue, 07 Apr 2020 20:48:28 +0900</pubDate><guid>https://minuk.dev/wiki/understanding-linux-kernel/</guid><description>&lt;h1 id="1-introduction">1. Introduction&lt;/h1>
&lt;ul>
&lt;li>Linux pros
&lt;ul>
&lt;li>Monolithic kernel&lt;/li>
&lt;li>Compiled and statically linked traditional Unix kernels&lt;/li>
&lt;li>Kernel threading&lt;/li>
&lt;li>Multithreaded application support - lightweight processes(LWP)&lt;/li>
&lt;li>Preemptive kernel&lt;/li>
&lt;li>Multiprocessor support - symmetric multiprocessing(SMP)&lt;/li>
&lt;li>Filesystem&lt;/li>
&lt;li>STREAMS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="basic-operating-system-concepts">Basic Operating System Concepts&lt;/h2>
&lt;ul>
&lt;li>Interact with the hardware components, servicing all low-level programmable elements included in the hardware platform.&lt;/li>
&lt;li>Provide an execution environment to the applications that run on the computer system (the so-called user programs)&lt;/li>
&lt;/ul>
&lt;h2 id="multiuser-systems">Multiuser Systems&lt;/h2>
&lt;ul>
&lt;li>An authentication mechanism for verifying the user&amp;rsquo;s identity&lt;/li>
&lt;li>A protection mechanism against buggy user programs that could block other applications running in the system&lt;/li>
&lt;li>A protection mechanism against malicious user programs that could interfere with or spy on the activity of others users&lt;/li>
&lt;li>An accounting mechanism that limits the amount of resource units assigned to each user&lt;/li>
&lt;/ul>
&lt;h2 id="users-and-groups">Users and Groups&lt;/h2>
&lt;ul>
&lt;li>User ID(UID), Group ID(GID)&lt;/li>
&lt;li>superuser&lt;/li>
&lt;/ul>
&lt;h2 id="processes">Processes&lt;/h2>
&lt;ul>
&lt;li>Process : An instance of a program in execution or execution context&lt;/li>
&lt;li>Multi Processing operating system with preemptable processes.&lt;/li>
&lt;li>process/kernel model - Whenever a process makes a system call, the hardware changes the privilege mode from User ode to Kernel Mode.&lt;/li>
&lt;/ul>
&lt;h2 id="kernel-architecture">Kernel Architecture&lt;/h2>
&lt;ul>
&lt;li>Kernels are &lt;code>monolithic&lt;/code>: each kernel layer is integrated into the whole kernel program and runs in Kernel Mode on behalf of the current process.&lt;/li>
&lt;li>cf.) &lt;code>microkernel&lt;/code> operating systems demand a very small set of functions from the kernel, generally including a few synchronization primitives, a simple scheduler, and an interprocess communication mechanism.&lt;/li>
&lt;li>The main advantages of using modules include:
&lt;ul>
&lt;li>A modularized approach&lt;/li>
&lt;li>Platform independence&lt;/li>
&lt;li>Frugal main memory usage&lt;/li>
&lt;li>No performance penalty&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="an-overview-of-the-unix-filesystem">An Overview of the Unix Filesystem&lt;/h2>
&lt;h3 id="files">Files&lt;/h3>
&lt;ul>
&lt;li>All the nodes of the tree, except the leaves, denote directory names.&lt;/li>
&lt;/ul>
&lt;h3 id="hard-and-soft-links">Hard and Soft Links&lt;/h3>
&lt;ul>
&lt;li>Hard links have two limitations:
&lt;ul>
&lt;li>It is not possible to create hard links for directories. Doing so might transform the directory tree into a graph with cycles, thus making it impossible to locate a file according to its name.&lt;/li>
&lt;li>Links can be created only among files included in the same filesystem. This is a serious limitation, because modern Unix systems may include several filesystems located on different disk and/or partitions, and users may be unaware of the physical divisions between them.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="file-types">File Types&lt;/h3>
&lt;ul>
&lt;li>Unix files may have one of the following types:
&lt;ul>
&lt;li>Regular file&lt;/li>
&lt;li>Directory&lt;/li>
&lt;li>SYmbolic link&lt;/li>
&lt;li>Block-oriented device file&lt;/li>
&lt;li>Character-oriented device file&lt;/li>
&lt;li>Pipe and named pipe (also called FIFO)&lt;/li>
&lt;li>Socket&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="file-descriptor-and-inode">File Descriptor and Inode&lt;/h3>
&lt;ul>
&lt;li>All information needed by the filesystem to handle a file is included in a data structure called an &lt;code>inode&lt;/code>.&lt;/li>
&lt;li>Unix system must always provide at least the following attributes, which are specified in the POSIX standard:
&lt;ul>
&lt;li>File type&lt;/li>
&lt;li>Number of hard links associated with the file&lt;/li>
&lt;li>File length in bytes&lt;/li>
&lt;li>Device ID(i.e., an identifier of the device containing the file)&lt;/li>
&lt;li>Inode number that identifies the file within the filesystem&lt;/li>
&lt;li>UID of the file owner&lt;/li>
&lt;li>User group ID of the file&lt;/li>
&lt;li>Several timestamps that specify the inode status change time, the last access time, and the last modify time&lt;/li>
&lt;li>Access rights and file mode&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="access-rights-and-file-mode">Access Rights and File Mode&lt;/h3>
&lt;ul>
&lt;li>User types
&lt;ul>
&lt;li>The user who is the owner of the file&lt;/li>
&lt;li>The users who belong to the same group as the file, not including the owner&lt;/li>
&lt;li>All remaining users (others)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Access rights : read, write and executed
&lt;ul>
&lt;li>Additional flags : suid, sgid, sticky&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="file-handling-system-calls">File-Handling System Calls&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Opening a file&lt;/p></description></item><item><title>Mathematical Statistics</title><link>https://minuk.dev/wiki/mathematical-statistics/</link><pubDate>Tue, 07 Apr 2020 20:48:25 +0900</pubDate><guid>https://minuk.dev/wiki/mathematical-statistics/</guid><description>&lt;h1 id="chapter-7-sampling-distribution">Chapter 7 Sampling distribution&lt;/h1>
&lt;h2 id="definition-71-statistic">Definition 7.1 (Statistic)&lt;/h2>
&lt;ul>
&lt;li>A statistic is a function of the observations in a sample and known constants. The distribution of a statistic is called the sampling distribution of the statistic.&lt;/li>
&lt;/ul>
&lt;p>$$\bar Y: \text{sample mean}$$&lt;/p>
&lt;p>$$S^2 : \text{sample variance}$$&lt;/p>
&lt;p>$$Y_{(1)}, Y_{(n)} : \text{minimum and maximum (order statistics)}$$&lt;/p>
&lt;p>$$\hat p : \text{sample proportion}$$&lt;/p>
&lt;h2 id="theorem-71">Theorem 7.1&lt;/h2>
&lt;p>$$\text{Suppose }Y_i \overset{iid}{\sim} N\left(0, 1^2 \right)$$&lt;/p>
&lt;p>$$\bar Y \sim N(\mu, {\sigma^2\over{n}})$$&lt;/p>
&lt;p>$$\text{Hence, } Z = { {\bar Y - \mu} \over {\sigma / \sqrt{n}}} \sim N (0, 1)$$&lt;/p></description></item><item><title>Effective Debugging</title><link>https://minuk.dev/wiki/effective-debugging/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/</guid><description>&lt;h2 id="개인-생각">개인 생각&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%ec%a0%84%ec%b2%b4%ec%a0%81%ec%9c%bc%eb%a1%9c%20%ec%a2%8b%ec%9d%80%20%eb%82%b4%ec%9a%a9%ec%9d%b4%20%eb%a7%8e%ec%95%98%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%eb%90%9c%eb%8b%a4.%20%ed%95%98%ec%a7%80%eb%a7%8c%20%ec%8b%a4%ec%a0%9c%eb%a1%9c%20%eb%94%94%eb%b2%84%ea%b9%85%ed%95%a0%eb%95%8c%20%ec%9d%b4%20%ec%b1%85%ec%9d%98%20%eb%aa%a8%eb%93%a0%20%eb%82%b4%ec%9a%a9%ec%9d%84%20%eb%96%a0%ec%98%ac%eb%a6%ac%eb%8a%94%20%ea%b1%b4%20%ed%9e%98%eb%93%a4%eb%8b%a4%ea%b3%a0%20%ec%83%9d%ea%b0%81%ed%95%9c%eb%8b%a4.%0a%20%20%ed%8a%b9%ed%9e%88%20%ec%a4%91%ed%9b%84%eb%b0%98%eb%b6%80%eb%b6%80%ed%84%b0%20%ec%8b%9c%ec%9e%91%eb%90%98%eb%8a%94%20%ed%88%b4%eb%93%a4%ec%9d%98%20%eb%82%98%ec%97%b4%ec%9d%80%20%ec%9c%a0%ec%9d%98%eb%af%b8%ed%95%98%ec%a7%80%20%ec%95%8a%ec%95%98%eb%8b%a4.%0a%20%20%eb%a7%a8%20%eb%a7%88%ec%a7%80%eb%a7%89%ec%97%90%20%ec%83%81%ed%99%a9%eb%b3%84%20%eb%8f%84%ea%b5%ac%20%eb%aa%a8%ec%9d%8c%ec%9d%84%202~3%20%ed%8e%98%ec%9d%b4%ec%a7%80%ec%97%90%20%ea%b1%b8%ec%b3%90%ec%84%9c%20%eb%82%98%ec%97%b4%ed%95%b4%ec%a4%ac%ec%9c%bc%eb%a9%b4%20%eb%9e%98%ed%8d%bc%eb%9f%b0%ec%8a%a4%20%eb%b6%81%ec%9c%bc%eb%a1%9c%ec%84%9c%20%ec%93%b8%ec%88%98%20%ec%9e%88%ec%97%88%ec%9d%84%ed%85%90%eb%8d%b0">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code> 전체적으로 좋은 내용이 많았다고 생각된다. 하지만 실제로 디버깅할때 이 책의 모든 내용을 떠올리는 건 힘들다고 생각한다.
 특히 중후반부부터 시작되는 툴들의 나열은 유의미하지 않았다.
 맨 마지막에 상황별 도구 모음을 2~3 페이지에 걸쳐서 나열해줬으면 래퍼런스 북으로서 쓸수 있었을텐데&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="챕터별-요약">챕터별 요약&lt;/h2>
&lt;ul>
&lt;li>[[Effective Debugging/Chapter 1- 고차원 전략]]&lt;/li>
&lt;li>[[Effective Debugging/Chapter 2- 범용적인 디버깅 기법]]&lt;/li>
&lt;li>[[Effective Debugging/Chapter 3- 범용 도구를 활용한 기법]]&lt;/li>
&lt;li>[[Effective Debugging/Chatper 4- 디버거 활용법]]&lt;/li>
&lt;li>[[Effective Debugging/Chapter 5- 프로그래밍 기법]]&lt;/li>
&lt;li>[[Effective Debugging/Chatper 6- 컴파일 시간 기법]]&lt;/li>
&lt;li>[[Effective Debugging/Chapter 7- 실행 시간 기법]]&lt;/li>
&lt;li>[[Effective Debugging/Chapter 8- 멀티스레드 코드 디버깅]]&lt;/li>
&lt;/ul></description></item><item><title>Effective Debugging/Chapter 1. 고차원 전략</title><link>https://minuk.dev/wiki/effective-debugging/chapter-1--%EA%B3%A0%EC%B0%A8%EC%9B%90-%EC%A0%84%EB%9E%B5/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chapter-1--%EA%B3%A0%EC%B0%A8%EC%9B%90-%EC%A0%84%EB%9E%B5/</guid><description>&lt;h2 id="item-1-issue-tracking-모든-문제를-이슈-추적-시스템으로-관리하기">Item 1. Issue Tracking (모든 문제를 이슈 추적 시스템으로 관리하기)&lt;/h2>
&lt;ul>
&lt;li>Github, GitLab&lt;/li>
&lt;li>JIRA, Bugzilla, Launchpad, OTRS, Redmine, Trac&lt;/li>
&lt;/ul>
&lt;h3 id="장점">장점&lt;/h3>
&lt;ul>
&lt;li>디버깅 작업 과정을 명확하게 파악할 수 있다.&lt;/li>
&lt;li>릴리즈 일정을 수립하게 추적할 수 있다.&lt;/li>
&lt;li>작업의 우선순위를 정할 수 있다.&lt;/li>
&lt;li>자주 발생하는 이슈나 해결책을 문서로 정리할 수 있다.&lt;/li>
&lt;li>해결해야 할 문제를 실수로 빼먹지 않을 수 있다.&lt;/li>
&lt;li>릴리즈 노트를 자동으로 생성할 수 있다.&lt;/li>
&lt;li>결함을 측정하고, 이를 되돌아보며 교훈을 얻을 수 있는 저장소로 활용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="문제를-재현하는-방법을-기록해라">문제를 재현하는 방법을 기록해라&lt;/h3>
&lt;h3 id="버그리포트-작성법">버그리포트 작성법&lt;/h3>
&lt;ul>
&lt;li>정확한 제목&lt;/li>
&lt;li>버그의 우선순위와 심각한 정도&lt;/li>
&lt;li>해당 버그에 관련된 이름&lt;/li>
&lt;li>버그가 발생한 환경에 대한 상세 정보&lt;/li>
&lt;/ul>
&lt;h3 id="장단점">장단점&lt;/h3>
&lt;ul>
&lt;li>제목을 정확하고 간결하게 작성하면 요약 리포트만 봐도 어떤 버그인지 쉽게 알아볼 수 있다. 가장 나쁜 예는 &lt;code>프로그램이 갑자기 뻗었음&lt;/code>과 같이 적는 것이다. &lt;code>저장하는 동안 리프레시 버튼을 누르면 프로그램이 뻗음&lt;/code>과 같이 구체적으로 적는 것이 바람직하다.&lt;/li>
&lt;li>심각한 정도를 명시하면 버그의 우선순위를 정하는 데 도움이 된다. 데이터가 손실되는 버그는 당연히 심각한 문제로 봐야하지만, 미적인 문제나 대안이 알려진 문제는 이보다 심각한 정도가 낮다. 이처럼 버그의 심각한 정도를 명시하면 이슈 목록을 작성할 때 당장 해결해야 하는 이슈, 나중에 처리해도 되는 이슈, 무시해도 되는 이슈 등과 같이 우선순위에 따라 분류할 수 있다.&lt;/li>
&lt;li>이렇게 정해진 우선순위는 이슈의 우선순위 항목에 기록한다. &amp;hellip; &lt;del>책에 내용이 더 있지만 굳이 전부 적는건 필요 없고 여기까지가 필요한 정보이니 여기까지만&lt;/del>&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>모든 문제를 이슈 추적 시스템으로 처리한다.&lt;/li>
&lt;li>이슈를 작성할 때 문제를 재현하는 방법으로 정확하고, 간결하고, 관련된 사항을 모두 담아서, 구체적인 예제와 함께 기록한다.&lt;/li>
&lt;li>이슈의 심각한 정도와 우선순위를 정해서 이에 맞게 작업 일정을 짠다.&lt;/li>
&lt;li>이슈 추적 시스템을 통해 작업 현황을 문서화 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-2-해결책을-웹에서-검색할-때-검색어를-구체적으로-표현하기">Item 2. 해결책을 웹에서 검색할 때 검색어를 구체적으로 표현하기&lt;/h2>
&lt;h3 id="sscceshort-self-contained-correct-compilable-and-runnable-example">SSCCE(short, self-contained, correct (compilable and runnable) example)&lt;/h3>
&lt;ul>
&lt;li>SourceLair 나 JSFiddle과 같은 온라인 IDE를 통해서 질문하자.&lt;/li>
&lt;li>How To Ask Questions The Smart Way, &lt;a href="http://www.ctab.org/~esr/faqs/smart-qustions.html%EB%8F%84">http://www.ctab.org/~esr/faqs/smart-qustions.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-1">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>발생한 에러에 대한 해결책을 웹에서 검색할 때 에러 메시지를 큰따옴표로 묶어서 입력한다.&lt;/li>
&lt;li>StackExchange, StackOverflow에 올라온 답변을 참고한다.&lt;/li>
&lt;li>직접 질문을 올리거나 버그 리포팅 시스템에 이슈를 등록한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-3-선행-조건과-후행-조건-만족-여부-확인하기">Item 3. 선행 조건과 후행 조건 만족 여부 확인하기&lt;/h2>
&lt;ul>
&lt;li>선행조건 (precondition), 후행조건(postcondition)&lt;/li>
&lt;/ul>
&lt;h3 id="주의해아할-상황">주의해아할 상황&lt;/h3>
&lt;ul>
&lt;li>값이 null이 아니여야하는 부분이 null인지 살펴본다.&lt;/li>
&lt;li>수학 함수에 전달한 값이 그 함수에서 다루는 범위 안에 있는지 확인한다.(ex. log 함수에 전달한 값이 0보다 큰지 확인한다.)&lt;/li>
&lt;li>루틴에 전달한 객체나 구조체, 배열의 내부를 살펴보고 그 안에 필요한 내용이 담겨 있는지 확인한다.&lt;/li>
&lt;li>변순의 값이 정상 범위 안인지 확인한다. 간혹 변수를 초기화 하지 않으면 이상한 값이 들어 있는 경우가 있다.&lt;/li>
&lt;li>무작위 추출 검사(epot-check)를 통해 데이터 구조의 무결성을 검사한다.&lt;/li>
&lt;li>계산된 결과가 적합한지, 예상 범위 안에 있는지 확인한다.&lt;/li>
&lt;li>값이 정상 범위에 있다면 실제로 결과가 정확한지 확인한다. 직접 손으로 계산해보거나, 이미 알려진 정상 값과 비교해보거나, 다른 도구로 계산해보면 된다.&lt;/li>
&lt;li>Side Effect가 예상된 결과인지, 의심 스러운 코드로 인해 데이터가 손상됬는지 엉뚱한 값으로 설정되어 있지 않은지 확인한다.&lt;/li>
&lt;li>알고리즘에서 사용하는 자원(File Handle, Lock 등)이 정상 반환 되었는지 확인한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-4-문제-발생-지점부터-버그를-추적하거나-프로그램-시작-지점부터-버그를-찾아나가기">Item 4. 문제 발생 지점부터 버그를 추적하거나 프로그램 시작 지점부터 버그를 찾아나가기&lt;/h2>
&lt;h3 id="1-프로그램이-갑자기-죽는-문제">1. 프로그램이 갑자기 죽는 문제&lt;/h3>
&lt;ul>
&lt;li>디버거로 실행해보거나 메모리 덤프를 보자&lt;/li>
&lt;li>Magic Number를 확인하자&lt;/li>
&lt;li>변수 초기화 여부 확인(0xBAADF00D)&lt;/li>
&lt;/ul>
&lt;h3 id="2-프로그램이-멈춘-뒤-아무-반응이-없다면">2. 프로그램이 멈춘 뒤 아무 반응이 없다면&amp;hellip;&lt;/h3>
&lt;ul>
&lt;li>원인을 추적하는 상향식 방식을 조금 다르게 진행한다. - 루프 바깥쪽부터 껍질식으로 탐색해나간다.&lt;/li>
&lt;/ul>
&lt;h3 id="3-에러-메시지가-명확할때">3. 에러 메시지가 명확할때&lt;/h3>
&lt;ul>
&lt;li>&lt;code>fgrep -r&lt;/code>을 사용해서 복잡한 계층 구조 속에서 원하는 단어를 찾아내자.&lt;/li>
&lt;li>어느 코드에서 문제가 발생하는지 알 수 없을 때, 프로그램의 처음부터 추적하는 하향식 방식을 사용하는 것이 좋다. 이런 에러를 창발적 속성(에러) Emergent property라고 부른다.&lt;/li>
&lt;/ul>
&lt;h3 id="기억해야할-사앙">기억해야할 사앙&lt;/h3>
&lt;ul>
&lt;li>프로그램이 갑자기 종료하거나, 아무런 응답 없이 멈추거나, 에러 메시지를 출력될 떄와 같이 문제가 명확히 드러날 떄는 상향식 방식으로 원인을 찾는다.&lt;/li>
&lt;li>성능과 보안, 신뢰성 등과 같이 문제가 명확하게 드러나지 않을 때는 하향식 방식으로 원인을 찾는다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-5-정상-시스템과-비정상-시스템의-차이점-분석하기">Item 5. 정상 시스템과 비정상 시스템의 차이점 분석하기&lt;/h2>
&lt;ul>
&lt;li>로그파일을 찬찬히 읽자.&lt;/li>
&lt;li>로그가 원하는 만큼 자세하지 않을 경우 Tracing Tool로 Runtime 을 분석해야한다.
&lt;ul>
&lt;li>DTrace, SystemTap을 사용(범용 도구)&lt;/li>
&lt;li>strace, truss, Procmon(운영체제 호출과정 추척)&lt;/li>
&lt;li>Itrace, Procmon (동적으로 링크된 라이브러리 호출과정)&lt;/li>
&lt;li>tcpdump, Wireshark (네트워크 패킷 추적)&lt;/li>
&lt;li>SQL 은 db 분석 도구를 사용한다.(흐음&amp;hellip; 책에서 안알려준다. 찾아봐야겠다.)&lt;/li>
&lt;li>R Project, 유닉스 어플리케이션은 보통 오류 찾기 힘들다. &lt;code>-x&lt;/code>옵션으로 추적할수도 있지만&amp;hellip; 눈물&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>환경을 잘 구성하자
&lt;ul>
&lt;li>최소한 파일 해쉬(MD5)값 정도는 확인하자. &lt;del>흐음&amp;hellip; binary file md5 값 보는 명령어 찾아봐야할듯&lt;/del>&lt;/li>
&lt;li>&lt;code>ldd&lt;/code>를 이용하거나 &lt;code>dumpbin&lt;/code>을 실행할 때 &lt;code>/dependents&lt;/code> 옵션을 켜서 코드를 실행하는동안 동적 라이브러리도 함께 확인해보자.&lt;/li>
&lt;li>코드에서 사용하고 있는 기호(Symbol을 이렇게 번역한듯?)는 nm, Visual Studio는 dumpbin에서 /exports /imports 옵션을 켜서 확인하자&lt;/li>
&lt;li>자바라면 javap로 확인하자.&lt;/li>
&lt;li>환경변수는 간과하기 쉬운 요인이다.&lt;/li>
&lt;li>&lt;code>git bisect&lt;/code> 명령을 통해 버그가 나는 버전을 찾아내자.&lt;/li>
&lt;li>&lt;code>cut&lt;/code> 이나 &lt;code>awk&lt;/code> 명령으로 쓸데 없는 부분은 잘라내자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-2">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>정상 시스템과 오류가 발생한 시스템을 비교하여 문제의 원인을 찾는다.&lt;/li>
&lt;li>코드, 입력값, 함수를 호출할 때 전달한 인수, 환경변수, 서비스, 동적 라이브러리 등을 비롯한 시스템 동작에 영향을 미치는 요인을 모두 고려한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-6-소프트웨어에서-제공하는-디버깅-기능-활용하기">Item 6. 소프트웨어에서 제공하는 디버깅 기능 활용하기&lt;/h2>
&lt;ul>
&lt;li>백그라운드 실행 또는 멀티스레드 기능을 꺼서 프로그램을 디버깅하기 쉽게 만들 수 있다.&lt;/li>
&lt;li>원하는 부분만 선택해서 실행함으로써 문제의 원인을 정확히 겨냥한 테스트 케이스를 작성할 수 있다.&lt;/li>
&lt;li>성능에 관련된 리포트나 고급 기능을 제공할 수 있다.&lt;/li>
&lt;li>부가적인 로깅 기능을 제공할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="sql에서-분석">SQL에서 분석&lt;/h3>
&lt;ul>
&lt;li>&lt;code>explain&lt;/code>키워드를 사용하자.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-3">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>문제가 발생한 소프트웨어에서 자체적으로 디버깅 기능을 제공하는지 확인한다. 디버깅 기능을 제공하면 이를 활용하여 문제를 분석한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-7-빌드-및-실행-환경을-다양하게-구성하기">Item 7. 빌드 및 실행 환경을 다양하게 구성하기&lt;/h2>
&lt;h3 id="환경-구성-방법">환경 구성 방법&lt;/h3>
&lt;ol>
&lt;li>가상 머신 소프트웨어 사용&lt;/li>
&lt;li>저렴한 소형 컴퓨터 (ex. raspberry pi)&lt;/li>
&lt;li>Cloud기반 호스트&lt;/li>
&lt;/ol>
&lt;h3 id="컴파일러도-다양하게-구성하자">컴파일러도 다양하게 구성하자&lt;/h3>
&lt;ul>
&lt;li>.NET Framework에서 개발할때 Mono도 함께 봐보자&lt;/li>
&lt;li>Ada, C, C++, Objective C로 개발할때 LLVM과 GCC 를 함께 사용한다.&lt;/li>
&lt;li>자바에선 OpenJDK와 Oracle JDK, GNU Classpath를 함께 사용한다. 자바 런타임도 다양하게 하자&lt;/li>
&lt;li>루비 프로그램을 작성할 때 레퍼런스 구현인 CRuby와 별도로 JRuby, Rubinius, mruby와 같은 다른 VM 도 활용하자.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-4">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>컴파일 환경과 실행 플랫폼을 다양하게 구성하면 다양한 시각으로 디버깅 작업을 수행할 수 있다.&lt;/li>
&lt;li>난해한 알고리즘에 관련한 문제는 고수준 언어로 구현하여 해결한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-8-가장-중요한-문제에-집중하기">Item 8. 가장 중요한 문제에 집중하기&lt;/h2>
&lt;h3 id="높은-우선순위">높은 우선순위&lt;/h3>
&lt;ul>
&lt;li>데이터 손실&lt;/li>
&lt;li>보안&lt;/li>
&lt;li>서비스 가용성 저하&lt;/li>
&lt;li>안전&lt;/li>
&lt;li>충돌 또는 멈춤 현상&lt;/li>
&lt;li>코드 위생&lt;/li>
&lt;/ul>
&lt;h3 id="낮은-우선순위">낮은 우선순위&lt;/h3>
&lt;ul>
&lt;li>레거시 지원&lt;/li>
&lt;li>하위 호환성&lt;/li>
&lt;li>미적인 이슈&lt;/li>
&lt;li>우회 방법 문서화&lt;/li>
&lt;li>거의 사용하지 않는 기능&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-5">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>모든 문제를 해결할 필요는 없다.&lt;/li>
&lt;li>우선순위가 낮은 이슈를 해결하는 작업은 우선순위가 높은 작업을 해결하는 데 필요한 시간을 빼앗을 수 있다.&lt;/li>
&lt;/ul></description></item><item><title>Effective Debugging/Chapter 2. 범용적인 디버깅 기법</title><link>https://minuk.dev/wiki/effective-debugging/chapter-2--%EB%B2%94%EC%9A%A9%EC%A0%81%EC%9D%B8-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B8%B0%EB%B2%95/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chapter-2--%EB%B2%94%EC%9A%A9%EC%A0%81%EC%9D%B8-%EB%94%94%EB%B2%84%EA%B9%85-%EA%B8%B0%EB%B2%95/</guid><description>&lt;h2 id="item-9-성공적인-디버깅을-위한-마음가짐">Item 9. 성공적인 디버깅을 위한 마음가짐&lt;/h2>
&lt;ul>
&lt;li>소프트웨어에서 발생한 문제는 항상 찾아서 고칠수 있다고 믿는다.&lt;/li>
&lt;li>시간을 충분히 판단한다.&lt;/li>
&lt;li>고도로 집중한다.&lt;/li>
&lt;li>어려운 문제를 만나면 잠을 자는것도 좋다.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>모든 문제는 찾아서 고칠 수 있다고 믿는다.&lt;/li>
&lt;li>디버깅 작업에 필요한 시간을 충분히 확보한다.&lt;/li>
&lt;li>작업에 최대한 집중할 수 있도록 환경을 마련한다.&lt;/li>
&lt;li>힘든 문제를 해결할 때는 효과적인 수면을 취한다.&lt;/li>
&lt;li>포기하지 않는다.&lt;/li>
&lt;li>디버깅 환경, 도구, 기법을 익히는 데 꾸준히 노력한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-10-효율적으로-문제-상황-재현하기">Item 10. 효율적으로 문제 상황 재현하기&lt;/h2>
&lt;h3 id="효율적으로-문제-상황을-재현하는-것이-가지는-장점">효율적으로 문제 상황을 재현하는 것이 가지는 장점&lt;/h3>
&lt;ul>
&lt;li>오류를 만들어 내기 위해 시간을 낭비할 필요 없이 곧바로 원인을 해결하는데 집중할 수 있다.&lt;/li>
&lt;li>다른 사람들에게 도움을 청하기 좋다.&lt;/li>
&lt;li>오류를 해결한 뒤에 검증하기 쉽다.&lt;/li>
&lt;/ul>
&lt;h3 id="문제를-단순화-해라">문제를 단순화 해라&lt;/h3>
&lt;ul>
&lt;li>SSCCE라고 부르는 기준에 따라 간결하게 작성한다.&lt;/li>
&lt;li>코드의 의존 관계가 많다면 상향식으로 접근하여 처음부터 새로 시작하는 것이 바람직하다.&lt;/li>
&lt;li>문제를 파악하기 힘들 때에는 하향식으로 접근하여 경우의 수를 줄여나가는 것이 좋다.&lt;/li>
&lt;/ul>
&lt;h3 id="중요-키워드">중요 키워드&lt;/h3>
&lt;ul>
&lt;li>독립적인 형태&lt;/li>
&lt;li>반복적으로 실행할 수 있는 환경&lt;/li>
&lt;li>오류가 발생하는 버전에 대한 복사본을 언제든지 만들 수 있는 기능&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-1">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>문제 상황을 재현할 수 있다면 디버깅 작업이 쉬워진다.&lt;/li>
&lt;li>문제를 재현할 수 있는 예제를 최대한 간결하고 독립적으로 실행할 수 있는 형태로 만든다.&lt;/li>
&lt;li>반복적으로 실행할 수 있는 환경을 구축한다.&lt;/li>
&lt;li>버전 관리 시스템을 활용하여 소프트웨어에 버전을 지정해서 원하는 버전을 언제든지 불러 올 수 있도록 구성한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-11-코드-수정-후-결과-확인까지의-시간-최소화하기">Item 11. 코드 수정 후 결과 확인까지의 시간 최소화하기&lt;/h2>
&lt;h3 id="기억할-사항-2">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>수정한 코드의 결과를 확인하는 데 걸리는 시간을 최소화하여 효율을 높인다.&lt;/li>
&lt;li>빠르게 빌드하고 배치하는 프로세스를 마련한다.&lt;/li>
&lt;li>오류가 발생하면 최대한 빠르게 멈추게 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-12-복잡한-테스트-시나리오-자동화하기">Item 12. 복잡한 테스트 시나리오 자동화하기&lt;/h2>
&lt;ul>
&lt;li>루아를 배워보자ㅠ&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-3">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>복잡한 테스트 케이스를 실행하는 작업은 스크립트 언어를 이용하여 자동화한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-13-디버깅-관련-데이터를-한눈에-볼-수-있는-환경-구축하기">Item 13. 디버깅 관련 데이터를 한눈에 볼 수 있는 환경 구축하기&lt;/h2>
&lt;ul>
&lt;li>최대한 넓은 화면 확보&lt;/li>
&lt;li>프린터로 출력해서 보자&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-4">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>많은 데이터를 한눈에 볼 수 있다면 작업에 좀 더 집중할 수 있고 데이터의 패턴이나 상관관계를 파악하기도 쉽다.&lt;/li>
&lt;li>화면 공간을 최대한 넓게 확보한다.&lt;/li>
&lt;li>변경할 일이 거의 없는 데이터는 프린터로 출력해서 본다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-14-소프트웨어-업데이트-고려하기">Item 14. 소프트웨어 업데이트 고려하기&lt;/h2>
&lt;ul>
&lt;li>디버깅에 들어가기 앞서 환경을 최신 버전으로 업데이트한다.&lt;/li>
&lt;li>업데이트에 너무 큰 기대는 하지 않는다.&lt;/li>
&lt;li>서드파티 모듈에서 버그가 발생할 수 있다는 점도 염두에 둔다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-15-서드파티-소스-코드-분석을-통해-문제-해결하기">Item 15. 서드파티 소스 코드 분석을 통해 문제 해결하기&lt;/h2>
&lt;ul>
&lt;li>작성하는 소프트웨어에서 사용하는 서드파티 모듈에 대한 소스 코드를 확보한다.&lt;/li>
&lt;li>서드파티 API에 문제가 발생하거나 알 수 없는 에러 메시지가 출력되면 서드파티 소스 코드를 분석한다.&lt;/li>
&lt;li>서드파티 라이브러리를 디버깅 버전으로 빌드해서 사용한다.&lt;/li>
&lt;li>다른 대안이 없을 경우에만 서드파티 코드를 직접 수정한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-16-전문-모니터링-및-테스팅-장비-활용하기">Item 16. 전문 모니터링 및 테스팅 장비 활용하기&lt;/h2>
&lt;ul>
&lt;li>로직, 버스, 프로토콜 분석기를 활용하면 하드웨어 수준에서 발생하는 문제를 정확히 분석할 수 있다.&lt;/li>
&lt;li>하드웨어에 관련된 문제를 분석할 때는 적절한 장치를 직접 제작하는 것도 도움된다.&lt;/li>
&lt;li>네트워크 패킷을 모니터링할 때는 와이어샤크나 이더넷 허브, 매니지드 스위치, 또는 명령줄 기반의 패킷 수집프로그램을 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-17-오류의-효과-극대화하기">Item 17. 오류의 효과 극대화하기&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>항상 참, 혹은 거짓이 되도록 소스코드를 수정한다.&lt;/p></description></item><item><title>Effective Debugging/Chapter 3. 범용 도구를 활용한 기법</title><link>https://minuk.dev/wiki/effective-debugging/chapter-3--%EB%B2%94%EC%9A%A9-%EB%8F%84%EA%B5%AC%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B8%B0%EB%B2%95/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chapter-3--%EB%B2%94%EC%9A%A9-%EB%8F%84%EA%B5%AC%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EA%B8%B0%EB%B2%95/</guid><description>&lt;p>읽을거리&lt;/p>
&lt;ul>
&lt;li>&lt;code>The Art of Command Line&lt;/code>(&lt;a href="https://github.com/jlevy/the-art-of-command-line">https://github.com/jlevy/the-art-of-command-line&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="item-22-유닉스-명령줄-도구로-디버깅-데이터-분석하기">Item 22. 유닉스 명령줄 도구로 디버깅 데이터 분석하기&lt;/h2>
&lt;ul>
&lt;li>아래와 같은 순서로 스크립트를 작성한다.
&lt;ul>
&lt;li>가져오기(Fetching)&lt;/li>
&lt;li>선택하기(Selecting)&lt;/li>
&lt;li>처리하기(Processing)&lt;/li>
&lt;li>정리하기(Summarizing)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>읽을거리를 참고해서 CLI 사용법을 좀 더 잘 익히자&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>텍스트 형태의 레코드를 가져오고, 선택하고, 처리하고, 정리하는 유닉스 명령어를 이용하여 디버깅 데이터를 분석한다.&lt;/li>
&lt;li>여러 가지 유닉스 명령을 파이프라인으로 조합하는 방식으로 복잡한 분석 작업을 간단히 처리할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-23-명령줄-도구-옵션과-관용-표현-활용하기">Item 23. 명령줄 도구 옵션과 관용 표현 활용하기&lt;/h2>
&lt;ul>
&lt;li>grep에서 제공하는 다양한 옵션을 활용하면 탐색 범위를 줄일 수 있다.&lt;/li>
&lt;li>프로그램의 에러 메시지를 분석할 때는 표준 에러를 리다이렉션한다.&lt;/li>
&lt;li>로그 파일에 추가되는 내용을 모니터링하고 싶다면 tail -f 명령을 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-24-코드-편집기로-디버깅-데이터-탐색하기">Item 24. 코드 편집기로 디버깅 데이터 탐색하기&lt;/h2>
&lt;ul>
&lt;li>철자가 틀린 식별자를 찾을 때는 편집기에서 제공하는 검색 기능을 활용한다.&lt;/li>
&lt;li>차이점이 눈에 띄도록 텍스트파일을 적절히 수정한다.&lt;/li>
&lt;li>로그 파일을 좀 더 읽기 좋도록 적절히 수정한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-25-작업-환경-최적화하기">Item 25. 작업 환경 최적화하기&lt;/h2>
&lt;ul>
&lt;li>Path 환경 변수에 실행할 프로그램에 관련된 디렉터리가 빠짐없이 담겨 있는지 확인한다. 디벅이 과정에서 시스템 관리자 권한의 명령을 실행해야 하는 경우도 종종 있다. 따라서 이러한 명령에 대한 경로도 포함해야 한다.&lt;/li>
&lt;li>쉘과 편집기에서 자동 완성 기능을 사용하도록 설정한다.&lt;/li>
&lt;li>쉘 프롬프트와 터미널 바에 사용자 계정과 현재 디렉터리, 호스트 이름이 표시되도록 설정한다. 디버깅하는 과정에서 여러 호스트와 계정을 오갈 수 있기 때문에 현재 상태를 명확히 알 수 있도록 계정과 위치 정보를 표시한다.&lt;/li>
&lt;li>명령줄에서 편집할 때 자신이 사용할 편집기와 연동하도록 키 바인딩을 설정한다. 이렇게 해두면 데이터 분석 파이프라인을 점진적으로 만들어나가는 작업을 훨씬 효율적으로 수행할 수 있다.&lt;/li>
&lt;li>자주 사용하는 명령과 흔히 저지르는 입력 오류에 대해 앨리어스나 단축키를 만든다.&lt;/li>
&lt;li>버전 관리 시스템을 비롯한 다양한 유틸리티에서 자신이 주로 사용하는 페이징 프로그램(&lt;code>less&lt;/code>나 &lt;code>more&lt;/code>처럼 파일의 내용을 페이지 단위로 출력하는 프로그램)과 편집기를 활용하도록 환경변수를 설정한다.&lt;/li>
&lt;li>입력한 명령을 모두 히스토리 파일에 기록하도록 설정한다. 이렇게 하면 디버깅할 때 자주 사용하거나 중요한 구문을 몇 달이 지난 뒤에도 쉽게 찾아낼 수 있다. 이때 구문 앞에 공백을 붙여서 (패스워드를 담은 부분처럼) 명령을 호출하는 부분은 기록하지 않도록 설정한다.&lt;/li>
&lt;li>쉘의 경로 이름 확장 기능 또는 *과 같은 와일드카드 문자로 표현하는 글로빙(globbing)을 실행할 때 서브 디렉터리에 있는 파일도 포함하도록 설정한다. 이렇게 하면 하위 계층에 있는 모든 디렉터리에 대해 적용되는 ** 와일드 카드를 사용할 수 있기 때문에, 계층이 깊게 구성된 디렉터리에 대해 실행하는 명령을 간결하게작성할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-1">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>사용하는 도구를 적절히 설정하여 생산성을 향상시킨다.&lt;/li>
&lt;li>여러 호스트에 걸쳐 작업할 때는 디버깅 환경에 대한 설정 파일을 버전 관리 시스템을 통해 관리한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-26-버전-관리-시스템으로-버그-원인과-히스토리-추적하기">Item 26. 버전 관리 시스템으로 버그 원인과 히스토리 추적하기&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>가령 버그가 발생한 버전의 구간을 알고 있고, 오류가 발생하면 0이 아닌 코드를 반환하며 종료하는 테스트 스크립트도 있다면, 그 버전 사이에서 발생한 모든 변경 내역을 이진 탐색으로 검색해서 해당 버그를 발생시킨 지점을 찾아준다.&lt;/p></description></item><item><title>Effective Debugging/Chapter 5. 프로그래밍 기법</title><link>https://minuk.dev/wiki/effective-debugging/chapter-5--%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chapter-5--%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95/</guid><description>&lt;h2 id="item-38-의심스런-코드를-검토하고-손으로-실행해보기">Item 38. 의심스런 코드를 검토하고 손으로 실행해보기&lt;/h2>
&lt;ul>
&lt;li>코드를 작성할 때 흔히 저지르는 실수를 하지 않았는지 살펴본다.&lt;/li>
&lt;li>코드가 정확하게 동작하는지 직접 손으로 실행해서 확인한다.&lt;/li>
&lt;li>복잡한 자료구조는 그림으로 쉽게 표현한다.&lt;/li>
&lt;li>복잡한 코드를 쉽게 표현할 때는 종이나 화이트보드의 공간을 넉넉히 확보하고 색깔도 적절히 활용한다.&lt;/li>
&lt;li>실제 물체를 활용하면 문제에 좀 더 집중할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-39-동료-검토하기">Item 39. 동료 검토하기&lt;/h2>
&lt;ul>
&lt;li>자신이 작성한 코드를 고무 오리에게 설명한다.&lt;/li>
&lt;li>동료 검토를 비롯한 코드 리뷰 과정을 거친다.&lt;/li>
&lt;li>다양한 개체가 엮인 코드에서 발생한 오류를 디버익할 떄는 역할 놀이 방식을 적용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-40-디버깅-기능-추가하기">Item 40. 디버깅 기능 추가하기&lt;/h2>
&lt;ul>
&lt;li>작성하는 프로그램에 디버그 모드로 진입하는 옵션을 추가한다.&lt;/li>
&lt;li>프로그램의 상태를 조작하고, 연산의 수행 과정을 로그로 남기고, 런타임 복잡도를 줄이고, 사용자 인터페이스 ㅐ비게이션 과정을 건너뛰고, 복잡한 자료구조를 화면에 표시하는 명령을 추가한다.&lt;/li>
&lt;li>임베디드 장치나 서버를 디버깅할 수 있도록 명령줄 인터페이스, 웹 인터페이스, 시리얼 인터페이스 등을 제공한다.&lt;/li>
&lt;li>외부 오류 상황을 재현할 수 있는 디버그 모드 명령을 추가한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-41--로그-남기기">Item 41. 로그 남기기&lt;/h2>
&lt;ul>
&lt;li>로그를 남기는 문장을 추가하여 지속적으로 관리할 수 있는 형태의 디버깅 infrastructure를 구축한다.&lt;/li>
&lt;li>로깅 프레임워크를 처음부터 새로 만들지 말고 가급적 기존에 나와 있는 것을 활용한다.&lt;/li>
&lt;li>로그로 남기고 싶은 주제와 세부 사항을 로깅 프레임워크에서 적절히 설정한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-42-단위-테스트-사용하기">Item 42. 단위 테스트 사용하기&lt;/h2>
&lt;ul>
&lt;li>단위 테스트를 통해 의심 가는 루틴을 검색하여 오류가 발생한 지점을 정확히 찾아낸다.&lt;/li>
&lt;li>단위 테스트 작업의 효율을 높이도록, 적절한 단위 테스팅 프레임워크를 골라서 프로그램에 단위 테스트를 수행하는 코드를 추가하고, 자동으로 단위 테스트를 수행하도록 설정한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-42-assertion-사용하기">Item 42. Assertion 사용하기&lt;/h2>
&lt;ul>
&lt;li>프로그램이 시작하는 지점에서 CPU의 아키텍쳐 종류에 관련된 속성을 검사하는 경우&lt;/li>
&lt;li>루틴의 시작 시점에서 전달된 매개변수의 타입이 정확한지 그리고 유효한 값인지, 적절한 값으로 들어왔는지 등을 검사하는 경우&lt;/li>
&lt;li>루틴이 끝나는 지점에서 겨로가가 정확한지 검사하는 경우&lt;/li>
&lt;li>자주 호출되는 복잡한 메서드의 시작과 끝 부분에서 클래스의 상태가 일관성 있게 유지되는지 검사하는 경우&lt;/li>
&lt;li>정상적으로 동작해야할 API 루틴을 호출한 뒤에 진짜 오류가 없는지 확인하는 경우&lt;/li>
&lt;li>소프트웨어에서 사용할 자원을 불러온 뒤에 제대로 처리됐는지 확인하는 경우&lt;/li>
&lt;li>&lt;code>switch&lt;/code>문의 default 케이스에서 assertion으로 처리하지 않는 나머지 모든 경우를 다루고 있는지 확인할 때&lt;/li>
&lt;li>자료구조를 초기화한 후에 예상했던 값을 유지하고 있는지 확인할 때&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>단위 테스트에 assertion을 가미하면 오류가 발생한 지점을 더욱 정확히 찾아낼 수 있다.&lt;/li>
&lt;li>복잡한 알고리즘을 디버깅할 때 assertion을 활용하여 선행 조건과 불변 속성과 후행 조건을 검사한다.&lt;/li>
&lt;li>문서화를 위해 assertion을 사용하면 코드를 이해하기 쉬워지기 때문에 나중에 문제가 발생하여 디버깅하거나 테스트할 떄 도움된다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-44-코드를-바꿔보면서-검증하기">Item 44. 코드를 바꿔보면서 검증하기&lt;/h2>
&lt;p>다음과 같은 질문을 해보기&lt;/p></description></item><item><title>Effective Debugging/Chatper 4. 디버거 활용법</title><link>https://minuk.dev/wiki/effective-debugging/chatper-4--%EB%94%94%EB%B2%84%EA%B1%B0-%ED%99%9C%EC%9A%A9%EB%B2%95/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chatper-4--%EB%94%94%EB%B2%84%EA%B1%B0-%ED%99%9C%EC%9A%A9%EB%B2%95/</guid><description>&lt;h2 id="item-28-디버깅-버전으로-컴파일-하기">Item 28. 디버깅 버전으로 컴파일 하기&lt;/h2>
&lt;ul>
&lt;li>이클립스에서 자바 코드를 디버깅할 때 기본적으로 심볼 정보가 생성된다. 옵션을 다르게 줘서 원하는 설정으로 바꿀수 있다.&lt;/li>
&lt;li>오라클 JDK 컴파일러에서는 -g 옵션으로 디버깅 정보와 이를 제어하기 위한 다양한 인수를 추가할 수 있다.&lt;/li>
&lt;li>유닉스 컴파일러는 대부분 -g 옵션으로 디버깅 정보를 추가할 수 있다.&lt;/li>
&lt;li>마이크로소프트에서 제공하는 컴파일러에서는 /Zi 옵션을 지정하면 디버깅 정보가 추가된다.&lt;/li>
&lt;/ul>
&lt;h3 id="팁">팁&lt;/h3>
&lt;ul>
&lt;li>최신 컴파일러는 상당히 높은 수준으로 최적화하기 때문에 코드의 형태가 완전히 바뀌기도 한다.&lt;/li>
&lt;li>디버깅할 때는 코드 최적화 기능을 꺼두고 빌드하는 것이 좋다.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>디버깅 정보가 원하는 수준으로 포함되도록 디버깅 옵션을 설정한다.&lt;/li>
&lt;li>디버깅할 떄 소스 코드와 생성된 코드가 잘 매칭되게 하려면 코드 최적화 옵션을 끈다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-29-한-단계씩-코드-실행하기">Item 29. 한 단계씩 코드 실행하기&lt;/h2>
&lt;ul>
&lt;li>코드를 한 단계씩 실행하는 방식으로 프로그램의 실행 흐름과 상태를 자세히 살펴본다.&lt;/li>
&lt;li>건너뛰기 기능을 사용하여 관련 없는 부분은 걸러내서 디버깅 속도를 높인다.&lt;/li>
&lt;li>건너뛰기로 진행하다가 자세히 검토할 부분을 발견하면 중단점을 지정해서 다시 실행한 뒤, 해당 부분은 한 단계씩 실행하는 방식으로 문제를 탐색할 영역을 좁혀나간다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-30-코드와-데이터-중단점-활용하기">Item 30. 코드와 데이터 중단점 활용하기&lt;/h2>
&lt;ul>
&lt;li>코드 중단점을 이용하여 분석하려는 코드 영역을 좁혀나간다.&lt;/li>
&lt;li>관심 없는 부분은 건너뛰도록 중단점을 추가한다.&lt;/li>
&lt;li>비정상적으로 종료하는 오류를 디버깅할 때는 예외나 종료 루틴에 중단점을 지정한다.&lt;/li>
&lt;li>프로그램이 뻗어버릴 떄는 디버거를 통해 프로그램의 실행을 중단시킨 뒤 문제를 해결한다.&lt;/li>
&lt;li>값이 이상하게 변하는 변수를 분석할 때는 데이터 중단점을 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-31-리버스-디버깅">Item 31. 리버스 디버깅&lt;/h2>
&lt;ul>
&lt;li>Visual Studio 에서는 IntelliTrace라고 부르고, Rogue Wave Software의 TotalView에서는 ReplayEngine이라고 부른다.&lt;/li>
&lt;/ul>
&lt;h3 id="리버스-디버깅하는-방법">리버스 디버깅하는 방법&lt;/h3>
&lt;ol>
&lt;li>&lt;code>break main&lt;/code>을 사용해서 (또는 다른 breakpoint 를 걸어서) 리버스 디버깅할 곳에서 정지한다.&lt;/li>
&lt;li>&lt;code>record&lt;/code> 를 사용해서 원하는 부분부터 기록한다.&lt;/li>
&lt;li>실행하다가 거꾸로 가고싶으면 &lt;code>reverse-next&lt;/code> 를 사용해서 거꾸로 올라간다.&lt;/li>
&lt;li>&lt;code>reverse-continue&lt;/code>를 사용하면 거꾸로 올라가서 처음 나오는 breakpoint에 멈춘다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>주의할 점. 데이터베이스에서 삭제하는 연산이나 시그널, 네트워크 패킷과 같이 비동기적 이벤트에서는 돌릴수 없다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-32-루틴-사이의-호출-흐름-추적하기">Item 32. 루틴 사이의 호출 흐름 추적하기&lt;/h2>
&lt;h3 id="콜-스택에-쌓이는-정보">콜 스택에 쌓이는 정보&lt;/h3>
&lt;ul>
&lt;li>호출한 루틴에 전달한 인수 (인수의 개수가 달라져도 쉽게 처리하도록 오른쪽에서 왼쪽으로 향하는 순서로 저장된다.)&lt;/li>
&lt;li>(루틴이 메서드일 경우) 메서드가 속한 객체에 대한 포인터&lt;/li>
&lt;li>호출된 루틴의 실행이 끝나고 되돌아갈 주소&lt;/li>
&lt;li>호출된 루틴에서 사용하는 지역변수&lt;/li>
&lt;/ul>
&lt;h3 id="스택-트레이스">스택 트레이스&lt;/h3>
&lt;ul>
&lt;li>스택 트레이스의 최상위 항목에 알 수 없는 루틴이 적혀 있다면 프로그램에서 서드파티 코드를 실행하던 중에 인터럽트가 걸렸기 때문일 수 있다. GUI 프로그램이 프레임워크에서 제공하는 라이브러리를 통해 저수준으로 상호작용하는 동안에도 이런 현상이 종종 발생한다. 또는 프로그램에서 뭔가 특별한 작업을 처리하기 위해 임베디드 SQL 데이터베이스와 같은 서드파티 라이브러리를 호출할 떄도 이렇게 나타난다. 루틴에 전달된 인수가 없고 루틴의 이름 대신 메모리 주소만 나열되어 있다면 코드를 컴파일할 때 디버깅 정보를 추가하지 않았기 때문이다. 이렇게 표시된 스택 트레이스를 위에서부터 차례대로 살펴보면 어느 지정에서 서드파티 코드를 호출했는지 찾을 수 있다.&lt;/li>
&lt;li>스택 트레이스에 서드파티 루틴만 담겨 있다면 현재 프로그램의 제어권이 프로엠워크로 넘어가서 콜백 루틴을 통해 상호작용하고 있는 중일 수 있다. 프레임워크 코드는 디버깅 대상이 아니므로 원하는 부분만 디버깅하도록 적절히 중단점을 지정해야한다.&lt;/li>
&lt;li>스택 트레이스에 담긴 정보가 예상과 달리 너무 빈양한데다 아라볼 수 없는 루틴만 담겨 있다면, 잘못된 포인터로 인해 스택에 엉뚱한 내용이 담겨 있기 때문일 수 있다. 이럴 때는 포인터가 정상적으로 설정된 상태로 들어가서 다시 한 단계씩 실행시키면서 어느 지점에서 스택이 엉켰는지 찾는다.&lt;/li>
&lt;li>재귀 호출되는 부분을 디버깅할 때는 스택 트레이스에 동일한 루틴이 여러 차례 나올 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-1">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>프로그램의 스택을 통해 현재 상태를 이해할 수 있다.&lt;/li>
&lt;li>코드에 문제가 발생하면 스택의 내용이 꼬일 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-33-변수와-표현식의-값을-분석하여-에러-찾기">Item 33. 변수와 표현식의 값을 분석하여 에러 찾기&lt;/h2>
&lt;ul>
&lt;li>Visual Studio에서 사용자 지정 시각화(Custom visualizer)&lt;/li>
&lt;li>gdb 에서 pretty-printer라 부른다.&lt;/li>
&lt;li>QtCreator에서는 debug-visualizer&lt;/li>
&lt;li>python - pprint module - PrettyPrinter method&lt;/li>
&lt;li>perl-Data::Dumper&lt;/li>
&lt;li>javascript-JSON.stringify(obj, null, 4)&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항-2">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>주요 표현식의 값을 확인한다.&lt;/li>
&lt;li>알고리즘을 실행하는 동안 표현식의 값을 지속적으로 표시하도록 디버거를 설정한다.&lt;/li>
&lt;li>루틴의 지역변수의 값의 추이를 따라가는 방식으로 루틴의 로직을 분석한다.&lt;/li>
&lt;li>이해하기 힘든 복잡한 자료 구조에 대해서는 데이터 시각화 도구를 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-34-실행-중인-프로세스에-디버거-연동하기">Item 34. 실행 중인 프로세스에 디버거 연동하기&lt;/h2>
&lt;ul>
&lt;li>이미 실행 상태에 있는 프로세스에 디버거를 연결하여 디버깅한다.&lt;/li>
&lt;li>자원이 부족한 장치에서 실행되는 애플리케이션을 디버깅할 때는 원격 머신에 디버깅 환경을 구축한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-35-코어-덤프-다루기">Item 35. 코어 덤프 다루기&lt;/h2>
&lt;ol>
&lt;li>프로그램에서 메모리 덤프를 생성할 때 관련된 메타데이터도 함께 생성하도록 설정한다. 메모리 덤프를 생성하도록 설정하는 방법에 대해서는 앞에서 소개한 바 있다. 메타데이터를 생성할 때 최소한 프로그램의 버전 정보를 표시한다. 그 밖에도 프로그램을 실행하는 환경에 대한 데이터(프로세서, 운영체제, 환경변수, 공유 라이브러리 버전 등), 로그 파일, 사용자 입력, 프로그램 사용에 대한 히스토리 파일 등도 표기하면 디버깅에 도움이 된다.&lt;/li>
&lt;li>프로그램에서 생성한 메모리 덤프 파일이 제대로 전달되도록 설정한다. 충돌이 발생한 후에 프로그램의 상태가 꼬였다면 외부 프로그램을 통해 전달하는 것이 좋다. 디버깅하려는 프로그램을 다른 프로그램으로 실행시킨 뒤, 그 프로그램에서 디버깅할 프로그램의 종료 상태를 확인해서 지정한 값과 일치할 때만 메모리 파일을 전달하도록 설정한다. 유닉스라면 프로그램이 SIGABRT 핸들러를 통해 앞서 지정한 값으로 종료하게 하고, 윈도우라면 예외 필터 함수를 통해 종료하게 한다. 데이터를 보낼 때는 HTTP POST 요청을 활용하는 것이 가장 쉬우면서도 안정적인 방법이다.&lt;/li>
&lt;li>이렇게 전달되 데이터를 저장해서 나중에 분석할 때 활용하도록 디버깅 작업을 수행하는 환경에 HTTP 요청을 받아서 데이터를 저장하는 기능을 수행하는 서버를 간단히 작성한다. 나중에 분석하기 좋도록 메타데이터를 데이터베이스에 저장하는 것도 좋은 방법이다.&lt;/li>
&lt;li>충돌이 발생한 프로긂의 버전을 구분하는 방법도 확보한다. 버전 관리 시스템에서 소스 코드의 각 버전마다 태그르 달고, 메타데이터에 이 태그도 함께 담아서 보낸다. 태깅된 소스 코드로부터 완전히 동일한 버전의 바이너리를 재현할 수 없다면 바이너리 실행파일을 각 버전마다 저장해두는 것이 좋다.&lt;/li>
&lt;li>사용자가 겪은 문제를 디버깅할 때는 정상적인 소스 코드와 실행 파일과 충돌 시 생성된 메모리 덤프 파일을 디버거에 전달하여 구동한다.&lt;/li>
&lt;/ol>
&lt;h3 id="기억할-사항-3">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>충돌이 발생하거나 아무 반응 없이 뻗어버린 애플리케이션을 디버깅할 때 메모리 덤프를 활용한다.&lt;/li>
&lt;li>설치된 고객 애플리케이션을 디버깅할 때 충돌 리포트 시스템을 활용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-36-디버깅-도구-조율하기">Item 36. 디버깅 도구 조율하기&lt;/h2>
&lt;ul>
&lt;li>그래픽 인터페이스를 갖춘 디버거를 사용한다.&lt;/li>
&lt;li>히스토리를 저장하고 원하는 키보드 바인딩을 사용하도록 gdb를 설정한다.&lt;/li>
&lt;li>자주 사용하는 명령을 gdb 스크립트에 저장한다.&lt;/li>
&lt;li>입력한 명령을 기록해두기 위해 gdb 안에서 프로그램을 빌드한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-37-어셈블리-코드와-메모리-값-확인하기">Item 37. 어셈블리 코드와 메모리 값 확인하기&lt;/h2>
&lt;ul>
&lt;li>코드의 동작을 제대로 이해하려면 디스어셈블된 기계어 명령을 살펴보는 것이 좋다.&lt;/li>
&lt;li>레지스터 eax나 r0은 함수의 반환값을 담는데 사용된다.&lt;/li>
&lt;li>데이터가 저장된 방식을 제대로 이해하려면 내부 표현 방식을 확인해야 한다.&lt;/li>
&lt;/ul></description></item><item><title>Effective Debugging/Chatper 6. 컴파일 시간 기법</title><link>https://minuk.dev/wiki/effective-debugging/chatper-6--%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EA%B0%84-%EA%B8%B0%EB%B2%95/</link><pubDate>Tue, 07 Apr 2020 20:44:40 +0900</pubDate><guid>https://minuk.dev/wiki/effective-debugging/chatper-6--%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EA%B0%84-%EA%B8%B0%EB%B2%95/</guid><description>&lt;h2 id="item-50-생성된-코드-확인하기">Item 50. 생성된 코드 확인하기&lt;/h2>
&lt;ul>
&lt;li>컴파일러에서 생성한 코드를 살펴보면 컴팡리 및 실행 시간에 발생한 문제가 소스 코드의 어느 부분에 관련이 있는지 찾아낼 수 있다.&lt;/li>
&lt;li>컴파일러로 생성된 코드를 좀 더 읽기 좋게 표현하려면 컴파일러에 적절한 옵션을 지정하거나 특수한 도구를 사용한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-51-정적-분석-도구-활용하기">Item 51. 정적 분석 도구 활용하기&lt;/h2>
&lt;h3 id="자주하는-실수-모음">자주하는 실수 모음&lt;/h3>
&lt;ul>
&lt;li>널 포인터 참조&lt;/li>
&lt;li>동시성 오류 및 경쟁 상태&lt;/li>
&lt;li>철자 오류 (변수를 명시적으로 선언하지 않아도 되는 언어에서 주로 발생함)&lt;/li>
&lt;li>배열이나 메모리 버퍼에 대한 잘못된 인덱스 참조&lt;/li>
&lt;li>잘못된 조건문, 반복문, case문으로 인해 실행될 수 없는 문장&lt;/li>
&lt;li>처리하지 않은 예외&lt;/li>
&lt;li>사용하지 않는 변수나 루틴&lt;/li>
&lt;li>수식 오류&lt;/li>
&lt;li>중복된 코드&lt;/li>
&lt;li>C++에서의 3의 법칙이나 0의 법칙을 따르지 않거나, 자바에서 클래스를 정의할 때 equals/HashCode 메서드를 일고나성이 없는 형태로 구현한 경우&lt;/li>
&lt;li>자원 누수&lt;/li>
&lt;li>보안 취약점&lt;/li>
&lt;li>문법 오류&lt;/li>
&lt;/ul>
&lt;h3 id="기억할-사항">기억할 사항&lt;/h3>
&lt;ul>
&lt;li>정적 프로그램 분석 도구를 활용하면 컴파일러 경고 메시지로 찾지 못한 잠재적인 버그를 발견할 수 있다.&lt;/li>
&lt;li>프로그램에 존재하는 버그를 분석하기 좋도록 컴파일러 옵션을 적절히 설정한다.&lt;/li>
&lt;li>빌드 과정과 지속적인 통합 과정에 최소한 한 개 이상의 정적 프로그램 분석 도구를 거치도록 설정한다.&lt;/li>
&lt;/ul>
&lt;h2 id="item-52-빌드-결과와-실행-동작이-항상-일정하도록-설정하기">Item 52. 빌드 결과와 실행 동작이 항상 일정하도록 설정하기&lt;/h2>
&lt;ul>
&lt;li>악의적인 공격을 막기 위해 OS 커널이 프로그램이 올라갈 메모리의 위치에 대한 주소 값을 난수로 정한다. (ALSR, Address Space Layout Randomization)&lt;/li>
&lt;li>GNU/Linux 에서는&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20setarch%20$%28uname%20-m%29%20-R%20myprogram">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> setarch &lt;span style="color:#66d9ef">$(&lt;/span>uname -m&lt;span style="color:#66d9ef">)&lt;/span> -R myprogram&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>
&lt;p>Visual Studio에서는 &lt;code>/DYNAMICBASE:NO&lt;/code> 옵션을 지정한다.&lt;/p></description></item><item><title>Modern C++ Design Pattern</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/</guid><description>챕터별 정리</description></item><item><title>Modern C++ Design Pattern/Chatper 1. 개요</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-1--%EA%B0%9C%EC%9A%94/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-1--%EA%B0%9C%EC%9A%94/</guid><description>&lt;h2 id="crtpcuriously-recurring-template-pattern">CRTP(Curiously Recurring Template Pattern)&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span> &lt;span style="color:#f92672">:&lt;/span> SomeBase&lt;span style="color:#f92672">&amp;lt;&lt;/span>Foo&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> Derived&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SomeBase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> item : &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Derived&lt;span style="color:#f92672">*&amp;gt;&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="property">Property&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> age_;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> get_age() &lt;span style="color:#66d9ef">const&lt;/span> {&lt;span style="color:#66d9ef">return&lt;/span> age_; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_age&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> value) {age_ &lt;span style="color:#f92672">=&lt;/span> value; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">__declspec&lt;/span>(property(get&lt;span style="color:#f92672">=&lt;/span>get_age, put&lt;span style="color:#f92672">=&lt;/span>set_age)) &lt;span style="color:#66d9ef">int&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.age &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>; &lt;span style="color:#75715e">// calls p.set_age(20)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="factory">Factory&lt;/h2>
&lt;h3 id="factory-method">Factory Method&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Point(&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> x {x}, y {y}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Point NewCartesian(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {x, y};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Point &lt;span style="color:#a6e22e">NewPolar&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> r, &lt;span style="color:#66d9ef">float&lt;/span> theta)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {r &lt;span style="color:#f92672">*&lt;/span> cos(theta), r &lt;span style="color:#f92672">*&lt;/span> sin(theta)};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// skip
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="solid-design-principle">SOLID Design Principle&lt;/h3>
&lt;ul>
&lt;li>SRP(Single Responsibility Principle)
&lt;ul>
&lt;li>If you need to edit a few classes(or little more?) in some very small retouching, there is an omen of something problem. It is named &lt;code>code smell&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Journal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string title;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> entries;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">Journal&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> title) &lt;span style="color:#f92672">:&lt;/span> title{title} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> Journal&lt;span style="color:#f92672">::&lt;/span>add(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> entry)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entries.push_back(boost&lt;span style="color:#f92672">::&lt;/span>lexical_cast&lt;span style="color:#f92672">&amp;lt;&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span>(count&lt;span style="color:#f92672">++&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> entry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">Journal j{&amp;#34;Dear Diary&amp;#34;};
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">j.add(&amp;#34;I cried today&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">j.add(&amp;#34;I ate a bug&amp;#34;);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PersistenceManager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">save&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> Journal&lt;span style="color:#f92672">&amp;amp;&lt;/span> j, &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ofstream ofs(filename);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> s : j.entries)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ofs &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> s &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>OCP(Open-Closed Principle)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Specification&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">is_satisfied&lt;/span>(T&lt;span style="color:#f92672">*&lt;/span> item) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">*&amp;gt;&lt;/span> filter(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">*&amp;gt;&lt;/span> items,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Specification&lt;span style="color:#f92672">&amp;lt;&lt;/span>T&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> spec) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BetterFilter&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Filter&lt;span style="color:#f92672">&amp;lt;&lt;/span>Product&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Product&lt;span style="color:#f92672">*&amp;gt;&lt;/span> filter(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Product&lt;span style="color:#f92672">*&amp;gt;&lt;/span> items,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Specifiaction&lt;span style="color:#f92672">&amp;lt;&lt;/span>Product&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> spec) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Product&lt;span style="color:#f92672">*&amp;gt;&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> p : items)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (spec.is_satisfied(p))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_back(p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ColorSpecification&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Specification&lt;span style="color:#f92672">&amp;lt;&lt;/span>Product&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Color color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">ColorSpecification&lt;/span>(cosnt Color color) &lt;span style="color:#f92672">:&lt;/span> color{color} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#a6e22e">is_stisfied&lt;/span>(Product&lt;span style="color:#f92672">*&lt;/span> item) &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> item&lt;span style="color:#f92672">-&amp;gt;&lt;/span>color &lt;span style="color:#f92672">==&lt;/span> color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">Product apple{ &amp;#34;Apple&amp;#34;, Color::Green, Size::Small };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">Product tree{ &amp;#34;Tree&amp;#34;, Color::Green, Size::Large };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">Product house{ &amp;#34;House&amp;#34;, Color:Blue, Size::Large };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">vector&amp;lt;Product*&amp;gt; all{ &amp;amp;apple, &amp;amp;tree, &amp;amp;house };
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">BetterFilter bf;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">ColorSpecification green(Color::Green);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">auto green_things = bf.filter(all, green);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">for (auto&amp;amp; x : green_things)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> cout &amp;lt;&amp;lt; x-&amp;gt;name &amp;lt;&amp;lt; &amp;#34; is green&amp;#34; &amp;lt;&amp;lt; endl;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">*/&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>LSP(Liskove Substitution Principle)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RectangleFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Rectangle &lt;span style="color:#a6e22e">create_rectangle&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> w, &lt;span style="color:#66d9ef">int&lt;/span> h);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Rectangle &lt;span style="color:#a6e22e">create_square&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bool&lt;/span> Rectangle:is_square() &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> width &lt;span style="color:#f92672">==&lt;/span> height;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>ISP(Interface Segregation Principle)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IPrinter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print&lt;/span>(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Document&lt;span style="color:#f92672">*&amp;gt;&lt;/span> docs) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IScanner&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">scan&lt;/span>(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Document&lt;span style="color:#f92672">*&amp;gt;&lt;/span> docs) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Printer&lt;/span> &lt;span style="color:#f92672">:&lt;/span> IPrinter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print&lt;/span>(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Document&lt;span style="color:#f92672">*&amp;gt;&lt;/span> docs) &lt;span style="color:#66d9ef">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Scanner&lt;/span> &lt;span style="color:#f92672">:&lt;/span> IScanner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">scan&lt;/span>(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Document&lt;span style="color:#f92672">*&amp;gt;&lt;/span> docs) &lt;span style="color:#66d9ef">override&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IMachine&lt;/span>&lt;span style="color:#f92672">:&lt;/span> IPrinter, IScanner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Machine&lt;/span> &lt;span style="color:#f92672">:&lt;/span> IMachine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IPrinter&lt;span style="color:#f92672">&amp;amp;&lt;/span> printer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IScanner&lt;span style="color:#f92672">&amp;amp;&lt;/span> scanner;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Machine(IPrinter&lt;span style="color:#f92672">&amp;amp;&lt;/span> printer, IScanner&lt;span style="color:#f92672">&amp;amp;&lt;/span> scanner)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> printer{printer},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanner{scanner}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">print&lt;/span>(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Document&lt;span style="color:#f92672">*&amp;gt;&lt;/span> docs) &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printer.print(docs);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">scan&lt;/span>(vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Document&lt;span style="color:#f92672">*&amp;gt;&lt;/span> docs) &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanner.scan(docs);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>DIP(Dependency Inversion Principle)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ILogger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#f92672">~&lt;/span>ILogger() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> s) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ConsoleLogger&lt;/span> &lt;span style="color:#f92672">:&lt;/span> ILogger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConsoleLogger() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">Log&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> s) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;LOG: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> s.c_str() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Engine&lt;span style="color:#f92672">&amp;gt;&lt;/span> engine;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>ILogger&lt;span style="color:#f92672">&amp;gt;&lt;/span> logger;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Car(unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Engine&lt;span style="color:#f92672">&amp;gt;&lt;/span> engine,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>ILogger&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> logger)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> engine{move(engine)},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger{logger}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> logger&lt;span style="color:#f92672">-&amp;gt;&lt;/span>Log(&lt;span style="color:#e6db74">&amp;#34;making a car&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">friend&lt;/span> ostream&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>(ostream&lt;span style="color:#f92672">&amp;amp;&lt;/span> os, &lt;span style="color:#66d9ef">const&lt;/span> Car&lt;span style="color:#f92672">&amp;amp;&lt;/span> obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> os &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;car with engine: &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#f92672">*&lt;/span>obj.engine;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">auto&lt;/span> injector &lt;span style="color:#f92672">=&lt;/span> di&lt;span style="color:#f92672">::&lt;/span>maker_injector(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> di&lt;span style="color:#f92672">::&lt;/span>bind&lt;span style="color:#f92672">&amp;lt;&lt;/span>ILogger&lt;span style="color:#f92672">&amp;gt;&lt;/span>().to&lt;span style="color:#f92672">&amp;lt;&lt;/span>ConsoleLogger&lt;span style="color:#f92672">&amp;gt;&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">auto&lt;/span> car &lt;span style="color:#f92672">=&lt;/span>injector.create&lt;span style="color:#f92672">&amp;lt;&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Car&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Modern C++ Design Pattern/Chatper 2. 빌더</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-2--%EB%B9%8C%EB%8D%94/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-2--%EB%B9%8C%EB%8D%94/</guid><description>&lt;h2 id="builder-pattern">Builder Pattern&lt;/h2>
&lt;h3 id="simple-builder">Simple Builder&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20struct%20HtmlBuilder%0a%20%20%20%20%7b%0a%20%20%20%20%20%20HtmlElement%20root;%0a%0a%20%20%20%20%20%20HtmlBuilder%28string%20root_name%29%20%7b%20root.name%20=%20root_name;%20%7d%0a%0a%20%20%20%20%20%20void%20add_child%28string%20child_name%20string%20child_text%29%0a%20%20%20%20%20%20%7b%0a%20%20%20%20%20%20%20%20HtmlElement%20e%7b%20child_name,%20child_text%20%7d;%0a%20%20%20%20%20%20%20%20root.elements.emplace_back%28e%29;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20string%20str%28%29%20%7b%20return%20root.str%28%29;%20%7d%0a%20%20%20%20%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HtmlBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlBuilder(string root_name) { root.name &lt;span style="color:#f92672">=&lt;/span> root_name; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add_child&lt;/span>(string child_name string child_text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement e{ child_name, child_text };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root.elements.emplace_back(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string &lt;span style="color:#a6e22e">str&lt;/span>() { &lt;span style="color:#66d9ef">return&lt;/span> root.str(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="fluent-builder">Fluent Builder&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20struct%20HtmlBuilder%0a%20%20%20%20%7b%0a%20%20%20%20%20%20HtmlElement%20root;%0a%20%20%20%20%20%20HtmlBuilder%28string%20root_name%29%20%7b%20root.name%20=%20root_name;%20%7d%0a%20%20%20%20%20%20HtmlBuilder&amp;amp;%20add_child%28string%20child_name%20string%20child_text%29%0a%20%20%20%20%20%20%7b%0a%20%20%20%20%20%20%20%20HtmlElement%20e%7b%20child_name%20child_text%20%7d;%0a%20%20%20%20%20%20%20%20root.elements.emplace_back%28e%29;%0a%20%20%20%20%20%20%20%20return%20*this;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20/*%20skip%20*/%0a%20%20%20%20%7d;%0a%0a%20%20%20%20HtmlBuilder%20builder%7b%20%22ul%22%20%7d;%0a%20%20%20%20builder.add_child%28%22li%22,%20%22Hello%22%29.add_child%28%22li%22,%20%22world%22%29;%0a%20%20%20%20cout%20%3c%3c%20builder.str%28%29%20%3c%3c%20endl;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HtmlBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlBuilder(string root_name) { root.name &lt;span style="color:#f92672">=&lt;/span> root_name; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlBuilder&lt;span style="color:#f92672">&amp;amp;&lt;/span> add_child(string child_name string child_text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement e{ child_name child_text };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root.elements.emplace_back(e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* skip */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlBuilder builder{ &lt;span style="color:#e6db74">&amp;#34;ul&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder.add_child(&lt;span style="color:#e6db74">&amp;#34;li&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>).add_child(&lt;span style="color:#e6db74">&amp;#34;li&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> builder.str() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>Fluence Builder Method can return whatever in reference(&amp;amp;) or pointer (*). Just do what you want.&lt;/li>
&lt;/ul>
&lt;h3 id="force-to-use-builder-class">Force to use Builder Class&lt;/h3>
&lt;ul>
&lt;li>delete public constructor&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HtmlElement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>HtmlElement&lt;span style="color:#f92672">&amp;gt;&lt;/span> elements;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> size_t indent_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>HtmlBuilder&lt;span style="color:#f92672">&amp;gt;&lt;/span> build(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> root_name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>HtmlBuilder&lt;span style="color:#f92672">&amp;gt;&lt;/span>(root_name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name, &lt;span style="color:#66d9ef">const&lt;/span> string &lt;span style="color:#f92672">&amp;amp;&lt;/span>text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> name{name}, text{text} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HtmlBuilder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#a6e22e">HtmlElement&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> root; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* skip */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* Can use move semantic */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> HtmlElement HtmlBuilder&lt;span style="color:#f92672">::&lt;/span>build() &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="groovy---style-builder">&lt;code>Groovy&lt;/code> - style builder&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Tag&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string text;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Tag&lt;span style="color:#f92672">&amp;gt;&lt;/span> children;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>pair&lt;span style="color:#f92672">&amp;lt;&lt;/span>string, string&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> sttributes;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">friend&lt;/span> ostream&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> (std&lt;span style="color:#f92672">::&lt;/span>ostream&lt;span style="color:#f92672">&amp;amp;&lt;/span> os, &lt;span style="color:#66d9ef">const&lt;/span> Tag&lt;span style="color:#f92672">&amp;amp;&lt;/span> tag)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* skip implementation */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tag(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name, &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> name {name}, text{text} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Tag(&lt;span style="color:#66d9ef">const&lt;/span> string &lt;span style="color:#f92672">&amp;amp;&lt;/span>name, &lt;span style="color:#66d9ef">const&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Tag&lt;span style="color:#f92672">&amp;gt;&amp;amp;&lt;/span> children)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> name{name}, children{children} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">P&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Tag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">P&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> Tag{&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>, text} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> P(initializer_list&lt;span style="color:#f92672">&amp;lt;&lt;/span>Tag&lt;span style="color:#f92672">&amp;gt;&lt;/span> children)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> Tag{&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>, children} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IMG&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Tag
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">IMG&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> url
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> : Tag{&lt;span style="color:#e6db74">&amp;#34;img&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> attributes.emplace_back({&lt;span style="color:#e6db74">&amp;#34;src&amp;#34;&lt;/span>, url});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> P {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IMG { &lt;span style="color:#e6db74">&amp;#34;http://pokemon.com/pikachu.png&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>endl;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="composite-builder">Composite Builder&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PersonBuilderBase&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person&lt;span style="color:#f92672">&amp;amp;&lt;/span> person;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">PersonBuilderBase&lt;/span>(Person&lt;span style="color:#f92672">&amp;amp;&lt;/span> person)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> person{ person } {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">operator&lt;/span> Person()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>move(person);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PersonAddressBuilder &lt;span style="color:#a6e22e">lives&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PersonJobBuilder &lt;span style="color:#a6e22e">works&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PersonBiulder&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> PersonBuilderBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PersonBuilder() &lt;span style="color:#f92672">:&lt;/span> PersonBuilderBase{p} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PersonAddressBuilder&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> PersonBuilderBase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typedef&lt;/span> PersonAddressBuilder self;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> PersonAddressBuilder(Person&lt;span style="color:#f92672">&amp;amp;&lt;/span> person)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> PersonBuilderBase { person } {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">&amp;amp;&lt;/span> at(std&lt;span style="color:#f92672">::&lt;/span>string street_address)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> person.street_address &lt;span style="color:#f92672">=&lt;/span> street_address;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">&amp;amp;&lt;/span> with_postcode(std&lt;span style="color:#f92672">::&lt;/span>string post_code) { &lt;span style="color:#75715e">/* skip */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self&lt;span style="color:#f92672">&amp;amp;&lt;/span> in(std&lt;span style="color:#f92672">::&lt;/span>string city) { &lt;span style="color:#75715e">/* skip */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person p &lt;span style="color:#f92672">=&lt;/span> Person&lt;span style="color:#f92672">::&lt;/span>create()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .lives().at(&lt;span style="color:#e6db74">&amp;#34;123 London Road&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .with_postcode(&lt;span style="color:#e6db74">&amp;#34;SW1 1GB&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .in(&lt;span style="color:#e6db74">&amp;#34;London&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .works().at(&lt;span style="color:#e6db74">&amp;#34;PragmaSoft&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .as_a(&lt;span style="color:#e6db74">&amp;#34;Consultant&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .earning(&lt;span style="color:#ae81ff">10e6&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;ul>
&lt;li>The purpose of &lt;code>Builder Pattern&lt;/code> is to create a complicate object, which needs a combination of many items.&lt;/li>
&lt;li>Properties of Builder Pattern
&lt;ul>
&lt;li>If you use the influence interface builder, just need only one call chain. Of course, the builder methods are constructed to return &lt;code>this&lt;/code>(pointer) or &lt;code>*this&lt;/code>(reference).&lt;/li>
&lt;li>Hide public outter constructor of target object to force using builder class or method. Also can define good operators to achieve this.&lt;/li>
&lt;li>Awesome &lt;code>groovy&lt;/code>-style builder can be constructed with uniform initialiing syntax.&lt;/li>
&lt;li>A Builder interface can expose other sub builders. (refer to composite builder)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 4. 프로토타입</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-4--%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-4--%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</guid><description>&lt;h2 id="객체-생성">객체 생성&lt;/h2>
&lt;ul>
&lt;li>같은 값으로 중복되게 초기화 되는 작업이 발생&lt;/li>
&lt;/ul>
&lt;h2 id="중복처리">중복처리&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="struct%20Address%0a%7b%0a%20%20string%20street,%20city;%0a%20%20int%20suite;%0a%7d%0astruct%20Contact%0a%7b%0a%20%20string%20name;%0a%20%20Address%20address;%0a%7d%0a%0astruct%20Contact%0a%7b%0a%20%20string%20name;%0a%20%20Address*%20address;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Address&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string street, city;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> suite;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Contact&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Address address;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Contact&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Address&lt;span style="color:#f92672">*&lt;/span> address;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>복제 생성자를 통한 중복 초기화&lt;/li>
&lt;li>복제 생성자를 배제하고 별도의 인터페이스&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="template%20%3ctypename%20T%3e%20struct%20Clonable%0a%7b%0a%20%20virtual%20T%20clone%28%29%20const%20=%200;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Clonable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> T &lt;span style="color:#a6e22e">clone&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="직렬화serialization">직렬화(Serialization)&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>struct Contact
{
 string name;
 Address* address = nullptr;
 private:
 friend class boost:serialization::access;
 template&amp;lt;class Ar&amp;gt; void serialize(Ar&amp;amp; ar, const unsigned int version)
 {
 ar &amp;amp; name;
 ar &amp;amp; address; // *가 없다는 것에 주의
 }
};


auto clone = [](const Contact&amp;amp; c)
{
 ostringstream oss;
 boost::achive::text_oarchive oa(oss);
 oa &amp;lt;&amp;lt; c;
 string s = oss.str();

 istringstream iss(oss.str());
 boost::arhive::text_iarchive ia(iss);
 Contact result;
 ia &amp;gt;&amp;gt; result;
 return result;
}&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h2 id="프로토타입-팩터리">프로토타입 팩터리&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">EmployeeFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Contact main;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Contact aux;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Contact&lt;span style="color:#f92672">&amp;gt;&lt;/span> NewMainOfficeEmployee(string name, &lt;span style="color:#66d9ef">int&lt;/span> suite)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NewEmployee&lt;/span>(name, suite, main);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Contact&lt;span style="color:#f92672">&amp;gt;&lt;/span> NewAuxOfficeEmployee(string name, &lt;span style="color:#66d9ef">int&lt;/span> suite)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">NewEmployee&lt;/span>(name, suite, aux);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Contact&lt;span style="color:#f92672">&amp;gt;&lt;/span> NewEmployee(string name, &lt;span style="color:#66d9ef">int&lt;/span> suite, Contact&lt;span style="color:#f92672">&amp;amp;&lt;/span> proto)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>Contact&lt;span style="color:#f92672">&amp;gt;&lt;/span>(proto);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#f92672">-&amp;gt;&lt;/span>address&lt;span style="color:#f92672">-&amp;gt;&lt;/span>suite &lt;span style="color:#f92672">=&lt;/span> suite;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>객체의 깊은 복제를 올바르게 수행하는 코드를 작성한다. 복제 생성자나 복제 대입 연산자를 구현할 수 도 있고 별도의 맴버 함수를 만들 수도 있다.&lt;/li>
&lt;li>직렬화/역직렬화 기능을 구현하여, 직렬화 직후 역직렬화를 하는 방법으로 복제를 한다. 이 방법은 부가적인 연산 비용이 발생한다.&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 5. 싱글턴</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-5--%EC%8B%B1%EA%B8%80%ED%84%B4/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-5--%EC%8B%B1%EA%B8%80%ED%84%B4/</guid><description>&lt;h1 id="singleton">Singleton&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20static%20Database%20database%7b%7d;%20/*%20not%20recommended%20*/%0a%0a%20%20%20%20/**%0a%20%20%20%20%20*%20This%20method%20is%20only%20secured%20about%20MT%28Multi%20Thread%29-Safe%20on%20C&amp;#43;&amp;#43;11%20or%20Higher.%0a%20%20%20%20%20*/%0a%20%20%20%20Database&amp;amp;%20get_database%28%29%0a%20%20%20%20%7b%0a%20%20%20%20%20%20static%20Database%20databse;%0a%20%20%20%20%20%20return%20database;%0a%20%20%20%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Database database{}; &lt;span style="color:#75715e">/* not recommended */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * This method is only secured about MT(Multi Thread)-Safe on C++11 or Higher.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> get_database()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Database databse;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> database;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="traditional-implementation">Traditional Implementation&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database() { &lt;span style="color:#75715e">/* Do something */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> get()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// MT-Safe on C++11 or Higher
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Database database;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> database;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database(Database &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database(Database &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(Database &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(Database &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>You can think over inheritance of &lt;code>boost::noncopyable&lt;/code> class if you don&amp;rsquo;t perfer to this by your hands. This way can hide all constructors except &lt;code>move constructor&lt;/code> and &lt;code>move operator&lt;/code>.&lt;/li>
&lt;li>You can also like this&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20%20%20%20%20static%20Database&amp;amp;%20get%28%29%20%7b%0a%20%20%20%20%20%20%20%20%20%20static%20Database*%20database%20=%20new%20Database%28%29;%0a%20%20%20%20%20%20%20%20%20%20return%20*database;%0a%20%20%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20%20%20/*%20No%20Memory%20Leak,%20because%20static%20variable%20only%20once%20initializes%20in%20runtime%20*/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> get() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Database&lt;span style="color:#f92672">*&lt;/span> database &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Database();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>database;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* No Memory Leak, because static variable only once initializes in runtime */&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="multi-thread-safety">Multi-Thread Safety&lt;/h2>
&lt;ul>
&lt;li>Skip this content. C++11 already secure it.&lt;/li>
&lt;/ul>
&lt;h2 id="well-known-issue-of-singleton">Well-Known Issue of Singleton&lt;/h2>
&lt;ul>
&lt;li>It is a situation which is A singleton object refer to another singleton object.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Database&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> get_population(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SingletonDatabase&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SingletonDatabase() { &lt;span style="color:#75715e">/* Read Data from db */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>map&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> capitals;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SingletonDatabase(SingletonDatabase &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#66d9ef">operator&lt;/span>&lt;span style="color:#f92672">=&lt;/span>(SingletonDatabase &lt;span style="color:#66d9ef">const&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span>) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> SingletonDatabase&lt;span style="color:#f92672">&amp;amp;&lt;/span> get()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> SingletonDatabase db;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> db;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_population&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> capitals[name];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">SingletonRecordFinder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">total_population&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> names)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> name : names)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> SingletonDatabase&lt;span style="color:#f92672">::&lt;/span>get().get_population(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;pre>&lt;code>- This code can create issue, data can be changed in unit test. A solution is to make configuraion class like this.
&lt;/code>&lt;/pre>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ConfigurableRecordFinder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">ConfigurableRecordFinder&lt;/span>(Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> db)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> db{db} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">total_population&lt;/span>(std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span> names)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> name : names)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> db.get_population(name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Database&lt;span style="color:#f92672">&amp;amp;&lt;/span> db;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DummyDatabase&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> Database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>map&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string, &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> capitals;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DummyDatabase()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> capitals[&lt;span style="color:#e6db74">&amp;#34;alpha&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> capitals[&lt;span style="color:#e6db74">&amp;#34;beta&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> capitals[&lt;span style="color:#e6db74">&amp;#34;gamma&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_population&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name) &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> capitals[name];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TEST(RecordFinderTests, DummyTotalPopulationTest)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DummyDatabase db{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConfigurableRecordFinder rf{ db};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EXPECT_EQ(&lt;span style="color:#ae81ff">4&lt;/span>, rf.total_population(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>std&lt;span style="color:#f92672">::&lt;/span>string&lt;span style="color:#f92672">&amp;gt;&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;alpha&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;gamma&amp;#34;&lt;/span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="inversion-of-control">Inversion of Control&lt;/h2>
&lt;ul>
&lt;li>Actually, I haven&amp;rsquo;t use &lt;code>Boost.DI&lt;/code>. But for someday which I learn about this, note it.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> injector &lt;span style="color:#f92672">=&lt;/span> di&lt;span style="color:#f92672">::&lt;/span>make_injector(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> di&lt;span style="color:#f92672">::&lt;/span>bind&lt;span style="color:#f92672">&amp;lt;&lt;/span>IFoo&lt;span style="color:#f92672">&amp;gt;&lt;/span>.to&lt;span style="color:#f92672">&amp;lt;&lt;/span>Foo&lt;span style="color:#f92672">&amp;gt;&lt;/span>.in(di&lt;span style="color:#f92672">::&lt;/span>singleton),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Other configuration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="monostate">Monostate&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Printer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> get_id() &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> id; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_id&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> value) { id &lt;span style="color:#f92672">=&lt;/span> value; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>I think Monostate Pattern is different from Singleton.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Avoid directly usage. (SomeComponenet.getInstance().foo())&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 6. 어댑터</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-6--%EC%96%B4%EB%8C%91%ED%84%B0/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-6--%EC%96%B4%EB%8C%91%ED%84%B0/</guid><description>&lt;h2 id="adapter-pattern">Adapter Pattern&lt;/h2>
&lt;ul>
&lt;li>We use a example case, drawiing geometric shape.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> x, y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Line&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Point start, end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">VectorObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator begin() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator end() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">VectorRectangle&lt;/span> &lt;span style="color:#f92672">:&lt;/span> VectorObject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> VectorRectangle(&lt;span style="color:#66d9ef">int&lt;/span> x, &lt;span style="color:#66d9ef">int&lt;/span> y, &lt;span style="color:#66d9ef">int&lt;/span> width, &lt;span style="color:#66d9ef">int&lt;/span> height)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines.emplace_back(Line{ Point{x, y}, Point{x &lt;span style="color:#f92672">+&lt;/span> width, y} });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines.emplace_back(Line{ Point{x &lt;span style="color:#f92672">+&lt;/span> width, y}, Point {x &lt;span style="color:#f92672">+&lt;/span> width, y &lt;span style="color:#f92672">+&lt;/span> height} });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines.emplace_back(Line{ Point{x,y}, Point{x, y &lt;span style="color:#f92672">+&lt;/span> height} });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines.emplace_back(Line{ Point{ x, y &lt;span style="color:#f92672">+&lt;/span> height }, Point {x &lt;span style="color:#f92672">+&lt;/span> width, y &lt;span style="color:#f92672">+&lt;/span> height} });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vecotr&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator begin() &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> lines.begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator end() &lt;span style="color:#66d9ef">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> lines.end();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Line&lt;span style="color:#f92672">&amp;gt;&lt;/span> lines;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">DrawPoints&lt;/span>(CPaintDC&lt;span style="color:#f92672">&amp;amp;&lt;/span> dc,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Point&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator start,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> std&lt;span style="color:#f92672">::&lt;/span>vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Point&lt;span style="color:#f92672">&amp;gt;::&lt;/span>iterator end)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> start; i &lt;span style="color:#f92672">!=&lt;/span> end; &lt;span style="color:#f92672">++&lt;/span>i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dc.SetPixel(i&lt;span style="color:#f92672">-&amp;gt;&lt;/span>x, i&lt;span style="color:#f92672">-&amp;gt;&lt;/span>y , &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="adapter">Adapter&lt;/h2>
&lt;ul>
&lt;li>Let&amp;rsquo;s draw a few rectangles.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>shared_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>VectorObject&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> vectorObjects{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>VectorRectangle&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>, &lt;span style="color:#ae81ff">100&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make_shared&lt;span style="color:#f92672">&amp;lt;&lt;/span>VectorRectangle&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">60&lt;/span>, &lt;span style="color:#ae81ff">60&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">LineToPointAdapter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">typedef&lt;/span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>Point&lt;span style="color:#f92672">&amp;gt;&lt;/span> Points;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LineToPointAdapter(Line&lt;span style="color:#f92672">&amp;amp;&lt;/span> line);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> Points&lt;span style="color:#f92672">::&lt;/span>iterator begin() { &lt;span style="color:#66d9ef">return&lt;/span> points.begin(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> Points&lt;span style="color:#f92672">::&lt;/span>iterator end() { &lt;span style="color:#66d9ef">return&lt;/span> points.end(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Points points;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LineToPointAdapter&lt;span style="color:#f92672">::&lt;/span>LineToPointAdapter(Line&lt;span style="color:#f92672">&amp;amp;&lt;/span> line)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> left &lt;span style="color:#f92672">=&lt;/span> min(line.start.x, line.end.x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> right &lt;span style="color:#f92672">=&lt;/span> max(line.start.x, line.end.x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> top &lt;span style="color:#f92672">=&lt;/span> min(line.start.y, line.end.y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> bottom &lt;span style="color:#f92672">=&lt;/span> max(line.start.y, line.end.y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> dx &lt;span style="color:#f92672">=&lt;/span> right &lt;span style="color:#f92672">-&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> dy &lt;span style="color:#f92672">=&lt;/span> line.end.y &lt;span style="color:#f92672">-&lt;/span> line.start.y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (dx &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> top; y &lt;span style="color:#f92672">&amp;lt;=&lt;/span> bottom; &lt;span style="color:#f92672">++&lt;/span>y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points.emplace_back(Point{ left, y });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#a6e22e">if&lt;/span> (dy &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> left; x &lt;span style="color:#f92672">&amp;lt;=&lt;/span> right; &lt;span style="color:#f92672">++&lt;/span>x)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> points.emplace_back(Point{ x, top });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> obj : vectorObjects)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&lt;/span> line : &lt;span style="color:#f92672">*&lt;/span>obj)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LineToPointAdapter lpo{ line };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DrawPoints(dc, lpo.begin(), lpo.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="temporary-adapter">Temporary Adapter&lt;/h2>
&lt;ul>
&lt;li>How about above method is called in every display update despite no change?
&lt;ul>
&lt;li>
&lt;p>One of the solutions is to use cache.&lt;/p></description></item><item><title>Modern C++ Design Pattern/Chatper 7. 브릿지</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-7--%EB%B8%8C%EB%A6%BF%EC%A7%80/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-7--%EB%B8%8C%EB%A6%BF%EC%A7%80/</guid><description>&lt;h2 id="bridge-pattern">Bridge Pattern&lt;/h2>
&lt;h3 id="pimpl-pointer-to-implmentation">Pimpl (Pointer to Implmentation)&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20struct%20Person%0a%20%20%20%20%7b%0a%20%20%20%20%20%20string%20name;%0a%20%20%20%20%20%20void%20greet%28%29;%0a%0a%20%20%20%20%20%20Person%28%29;%0a%20%20%20%20%20%20~Person%28%29;%0a%0a%20%20%20%20%20%20class%20PersonImpl;%0a%20%20%20%20%20%20PersonImpl%20*impl;%20//%20refer%20to%20gsl::owner%3cT%3e%0a%20%20%20%20%7d;%0a%0a%20%20%20%20struct%20Person:PersonImpl%0a%20%20%20%20%7b%0a%20%20%20%20%20%20void%20greet%28Person*%20p%29;%0a%20%20%20%20%7d%0a%0a%20%20%20%20Person::Person%28%29%0a%20%20%20%20%20%20:%20impl%28new%20PersonImpl%29%20%7b%7d%0a%0a%20%20%20%20Person::~Person%28%29%20%7b%20delete%20imple;%20%7d%0a%0a%20%20%20%20void%20Person::greet%28%29%0a%20%20%20%20%7b%0a%20%20%20%20%20%20impl-%3egreet%28this%29;%0a%20%20%20%20%7d%0a%0a%20%20%20%20void%20Person::PersonImpl::greet%28Person*%20p%29%0a%20%20%20%20%7b%0a%20%20%20%20%20%20printf%28%22hello%20%25s%22,%20p-%3ename.c_str%28%29%29;%0a%20%20%20%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">~&lt;/span>Person();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PersonImpl&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PersonImpl &lt;span style="color:#f92672">*&lt;/span>impl; &lt;span style="color:#75715e">// refer to gsl::owner&amp;lt;T&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>&lt;span style="color:#f92672">:&lt;/span>PersonImpl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">greet&lt;/span>(Person&lt;span style="color:#f92672">*&lt;/span> p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person&lt;span style="color:#f92672">::&lt;/span>Person()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> impl(&lt;span style="color:#66d9ef">new&lt;/span> PersonImpl) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Person&lt;span style="color:#f92672">::~&lt;/span>Person() { &lt;span style="color:#66d9ef">delete&lt;/span> imple; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> Person&lt;span style="color:#f92672">::&lt;/span>greet()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> impl&lt;span style="color:#f92672">-&amp;gt;&lt;/span>greet(&lt;span style="color:#66d9ef">this&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> Person&lt;span style="color:#f92672">::&lt;/span>PersonImpl&lt;span style="color:#f92672">::&lt;/span>greet(Person&lt;span style="color:#f92672">*&lt;/span> p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;hello %s&amp;#34;&lt;/span>, p&lt;span style="color:#f92672">-&amp;gt;&lt;/span>name.c_str());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>Props
&lt;ul>
&lt;li>Hide implementation. If &lt;code>Person&lt;/code> class has many private/protected member variable, it is exposed though the header file to client.&lt;/li>
&lt;li>Ensure binary compatiblity.&lt;/li>
&lt;li>Include some header file needed.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="bridge-pattern-1">Bridge Pattern&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Renderer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">render_circle&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y, &lt;span style="color:#66d9ef">float&lt;/span> radius) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">VectorRenderer&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Renderer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">render_circle&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y, &lt;span style="color:#66d9ef">float&lt;/span> radius) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Rasterizing circle of radius &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> radius &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">RasterRenderer&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Renderer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">render_circle&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y, &lt;span style="color:#66d9ef">float&lt;/span> radius) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Drawing a vector circle of radius &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> radius &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Renderer&lt;span style="color:#f92672">&amp;amp;&lt;/span> renderer;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Shape(Renderer&lt;span style="color:#f92672">&amp;amp;&lt;/span> renderer) &lt;span style="color:#f92672">:&lt;/span> renderer{ renderer } {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> draw() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">resize&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> factor) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Circle&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Shape
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span> x, y, radius;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> renderer.render_circle(x, y, radius);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">resize&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> factor) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius &lt;span style="color:#f92672">+=&lt;/span> factor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Circle(Renderer&lt;span style="color:#f92672">&amp;amp;&lt;/span> renderer, &lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y, &lt;span style="color:#66d9ef">float&lt;/span> radius)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> Shape{renderer}, x{x}, y{y}, radius{radius} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;ul>
&lt;li>The bridge pattern must to know each other class except implmentation. It is compared with Mediator Pattern.&lt;/li>
&lt;/ul></description></item><item><title>Modern C++ Design Pattern/Chatper 8. 컴포지트</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-8--%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-8--%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8/</guid><description>&lt;h2 id="composite-pattern">Composite Pattern&lt;/h2>
&lt;ul>
&lt;li>How to announce the object has multiple composite attributes? It is not easy.&lt;/li>
&lt;/ul>
&lt;h3 id="properties-based-on-array">Properties based on array.&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Creature&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> strength, agility, intelligence;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> get_stringth() &lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> strength;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_strength&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> strength)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Creture&lt;span style="color:#f92672">::&lt;/span>strength &lt;span style="color:#f92672">=&lt;/span> strength;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Other getter/setter....
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> strength &lt;span style="color:#f92672">+&lt;/span> agility &lt;span style="color:#f92672">+&lt;/span> intelligence;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">average&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sum() &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">::&lt;/span>max(&lt;span style="color:#f92672">::&lt;/span>max(strength, agility), intelligence);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>It is not pretty.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20class%20Creature%0a%20%20%7b%0a%20%20%20%20enum%20Abilitis%20%7b%20str,%20agl,%20intl,%20count%20%7d;%0a%20%20%20%20array%3cint,%20count%3e%20abilities;%0a%20%20%20%20int%20get_strength%28%29%20const%20%7b%20return%20abilities[str];%20%7d%0a%20%20%20%20void%20set_strength%28int%20value%29%20%7b%20abilities[str]%20=%20value;%20%7d%0a%20%20%20%20//%20Other%20getter/setter%20...%0a%0a%20%20%20%20int%20sum%28%29%20const%20%7b%0a%20%20%20%20%20%20return%20accumulate%28abilities.begin%28%29,%20abilities.end%28%29,%200%29;%0a%20%20%20%20%7d%0a%0a%20%20%20%20double%20average%28%29%20const%20%7b%0a%20%20%20%20%20%20return%20sum%28%29%20/%20%28double%29%20count;%0a%20%20%20%20%7d%0a%0a%20%20%20%20int%20max%28%29%20const%20%7b%0a%20%20%20%20%20%20return%20*max_element%28abilities.begin%28%29,%20abilities.end%28%29%29;%0a%20%20%20%20%7d%0a%20%20%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Creature&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Abilitis&lt;/span> { str, agl, intl, count };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> array&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, count&lt;span style="color:#f92672">&amp;gt;&lt;/span> abilities;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">get_strength&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> abilities[str]; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">set_strength&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> value) { abilities[str] &lt;span style="color:#f92672">=&lt;/span> value; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Other getter/setter ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> accumulate(abilities.begin(), abilities.end(), &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">average&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> sum() &lt;span style="color:#f92672">/&lt;/span> (&lt;span style="color:#66d9ef">double&lt;/span>) count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">*&lt;/span>max_element(abilities.begin(), abilities.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="grouping">Grouping&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">GraphicObject&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Circle&lt;/span> &lt;span style="color:#f92672">:&lt;/span> GraphicObject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Circle&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Group&lt;/span> &lt;span style="color:#f92672">:&lt;/span> GraphicObject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">explicit&lt;/span> &lt;span style="color:#a6e22e">Group&lt;/span>(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> name{name} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">draw&lt;/span>() &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Group &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> name.c_str() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; containes:&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">auto&lt;/span>&lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> o : objects)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> o&lt;span style="color:#f92672">-&amp;gt;&lt;/span>draw();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>GraphicObject&lt;span style="color:#f92672">*&amp;gt;&lt;/span> objects;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Group &lt;span style="color:#a6e22e">root&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Circle c1, c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root.objects.push_back(&lt;span style="color:#f92672">&amp;amp;&lt;/span>c1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Group &lt;span style="color:#a6e22e">subgroup&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;sub&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> subgroup.objects.push_back(&lt;span style="color:#f92672">&amp;amp;&lt;/span>c2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root.objects.push_back(&lt;span style="color:#f92672">&amp;amp;&lt;/span>subgroup);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root.draw();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Modern C++ Design Pattern/Chatper 9. 데코레이터</title><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-9--%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-9--%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/</guid><description>&lt;h2 id="decorator">Decorator&lt;/h2>
&lt;ul>
&lt;li>Dynamic Composition&lt;/li>
&lt;li>Static Composition&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic-decorator">Dynamic Decorator&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ColoredShape&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Shape
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Shape&lt;span style="color:#f92672">&amp;amp;&lt;/span> shape;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ColoredShape(Shape&lt;span style="color:#f92672">&amp;amp;&lt;/span> shape, &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> shape{shape}, color{color} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stinrg &lt;span style="color:#a6e22e">str&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ostringstream oss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> shape.str() &lt;span style="color:#f92672">&amp;lt;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34; Has the color &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> oss.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Example Code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Circle circle{&lt;span style="color:#ae81ff">0.5f&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ColoredShape redCircle{circle, &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> redCircle.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">TransparentShape&lt;/span> &lt;span style="color:#f92672">:&lt;/span> Shape
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Shape&lt;span style="color:#f92672">&amp;amp;&lt;/span> shape;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> transparency;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TransparentShape(Shape&lt;span style="color:#f92672">&amp;amp;&lt;/span> shape, &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">uint8_t&lt;/span> transparency)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> shape{shape}, transparency{transparency} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string &lt;span style="color:#a6e22e">str&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ostringstream oss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> shape.str() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; has &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">static_cast&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">float&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>(transparency) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">255.f&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">100.f&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;% transparency&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> oss.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Exmaple Code
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Squre square{&lt;span style="color:#ae81ff">3&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TransparentShape demiSquare{square, &lt;span style="color:#ae81ff">85&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> demiSqure.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Composition Exmaple
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> TransparentShape myCircle {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ColoredShape {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Circle{&lt;span style="color:#ae81ff">23&lt;/span>}, &lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }, &lt;span style="color:#ae81ff">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> myCircle.str();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="static-decorator">Static Decorator&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> T&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ColoredShape&lt;/span> &lt;span style="color:#f92672">:&lt;/span> T
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static_assert&lt;/span>(is_base_of&lt;span style="color:#f92672">&amp;lt;&lt;/span>Shape, T&lt;span style="color:#f92672">&amp;gt;::&lt;/span>value,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Tempalte argument must be a Shape&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string &lt;span style="color:#a6e22e">str&lt;/span>() &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ostringstream oss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> oss &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> T&lt;span style="color:#f92672">::&lt;/span>str() &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34; has the color &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> color;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> oss.str();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">template&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span>...Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ColoredShape(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> color, Args ...args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> T(std&lt;span style="color:#f92672">::&lt;/span>forward&lt;span style="color:#f92672">&amp;lt;&lt;/span>Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>(args)...), color{ color } {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="funtional-decorator">Funtional Decorator&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> R, &lt;span style="color:#66d9ef">typename&lt;/span>... Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>R(Args...)&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Logger(function&lt;span style="color:#f92672">&amp;lt;&lt;/span>R(Args...)&lt;span style="color:#f92672">&amp;gt;&lt;/span> func, &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> func{func}, name{name} {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> R &lt;span style="color:#a6e22e">operator&lt;/span>() (Args ...args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Enter &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> name &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> R result &lt;span style="color:#f92672">=&lt;/span> func(args...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Exiting &amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> name &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> function&lt;span style="color:#f92672">&amp;lt;&lt;/span>R(Args ...)&lt;span style="color:#f92672">&amp;gt;&lt;/span> func;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">template&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">typename&lt;/span> R, &lt;span style="color:#66d9ef">typename&lt;/span>... Args&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> make_logger(R (&lt;span style="color:#f92672">*&lt;/span>func)(Args...), &lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Logger&lt;span style="color:#f92672">&amp;lt;&lt;/span>R(Args...)&lt;span style="color:#f92672">&amp;gt;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> function&lt;span style="color:#f92672">&amp;lt;&lt;/span>R(Args...)&lt;span style="color:#f92672">&amp;gt;&lt;/span>(func),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> logged_add &lt;span style="color:#f92672">=&lt;/span> make_logger(add, &lt;span style="color:#e6db74">&amp;#34;add&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> logged_add(&lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;ul>
&lt;li>Dynamic Decorator
&lt;ul>
&lt;li>Store decoreated object, compose dynamically in runtime. However, original object member cannot access member variable.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Static Decorator
&lt;ul>
&lt;li>Using mixin inheritance, compose in compile time. So, this method cannot compose again in runtime. However, it can access member variable. And using constructor forwarding, completely initialize object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Functional Decorator
&lt;ul>
&lt;li>Can overwrap a code block or other specific function to compose.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Book Review</title><link>https://minuk.dev/wiki/book-reviews/</link><pubDate>Tue, 07 Apr 2020 20:43:34 +0900</pubDate><guid>https://minuk.dev/wiki/book-reviews/</guid><description>본책들 정리</description></item><item><title>lectures/algorithm</title><link>https://minuk.dev/wiki/lectures/algorithm/</link><pubDate>Tue, 07 Apr 2020 20:37:08 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/algorithm/</guid><description>&lt;ol start="8">
&lt;li>Basic Sorting algorithm
The most common uses of sorted sequences are&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>making lookup or search efficient;&lt;/li>
&lt;li>making merging of sequences efficient&lt;/li>
&lt;li>enable processing of data in a defined order&lt;/li>
&lt;/ul>
&lt;h1 id="sorting-algorithm">Sorting algorithm&lt;/h1>
&lt;p>The output of any sorting algorithm must satisfy two conditions&lt;/p>
&lt;ul>
&lt;li>The output is in non-decreasing order: each element is no smaller than the previous element according to the desired total order&lt;/li>
&lt;li>The output is a permutation meaning that a reordering, yet retaining all of the original elements of the input.&lt;/li>
&lt;/ul>
&lt;h1 id="classification-of-sorting-algorithms">Classification of Sorting Algorithms&lt;/h1>
&lt;ul>
&lt;li>Computational Complexity : O(nlogn)&lt;/li>
&lt;li>Memory usage : O(1), sometimes O(log(n))&lt;/li>
&lt;li>Recursion&lt;/li>
&lt;li>Stability&lt;/li>
&lt;li>Whether or not they are a comparison sort&lt;/li>
&lt;li>Adaptability&lt;/li>
&lt;/ul>
&lt;h1 id="common-sorting-algorithms">Common sorting algorithms&lt;/h1>
&lt;ul>
&lt;li>Bubble sort : Exchange two adjacent elements if they are out of order. Repeat until array is sorted.&lt;/li>
&lt;li>Selection sort : Find the smallest element in the array, and put it in the proper place. Swap it with the value in the first position. Repeat until array is sorted.&lt;/li>
&lt;li>Insertion sort : Scan successive elements for an out-of-order item, then insert the item in the proper place.&lt;/li>
&lt;li>Merge sort : Divide the list of elements in two parts, sort the two parts individually and then merge it.&lt;/li>
&lt;li>Quick sort : Partition the array into two segments. In the first segment, all elements are less than or equal to the pivot value. In the second segment, all elements are greater than or equal to the pivot value. Finally, sort the two segments recursively.&lt;/li>
&lt;/ul>
&lt;ol start="9">
&lt;li>Divide and Conqure&lt;/li>
&lt;/ol>
&lt;h1 id="divide-and-conquer-paradigm">Divide and Conquer Paradigm&lt;/h1>
&lt;h2 id="advantages-of-divide-and-conquer">Advantages of Divide and Conquer&lt;/h2>
&lt;ul>
&lt;li>Solving difficult problems&lt;/li>
&lt;li>Algorithm efficiency
&lt;ul>
&lt;li>Karatsuba&amp;rsquo;s fast multiplication method, quick and merge sort, Strassen algorithm for matrix multiplication, fast Fourier transforms.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Parallelism
&lt;ul>
&lt;li>multi-processor machines, sub-problems can be executed on different processors.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Memory access
&lt;ul>
&lt;li>An algorithm designed to exploit the cache in this way is called cache-oblivious&lt;/li>
&lt;li>D&amp;amp;C(Divide and Conquer) algorithms can be designed for important algorithms such as sorting, FFTs, matrix multiplication to be optimal cache-oblivious algorithms&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Roundoff control&lt;/li>
&lt;/ul>
&lt;h2 id="implementation-issues">Implementation issues&lt;/h2>
&lt;ul>
&lt;li>Recursion
&lt;ul>
&lt;li>If D&amp;amp;C algorithms are naturally implemented as recursive procedures, the partial sub-problems leading to the one currently being solved are automatically stored in the procedure call stack.&lt;/li>
&lt;li>A recursive function is a function that calls itself within its definition.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Explicit stack
&lt;ul>
&lt;li>If D&amp;amp;C algorithms are implemented by a non-recursive program that stored the partial sub-problems in some explicit data structure, such as a stack, queue, or priority queue.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Stack size
&lt;ul>
&lt;li>In recursive implementations of D&amp;amp;C algorithms, one must make sure that there is sufficient memory allocated for the recursion stack, otherwise the execution may fail because of stack overflow.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Choosing the base cases&lt;/li>
&lt;li>Sharing repeated subproblems&lt;/li>
&lt;/ul>
&lt;h2 id="general-method">General Method&lt;/h2>
&lt;h2 id="divide-and-conquer-strategy">Divide and Conquer Strategy&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>divide the problem instance into two or more smaller instances of the same problem, solve the smaller instances recursively, and assemble the solutions to form a solution of the original instance.&lt;/p></description></item><item><title>lectures/computer architecture</title><link>https://minuk.dev/wiki/lectures/computer-architecture/</link><pubDate>Tue, 07 Apr 2020 20:37:08 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/computer-architecture/</guid><description>&lt;ol start="5">
&lt;li>Large and Fast : Exploiting Memory Hierarchy5.&lt;/li>
&lt;/ol>
&lt;h1 id="principle-of-locality">Principle of Locality&lt;/h1>
&lt;ul>
&lt;li>Temporal locality&lt;/li>
&lt;li>Spatial locality&lt;/li>
&lt;/ul>
&lt;h1 id="taking-advantage-of-locality">Taking Advantage of Locality&lt;/h1>
&lt;ul>
&lt;li>Memory hierarchy
&lt;ul>
&lt;li>Store everything on disk (lowest level)&lt;/li>
&lt;li>Copy recently accessed (and nearby) items from disk to smaller DRAM(e.g. Main Memory)&lt;/li>
&lt;li>copy more recently accessed (and nearby) items from DRAM to smaller SRAM memory(e.g. Cache memory attached to CPU)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="memory-hierarchy-levels">Memory Hierarchy Levels&lt;/h1>
&lt;ul>
&lt;li>A block (aka line) : unit of copying&lt;/li>
&lt;li>If accessed data is present in upper level
&lt;ul>
&lt;li>Hit : access satisfied by upper level
&lt;ul>
&lt;li>Hit ratio: hits/accesses&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>If accessed data is absent
&lt;ul>
&lt;li>Miss : block copied from lower level
&lt;ul>
&lt;li>Time taken : miss penalty&lt;/li>
&lt;li>Miss ratio : misses/accesses = 1 - hit ratio&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Then accessed data supplied from upper level&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="memory-technology">Memory Technology&lt;/h1>
&lt;ul>
&lt;li>Static RAM (SRAM) : 0.5ns - 2.5ns, $2000 - $5000 per GB&lt;/li>
&lt;li>Dynamic RAM(DRAM) : 50ns - 70ns, $20 - $75 per GB&lt;/li>
&lt;li>Magnetic disk : 5ms - 20ms, $0.20 - $2 per GB&lt;/li>
&lt;li>Ideal memory
&lt;ul>
&lt;li>Access time of SRAM&lt;/li>
&lt;li>Capacity and cost/GB of disk&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="sram-technology">SRAM Technology&lt;/h1>
&lt;ul>
&lt;li>Data stored using 6~8 transistors in an IC
&lt;ul>
&lt;li>fast, but expensive&lt;/li>
&lt;li>fixed access time to any datum&lt;/li>
&lt;li>no refresh needed&lt;/li>
&lt;li>usually for caches, integrated on processor chips&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="dram-technology">DRAM Technology&lt;/h1>
&lt;ul>
&lt;li>Data stored as a charge in a capacitor
&lt;ul>
&lt;li>Single transistor used to access the charge&lt;/li>
&lt;li>Must periodically be refreshed
&lt;ul>
&lt;li>Read contents and write back&lt;/li>
&lt;li>Performed on a DRAM &amp;ldquo;row&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Synchronous DRAM (SDRAM)
&lt;ul>
&lt;li>DRAM with clocks to improve bandwidth&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Ex&amp;gt; Double data rate (DDR) DRAM
&lt;ul>
&lt;li>Transfer on rising and falling clock edges&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="flash-memory">Flash Memory&lt;/h1>
&lt;ul>
&lt;li>Non-volatile semiconductor storage ( a type of EEPROM)
&lt;ul>
&lt;li>100x - 1000x faster than disk&lt;/li>
&lt;li>smaller, lower power, more robust&lt;/li>
&lt;li>But more $/GB (between disk and DRAM)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Types
&lt;ul>
&lt;li>NOR flash : bit cell like a NOR gate
&lt;ul>
&lt;li>Random read/write access&lt;/li>
&lt;li>Used for instruction memory in embedded systems&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>NAND flash : bit cell like a NAND gate
&lt;ul>
&lt;li>Denser (bits/area), but block-at-a-time access&lt;/li>
&lt;li>Cheaper per GB&lt;/li>
&lt;li>Used for USB keys, media storage, &amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Flash bits wears out after 1000&amp;rsquo;s of accesses
&lt;ul>
&lt;li>Not suitable for direct RAM or disk replacemenet&lt;/li>
&lt;li>Wear leveling : remap data to less used blocks&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="disk-storage">Disk Storage&lt;/h1>
&lt;ul>
&lt;li>Nonvolatile, rotating magnetic storage&lt;/li>
&lt;/ul>
&lt;h2 id="disk-sectors-and-access">Disk Sectors and Access&lt;/h2>
&lt;ul>
&lt;li>Each sector records : Sector ID, Data(512 bytes, 4096 bytes proposed), Error correcting code (ECC), Synchronization fields and gaps&lt;/li>
&lt;li>Access to a sector involves : Queuing delay if other accesses are pending, Seek(move the heads), Rotational latency, Data transfer,Controller overhead&lt;/li>
&lt;/ul>
&lt;h2 id="disk-access-example">Disk Access Example&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Given : 512B sector, 15000rpm, 4ms average seek time, 100MB/s transfer rate, 0.2ms controller overhead, idle disk&lt;/p></description></item><item><title>lectures/image processing</title><link>https://minuk.dev/wiki/lectures/image-processing/</link><pubDate>Tue, 07 Apr 2020 20:37:08 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/image-processing/</guid><description>&lt;p>PCA (Principal Components Analysis)&lt;/p>
&lt;h1 id="eigenvalues-and-eigenvectors">Eigenvalues and Eigenvectors&lt;/h1>
&lt;ul>
&lt;li>The prefix eigen- is adopted from the German word eigen for &amp;ldquo;proper&amp;rdquo;, &amp;ldquo;characteristic&amp;rdquo;&lt;/li>
&lt;li>Eigenvalues are a special set of scalars associated with a linear system of equations that are sometimes also known as characteristic roots, characteristic values&lt;/li>
&lt;li>Each eigenvalue is paired with a corresponding so-called eigen vector.&lt;/li>
&lt;li>Eigenvectors are a special set of vectors associated with a linear system of equations that are sometimes also known as characteristic vectors&lt;/li>
&lt;li>The Lanczos algorithm is an algorithm for computing the eigenvalues and eigenvectors&lt;/li>
&lt;li>Eigenvalues and eigenvectors feature prominently in the analysis of transformations&lt;/li>
&lt;/ul>
&lt;h2 id="covariance-matrix">Covariance matrix&lt;/h2>
&lt;ul>
&lt;li>The covariance matrix consists of the variances of the variables along the main diagonal and the covariance between each pair of variables in the other matrix positions&lt;/li>
&lt;/ul>
&lt;h2 id="face-recognition">Face Recognition&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>obtain face images I_1, &amp;hellip; , I_m (training faces) (very important : the face images must be centered and of the same size)&lt;/p></description></item><item><title>학교 수업</title><link>https://minuk.dev/wiki/lectures/</link><pubDate>Tue, 07 Apr 2020 20:37:08 +0900</pubDate><guid>https://minuk.dev/wiki/lectures/</guid><description>&lt;h1 id="학교-수업">학교 수업&lt;/h1>
&lt;ul>
&lt;li>[[lectures/algorithm]]&lt;/li>
&lt;li>[[lectures/computer architecture]]&lt;/li>
&lt;li>[[lectures/image processing]]&lt;/li>
&lt;li>[[lectures/human_behavior_and_psychology]]&lt;/li>
&lt;li>[[lectures/database_system]]&lt;/li>
&lt;li>[[lectures/wireless]]&lt;/li>
&lt;li>[[lectures/network_design_and_application]]&lt;/li>
&lt;li>[[lectures/nonparametric-statistic]]&lt;/li>
&lt;li>[[lectures/multicore]]&lt;/li>
&lt;li>[[lectures/regression]]&lt;/li>
&lt;li>[[lectures/multi-variant-statistical-analysis]]&lt;/li>
&lt;li>[[lectures/bayesian-statistics]]&lt;/li>
&lt;li>[[lectures/introduction-to-statistical-learning]]&lt;/li>
&lt;li>[[lectures/computer-communication]]&lt;/li>
&lt;li>[[lectures/automata]]&lt;/li>
&lt;li>[[pdf-test]]&lt;/li>
&lt;li>[[lectures/machine-learning]]&lt;/li>
&lt;li>[[lectures/signal_and_system]]&lt;/li>
&lt;li>[[lectures/compiler]]&lt;/li>
&lt;li>[[lectures/the-people-of-chung-ang-university-and-korean-society]]&lt;/li>
&lt;li>[[lectures/information_security_theory]]&lt;/li>
&lt;li>[[lectures/numerical_analysis]]&lt;/li>
&lt;li>[[lectures/design-pattern]]&lt;/li>
&lt;/ul></description></item><item><title>Tool configuration</title><link>https://minuk.dev/wiki/tool-configuration/</link><pubDate>Tue, 07 Apr 2020 20:36:45 +0900</pubDate><guid>https://minuk.dev/wiki/tool-configuration/</guid><description>&lt;h1 id="--neovim">- Neovim&lt;/h1>
&lt;pre>&lt;code>- `.vimrc`

 &amp;quot; vim-bootstrap 
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Vim-PLug core
 &amp;quot;*****************************************************************************
 let vimplug_exists=expand('~/.config/nvim/autoload/plug.vim')
 
 let g:vim_bootstrap_langs = &amp;quot;c,html,javascript,python&amp;quot;
 let g:vim_bootstrap_editor = &amp;quot;nvim&amp;quot;				&amp;quot; nvim or vim
 
 if !filereadable(vimplug_exists)
 if !executable(&amp;quot;curl&amp;quot;)
 echoerr &amp;quot;You have to install curl or first install vim-plug yourself!&amp;quot;
 execute &amp;quot;q!&amp;quot;
 endif
 echo &amp;quot;Installing Vim-Plug...&amp;quot;
 echo &amp;quot;&amp;quot;
 silent exec &amp;quot;!\curl -fLo &amp;quot; . vimplug_exists . &amp;quot; --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&amp;quot;
 let g:not_finish_vimplug = &amp;quot;yes&amp;quot;
 
 autocmd VimEnter * PlugInstall
 endif
 
 &amp;quot; Required:
 call plug#begin(expand('~/.config/nvim/plugged'))
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Plug install packages
 &amp;quot;*****************************************************************************
 if has('nvim')
 Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
 Plug 'wokalski/autocomplete-flow'
 Plug 'zchee/deoplete-clang' 
 else
 Plug 'Shougo/deoplete.nvim'
 Plug 'roxma/nvim-yarp'
 Plug 'roxma/vim-hug-neovim-rpc'
 endif
 let g:deoplete#enable_at_startup = 1
 
 Plug 'vimwiki/vimwiki'
 Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
 &amp;quot;let g:vimwiki_list = [{'path': '~/workspace/vimwiki'}]
 Plug 'scrooloose/nerdtree'
 Plug 'jistr/vim-nerdtree-tabs'
 Plug 'Xuyuanp/nerdtree-git-plugin'
 Plug 'qpkorr/vim-bufkill'
 Plug 'tpope/vim-commentary'
 Plug 'tpope/vim-fugitive'
 Plug 'vim-airline/vim-airline'
 Plug 'vim-airline/vim-airline-themes'
 Plug 'airblade/vim-gitgutter'
 Plug 'vim-scripts/grep.vim'
 Plug 'vim-scripts/CSApprox'
 Plug 'Raimondi/delimitMate'
 Plug 'majutsushi/tagbar'
 Plug 'w0rp/ale'
 Plug 'Yggdroot/indentLine'
 Plug 'avelino/vim-bootstrap-updater'
 Plug 'sheerun/vim-polyglot'
 Plug 'tpope/vim-rhubarb' &amp;quot; required by fugitive to :Gbrowse
 Plug 'easymotion/vim-easymotion'
 
 if isdirectory('/usr/local/opt/fzf')
 Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
 else
 Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
 Plug 'junegunn/fzf.vim'
 endif
 let g:make = 'gmake'
 if exists('make')
 let g:make = 'make'
 endif
 Plug 'Shougo/vimproc.vim', {'do': g:make}
 
 &amp;quot;&amp;quot; Vim-Session
 Plug 'xolox/vim-misc'
 Plug 'xolox/vim-session'
 
 &amp;quot;&amp;quot; Snippets
 Plug 'SirVer/ultisnips'
 Plug 'honza/vim-snippets'
 
 &amp;quot;&amp;quot; Color
 Plug 'dracula/vim', { 'as': 'dracula' }
 &amp;quot;Plug 'dracula/dracula-theme'
 &amp;quot;Plug 'tomasr/molokai'
 &amp;quot;let g:gruvbox_italic=1 
 &amp;quot;Plug 'morhetz/gruvbox'
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Custom bundles
 &amp;quot;*****************************************************************************
 
 &amp;quot; c
 Plug 'vim-scripts/c.vim', {'for': ['c', 'cpp']}
 Plug 'ludwig/split-manpage.vim'
 
 
 &amp;quot; html
 &amp;quot;&amp;quot; HTML Bundle
 Plug 'hail2u/vim-css3-syntax'
 Plug 'gorodinskiy/vim-coloresque'
 Plug 'tpope/vim-haml'
 Plug 'mattn/emmet-vim'
 
 
 &amp;quot; javascript
 &amp;quot;&amp;quot; Javascript Bundle
 Plug 'jelera/vim-javascript-syntax'
 
 
 &amp;quot; python
 &amp;quot;&amp;quot; Python Bundle
 Plug 'davidhalter/jedi-vim'
 Plug 'raimon49/requirements.txt.vim', {'for': 'requirements'}
 
 
 &amp;quot;*****************************************************************************
 &amp;quot;*****************************************************************************
 
 &amp;quot;&amp;quot; Include user's extra bundle
 if filereadable(expand(&amp;quot;~/.config/nvim/local_bundles.vim&amp;quot;))
 source ~/.config/nvim/local_bundles.vim
 endif
 
 call plug#end()
 
 &amp;quot; Required:
 filetype plugin indent on
 
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Basic Setup
 &amp;quot;*****************************************************************************&amp;quot;
 &amp;quot;&amp;quot; Encoding
 set encoding=utf-8
 set fileencoding=utf-8
 set fileencodings=utf-8
 
 
 &amp;quot;&amp;quot; Fix backspace indent
 set backspace=indent,eol,start
 
 &amp;quot;&amp;quot; Tabs. May be overridden by autocmd rules
 set tabstop=2
 set softtabstop=0
 set shiftwidth=2
 set expandtab
 
 &amp;quot;&amp;quot; Map leader to ,
 let mapleader=','
 
 &amp;quot;&amp;quot; Enable hidden buffers
 set hidden
 
 &amp;quot;&amp;quot; Searching
 set hlsearch
 set incsearch
 set ignorecase
 set smartcase
 
 set fileformats=unix,dos,mac
 
 if exists('$SHELL')
 set shell=$SHELL
 else
 set shell=/bin/sh
 endif
 
 &amp;quot; session management
 let g:session_directory = &amp;quot;~/.config/nvim/session&amp;quot;
 let g:session_autoload = &amp;quot;no&amp;quot;
 let g:session_autosave = &amp;quot;no&amp;quot;
 let g:session_command_aliases = 1
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Visual Settings
 &amp;quot;*****************************************************************************
 syntax on
 set ruler
 set number
 
 let no_buffers_menu=1
 silent! colorscheme molokai
 
 set mousemodel=popup
 set t_Co=256
 set guioptions=egmrti
 set gfn=Monospace\ 10
 
 if has(&amp;quot;gui_running&amp;quot;)
 if has(&amp;quot;gui_mac&amp;quot;) || has(&amp;quot;gui_macvim&amp;quot;)
 set guifont=Menlo:h12
 set transparency=7
 endif
 else
 let g:CSApprox_loaded = 1
 
 &amp;quot; IndentLine
 let g:indentLine_enabled = 1
 let g:indentLine_concealcursor = 0
 let g:indentLine_char = '┆'
 let g:indentLine_faster = 1
 
 
 endif
 
 
 
 &amp;quot;&amp;quot; Disable the blinking cursor.
 set gcr=a:blinkon0
 set scrolloff=3
 
 &amp;quot;&amp;quot; Status bar
 set laststatus=2
 
 &amp;quot;&amp;quot; Use modeline overrides
 set modeline
 set modelines=10
 
 set title
 set titleold=&amp;quot;Terminal&amp;quot;
 set titlestring=%F
 
 set statusline=%F%m%r%h%w%=(%{&amp;amp;ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\
 
 &amp;quot; Search mappings: These will make it so that going to the next one in a
 &amp;quot; search will center on the line it's found in.
 nnoremap n nzzzv
 nnoremap N Nzzzv
 
 if exists(&amp;quot;*fugitive#statusline&amp;quot;)
 set statusline+=%{fugitive#statusline()}
 endif
 
 &amp;quot; vim-airline
 let g:airline_theme = 'dracula'
 let g:airline#extensions#branch#enabled = 1
 let g:airline#extensions#ale#enabled = 1
 let g:airline#extensions#tabline#enabled = 1
 let g:airline#extensions#tagbar#enabled = 1
 let g:airline_skip_empty_sections = 1
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Abbreviations
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; no one is really happy until you have this shortcuts
 cnoreabbrev W! w!
 cnoreabbrev Q! q!
 cnoreabbrev Qall! qall!
 cnoreabbrev Wq wq
 cnoreabbrev Wa wa
 cnoreabbrev wQ wq
 cnoreabbrev WQ wq
 cnoreabbrev W w
 cnoreabbrev Q q
 cnoreabbrev Qall qall
 
 &amp;quot;&amp;quot; NERDTree configuration
 let g:NERDTreeChDirMode=2
 let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
 let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
 let g:NERDTreeShowBookmarks=1
 let g:nerdtree_tabs_focus_on_files=1
 let g:NERDTreeMapOpenInTabSilent = '&amp;lt;RightMouse&amp;gt;'
 let g:NERDTreeWinSize = 30
 set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;F2&amp;gt; :NERDTreeFind&amp;lt;CR&amp;gt;
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;F3&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
 
 &amp;quot; grep.vim
 let Grep_Default_Options = '-IR'
 let Grep_Skip_Files = '*.log *.db'
 let Grep_Skip_Dirs = '.git node_modules'
 
 
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Commands
 &amp;quot;*****************************************************************************
 &amp;quot; remove trailing whitespaces
 command! FixWhitespace :%s/\s\+$//e
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Functions
 &amp;quot;*****************************************************************************
 if !exists('*s:setupWrapping')
 function s:setupWrapping()
 set wrap
 set wm=2
 set textwidth=79
 endfunction
 endif
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Autocmd Rules
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; The PC is fast enough, do syntax highlight syncing from start unless 200 lines
 augroup vimrc-sync-fromstart
 autocmd!
 autocmd BufEnter * :syntax sync maxlines=200
 augroup END
 
 &amp;quot;&amp;quot; Remember cursor position
 augroup vimrc-remember-cursor-position
 autocmd!
 autocmd BufReadPost * if line(&amp;quot;'\&amp;quot;&amp;quot;) &amp;gt; 1 &amp;amp;&amp;amp; line(&amp;quot;'\&amp;quot;&amp;quot;) &amp;lt;= line(&amp;quot;$&amp;quot;) | exe &amp;quot;normal! g`\&amp;quot;&amp;quot; | endif
 augroup END
 
 &amp;quot;&amp;quot; txt
 augroup vimrc-wrapping
 autocmd!
 autocmd BufRead,BufNewFile *.txt call s:setupWrapping()
 augroup END
 
 &amp;quot;&amp;quot; make/cmake
 augroup vimrc-make-cmake
 autocmd!
 autocmd FileType make setlocal noexpandtab
 autocmd BufNewFile,BufRead CMakeLists.txt setlocal filetype=cmake
 augroup END
 
 set autoread
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Mappings
 &amp;quot;*****************************************************************************
 
 
 &amp;quot;&amp;quot; Tabs
 nnoremap &amp;lt;Tab&amp;gt; gt
 nnoremap &amp;lt;S-Tab&amp;gt; gT
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;S-t&amp;gt; :tabnew&amp;lt;CR&amp;gt;
 
 
 &amp;quot;&amp;quot; fzf.vim
 set wildmode=list:longest,list:full
 set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
 let $FZF_DEFAULT_COMMAND = &amp;quot;find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o -type f -print -o -type l -print 2&amp;gt; /dev/null&amp;quot;
 
 &amp;quot; The Silver Searcher
 if executable('ag')
 let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g &amp;quot;&amp;quot;'
 set grepprg=ag\ --nogroup\ --nocolor
 endif
 
 &amp;quot; ripgrep
 if executable('rg')
 let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob &amp;quot;!.git/*&amp;quot;'
 set grepprg=rg\ --vimgrep
 command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob &amp;quot;!.git/*&amp;quot; --color &amp;quot;always&amp;quot; '.shellescape(&amp;lt;q-args&amp;gt;).'| tr -d &amp;quot;\017&amp;quot;', 1, &amp;lt;bang&amp;gt;0)
 endif
 
 cnoremap &amp;lt;C-P&amp;gt; &amp;lt;C-R&amp;gt;=expand(&amp;quot;%:p:h&amp;quot;) . &amp;quot;/&amp;quot; &amp;lt;CR&amp;gt;
 
 &amp;quot; snippets
 let g:UltiSnipsExpandTrigger=&amp;quot;&amp;lt;tab&amp;gt;&amp;quot;
 let g:UltiSnipsJumpForwardTrigger=&amp;quot;&amp;lt;tab&amp;gt;&amp;quot;
 let g:UltiSnipsJumpBackwardTrigger=&amp;quot;&amp;lt;c-b&amp;gt;&amp;quot;
 let g:UltiSnipsEditSplit=&amp;quot;vertical&amp;quot;
 
 &amp;quot; ale
 let g:ale_linters = {'javascript' : ['eslint']}
 
 &amp;quot; Tagbar
 nmap &amp;lt;silent&amp;gt; &amp;lt;F4&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
 let g:tagbar_autofocus = 1
 
 &amp;quot; Disable visualbell
 set noerrorbells visualbell t_vb=
 if has('autocmd')
 autocmd GUIEnter * set visualbell t_vb=
 endif
 
 &amp;quot;&amp;quot; Copy/Paste/Cut
 if has('unnamedplus')
 set clipboard=unnamed,unnamedplus
 endif
 
 noremap YY &amp;quot;+y&amp;lt;CR&amp;gt;
 noremap &amp;lt;leader&amp;gt;p &amp;quot;+gP&amp;lt;CR&amp;gt;
 noremap XX &amp;quot;+x&amp;lt;CR&amp;gt;
 
 if has('macunix')
 &amp;quot; pbcopy for OSX copy/paste
 vmap &amp;lt;C-x&amp;gt; :!pbcopy&amp;lt;CR&amp;gt;
 vmap &amp;lt;C-c&amp;gt; :w !pbcopy&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt;
 endif
 
 
 
 &amp;quot;&amp;quot; Switching windows
 noremap &amp;lt;C-j&amp;gt; &amp;lt;C-w&amp;gt;j
 noremap &amp;lt;C-k&amp;gt; &amp;lt;C-w&amp;gt;k
 noremap &amp;lt;C-l&amp;gt; &amp;lt;C-w&amp;gt;l
 noremap &amp;lt;C-h&amp;gt; &amp;lt;C-w&amp;gt;h
 
 &amp;quot;&amp;quot; Vmap for maintain Visual Mode after shifting &amp;gt; and &amp;lt;
 vmap &amp;lt; &amp;lt;gv
 vmap &amp;gt; &amp;gt;gv
 
 &amp;quot;&amp;quot; Move visual block
 vnoremap J :m '&amp;gt;+1&amp;lt;CR&amp;gt;gv=gv
 vnoremap K :m '&amp;lt;-2&amp;lt;CR&amp;gt;gv=gv
 
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Custom configs
 &amp;quot;*****************************************************************************
 
 &amp;quot; c
 autocmd FileType c setlocal tabstop=2 shiftwidth=2 expandtab 
 autocmd FileType c let g:loaded_nvimgdb = 1
 autocmd FileType cpp setlocal tabstop=2 shiftwidth=2 expandtab 
 autocmd FileType cpp let g:loaded_nvimgdb = 1
 
 
 &amp;quot; html
 &amp;quot; for html files, 2 spaces
 autocmd Filetype html setlocal ts=2 sw=2 expandtab
 
 
 &amp;quot; javascript
 let g:javascript_enable_domhtmlcss = 1
 
 &amp;quot; vim-javascript
 augroup vimrc-javascript
 autocmd!
 autocmd FileType javascript setl tabstop=2|setl shiftwidth=2|setl expandtab softtabstop=2
 augroup END
 
 
 &amp;quot; python
 &amp;quot; vim-python
 augroup vimrc-python
 autocmd!
 autocmd FileType python setlocal expandtab shiftwidth=2 tabstop=4 colorcolumn=79
 \ formatoptions+=croq softtabstop=2
 \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
 augroup END
 
 &amp;quot; jedi-vim
 let g:jedi#popup_on_dot = 0
 let g:jedi#goto_assignments_command = &amp;quot;&amp;lt;leader&amp;gt;g&amp;quot;
 let g:jedi#goto_definitions_command = &amp;quot;&amp;lt;leader&amp;gt;d&amp;quot;
 let g:jedi#documentation_command = &amp;quot;K&amp;quot;
 let g:jedi#usages_command = &amp;quot;&amp;lt;leader&amp;gt;n&amp;quot;
 let g:jedi#rename_command = &amp;quot;&amp;lt;leader&amp;gt;r&amp;quot;
 let g:jedi#show_call_signatures = &amp;quot;0&amp;quot;
 let g:jedi#completions_command = &amp;quot;&amp;lt;C-Space&amp;gt;&amp;quot;
 let g:jedi#smart_auto_mappings = 0
 
 &amp;quot; ale
 :call extend(g:ale_linters, {
 \'python': ['flake8'], })
 
 &amp;quot; vim-airline
 let g:airline#extensions#virtualenv#enabled = 1
 
 &amp;quot; Syntax highlight
 &amp;quot; Default highlight is better than polyglot
 let g:polyglot_disabled = ['python']
 let python_highlight_all = 1
 
 
 
 &amp;quot;*****************************************************************************
 &amp;quot;*****************************************************************************
 
 &amp;quot;&amp;quot; Include user's local vim config
 if filereadable(expand(&amp;quot;~/.config/nvim/local_init.vim&amp;quot;))
 source ~/.config/nvim/local_init.vim
 endif
 
 &amp;quot;*****************************************************************************
 &amp;quot;&amp;quot; Convenience variables
 &amp;quot;*****************************************************************************
 
 &amp;quot; vim-airline
 if !exists('g:airline_symbols')
 let g:airline_symbols = {}
 endif
 
 if !exists('g:airline_powerline_fonts')
 let g:airline#extensions#tabline#left_sep = ' '
 let g:airline#extensions#tabline#left_alt_sep = '|'
 let g:airline_left_sep = '▶'
 let g:airline_left_alt_sep = '»'
 let g:airline_right_sep = '◀'
 let g:airline_right_alt_sep = '«'
 let g:airline#extensions#branch#prefix = '⤴' &amp;quot;➔, ➥, ⎇
 let g:airline#extensions#readonly#symbol = '⊘'
 let g:airline#extensions#linecolumn#prefix = '¶'
 let g:airline#extensions#paste#symbol = 'ρ'
 let g:airline_symbols.linenr = '␊'
 let g:airline_symbols.branch = '⎇'
 let g:airline_symbols.paste = 'ρ'
 let g:airline_symbols.paste = 'Þ'
 let g:airline_symbols.paste = '∥'
 let g:airline_symbols.whitespace = 'Ξ'
 else
 let g:airline#extensions#tabline#left_sep = ''
 let g:airline#extensions#tabline#left_alt_sep = ''
 
 &amp;quot; powerline symbols
 let g:airline_left_sep = ''
 let g:airline_left_alt_sep = ''
 let g:airline_right_sep = ''
 let g:airline_right_alt_sep = ''
 let g:airline_symbols.branch = ''
 let g:airline_symbols.readonly = ''
 let g:airline_symbols.linenr = ''
 endif
 
 let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-6.0/lib/libclang.so'
 &amp;quot; grep.vim
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;f :Rgrep&amp;lt;CR&amp;gt;
 &amp;quot; terminal emulation
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;sh :terminal&amp;lt;CR&amp;gt;
 &amp;quot;&amp;quot; Open current line on GitHub
 nnoremap &amp;lt;Leader&amp;gt;o :.Gbrowse&amp;lt;CR&amp;gt;
 &amp;quot;&amp;quot; Clean search (highlight)
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;&amp;lt;space&amp;gt; :noh&amp;lt;cr&amp;gt;
 &amp;quot;&amp;quot; Buffer nav
 noremap &amp;lt;leader&amp;gt;z :bp&amp;lt;CR&amp;gt;
 noremap &amp;lt;leader&amp;gt;q :bp&amp;lt;CR&amp;gt;
 noremap &amp;lt;leader&amp;gt;x :bn&amp;lt;CR&amp;gt;
 noremap &amp;lt;leader&amp;gt;w :bn&amp;lt;CR&amp;gt;
 
 &amp;quot;&amp;quot; Close buffer
 noremap &amp;lt;leader&amp;gt;c :bd&amp;lt;CR&amp;gt;
 
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;b :Buffers&amp;lt;CR&amp;gt;
 nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;e :FZF -m&amp;lt;CR&amp;gt;
 &amp;quot;Recovery commands from history through FZF
 nmap &amp;lt;leader&amp;gt;y :History:&amp;lt;CR&amp;gt;
 &amp;quot;&amp;quot; Set working directory
 nnoremap &amp;lt;leader&amp;gt;. :lcd %:p:h&amp;lt;CR&amp;gt;
 
 &amp;quot;&amp;quot; Opens an edit command with the path of the currently edited file filled in
 noremap &amp;lt;Leader&amp;gt;e :e &amp;lt;C-R&amp;gt;=expand(&amp;quot;%:p:h&amp;quot;) . &amp;quot;/&amp;quot; &amp;lt;CR&amp;gt;
 
 &amp;quot;&amp;quot; Opens a tab edit command with the path of the currently edited file filled
 noremap &amp;lt;Leader&amp;gt;te :tabe &amp;lt;C-R&amp;gt;=expand(&amp;quot;%:p:h&amp;quot;) . &amp;quot;/&amp;quot; &amp;lt;CR&amp;gt;
 &amp;quot;&amp;quot; Split
 noremap &amp;lt;Leader&amp;gt;h :&amp;lt;C-u&amp;gt;split&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;v :&amp;lt;C-u&amp;gt;vsplit&amp;lt;CR&amp;gt;
 
 &amp;quot;&amp;quot; Git
 noremap &amp;lt;Leader&amp;gt;ga :Gwrite&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gc :Gcommit&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gsh :Gpush&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gll :Gpull&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gs :Gstatus&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gb :Gblame&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gd :Gvdiff&amp;lt;CR&amp;gt;
 noremap &amp;lt;Leader&amp;gt;gr :Gremove&amp;lt;CR&amp;gt;
 
 &amp;quot; session management
 nnoremap &amp;lt;leader&amp;gt;so :OpenSession&amp;lt;Space&amp;gt;
 nnoremap &amp;lt;leader&amp;gt;ss :SaveSession&amp;lt;Space&amp;gt;
 nnoremap &amp;lt;leader&amp;gt;sd :DeleteSession&amp;lt;CR&amp;gt;
 nnoremap &amp;lt;leader&amp;gt;sc :CloseSession&amp;lt;CR&amp;gt;
 color dracula
 
 
 if filereadable(expand(&amp;quot;.local.vim&amp;quot;))
 source .local.vim
 endif
 
 set undofile
 set undodir=/home/lmu/.config/nvim/.vimundo
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>zsh&lt;/p></description></item><item><title>SSH Server Configuration</title><link>https://minuk.dev/wiki/ssh-server/</link><pubDate>Tue, 07 Apr 2020 20:36:17 +0900</pubDate><guid>https://minuk.dev/wiki/ssh-server/</guid><description>&lt;ul>
&lt;li>
&lt;p>Installation&lt;/p>
&lt;p>sudo apt install openssh-server&lt;/p>
&lt;p>sudo vim /etc/ssh/sshd_config&lt;/p>
&lt;/li>
&lt;li>
&lt;p>generate key&lt;/p>
&lt;p>ssh-keygen -R {id}@{host}&lt;/p>
&lt;p>PermitRootLogin prohibit-password&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Firewall (방화벽) Configuration</title><link>https://minuk.dev/wiki/firewall/</link><pubDate>Tue, 07 Apr 2020 20:36:02 +0900</pubDate><guid>https://minuk.dev/wiki/firewall/</guid><description>&lt;ul>
&lt;li>
&lt;p>iptables&lt;/p>
&lt;p>#iptables -nL&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="save-firewall-configuration">save firewall configuration&lt;/h2>
&lt;pre>&lt;code>#iptalbes-save &amp;gt; save_data.rules
&lt;/code>&lt;/pre>
&lt;h2 id="config-firwall">config firwall&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>아이피 111.222.111.222에 대해서 destination port 가 22이면 ACCEPT 하여라.&lt;/p>
&lt;p>#iptables -A INPUT -s 111.222.111.222/32 -p tcp -m state &amp;ndash;state NEW -m tcp &amp;ndash;dport 22 -j ACCEPT-&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="save-configuration-persistent">save configuration persistent&lt;/h2>
&lt;pre>&lt;code>#apt install iptables-persistent
&lt;/code>&lt;/pre>
&lt;ul>
&lt;li>
&lt;p>rule directory : &lt;code>/etc/iptables/rules.v4&lt;/code>&lt;/p>
&lt;p>#iptables-save &amp;gt; /etc/iptables/rules.v4&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>ftp server command</title><link>https://minuk.dev/wiki/ftp/</link><pubDate>Tue, 07 Apr 2020 20:35:51 +0900</pubDate><guid>https://minuk.dev/wiki/ftp/</guid><description>&lt;ul>
&lt;li>use vsftpd(Very Secure FTP Server Daemon)&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;pre>&lt;code># apt install vsftpd
&lt;/code>&lt;/pre>
&lt;h2 id="check-vsftpd-status">check vsftpd status&lt;/h2>
&lt;pre>&lt;code># service vsftpd status
&lt;/code>&lt;/pre>
&lt;h2 id="check-network-port">check network port&lt;/h2>
&lt;pre>&lt;code># netstat -natp | grep ftp
&lt;/code>&lt;/pre>
&lt;h2 id="configuration-vsftpd">Configuration vsftpd&lt;/h2>
&lt;pre>&lt;code># vi /etc/vsftpd.conf

#/etc/vsftpd.conf
listen=YES
listen_ipv6=NO
anonymous_enable=NO
port_enable=NO
pasv_enable=YES
local_enable=YES
write_enable=YES
use_localtime=YES
xferlog_enable=YES
chroot_local_user=YES
allow_writeable_chroot=YES
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=vsftpd
ftpd_banner=Welcom to My FTP Server!
ssl_enable=YES
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key=/etc/ssl/private/ssl-cert-snakeoil.key
listen_port=21
pasv_min_port=60020
pasv_max_port=60030
#utf8_filesystem=YES
#local_umask=022
&lt;/code>&lt;/pre></description></item><item><title>linux user command</title><link>https://minuk.dev/wiki/user/</link><pubDate>Tue, 07 Apr 2020 20:35:41 +0900</pubDate><guid>https://minuk.dev/wiki/user/</guid><description>&lt;ul>
&lt;li>
&lt;p>check username&lt;/p>
&lt;p>cat /etc/passwd | grep {username}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>create user &amp;amp; select default shell&lt;/p>
&lt;p>useradd {username} -m -s /bin/bash&lt;/p>
&lt;/li>
&lt;li>
&lt;p>password&lt;/p>
&lt;p>echo {password} | passwd &amp;ndash;stdin {username}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>home directory&lt;/p>
&lt;p>mkhomedir_helper {username}&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Brightness (화면 밝기 조절) command</title><link>https://minuk.dev/wiki/brightness/</link><pubDate>Tue, 07 Apr 2020 20:35:31 +0900</pubDate><guid>https://minuk.dev/wiki/brightness/</guid><description>&lt;h1 id="echo-5000--sudo-tee-sysclassbacklightintel_backlightbrightness">&lt;code>echo 5000 | sudo tee /sys/class/backlight/intel_backlight/brightness&lt;/code>&lt;/h1></description></item><item><title>Wifi commands</title><link>https://minuk.dev/wiki/wifi-command-line/</link><pubDate>Tue, 07 Apr 2020 20:35:07 +0900</pubDate><guid>https://minuk.dev/wiki/wifi-command-line/</guid><description>&lt;ul>
&lt;li>
&lt;p>Wifi Adapter 찾기&lt;/p>
&lt;p>iw dev&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adapter status&lt;/p>
&lt;p>ip link show wlp2s0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adapter Start&lt;/p>
&lt;p>ip link set wlp2s0 up&lt;/p>
&lt;h1 id="when-operation-fail-because-of-rfkill">When Operation fail because of rfkill&lt;/h1>
&lt;h1 id="rfkill-list">$rfkill list&lt;/h1>
&lt;h1 id="sudo-rfkill-unblock-wifi">$sudo rfkill unblock wifi&lt;/h1>
&lt;/li>
&lt;li>
&lt;p>Wifi Adapter interface check&lt;/p>
&lt;p>iw wlp2s0 link&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wifi Scan&lt;/p>
&lt;p>iw wlp2s0 scan&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Public Wifi Connect&lt;/p>
&lt;p>sudo iw dev wlp2s0 connect iptime&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WPA/WPA2 Wifi Connect&lt;/p>
&lt;p>$ sudo wpa_passphrase ${SSID} &amp;gt; wpa_supplicant.conf
${password}&lt;/p>
&lt;p>$ sudo wpa_supplicant -B -i wlp2s0 -c wpa_supplicant.conf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dhcp&lt;/p></description></item><item><title>Wifi commands</title><link>https://minuk.dev/wiki/wifi/</link><pubDate>Tue, 07 Apr 2020 20:35:07 +0900</pubDate><guid>https://minuk.dev/wiki/wifi/</guid><description>&lt;ul>
&lt;li>
&lt;p>Wifi Adapter 찾기&lt;/p>
&lt;p>iw dev&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adapter status&lt;/p>
&lt;p>ip link show wlp2s0&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adapter Start&lt;/p>
&lt;p>ip link set wlp2s0 up&lt;/p>
&lt;h1 id="when-operation-fail-because-of-rfkill">When Operation fail because of rfkill&lt;/h1>
&lt;h1 id="rfkill-list">$rfkill list&lt;/h1>
&lt;h1 id="sudo-rfkill-unblock-wifi">$sudo rfkill unblock wifi&lt;/h1>
&lt;/li>
&lt;li>
&lt;p>Wifi Adapter interface check&lt;/p>
&lt;p>iw wlp2s0 link&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wifi Scan&lt;/p>
&lt;p>iw wlp2s0 scan&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Public Wifi Connect&lt;/p>
&lt;p>sudo iw dev wlp2s0 connect iptime&lt;/p>
&lt;/li>
&lt;li>
&lt;p>WPA/WPA2 Wifi Connect&lt;/p>
&lt;p>$ sudo wpa_passphrase ${SSID} &amp;gt; wpa_supplicant.conf
${password}&lt;/p>
&lt;p>$ sudo wpa_supplicant -B -i wlp2s0 -c wpa_supplicant.conf&lt;/p>
&lt;/li>
&lt;li>
&lt;p>dhcp&lt;/p></description></item><item><title>Linux Command 모음</title><link>https://minuk.dev/wiki/linux-command/</link><pubDate>Tue, 07 Apr 2020 20:34:57 +0900</pubDate><guid>https://minuk.dev/wiki/linux-command/</guid><description>&lt;h1 id="command-line">command line&lt;/h1>
&lt;ul>
&lt;li>[[wifi]]&lt;/li>
&lt;li>[[brightness]]&lt;/li>
&lt;li>[[rm]]&lt;/li>
&lt;li>[[tee]]&lt;/li>
&lt;li>[[glob]]&lt;/li>
&lt;li>[[free]]&lt;/li>
&lt;li>[[cache]]&lt;/li>
&lt;li>[[ffmpeg]]&lt;/li>
&lt;/ul>
&lt;h1 id="server">Server&lt;/h1>
&lt;ul>
&lt;li>[[simple-file]]&lt;/li>
&lt;li>[[user]]&lt;/li>
&lt;li>[[ftp]]&lt;/li>
&lt;li>[[firewall]]&lt;/li>
&lt;li>[[ssh server]]&lt;/li>
&lt;li>[[ssh]]&lt;/li>
&lt;li>[[mongo]]&lt;/li>
&lt;/ul></description></item><item><title>docker</title><link>https://minuk.dev/wiki/docker/</link><pubDate>Tue, 07 Apr 2020 20:34:43 +0900</pubDate><guid>https://minuk.dev/wiki/docker/</guid><description>&lt;ul>
&lt;li>
&lt;p>install&lt;/p>
&lt;p>curl -fsSL &lt;a href="https://get.docker.com/">https://get.docker.com/&lt;/a> | sudo sh&lt;/p>
&lt;/li>
&lt;li>
&lt;p>user 추가&lt;/p>
&lt;p>sudo useradd {username} -m -s /bin/bash -G docker&lt;/p>
&lt;/li>
&lt;li>
&lt;p>docker container run&lt;/p>
&lt;p>docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG&amp;hellip;]&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>-d : detached mode (background mode)&lt;/p>
&lt;p>-p : port forwarding from host port to container&lt;/p>
&lt;p>-v : mount host directory&lt;/p>
&lt;p>-name : configure container name&lt;/p>
&lt;p>-rm : remove automatically when process terminated&lt;/p>
&lt;p>-it : -i + -t ⇒ interactive terminal&lt;/p>
&lt;p>-link : container link&lt;/p>
&lt;ul>
&lt;li>
&lt;p>sample ubuntu 18.04 image&lt;/p></description></item><item><title>SQL</title><link>https://minuk.dev/wiki/sql/</link><pubDate>Tue, 07 Apr 2020 20:34:32 +0900</pubDate><guid>https://minuk.dev/wiki/sql/</guid><description>가끔 써서 잘 기억 안나는 sql</description></item><item><title>Typescript/Function</title><link>https://minuk.dev/wiki/typescript/function/</link><pubDate>Tue, 07 Apr 2020 20:34:09 +0900</pubDate><guid>https://minuk.dev/wiki/typescript/function/</guid><description>&lt;h2 id="functions-types">Functions Types&lt;/h2>
&lt;h3 id="typing-the-function">Typing the function&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myAdd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>; };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="writing-the-function-type">Writing the function type&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myAdd&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> (&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myAdd&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">baseValue&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">increment&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>; };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="inferring-the-types">Inferring the types&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myAdd&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myAdd&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">baseValue&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">increment&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>) { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>; };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="optional-and-default-parameters">Optional and Default Parameters&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#a6e22e">firstName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">lastName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">firstName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">lastName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Adams&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sr.&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Adams&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#a6e22e">firstName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">lastName?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">lastName&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">firstName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">lastName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">firstName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Adams&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sr.&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Adams&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#a6e22e">firstName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">lastName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Smit&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">firstName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">lastName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buidlName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">undefined&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result3&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Adams&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sr.&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Error-
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result4&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Adams&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="rest-parameters">Rest Parameters&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#a6e22e">firstName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, ...&lt;span style="color:#a6e22e">restOfName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">firstName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">restOfName&lt;/span>.&lt;span style="color:#a6e22e">join&lt;/span>(&lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">employeeName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">buildName&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Joseph&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Samuel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Lucas&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;MacKinzie&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="this">&lt;code>this&lt;/code>&lt;/h1>
&lt;h2 id="this-and-arrow-functions">&lt;code>this&lt;/code> and arrow functions&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">deck&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">suits&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;hears&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;spades&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;clubs&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;diamonds&amp;#34;&lt;/span>].
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cards&lt;/span>: &lt;span style="color:#66d9ef">Array&lt;/span>(&lt;span style="color:#ae81ff">52&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createCardPicker&lt;/span>: &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(Math.&lt;span style="color:#a6e22e">random&lt;/span>() &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">52&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedSuit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">suit&lt;/span>: &lt;span style="color:#66d9ef">this.&lt;/span> &lt;span style="color:#a6e22e">suits&lt;/span>[&lt;span style="color:#a6e22e">pickedSuit&lt;/span>], &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">pickedCard&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">cardPicker&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">deck&lt;/span>.&lt;span style="color:#a6e22e">createCardPicker&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">cardPicker&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;card: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span>.&lt;span style="color:#a6e22e">card&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; of &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span>.&lt;span style="color:#a6e22e">suit&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="this-parameters">&lt;code>this&lt;/code> parameters&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Card&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">suit&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">nmber&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Deck&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">suits&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cards&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createCardPicker&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Deck&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Card&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">deck&lt;/span>: &lt;span style="color:#66d9ef">Deck&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">suits&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;hearts&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;spades&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;clubs&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;diamonds&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cards&lt;/span>: &lt;span style="color:#66d9ef">Array&lt;/span>(&lt;span style="color:#ae81ff">52&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">createCardPicker&lt;/span>: &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Deck&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(Math.&lt;span style="color:#a6e22e">random&lt;/span>() &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">52&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedSuit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">shit&lt;/span>: &lt;span style="color:#66d9ef">this.suits&lt;/span>[&lt;span style="color:#a6e22e">pickedSuit&lt;/span>], &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">pickedCard&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">cardPicker&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">deck&lt;/span>.&lt;span style="color:#a6e22e">createCardPicker&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">cardPikcer&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;card: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span>.&lt;span style="color:#a6e22e">card&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; of &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickerCard&lt;/span>.&lt;span style="color:#a6e22e">suit&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="this-parameters-in-callbacks">&lt;code>this&lt;/code> parameters in callbacks&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">UIElement&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">addClickListener&lt;/span>(&lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>: &lt;span style="color:#66d9ef">Event&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">info&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">onClickBad&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>: &lt;span style="color:#66d9ef">Event&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">info&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">uiElement&lt;/span>.&lt;span style="color:#a6e22e">addClickListener&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">onClickBad&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">info&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">onClickGood&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span>: &lt;span style="color:#66d9ef">Event&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">info&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="overloads">Overloads&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">suits&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;hearts&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;spades&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;clubs&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;diamonds&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">pickCard&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">any&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;object&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(Math.&lt;span style="color:#a6e22e">random&lt;/span>() &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pickedCard&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;number&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedSuit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Math.&lt;span style="color:#a6e22e">floor&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> { &lt;span style="color:#a6e22e">suit&lt;/span>: &lt;span style="color:#66d9ef">suits&lt;/span>[&lt;span style="color:#a6e22e">pickedSuit&lt;/span>], &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">x&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myDeck&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [{ &lt;span style="color:#a6e22e">suit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;diamonds&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">2&lt;/span>}, { &lt;span style="color:#a6e22e">suit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;spades&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">10&lt;/span> }, { &lt;span style="color:#a6e22e">suit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hearts&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">card&lt;/span>: &lt;span style="color:#66d9ef">4&lt;/span> }];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">myDeck&lt;/span>[&lt;span style="color:#a6e22e">pickCard&lt;/span>(&lt;span style="color:#a6e22e">myDeck&lt;/span>)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;card: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard1&lt;/span>.&lt;span style="color:#a6e22e">card&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; of &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard1&lt;/span>.&lt;span style="color:#a6e22e">suit&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">pickedCard2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">pickCard&lt;/span>(&lt;span style="color:#ae81ff">15&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;card: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard2&lt;/span>.&lt;span style="color:#a6e22e">card&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; of &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">pickedCard2&lt;/span>.&lt;span style="color:#a6e22e">suit&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Typescript/Class</title><link>https://minuk.dev/wiki/typescript/class/</link><pubDate>Tue, 07 Apr 2020 20:33:57 +0900</pubDate><guid>https://minuk.dev/wiki/typescript/class/</guid><description>&lt;h1 id="class">Class&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greeting&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greet() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="inheritance">Inheritance&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bark() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Woof! Woof!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span> &lt;span style="color:#a6e22e">extneds&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Slithering...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Galloping...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sam&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sammy the Python&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">tom&lt;/span>: &lt;span style="color:#66d9ef">Animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Tommy the Palomino&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sam&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">tom&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="public-privateand-protected-modifiers">&lt;code>public&lt;/code>, &lt;code>private&lt;/code>and &lt;code>protected&lt;/code> modifiers&lt;/h2>
&lt;h3 id="public-by-default">Public by default&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">move&lt;/span> (&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="understanding-private">Understanding &lt;code>private&lt;/code>&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string_&lt;/span> { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Cat&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">name&lt;/span>; &lt;span style="color:#75715e">// Error name is private.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Rhino&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>() { &lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Rhino&amp;#34;&lt;/span>); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Goat&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">rhino&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Rhino&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">employee&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">rhino&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">employee&lt;/span>; &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="understanding-protected">Understanding &lt;code>protected&lt;/code>&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">department&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">department&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">department&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">department&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">getElevatorPitch() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`Hello, my name is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> and I work in &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">department&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">howard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Howard&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sales&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">howard&lt;/span>.&lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">howard&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) { &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">department&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">department&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">department&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">department&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">getELevatorPitch() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`Hello, my name is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> and I work in &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">department&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">howard&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Howard&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sales&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">john&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;John&amp;#34;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="readonly-modifier">Readonly modifier&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">numberOfLegs&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span> (&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">dad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Man with the 8 strong legs&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Man with the 3-piece suit&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="parameter-properties">Parameter properties&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">numberOfLegs&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="accessors">Accessors&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fullName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">employee&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">employee&lt;/span>.&lt;span style="color:#a6e22e">fullName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Bob Smith&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">employee&lt;/span>.&lt;span style="color:#a6e22e">fullName&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">employee&lt;/span>.&lt;span style="color:#a6e22e">fullName&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">passcode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;secret passcode&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">_fullName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">get&lt;/span> &lt;span style="color:#a6e22e">fullName&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_fullName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> &lt;span style="color:#a6e22e">fullName&lt;/span>(&lt;span style="color:#a6e22e">newName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">passcode&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">passcode&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;secret passcode&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">_fullName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">newName&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">employee&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">employee&lt;/span>.&lt;span style="color:#a6e22e">fullName&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Bob Smith&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">employee&lt;/span>.&lt;span style="color:#a6e22e">fullName&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">employee&lt;/span>.&lt;span style="color:#a6e22e">fullName&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="static-properties">Static Properties&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Grid&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">origin&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">0&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">calculateDistanceFromOrigin&lt;/span>(&lt;span style="color:#a6e22e">point&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>; &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>; }) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">xDist&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">point&lt;/span>.&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">Grid&lt;/span>.&lt;span style="color:#a6e22e">origin&lt;/span>.&lt;span style="color:#a6e22e">x&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">yDist&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">point&lt;/span>.&lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">Grid&lt;/span>.&lt;span style="color:#a6e22e">origin&lt;/span>.&lt;span style="color:#a6e22e">y&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Math.&lt;span style="color:#a6e22e">sqrt&lt;/span>(&lt;span style="color:#a6e22e">xDist&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">xDist&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">yDist&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">yDist&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">scale&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span> (&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">scale&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) { }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">grid1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Grid&lt;/span>(&lt;span style="color:#ae81ff">1.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">grid2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Grid&lt;/span>(&lt;span style="color:#ae81ff">5.0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">grid1&lt;/span>.&lt;span style="color:#a6e22e">calculateDistanceFromOrigin&lt;/span>({&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">10&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">10&lt;/span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">grid2&lt;/span>.&lt;span style="color:#a6e22e">calculateDistanceFromOrigin&lt;/span>({&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">10&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">10&lt;/span>}));&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="abstacrt-classes">Abstacrt Classes&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#a6e22e">makeSound&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">move&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;roaming the earth...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Department&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printName&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Department name: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#a6e22e">printMeeting&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AccountingDepartment&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Department&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Accounting and Auditing&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">printMeeting&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The Accounting Department meets each Monday at 10am.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">grenerateReports&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Generating accounting reports...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">department&lt;/span>: &lt;span style="color:#66d9ef">Department&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">department&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Department&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">department&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">AccountingDepartment&lt;/span>();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="advanced-techinques">Advanced Techinques&lt;/h1>
&lt;h2 id="constructor-functions">Constructor functions&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greeting&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greet() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter&lt;/span>: &lt;span style="color:#66d9ef">Greeter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">gretter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;World&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">greeter&lt;/span>.&lt;span style="color:#a6e22e">greet&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#a6e22e">standardGreeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, there&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greeting&lt;/span>:&lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">greet() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>.&lt;span style="color:#a6e22e">standardGreeting&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter1&lt;/span>: &lt;span style="color:#66d9ef">Greeter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">greeter1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">greeter1&lt;/span>.&lt;span style="color:#a6e22e">greet&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeterMarker&lt;/span>: &lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">greeterMaker&lt;/span>.&lt;span style="color:#a6e22e">standardGreeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hey there!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter2&lt;/span>: &lt;span style="color:#66d9ef">Greeter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">greeterMaker&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">greeter2&lt;/span>.&lt;span style="color:#a6e22e">greet&lt;/span>());&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="using-a-class-as-an-interface">Using a class as an interface&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Point3d&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">z&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">point3d&lt;/span>: &lt;span style="color:#66d9ef">Point3d&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">1&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>:&lt;span style="color:#66d9ef">2&lt;/span>, &lt;span style="color:#a6e22e">z&lt;/span>: &lt;span style="color:#66d9ef">3&lt;/span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Typescript/Interface</title><link>https://minuk.dev/wiki/typescript/interface/</link><pubDate>Tue, 07 Apr 2020 20:33:43 +0900</pubDate><guid>https://minuk.dev/wiki/typescript/interface/</guid><description>&lt;h1 id="duck-typing">duck typing&lt;/h1>
&lt;ul>
&lt;li>structural subtyping&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">LabelledValue&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">label&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">printLabel&lt;/span>(&lt;span style="color:#a6e22e">labeledObj&lt;/span>: &lt;span style="color:#66d9ef">LabelledValue&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">labelledObj&lt;/span>.&lt;span style="color:#a6e22e">label&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myObj&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#66d9ef">10&lt;/span>, &lt;span style="color:#a6e22e">label&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Size 10 Object&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">printLabel&lt;/span>(&lt;span style="color:#a6e22e">myObj&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="optional-properties">Optional Properties&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">SquareConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">createSquare&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>: &lt;span style="color:#66d9ef">SquareConfig&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">color&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>; &lt;span style="color:#a6e22e">area&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> } {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">newSquare&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;white&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">area&lt;/span>: &lt;span style="color:#66d9ef">100&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newSquare&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">newSquare&lt;/span>.&lt;span style="color:#a6e22e">area&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">newSquare&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">mySquare&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createSquare&lt;/span>({ &lt;span style="color:#a6e22e">color&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;black&amp;#34;&lt;/span> });&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="readonly-properties">Readonly properties&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">p1&lt;/span>: &lt;span style="color:#66d9ef">Point&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">x&lt;/span>:&lt;span style="color:#66d9ef">10&lt;/span>, &lt;span style="color:#a6e22e">y&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p1&lt;/span>.&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>; &lt;span style="color:#75715e">// Error!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">ro&lt;/span>: &lt;span style="color:#66d9ef">ReadonlyArray&lt;/span>&amp;lt;&lt;span style="color:#f92672">number&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ro&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>; &lt;span style="color:#75715e">// error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ro&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#ae81ff">5&lt;/span>); &lt;span style="color:#75715e">// error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ro&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>; &lt;span style="color:#75715e">// error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ro&lt;/span>; &lt;span style="color:#75715e">//error
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">ro&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span>[];&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="readonly-vs-const">&lt;code>readonly&lt;/code> vs &lt;code>const&lt;/code>&lt;/h2>
&lt;ul>
&lt;li>variables use const&lt;/li>
&lt;li>properties use readonly&lt;/li>
&lt;/ul>
&lt;h2 id="excess-property-checks">Excess Property Checks—&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">SquareConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">createSquare&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>: &lt;span style="color:#66d9ef">SquareConfig&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">color&lt;/span>:&lt;span style="color:#66d9ef">string&lt;/span>; &lt;span style="color:#a6e22e">area&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> } {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">mySquare&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createSquare&lt;/span>({ &lt;span style="color:#a6e22e">colour&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;red&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">width&lt;/span>: &lt;span style="color:#66d9ef">100&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Error
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>Caution! interface has other properties.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">SquareConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">width?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">propName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">any&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="function-types">Function Types&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">SearchFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">source&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">subString&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">mySearch&lt;/span>: &lt;span style="color:#66d9ef">SearchFunc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mySearch&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">source&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">subString&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">source&lt;/span>.&lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">subString&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="indexable-types">Indexable Types&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">StringArray&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">index&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myArray&lt;/span>: &lt;span style="color:#66d9ef">StringArray&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">myArray&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Fred&amp;#34;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myStr&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">myArray&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">NumberDictionary&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">index&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nmber&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">length&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ReadonlyStringArray&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">readonly&lt;/span> [&lt;span style="color:#a6e22e">index&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">myArray&lt;/span>:&lt;span style="color:#66d9ef">ReadonlyStringArray&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Bob&amp;#34;&lt;/span>];&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="class-type">Class Type&lt;/h2>
&lt;h3 id="implementating-an-interface">Implementating an interface&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">currentTime&lt;/span>: &lt;span style="color:#66d9ef">Date&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Clock&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">currentTime&lt;/span>: &lt;span style="color:#66d9ef">Date&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="difference-between-the-static-and-instance-sides-of-classes">Difference between the static and instance sides of classes&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ClockConstructor&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> (&lt;span style="color:#a6e22e">hour&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">minute&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tick&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">createClock&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctor&lt;/span>: &lt;span style="color:#66d9ef">ClockConstructor&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hour&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">minute&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">ctor&lt;/span>(&lt;span style="color:#a6e22e">hour&lt;/span>, &lt;span style="color:#a6e22e">minute&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DigitalClock&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tick() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;beep beep&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AnalogClock&lt;/span> &lt;span style="color:#a6e22e">implments&lt;/span> &lt;span style="color:#a6e22e">ClockInterface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tick() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">consol&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tick tock&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">digital&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createClock&lt;/span>(&lt;span style="color:#a6e22e">DigitalClock&lt;/span>, &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">17&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">analog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createClock&lt;/span>(&lt;span style="color:#a6e22e">AnalogClock&lt;/span>, &lt;span style="color:#ae81ff">7&lt;/span>, &lt;span style="color:#ae81ff">32&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="extending-interfaces">Extending Interfaces&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Sahpe&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sideLength&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">square&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &amp;lt;&lt;span style="color:#f92672">Square&lt;/span>&amp;gt;{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">square&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">square&lt;/span>.&lt;span style="color:#a6e22e">sideLength&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">color&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">PenStroke&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">penWidth&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Square&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Shape&lt;/span>, &lt;span style="color:#a6e22e">PenStroke&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sidLength&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">square&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &amp;lt;&lt;span style="color:#f92672">Square&lt;/span>&amp;gt;{};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">square&lt;/span>.&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">square&lt;/span>.&lt;span style="color:#a6e22e">sideLength&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">square&lt;/span>.&lt;span style="color:#a6e22e">penWidth&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="hybrid-types">Hybrid Types&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">start&lt;/span>:&lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">interval&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reset&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getCounter&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &amp;lt;&lt;span style="color:#f92672">Counter&lt;/span>&amp;gt;&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">start&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">counter&lt;/span>.&lt;span style="color:#a6e22e">interval&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">123&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">counter&lt;/span>.&lt;span style="color:#a6e22e">reset&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">counter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getCounter&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">reset&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">interval&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5.0&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="interfaces-extending-classes">Interfaces Extending Classes&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Control&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">SelectableControl&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Control&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">select&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Button&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Control&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">SelectableControl&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">select() {&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TextBox&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Control&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">select() {&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Typescript/Variable Declaration</title><link>https://minuk.dev/wiki/typescript/variable-declaration/</link><pubDate>Tue, 07 Apr 2020 20:33:29 +0900</pubDate><guid>https://minuk.dev/wiki/typescript/variable-declaration/</guid><description>&lt;h1 id="var-declarations">var declarations&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="var%20a%20=%2010;%0a%0afunction%20f%28%29%20%7b%0a%20%20var%20message%20=%20%22Hello,%20world!%22;%0a%0a%20%20return%20message;%0a%7d%0a%0afunction%20f%28%29%20%7b%0a%20%20var%20a%20=%2010;%0a%20%20return%20function%20g%28%29%20%7b%0a%20%20%20%20var%20b%20=%20a%20&amp;#43;%201;%0a%20%20%20%20return%20b;%0a%20%20%7d%0a%7d%0a%0avar%20g%20=%20f%28%29;%0ag%28%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">g() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">g&lt;/span>();&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="scoping-rules">Scoping rules&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">suoldInitialize&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">shouldInitialize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>); &lt;span style="color:#75715e">// return 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span>); &lt;span style="color:#75715e">// return undefined
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="variable-capturing-quirks">Variable capturing quirks&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="for%20%28var%20i%20=%200;%20i%20%3c%2010;%20i&amp;#43;&amp;#43;%29%20%7b%0a%20%20setTimeout%28function%28%29%20%7b%20console.log%28i%29;%20%7d,%20100%20*%20i%29;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>() { &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>); }, &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="iife">IIFE&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="for%20%28var%20i%20=%200;%20i%20%3c%2010;%20i&amp;#43;&amp;#43;%29%20%7b%0a%20%20%28function%28i%29%20%7b%0a%20%20%20%20setTimeout%28function%28%29%20%7b%20console.log%28i%29;%20%7d,%20100%20*%20i%20%29;%0a%20%20%7d%29%28i%29;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>() { &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>); }, &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })(&lt;span style="color:#a6e22e">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="let-declarations">let declarations&lt;/h1>
&lt;h2 id="block-scoping">Block-scoping&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">input&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">input&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>; &lt;span style="color:#75715e">// error!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="temporal-dead-zone---tdz">Temporal Dead Zone - TDZ&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="console.log%28bar%29;%0alet%20bar;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">bar&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">bar&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="re-declarations-and-shadowing">Re-declarations and Shadowing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#a6e22e">condition&lt;/span>, &lt;span style="color:#a6e22e">x&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">condition&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#66d9ef">false&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">sumMatrix&lt;/span>(&lt;span style="color:#a6e22e">matrix&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>[][]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt;&lt;span style="color:#f92672">matrix.legnth&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">;&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">++)&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">var&lt;/span> &lt;span style="color:#a6e22e">currentRow &lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">matrix&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">for&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">let&lt;/span> &lt;span style="color:#a6e22e">i &lt;/span>&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">0&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">;&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">currentRow.length&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">;&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">++)&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">+=&lt;/span> &lt;span style="color:#a6e22e">currentRow&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">return&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="capture-block-scope-variable">Capture Block-Scope variable&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="for%20%28let%20i%20=%200;%20i%20%3c%2010;%20i&amp;#43;&amp;#43;%29%20%7b%0a%20%20setTimeout%28function%28%29%20%7b%20console.log%28i%29;%20%7d,%20100%20*%20i%29;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>() { &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>); }, &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="const-declarations">Const Declarations&lt;/h1>
&lt;h2 id="let-vs-const">&lt;code>let&lt;/code> vs. &lt;code>const&lt;/code>&lt;/h2>
&lt;ul>
&lt;li>pinciple of least privilege&lt;/li>
&lt;/ul>
&lt;h1 id="destructuring">Destructuring&lt;/h1>
&lt;h3 id="array-destructuring">Array destructuring&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="let%20input%20=%20[1,%202];%0alet%20[first,%20second]%20=%20input;%0aconsole.log%28first%29;%20//%201%0aconsole.log%28second%29;%20//%202%0a%0afunction%20f%28[firs,t%20second]:%20[number,%20number]%29%20%7b%0a%20%20console.log%28first%29;%0a%20%20console.log%28second%29;%0a%7d%0af%28[1,%202]%29;%0a%0alet%20[first,%20...rest]%20=%20[1,%202,%203,%204];%0aconsole.log%28first%29;%20//%201%0aconsole.log%28second%29;%20//%20[2,%203,%204]%0a%0alet%20[first]%20=%20[1,%202,%203,%204];%0aconsole.log%28first%29;%20//%201%0a%0alet%20[,%20second,%20,%20fourth]%20=%20[1,%202,%203,%204];">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> [&lt;span style="color:#a6e22e">first&lt;/span>, &lt;span style="color:#a6e22e">second&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">first&lt;/span>); &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">second&lt;/span>); &lt;span style="color:#75715e">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>([&lt;span style="color:#a6e22e">firs&lt;/span>,&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">second&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#66d9ef">number&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">first&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">second&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f&lt;/span>([&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> [&lt;span style="color:#a6e22e">first&lt;/span>, ...&lt;span style="color:#a6e22e">rest&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">first&lt;/span>); &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">second&lt;/span>); &lt;span style="color:#75715e">// [2, 3, 4]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> [&lt;span style="color:#a6e22e">first&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">first&lt;/span>); &lt;span style="color:#75715e">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> [, &lt;span style="color:#a6e22e">second&lt;/span>, , &lt;span style="color:#a6e22e">fourth&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="object-destructuring">Object destructuring&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;foo&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;bar&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>, ...&lt;span style="color:#a6e22e">passthrough&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="property-renaming">Property renaming&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>: &lt;span style="color:#66d9ef">newName1&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>: &lt;span style="color:#66d9ef">newName2&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> }&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">o&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="default-values">Default values&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">keepWholeObject&lt;/span>(&lt;span style="color:#a6e22e">wholeObject&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">b?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> }) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1001&lt;/span> } &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">wholeObject&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="function-ddeclarations">Function ddeclarations&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span>:&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">b?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>({ &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> }&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="spread-operator">Spread operator&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="let%20first%20=%20[1,%202];%0alet%20second%20=%20[3,%204];%0alet%20bothPlus%20[0,%20...first,%20...second,%205];-%0a%0aclass%20C%20%7b%0a%20%20p%20=%2012;%0a%20%20m%28%29%20%7b%0a%20%20%7d%0a%7d%0alet%20c%20=%20new%20C%28%29;%0alet%20clone%20=%20%20%7b%20...c%20%7d;%0aclone.p;%0aclone.m%28%29;%20//%20error;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">second&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">bothPlus&lt;/span> [&lt;span style="color:#ae81ff">0&lt;/span>, ...&lt;span style="color:#a6e22e">first&lt;/span>, ...&lt;span style="color:#a6e22e">second&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>];&lt;span style="color:#f92672">-&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">12&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">C&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">clone&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { ...&lt;span style="color:#a6e22e">c&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clone&lt;/span>.&lt;span style="color:#a6e22e">p&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">clone&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>(); &lt;span style="color:#75715e">// error;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Typescript/Types</title><link>https://minuk.dev/wiki/typescript/types/</link><pubDate>Tue, 07 Apr 2020 20:33:02 +0900</pubDate><guid>https://minuk.dev/wiki/typescript/types/</guid><description>&lt;h2 id="boolean">Boolean&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">isDone&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="number">Number&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">decimal&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">hex&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0xf00d&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">binary&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">b1010&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">octal&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#a6e22e">o744&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="string">String&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">color&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">fullName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`Bob Bobbingto`&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">age&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">37&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sentence&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`Hello, myname is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span> &lt;span style="color:#a6e22e">fullName&lt;/span> &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">I&amp;#39;ll be &lt;/span>&lt;span style="color:#e6db74">${&lt;/span> &lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> years old next month.`&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="array">Array&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">list&lt;/span>: &lt;span style="color:#66d9ef">Array&lt;/span>&amp;lt;&lt;span style="color:#f92672">number&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">3&lt;/span>];&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="tuple">Tuple&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">number&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].&lt;span style="color:#a6e22e">substr&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>));&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="enum">Enum&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> { &lt;span style="color:#a6e22e">Red&lt;/span>, &lt;span style="color:#a6e22e">Green&lt;/span>, &lt;span style="color:#a6e22e">Blue&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>: &lt;span style="color:#66d9ef">Color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span>.&lt;span style="color:#a6e22e">Green&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span> { &lt;span style="color:#a6e22e">Red&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">Green&lt;/span>, &lt;span style="color:#a6e22e">Blue&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>: &lt;span style="color:#66d9ef">Color&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span>.&lt;span style="color:#a6e22e">Green&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">colorName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Color&lt;/span>[&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#a6e22e">colorName&lt;/span>); &lt;span style="color:#75715e">// Green
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="any">Any&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">notSure&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">notSure&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;it may be string&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">notSure&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="void">Void&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">warnUser&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;This is my warning message&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">unusable&lt;/span>: &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">unusable2&lt;/span>: &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="null--undefined">Null &amp;amp; Undefined&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>: &lt;span style="color:#66d9ef">undefined&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="never">Never&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nver&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Error(&lt;span style="color:#a6e22e">message&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">fail() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Something failed&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">infiniteLoop&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">nber&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="type-assertions">Type assertions&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">someValue&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is a string&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">strLength&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">someValue&lt;/span>).&lt;span style="color:#a6e22e">length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">someValue&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;this is a string&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">strLength&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">someValue&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>).&lt;span style="color:#a6e22e">length&lt;/span>;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Typescript</title><link>https://minuk.dev/wiki/typescript/</link><pubDate>Tue, 07 Apr 2020 20:32:54 +0900</pubDate><guid>https://minuk.dev/wiki/typescript/</guid><description>&lt;h1 id="syntax">Syntax&lt;/h1>
&lt;ul>
&lt;li>[[Typescript/Types]]&lt;/li>
&lt;li>[[Typescript/Variable Declaration]]&lt;/li>
&lt;li>[[Typescript/Interface]]&lt;/li>
&lt;li>[[Typescript/Class]]&lt;/li>
&lt;li>[[Typescript/Function]]&lt;/li>
&lt;/ul></description></item><item><title>graphql typescript (deprecated)</title><link>https://minuk.dev/wiki/graphql-typescript/</link><pubDate>Tue, 07 Apr 2020 20:32:43 +0900</pubDate><guid>https://minuk.dev/wiki/graphql-typescript/</guid><description>&lt;h1 id="yarn-add-type-graphql">yarn add type-graphql&lt;/h1>
&lt;pre>&lt;code>yarn add typescript @types/node --dev
yarn add reflect-metadata
&lt;/code>&lt;/pre></description></item><item><title>winston</title><link>https://minuk.dev/wiki/winston/</link><pubDate>Tue, 07 Apr 2020 20:32:24 +0900</pubDate><guid>https://minuk.dev/wiki/winston/</guid><description>&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="import%20*%20as%20config%20from%20%22config%22;%0a%20%20%20%20import%20%7b%20Logger,%20LoggerInstance,%20LoggerOptions,%20transports%20%7d%20from%20%22winston%22;%0a%20%20%20%20require%28%22winston-daily-rotate-file%22%29;%0a%0a%20%20%20%20const%20defaultLevel%20=%20process.env.LOG_LEVEL;%0a%0a%20%20%20%20//%20We%20might%20want%20to%20do%20something%20on%20rotation?%0a%20%20%20%20//%20rotateTransport.on%28%22rotate%22,%20%28oldFailename,%20newFilename%29%20=%3e%20%7b%0a%20%20%20%20//%20%20%20%20%20//%20do%20something%20fun%0a%20%20%20%20//%20%7d%29;%0a%0a%20%20%20%20const%20options:%20LoggerOptions%20=%20%7b%0a%20%20%20%20%20%20%20%20exitOnError:%20false,%0a%20%20%20%20%20%20%20%20level:%20defaultLevel,%0a%20%20%20%20%20%20%20%20transports:%20[%0a%20%20%20%20%20%20%20%20%20%20%20%20new%20transports.DailyRotateFile%28%7b%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name:%20%22info%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20filename:%20config.logging.default,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20datePattern:%20%22YYYY-MM-DD-HH%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20zippedArchive:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20maxSize:%20%2220m%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20maxFiles:%20%2214d%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20showLevel:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20timestamp:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20level:%20%22info%22,%20//%20info%20and%20below%20to%20rotate%0a%20%20%20%20%20%20%20%20%20%20%20%20%7d%29,%0a%20%20%20%20%20%20%20%20%20%20%20%20new%20transports.DailyRotateFile%28%7b%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name:%20%22error%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20filename:%20config.logging.error,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20datePattern:%20%22YYYY-MM-DD-HH%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20zippedArchive:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20maxSize:%20%2220m%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20maxFiles:%20%2214d%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20showLevel:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20timestamp:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20level:%20%22error%22,%20//%20error%20and%20below%20to%20rotate%0a%20%20%20%20%20%20%20%20%20%20%20%20%7d%29,%0a%20%20%20%20%20%20%20%20%20%20%20%20new%20transports.DailyRotateFile%28%7b%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name:%20%22silly%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20filename:%20config.logging.silly,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20datePattern:%20%22YYYY-MM-DD-HH%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20zippedArchive:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20maxSize:%20%2220m%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20maxFiles:%20%221d%22,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20showLevel:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20timestamp:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20level:%20%22silly%22,%20//%20error%20and%20below%20to%20rotate%0a%20%20%20%20%20%20%20%20%20%20%20%20%7d%29,%0a%20%20%20%20%20%20%20%20],%0a%20%20%20%20%7d;%0a%0a%20%20%20%20const%20logger:%20LoggerInstance%20=%20new%20Logger%28options%29;%0a%0a%20%20%20%20if%20%28process.env.NODE_ENV%20===%20%22develop%22%29%20%7b%0a%20%20%20%20%20%20%20%20logger.add%28transports.Console,%20%7b%0a%20%20%20%20%20%20%20%20%20%20%20%20colorize:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20showLevel:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20timestamp:%20true,%0a%20%20%20%20%20%20%20%20%20%20%20%20level:%20%22debug%22,%20//%20debug%20and%20below%20to%20console%0a%20%20%20%20%20%20%20%20%7d%29;%0a%20%20%20%20%7d%0a%0a%20%20%20%20export%20%7b%20logger%20%7d;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">as&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;config&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Logger&lt;/span>, &lt;span style="color:#a6e22e">LoggerInstance&lt;/span>, &lt;span style="color:#a6e22e">LoggerOptions&lt;/span>, &lt;span style="color:#a6e22e">transports&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;winston&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;winston-daily-rotate-file&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">defaultLevel&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">LOG_LEVEL&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// We might want to do something on rotation?
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// rotateTransport.on(&amp;#34;rotate&amp;#34;, (oldFailename, newFilename) =&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// // do something fun
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// });
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">options&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">LoggerOptions&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exitOnError&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">defaultLevel&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">transports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">transports&lt;/span>.&lt;span style="color:#a6e22e">DailyRotateFile&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filename&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#66d9ef">default&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">datePattern&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YYYY-MM-DD-HH&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">zippedArchive&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">maxSize&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;20m&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">maxFiles&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;14d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">showLevel&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;info&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// info and below to rotate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">transports&lt;/span>.&lt;span style="color:#a6e22e">DailyRotateFile&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filename&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">datePattern&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YYYY-MM-DD-HH&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">zippedArchive&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">maxSize&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;20m&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">maxFiles&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;14d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">showLevel&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;error&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// error and below to rotate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">transports&lt;/span>.&lt;span style="color:#a6e22e">DailyRotateFile&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;silly&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">filename&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>.&lt;span style="color:#a6e22e">logging&lt;/span>.&lt;span style="color:#a6e22e">silly&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">datePattern&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;YYYY-MM-DD-HH&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">zippedArchive&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">maxSize&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;20m&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">maxFiles&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;1d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">showLevel&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;silly&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// error and below to rotate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">logger&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">LoggerInstance&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Logger&lt;/span>(&lt;span style="color:#a6e22e">options&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">NODE_ENV&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#34;develop&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">transports&lt;/span>.&lt;span style="color:#a6e22e">Console&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">colorize&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">showLevel&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">timestamp&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">level&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;debug&amp;#34;&lt;/span>, &lt;span style="color:#75715e">// debug and below to console
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">export&lt;/span> { &lt;span style="color:#a6e22e">logger&lt;/span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Jest</title><link>https://minuk.dev/wiki/jest/</link><pubDate>Tue, 07 Apr 2020 20:32:13 +0900</pubDate><guid>https://minuk.dev/wiki/jest/</guid><description>&lt;h1 id="installation">Installation&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="yarn%20add%20--dev%20jest%0anpm%20install%20--dev%20jest%0a%0ayarn%20add%20--dev%20@types/jest%0anpm%20install%20--dev%20@types/jest">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yarn add --dev jest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --dev jest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yarn add --dev @types/jest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --dev @types/jest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="configuration">Configuration&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	&lt;span style="color:#f92672">&amp;#34;test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;jest&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="write-test-code">Write test code&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="test%28%60test%20name%60,%20%28%29%20=%3e%20%7b%0a%20%20expect%281%29.toBe%281%29;%0a%7d%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">test(`test&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">name`,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">()&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">expect(1).toBe(1);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#960050;background-color:#1e0010">);&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="test-matcher">Test Matcher&lt;/h2>
&lt;h3 id="toequal">toEqual()&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;return a user object&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">getUser&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)).&lt;span style="color:#a6e22e">toEqual&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">email&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;user1@test.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="tobetruthy-tobefalsy">toBeTruthy(), toBeFalsy()&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="test%28%27number%200%20is%20falsy%20but%20string%200%20is%20truthy%27,%20%28%29%20=%3e%20%7b%0a%20%20expect%280%29.toBeFalsy%28%29;%0a%20%20expect%28%270%27%29.toBeTruthy%28%29;%0a%7d%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;number 0 is falsy but string 0 is truthy&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>).&lt;span style="color:#a6e22e">toBeFalsy&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;0&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">toBeTruthy&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="tohavelength-tocontain">toHaveLength(), toContain()&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="test%28%27array%27,%20%28%29%20=%3e%20%7b%0a%20%20const%20coloers%20=%20[%27Red%27,%20%27Yellow%27,%20%27Blue%27];%0a%20%20expect%28colors%29.toHaveLength%283%29;%0a%20%20expect%28colors%29.toContain%28%27Yellow%27%29;%0a%20%20expect%28colors%29.not.toContain%28%27Green%27%29;%0a%7d%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;array&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">coloers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;Red&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Yellow&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;Blue&amp;#39;&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">colors&lt;/span>).&lt;span style="color:#a6e22e">toHaveLength&lt;/span>(&lt;span style="color:#ae81ff">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">colors&lt;/span>).&lt;span style="color:#a6e22e">toContain&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Yellow&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">colors&lt;/span>).&lt;span style="color:#a6e22e">not&lt;/span>.&lt;span style="color:#a6e22e">toContain&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Green&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="tomatch">toMatch()&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="test%28%27string%27,%20%28%29=%3e%20%7b%0a%20%20expect%28getUser%281%29.email%29.toBe%28%27user1@test.com%27%29;%0a%20%20expect%28getUser%282%29.email%29.toMatch%28/.*test.com$/%29;%0a%7d%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>, ()=&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">getUser&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">email&lt;/span>).&lt;span style="color:#a6e22e">toBe&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;user1@test.com&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(&lt;span style="color:#a6e22e">getUser&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>).&lt;span style="color:#a6e22e">email&lt;/span>).&lt;span style="color:#a6e22e">toMatch&lt;/span>(&lt;span style="color:#e6db74">/.*test.com$/&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="tothrow">toThrow()&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">getUser&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Error(&lt;span style="color:#e6db74">&amp;#39;Invalid ID&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">id&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">meail&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`user&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">@test.com`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">test&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;throw when id is non negative&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(() =&amp;gt; &lt;span style="color:#a6e22e">getUser&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">toThrow&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">expect&lt;/span>(() =&amp;gt; &lt;span style="color:#a6e22e">getUser&lt;/span>(&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>).&lt;span style="color:#a6e22e">toThrow&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Invalid ID&amp;#39;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;p>&lt;a href="https://jestjs.io/docs/en/tutorial-async">An Async Example · Jest&lt;/a>&lt;/p></description></item><item><title>Sequelize</title><link>https://minuk.dev/wiki/sequelize/</link><pubDate>Tue, 07 Apr 2020 20:31:57 +0900</pubDate><guid>https://minuk.dev/wiki/sequelize/</guid><description>&lt;h1 id="installation">Installation&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="npm%20install%20--save%20sequelize%0a%0a#%20One%20of%20the%20following%0anpm%20install%20--save%20pg%20pg-hstore%20#%20Postgres%0anpm%20install%20-save%20mysql2%20#%20mysql%0anpm%20install%20--save%20mariadb%20#%20mariadb%0anpm%20install%20--save%20sqlite3%20#%20sqlite%0anpm%20install%20--save%20tedious%20#%20Microsoft%20SQL%20Server">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>npm install --save sequelize
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># One of the following&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --save pg pg-hstore &lt;span style="color:#75715e"># Postgres&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install -save mysql2 &lt;span style="color:#75715e"># mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --save mariadb &lt;span style="color:#75715e"># mariadb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --save sqlite3 &lt;span style="color:#75715e"># sqlite&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm install --save tedious &lt;span style="color:#75715e"># Microsoft SQL Server&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h1 id="configuration-typescript">Configuration (Typescript)&lt;/h1>
&lt;h2 id="setting-up-a-connection">Setting up a connection&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Sequelize&lt;/span> } &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;sequelize&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">DBConfituration&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">database&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">password&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">host&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dialect&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mysql&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;postgres&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;sqlite&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mariadb&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#34;msqle&amp;#34;&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dbConfiguration&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">DBConfiguration&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">database&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;graph&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">user&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;graph&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">password&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;graph&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">host&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;localhost&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dialect&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;mysql&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sequelize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Sequelize&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dbConfiguration&lt;/span>.&lt;span style="color:#a6e22e">database&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dbConfiguration&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dbConfiguration&lt;/span>.&lt;span style="color:#a6e22e">password&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">host&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">dbConfiguration&lt;/span>.&lt;span style="color:#a6e22e">host&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dialect&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">dbConfgiguration&lt;/span>.&lt;span style="color:#a6e22e">dialect&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sequelize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Sequelize&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;postgres://user:pass@example.con:5432/dbname&amp;#39;&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="note-connection-pool-production">Note: connection pool (production)&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="const%20sequelize%20=%20new%20Sequelize%28/*%20...%20*/,%20%7b%0a%20%20//%20...%0a%20%20pool:%20%7b%0a%20%20%20%20max:%205,%0a%20%20%20%20min:%200,%0a%20%20%20%20acquire:%2030000,%0a%20%20%20%20idle:%2010000,%0a%20%20%7d%0a%7d%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">sequelize&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Sequelize&lt;/span>(&lt;span style="color:#75715e">/* ... */&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pool&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">min&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">acquire&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">30000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">idle&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="testing-the-connection">Testing the connection&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">sequelize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">authenticate&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Connection has been established successfully.&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Unable to connect to the database:&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>Sample Code (Typescript)&lt;/li>
&lt;/ul>
&lt;h1 id="model-usage">Model usage&lt;/h1>
&lt;h2 id="data-retrieval--finders">Data retrieval / Finders&lt;/h2>
&lt;h3 id="find---search-for-one-specific-element-in-the-database">find - Search for one specific element in the database&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//%20search%20for%20known%20ids%0aProject.findByPk%28123%29.then%28project%20=%3e%20%7b%0a%20%20//%20project%20will%20be%20an%20instance%20of%20Project%20and%20stores%20the%20content%20of%20the%20table%20entry%0a%20%20//%20with%20id%20123.%20if%20such%20an%20entry%20is%20not%20defined%20you%20will%20get%20null%0a%7d%29%0a%0a//%20search%20for%20attributes%0aProject.findOne%28%7b%20where:%20%7btitle:%20%27aProject%27%7d%20%7d%29.then%28project%20=%3e%20%7b%0a%20%20//%20project%20will%20be%20the%20first%20entry%20of%20the%20Projects%20table%20with%20the%20title%20%27aProject%27%20%7c%7c%20null%0a%7d%29%0a%0a%0aProject.findOne%28%7b%0a%20%20where:%20%7btitle:%20%27aProject%27%7d,%0a%20%20attributes:%20[%27id%27,%20[%27name%27,%20%27title%27]]%0a%7d%29.then%28project%20=%3e%20%7b%0a%20%20//%20project%20will%20be%20the%20first%20entry%20of%20the%20Projects%20table%20with%20the%20title%20%27aProject%27%20%7c%7c%20null%0a%20%20//%20project.get%28%27title%27%29%20will%20contain%20the%20name%20of%20the%20project%0a%7d%29%0a%0a###%20findOrCreate%20-%20Search%20for%20a%20specific%20element%20or%20create%20it%20if%20not%20available%0a%0aUser%0a%20%20.findOrCreate%28%7bwhere:%20%7busername:%20%27sdepold%27%7d,%20defaults:%20%7bjob:%20%27Technical%20Lead%20JavaScript%27%7d%7d%29%0a%20%20.then%28%28[user,%20created]%29%20=%3e%20%7b%0a%20%20%20%20console.log%28user.get%28%7b%0a%20%20%20%20%20%20plain:%20true%0a%20%20%20%20%7d%29%29%0a%20%20%20%20console.log%28created%29%0a%0a%20%20%20%20/*%0a%20%20%20%20%20findOrCreate%20returns%20an%20array%20containing%20the%20object%20that%20was%20found%20or%20created%20and%20a%20boolean%20that%0a%20%20%20%20%20will%20be%20true%20if%20a%20new%20object%20was%20created%20and%20false%20if%20not,%20like%20so:%0a%0a%20%20%20%20[%20%7b%0a%20%20%20%20%20%20%20%20username:%20%27sdepold%27,%0a%20%20%20%20%20%20%20%20job:%20%27Technical%20Lead%20JavaScript%27,%0a%20%20%20%20%20%20%20%20id:%201,%0a%20%20%20%20%20%20%20%20createdAt:%20Fri%20Mar%2022%202013%2021:%2028:%2034%20GMT%20&amp;#43;%200100%28CET%29,%0a%20%20%20%20%20%20%20%20updatedAt:%20Fri%20Mar%2022%202013%2021:%2028:%2034%20GMT%20&amp;#43;%200100%28CET%29%0a%20%20%20%20%20%20%7d,%0a%20%20%20%20%20%20true%20]%0a%0a%20In%20the%20example%20above,%20the%20array%20spread%20on%20line%203%20divides%20the%20array%20into%20its%202%20parts%20and%20passes%20them%0a%20%20as%20arguments%20to%20the%20callback%20function%20defined%20beginning%20at%20line%2039,%20which%20treats%20them%20as%20%22user%22%20and%0a%20%20%22created%22%20in%20this%20case.%20%28So%20%22user%22%20will%20be%20the%20object%20from%20index%200%20of%20the%20returned%20array%20and%0a%20%20%22created%22%20will%20equal%20%22true%22.%29%0a%20%20%20%20*/%0a%20%20%7d%29%0a%0aUser.create%28%7b%20username:%20%27fnord%27,%20job:%20%27omnomnom%27%20%7d%29%0a%20%20.then%28%28%29%20=%3e%20User.findOrCreate%28%7bwhere:%20%7busername:%20%27fnord%27%7d,%20defaults:%20%7bjob:%20%27something%20else%27%7d%7d%29%29%0a%20%20.then%28%28[user,%20created]%29%20=%3e%20%7b%0a%20%20%20%20console.log%28user.get%28%7b%0a%20%20%20%20%20%20plain:%20true%0a%20%20%20%20%7d%29%29%0a%20%20%20%20console.log%28created%29%0a%0a%20%20%20%20/*%0a%20%20%20%20In%20this%20example,%20findOrCreate%20returns%20an%20array%20like%20this:%0a%20%20%20%20[%20%7b%0a%20%20%20%20%20%20%20%20username:%20%27fnord%27,%0a%20%20%20%20%20%20%20%20job:%20%27omnomnom%27,%0a%20%20%20%20%20%20%20%20id:%202,%0a%20%20%20%20%20%20%20%20createdAt:%20Fri%20Mar%2022%202013%2021:%2028:%2034%20GMT%20&amp;#43;%200100%28CET%29,%0a%20%20%20%20%20%20%20%20updatedAt:%20Fri%20Mar%2022%202013%2021:%2028:%2034%20GMT%20&amp;#43;%200100%28CET%29%0a%20%20%20%20%20%20%7d,%0a%20%20%20%20%20%20false%0a%20%20%20%20]%0a%20%20%20%20The%20array%20returned%20by%20findOrCreate%20gets%20spread%20into%20its%202%20parts%20by%20the%20array%20spread%20on%20line%203,%20and%0a%20%20%20%20the%20parts%20will%20be%20passed%20as%202%20arguments%20to%20the%20callback%20function%20beginning%20on%20line%2069,%20which%20will%0a%20%20%20%20then%20treat%20them%20as%20%22user%22%20and%20%22created%22%20in%20this%20case.%20%28So%20%22user%22%20will%20be%20the%20object%20from%20index%200%0a%20%20%20%20of%20the%20returned%20array%20and%20%22created%22%20will%20equal%20%22false%22.%29%0a%20%20%20%20*/%0a%20%20%7d%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// search for known ids
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findByPk&lt;/span>(&lt;span style="color:#ae81ff">123&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">project&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// project will be an instance of Project and stores the content of the table entry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// with id 123. if such an entry is not defined you will get null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// search for attributes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findOne&lt;/span>({ &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;aProject&amp;#39;&lt;/span>} }).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">project&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// project will be the first entry of the Projects table with the title &amp;#39;aProject&amp;#39; || null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findOne&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;aProject&amp;#39;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attributes&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>, [&lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;title&amp;#39;&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">project&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// project will be the first entry of the Projects table with the title &amp;#39;aProject&amp;#39; || null
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// project.get(&amp;#39;title&amp;#39;) will contain the name of the project
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">###&lt;/span> &lt;span style="color:#a6e22e">findOrCreate&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">Search&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#a6e22e">specific&lt;/span> &lt;span style="color:#a6e22e">element&lt;/span> &lt;span style="color:#a6e22e">or&lt;/span> &lt;span style="color:#a6e22e">create&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">not&lt;/span> &lt;span style="color:#a6e22e">available&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">User&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">findOrCreate&lt;/span>({&lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">username&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;sdepold&amp;#39;&lt;/span>}, &lt;span style="color:#a6e22e">defaults&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">job&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Technical Lead JavaScript&amp;#39;&lt;/span>}})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(([&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#a6e22e">created&lt;/span>]) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plain&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">created&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> findOrCreate returns an array containing the object that was found or created and a boolean that
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> will be true if a new object was created and false if not, like so:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> [ {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> username: &amp;#39;sdepold&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> job: &amp;#39;Technical Lead JavaScript&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> id: 1,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> },
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> true ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> In the example above, the array spread on line 3 divides the array into its 2 parts and passes them
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> as arguments to the callback function defined beginning at line 39, which treats them as &amp;#34;user&amp;#34; and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> &amp;#34;created&amp;#34; in this case. (So &amp;#34;user&amp;#34; will be the object from index 0 of the returned array and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> &amp;#34;created&amp;#34; will equal &amp;#34;true&amp;#34;.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">create&lt;/span>({ &lt;span style="color:#a6e22e">username&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;fnord&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">job&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;omnomnom&amp;#39;&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(() =&amp;gt; &lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">findOrCreate&lt;/span>({&lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">username&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;fnord&amp;#39;&lt;/span>}, &lt;span style="color:#a6e22e">defaults&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">job&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;something else&amp;#39;&lt;/span>}}))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(([&lt;span style="color:#a6e22e">user&lt;/span>, &lt;span style="color:#a6e22e">created&lt;/span>]) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">user&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plain&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">created&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> In this example, findOrCreate returns an array like this:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> [ {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> username: &amp;#39;fnord&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> job: &amp;#39;omnomnom&amp;#39;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> id: 2,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> createdAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET),
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> updatedAt: Fri Mar 22 2013 21: 28: 34 GMT + 0100(CET)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> },
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> The array returned by findOrCreate gets spread into its 2 parts by the array spread on line 3, and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> the parts will be passed as 2 arguments to the callback function beginning on line 69, which will
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> then treat them as &amp;#34;user&amp;#34; and &amp;#34;created&amp;#34; in this case. (So &amp;#34;user&amp;#34; will be the object from index 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> of the returned array and &amp;#34;created&amp;#34; will equal &amp;#34;false&amp;#34;.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="findandcountall---search-for-multiple-elements-in-the-database-returns-both-data-and-total-count">findAndCountAll - Search for multiple elements in the database, returns both data and total count&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Project&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">findAndCountAll&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">like&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;foo%&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">offset&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">limit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">count&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">rows&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">findAndCountAll&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">include&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Profile&lt;/span>, &lt;span style="color:#a6e22e">required&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">limit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">User&lt;/span>.&lt;span style="color:#a6e22e">findAndCountAll&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">include&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">model&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Profile&lt;/span>, &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">active&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> }}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">limit&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="findall---search-for-multiple-elements-in-the-database">findAll - Search for multiple elements in the database&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//%20find%20multiple%20entries%0aProject.findAll%28%29.then%28projects%20=%3e%20%7b%0a%20%20//%20projects%20will%20be%20an%20array%20of%20all%20Project%20instances%0a%7d%29%0a%0a//%20search%20for%20specific%20attributes%20-%20hash%20usage%0aProject.findAll%28%7b%20where:%20%7b%20name:%20%27A%20Project%27%20%7d%20%7d%29.then%28projects%20=%3e%20%7b%0a%20%20//%20projects%20will%20be%20an%20array%20of%20Project%20instances%20with%20the%20specified%20name%0a%7d%29%0a%0a//%20search%20within%20a%20specific%20range%0aProject.findAll%28%7b%20where:%20%7b%20id:%20[1,2,3]%20%7d%20%7d%29.then%28projects%20=%3e%20%7b%0a%20%20//%20projects%20will%20be%20an%20array%20of%20Projects%20having%20the%20id%201,%202%20or%203%0a%20%20//%20this%20is%20actually%20doing%20an%20IN%20query%0a%7d%29%0a%0aProject.findAll%28%7b%0a%20%20where:%20%7b%0a%20%20%20%20id:%20%7b%0a%20%20%20%20%20%20[Op.and]:%20%7ba:%205%7d,%20%20%20%20%20%20%20%20%20%20%20//%20AND%20%28a%20=%205%29%0a%20%20%20%20%20%20[Op.or]:%20[%7ba:%205%7d,%20%7ba:%206%7d],%20%20//%20%28a%20=%205%20OR%20a%20=%206%29%0a%20%20%20%20%20%20[Op.gt]:%206,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20id%20%3e%206%0a%20%20%20%20%20%20[Op.gte]:%206,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20id%20%3e=%206%0a%20%20%20%20%20%20[Op.lt]:%2010,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20id%20%3c%2010%0a%20%20%20%20%20%20[Op.lte]:%2010,%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20id%20%3c=%2010%0a%20%20%20%20%20%20[Op.ne]:%2020,%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20//%20id%20!=%2020%0a%20%20%20%20%20%20[Op.between]:%20[6,%2010],%20%20%20%20%20//%20BETWEEN%206%20AND%2010%0a%20%20%20%20%20%20[Op.notBetween]:%20[11,%2015],%20//%20NOT%20BETWEEN%2011%20AND%2015%0a%20%20%20%20%20%20[Op.in]:%20[1,%202],%20%20%20%20%20%20%20%20%20%20%20//%20IN%20[1,%202]%0a%20%20%20%20%20%20[Op.notIn]:%20[1,%202],%20%20%20%20%20%20%20%20//%20NOT%20IN%20[1,%202]%0a%20%20%20%20%20%20[Op.like]:%20%27%25hat%27,%20%20%20%20%20%20%20%20%20//%20LIKE%20%27%25hat%27%0a%20%20%20%20%20%20[Op.notLike]:%20%27%25hat%27,%20%20%20%20%20%20%20//%20NOT%20LIKE%20%27%25hat%27%0a%20%20%20%20%20%20[Op.iLike]:%20%27%25hat%27,%20%20%20%20%20%20%20%20%20//%20ILIKE%20%27%25hat%27%20%28case%20insensitive%29%20%20%28PG%20only%29%0a%20%20%20%20%20%20[Op.notILike]:%20%27%25hat%27,%20%20%20%20%20%20//%20NOT%20ILIKE%20%27%25hat%27%20%20%28PG%20only%29%0a%20%20%20%20%20%20[Op.overlap]:%20[1,%202],%20%20%20%20%20%20%20//%20&amp;amp;&amp;amp;%20[1,%202]%20%28PG%20array%20overlap%20operator%29%0a%20%20%20%20%20%20[Op.contains]:%20[1,%202],%20%20%20%20%20%20//%20@%3e%20[1,%202]%20%28PG%20array%20contains%20operator%29%0a%20%20%20%20%20%20[Op.contained]:%20[1,%202],%20%20%20%20%20//%20%3c@%20[1,%202]%20%28PG%20array%20contained%20by%20operator%29%0a%20%20%20%20%20%20[Op.any]:%20[2,3]%20%20%20%20%20%20%20%20%20%20%20%20//%20ANY%20ARRAY[2,%203]::INTEGER%20%28PG%20only%29%0a%20%20%20%20%7d,%0a%20%20%20%20status:%20%7b%0a%20%20%20%20%20%20[Op.not]:%20false%20%20%20%20%20%20%20%20%20%20%20//%20status%20NOT%20FALSE%0a%20%20%20%20%7d%0a%20%20%7d%0a%7d%29">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// find multiple entries
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findAll&lt;/span>().&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">projects&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// projects will be an array of all Project instances
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// search for specific attributes - hash usage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findAll&lt;/span>({ &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A Project&amp;#39;&lt;/span> } }).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">projects&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// projects will be an array of Project instances with the specified name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// search within a specific range
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findAll&lt;/span>({ &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>] } }).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">projects&lt;/span> =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// projects will be an array of Projects having the id 1, 2 or 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// this is actually doing an IN query
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findAll&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">and&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> {&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>}, &lt;span style="color:#75715e">// AND (a = 5)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">or&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [{&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>}, {&lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>}], &lt;span style="color:#75715e">// (a = 5 OR a = 6)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">gt&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#75715e">// id &amp;gt; 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">gte&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#75715e">// id &amp;gt;= 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">lt&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#75715e">// id &amp;lt; 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">lte&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#75715e">// id &amp;lt;= 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">ne&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">20&lt;/span>, &lt;span style="color:#75715e">// id != 20
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">between&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">6&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>], &lt;span style="color:#75715e">// BETWEEN 6 AND 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">notBetween&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">11&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>], &lt;span style="color:#75715e">// NOT BETWEEN 11 AND 15
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#66d9ef">in&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>], &lt;span style="color:#75715e">// IN [1, 2]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">notIn&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>], &lt;span style="color:#75715e">// NOT IN [1, 2]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">like&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%hat&amp;#39;&lt;/span>, &lt;span style="color:#75715e">// LIKE &amp;#39;%hat&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">notLike&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%hat&amp;#39;&lt;/span>, &lt;span style="color:#75715e">// NOT LIKE &amp;#39;%hat&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">iLike&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%hat&amp;#39;&lt;/span>, &lt;span style="color:#75715e">// ILIKE &amp;#39;%hat&amp;#39; (case insensitive) (PG only)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">notILike&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;%hat&amp;#39;&lt;/span>, &lt;span style="color:#75715e">// NOT ILIKE &amp;#39;%hat&amp;#39; (PG only)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">overlap&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>], &lt;span style="color:#75715e">// &amp;amp;&amp;amp; [1, 2] (PG array overlap operator)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">contains&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>], &lt;span style="color:#75715e">// @&amp;gt; [1, 2] (PG array contains operator)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">contained&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>], &lt;span style="color:#75715e">// &amp;lt;@ [1, 2] (PG array contained by operator)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">any&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#75715e">// ANY ARRAY[2, 3]::INTEGER (PG only)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">status&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">not&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#75715e">// status NOT FALSE
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="complex-filtering--or--not-queries">Complex filtering / OR / NOT queries&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findOne&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a project&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">or&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>] },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">gt&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> } }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Project&lt;/span>.&lt;span style="color:#a6e22e">findOne&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">where&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a project&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">or&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1&lt;/span>,&lt;span style="color:#ae81ff">2&lt;/span>,&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { [&lt;span style="color:#a6e22e">Op&lt;/span>.&lt;span style="color:#a6e22e">gt&lt;/span>]&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Fetch 문법 간단 정리</title><link>https://minuk.dev/wiki/fetch/</link><pubDate>Tue, 07 Apr 2020 20:22:29 +0900</pubDate><guid>https://minuk.dev/wiki/fetch/</guid><description>&lt;h1 id="basic-usage">Basic Usage&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">queryData&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	&lt;span style="color:#a6e22e">query&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> query {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> hello,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> persons {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> name,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">headers&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Headers&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Accept&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">fetchPromise&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/graphql&amp;#39;&lt;/span>, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">headers&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;POST&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">body&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">JSON&lt;/span>.&lt;span style="color:#a6e22e">stringify&lt;/span>(&lt;span style="color:#a6e22e">queryData&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fetchPromise&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">clone&lt;/span>().&lt;span style="color:#a6e22e">json&lt;/span>()) &lt;span style="color:#75715e">// avoid reponse lock
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 	.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>);&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div></description></item><item><title>Promise 정리</title><link>https://minuk.dev/wiki/promise/</link><pubDate>Tue, 07 Apr 2020 20:22:09 +0900</pubDate><guid>https://minuk.dev/wiki/promise/</guid><description>&lt;h1 id="synchronous-vs-asynchronous">Synchronous vs Asynchronous&lt;/h1>
&lt;h2 id="callback-hell">Callback hell&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20CallEndpoint%28%22api/getidbyusername/hotcakes%22,%20function%28result%29%20%7b%0a%20%20%20%20%09CallEndpoint%28%22api/getfollowersbyid/%22%20&amp;#43;%20result.userID,%20function%28result%29%20%7b%0a%20%20%20%20%09%09CallEndpoint%28%22api/someothercall/%22%20&amp;#43;%20result.followers,%20function%28result%29%20%7b%0a%20%20%20%20%09%09%09CallEndpoint%28%22api/someothercall/%22%20&amp;#43;%20result,%20function%28result%29%20%7b%0a%20%20%20%20%09%09%09%09//%20do%20something...%0a%20%20%20%20%09%09%09%7d%29;%0a%20%20%20%20%09%09%7d%29;%0a%20%20%20%20%09%7d%29;%0a%20%20%20%20%7d%29;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CallEndpoint&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;api/getidbyusername/hotcakes&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	&lt;span style="color:#a6e22e">CallEndpoint&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;api/getfollowersbyid/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 		&lt;span style="color:#a6e22e">CallEndpoint&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;api/someothercall/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 			&lt;span style="color:#a6e22e">CallEndpoint&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;api/someothercall/&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 				&lt;span style="color:#75715e">// do something...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> 			});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 		});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 	});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="promise">Promise&lt;/h2>
&lt;h2 id="async-await">Async, Await&lt;/h2>
&lt;p>References&lt;/p>
&lt;p>&lt;a href="https://medium.com/@js_tut/the-great-escape-from-callback-hell-3006fa2c82e">The Great Escape from Callback Hell&lt;/a>&lt;/p></description></item><item><title>JavaScript</title><link>https://minuk.dev/wiki/javascript/</link><pubDate>Tue, 07 Apr 2020 20:22:03 +0900</pubDate><guid>https://minuk.dev/wiki/javascript/</guid><description>&lt;h1 id="syntax">Syntax&lt;/h1>
&lt;ul>
&lt;li>[[Promise]]&lt;/li>
&lt;li>[[Fetch]]&lt;/li>
&lt;/ul>
&lt;h1 id="library">Library&lt;/h1>
&lt;ul>
&lt;li>[[Sequelize]]&lt;/li>
&lt;li>[[Jest]]&lt;/li>
&lt;li>[[Winston]]&lt;/li>
&lt;li>[[graphql-typescript]]&lt;/li>
&lt;/ul></description></item><item><title>Nexus</title><link>https://minuk.dev/wiki/nexus/</link><pubDate>Tue, 07 Apr 2020 20:21:19 +0900</pubDate><guid>https://minuk.dev/wiki/nexus/</guid><description>&lt;h1 id="docker-설치">docker 설치&lt;/h1>
&lt;pre>&lt;code>sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&amp;quot;
sudo apt update
sudo apt install docker-ce -y
&lt;/code>&lt;/pre>
&lt;h1 id="nexus-실행">nexus 실행&lt;/h1>
&lt;pre>&lt;code>sudo docker volume create --name nexus-data
sudo docker run -d -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3
&lt;/code>&lt;/pre>
&lt;h1 id="nexus-bash-실행">nexus bash 실행&lt;/h1>
&lt;pre>&lt;code>sudo docker exec -it 7f1dc6675c11 /bin/bash
&lt;/code>&lt;/pre>
&lt;h1 id="docker-volume">[[Docker Volume]]&lt;/h1></description></item><item><title>SSD(Solid-State Drive)</title><link>https://minuk.dev/wiki/ssdsolid-state-drive/</link><pubDate>Tue, 07 Apr 2020 20:21:10 +0900</pubDate><guid>https://minuk.dev/wiki/ssdsolid-state-drive/</guid><description>&lt;h1 id="1-ssd의-구조">1. SSD의 구조&lt;/h1>
&lt;h2 id="11-ssdsolid-state-drive">1.1. SSD(Solid-State Drive)&lt;/h2>
&lt;ul>
&lt;li>Flash Memory를 기반으로 한 저장 매체&lt;/li>
&lt;li>비트들은 Floating-Gate Transistor로 구성된 Cell에 저장됨.&lt;/li>
&lt;li>모든 컴포넌트가 전기 장치&lt;/li>
&lt;li>대부분 NAND사용 (cf. NOR VS NAND)&lt;/li>
&lt;/ul>
&lt;h3 id="111-nand-flash-memory-property">1.1.1. NAND Flash Memory Property&lt;/h3>
&lt;ul>
&lt;li>Lifecycle is wearing-off(수명이 제한적이다.)
&lt;ul>
&lt;li>이유 : P/E(Program &amp;amp; Erase) 사이클마다 일부 전자가 오류로 인해 쌓이게 되어 트랜지스터에 갇힘. 이로 인해 갇힌 전자가 일정 수준을 넘어가면 사용 불가해짐.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="112-cell의-종류">1.1.2. Cell의 종류&lt;/h3>
&lt;ul>
&lt;li>SLC(Single Level Cell) : 하나의 비트만 저장 가능, 긴 수명&lt;/li>
&lt;li>MLC(Multiple Level Cell) : 2비트, 레이턴시가 높고 짧은 수명&lt;/li>
&lt;li>TLC(Triple Level Cell) : 3비트, 레이턴시가 매우 높고 더 짧은 수명&lt;/li>
&lt;li>쓰기가 많을 수록 SLC가 좋고, 읽기가 많을 수록 TLC가 좋음.&lt;/li>
&lt;/ul>
&lt;h2 id="12-ssd의-구성">1.2 SSD의 구성&lt;/h2>
&lt;p>..&lt;/p></description></item><item><title>Pintos</title><link>https://minuk.dev/wiki/pintos/</link><pubDate>Tue, 07 Apr 2020 20:20:28 +0900</pubDate><guid>https://minuk.dev/wiki/pintos/</guid><description>&lt;h2 id="설정하기-configuration">설정하기 Configuration&lt;/h2>
&lt;h3 id="프로젝트-기본-다운로드">프로젝트 기본 다운로드&lt;/h3>
&lt;ul>
&lt;li>대부분 우분투에서 설정할테니, 다른사람들이 잘 설정해좋은거 다운 받자&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ git clone https://github.com/kumardeepakr3/PINTOS-Ubuntu.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ cd PINTOS-Ubuntu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ bash ./pintos_ubuntu.sh&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>여기서 9,10 작업은 필요가 없는 작업이니 다시 원복해주자&lt;/li>
&lt;/ul>
&lt;h3 id="vim-설정하기">vim 설정하기&lt;/h3>
&lt;ul>
&lt;li>나는 vim(정확히는 neovim)으로 코딩할꺼니 자동완성 같은걸 설정해주자&lt;/li>
&lt;li>여기서는 [[coc]], [[tagbar]], [[ALE]], [[cscope]]를 사용해서 설정했다.&lt;/li>
&lt;/ul>
&lt;h4 id="coc">coc&lt;/h4>
&lt;ul>
&lt;li>ccls 를 설치하고&lt;/li>
&lt;li>CocLocalConfig를 명령어로 친뒤&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;languageserver&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ccls&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;command&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ccls&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;filetypes&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;c&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;cpp&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;objc&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;objcpp&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;rootPatterns&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;.ccls&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;compile_commands.json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;.vim/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;.git/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;.hg/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;initializationOptions&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;cache&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;directory&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/tmp/ccls&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;clang&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;resourceDir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;extraArgs&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;-isystem./&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-isystem./lib/kernel&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-isystem./lib&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="tagbar-ale-설정">tagbar, ale 설정&lt;/h4>
&lt;ul>
&lt;li>local.vim(프로젝트 폴더에다가 두는 vimrc 설정, 자세한건 [[vim]] 참조)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vimrc" data-lang="vimrc">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">ale_linters&lt;/span>= { &lt;span style="color:#e6db74">&amp;#39;c&amp;#39;&lt;/span> : [&lt;span style="color:#e6db74">&amp;#39;g++&amp;#39;&lt;/span>], &lt;span style="color:#e6db74">&amp;#39;cpp&amp;#39;&lt;/span> : [&lt;span style="color:#e6db74">&amp;#39;g++&amp;#39;&lt;/span>] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">ale_c_gcc_options&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;-I. -I./lib/kernel -I./lib -Wall&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">ale_cpp_gcc_options&lt;/span>=&lt;span style="color:#e6db74">&amp;#34;-I. -I./lib/kernel -I./lib -Wall&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span>! &lt;span style="color:#a6e22e">LoadCscope&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span> = &lt;span style="color:#a6e22e">findfile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;cscope.out&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;.;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (!&lt;span style="color:#a6e22e">empty&lt;/span>(&lt;span style="color:#a6e22e">db&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">path&lt;/span> = &lt;span style="color:#a6e22e">strpart&lt;/span>(&lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">match&lt;/span>(&lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/cscope.out$&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> &lt;span style="color:#a6e22e">nocscopeverbose&lt;/span> &lt;span style="color:#75715e">&amp;#34; suppress &amp;#39;duplicate connection&amp;#39; error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exe&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cs add &amp;#34;&lt;/span> . &lt;span style="color:#a6e22e">db&lt;/span> . &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> . &lt;span style="color:#a6e22e">path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">set&lt;/span> &lt;span style="color:#a6e22e">cscopeverbose&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> &amp;#34; else add the database pointed to by environment variable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">elseif&lt;/span> $&lt;span style="color:#a6e22e">CSCOPE_DB&lt;/span> != &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cs&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span> $&lt;span style="color:#a6e22e">CSCOPE_DB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">endif&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endfunction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">au&lt;/span> &lt;span style="color:#a6e22e">BufEnter&lt;/span> /* &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#a6e22e">LoadCscope&lt;/span>()&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="shutdown-버그-수정">shutdown 버그 수정&lt;/h3>
&lt;ul>
&lt;li>pintos를 키면 계속 죽는다.&lt;/li>
&lt;li>&lt;code>src/devices/shutdown.c&lt;/code> 에서&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20/*%20This%20is%20a%20special%20power-off%20sequence%20supported%20by%20Bochs%20and%0a%20%20%20%20%20%20QEMU,%20but%20not%20by%20physical%20hardware.%20*/%0a%20%20%20for%20%28p%20=%20s;%20*p%20!=%20%27%5c0%27;%20p&amp;#43;&amp;#43;%29%0a%20%20%20%20%20outb%20%280x8900,%20*p%29;%0a%0a&amp;#43;%20%20outw%20%280x604,%200x0%20%7c%200x2000%29;%20/*%20Fix%20shutdown%20*/%0a&amp;#43;%0a%20%20%20/*%20This%20will%20power%20off%20a%20VMware%20VM%20if%20%22gui.exitOnCLIHLT%20=%20TRUE%22%0a%20%20%20%20%20%20is%20set%20in%20its%20configuration%20file.%20%20%28The%20%22pintos%22%20script%20does%0a%20%20%20%20%20%20that%20automatically.%29%20%20*/%0a%20%20%20asm%20volatile%20%28%22cli;%20hlt%22%20:%20:%20:%20%22memory%22%29;%0a%0a%20%20%20/*%20None%20of%20those%20worked.%20*/">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* This is a special power-off sequence supported by Bochs and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> QEMU, but not by physical hardware. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (p &lt;span style="color:#f92672">=&lt;/span> s; &lt;span style="color:#f92672">*&lt;/span>p &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;\0&amp;#39;&lt;/span>; p&lt;span style="color:#f92672">++&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">outb&lt;/span> (&lt;span style="color:#ae81ff">0x8900&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">outw&lt;/span> (&lt;span style="color:#ae81ff">0x604&lt;/span>, &lt;span style="color:#ae81ff">0x0&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#ae81ff">0x2000&lt;/span>); &lt;span style="color:#75715e">/* Fix shutdown */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* This will power off a VMware VM if &amp;#34;gui.exitOnCLIHLT = TRUE&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> is set in its configuration file. (The &amp;#34;pintos&amp;#34; script does
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> that automatically.) */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">asm&lt;/span> &lt;span style="color:#66d9ef">volatile&lt;/span> (&lt;span style="color:#e6db74">&amp;#34;cli; hlt&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;memory&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* None of those worked. */&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;p>로 추가해준다.&lt;/p></description></item><item><title>Bus 시간 메모</title><link>https://minuk.dev/wiki/%EB%B2%84%EC%8A%A4-%EC%8B%9C%EA%B0%84-%EB%A9%94%EB%AA%A8/</link><pubDate>Tue, 07 Apr 2020 20:20:03 +0900</pubDate><guid>https://minuk.dev/wiki/%EB%B2%84%EC%8A%A4-%EC%8B%9C%EA%B0%84-%EB%A9%94%EB%AA%A8/</guid><description>&lt;h2 id="복귀-버스-시간">복귀 버스 시간&lt;/h2>
&lt;ul>
&lt;li>목요일 11월 28일 14시 900A 출발&lt;/li>
&lt;/ul>
&lt;h2 id="집가는-버스-시간">집가는 버스 시간&lt;/h2>
&lt;ul>
&lt;li>7시 15 분쯤 출영버스&lt;/li>
&lt;li>7시 45분 계룡역 도착&lt;/li>
&lt;li>8시5분 계룡 승차&lt;/li>
&lt;li>10시 45분 목포역 도착&lt;/li>
&lt;li>13번 타고 이동&lt;/li>
&lt;li>11시 30분에 신안비치팔레스 900승차&lt;/li>
&lt;/ul></description></item><item><title>5 articles per week</title><link>https://minuk.dev/wiki/5-articles-per-week/</link><pubDate>Tue, 07 Apr 2020 20:19:37 +0900</pubDate><guid>https://minuk.dev/wiki/5-articles-per-week/</guid><description>&lt;h1 id="-하루-1개씩을-목표로-하지만-못하는-날을-감안해서-일주일에-5개를-하는-것을-목표로"># 하루 1개씩을 목표로, 하지만 못하는 날을 감안해서 일주일에 5개를 하는 것을 목표로&lt;/h1>
&lt;h1 id="202001">2020.01&lt;/h1>
&lt;h2 id="dec-29-2019-1117pm-tips-i-use-to-avoid-burnout">Dec 29, 2019 11:17pm Tips I use to avoid burnout&lt;/h2>
&lt;p>&lt;a href="https://addyosmani.com/blog/burnout/">Tips I use to avoid burnout&lt;/a>&lt;/p>
&lt;p>순간 해커뉴스에서 보다가 눈길이 갔다. burnout은 항상 존재하는 두려움이다. 언제 추진력을 잃을지 걱정된다.&lt;/p>
&lt;p>Tips I use to avoid burnout:&lt;/p>
&lt;ul>
&lt;li>no 라고 자주 말해라. 너한테도 한계가 있다. 할수 있는 것까지만 하자&lt;/li>
&lt;li>시간이 가장 소중하다. 더 중요한것에 사용해라&lt;/li>
&lt;li>도와달라고 말해라. 협업하는 것을 고민하거나 혼자할지 결정하는 것도 포함해서 조언을 구해라&lt;/li>
&lt;li>재충전할 짧은 시간을 가져라&lt;/li>
&lt;/ul>
&lt;h2 id="jan-01-2020-111am-the-old-internet-died-and-we-watched-and-did-nothing">Jan 01, 2020 1:11am The Old Internet Died And We Watched And Did Nothing&lt;/h2>
&lt;p>&lt;a href="https://www.buzzfeednews.com/article/katienotopoulos/how-we-killed-the-old-internet">The Old Internet Died And We Watched And Did Nothing&lt;/a>&lt;/p></description></item><item><title>썩어버린 Query Language</title><link>https://minuk.dev/wiki/%EC%8D%A9%EC%96%B4%EB%B2%84%EB%A6%B0-query-language/</link><pubDate>Tue, 07 Apr 2020 20:18:38 +0900</pubDate><guid>https://minuk.dev/wiki/%EC%8D%A9%EC%96%B4%EB%B2%84%EB%A6%B0-query-language/</guid><description>&lt;h1 id="-1-sql-structured-query-language"># 1. SQL (Structured Query Language)?&lt;/h1>
&lt;ul>
&lt;li>관계형 데이터베이스들에서 원하는 데이터를 가져오기 위한 언어&lt;/li>
&lt;li>우리는 왜 이걸 사용하고 있을까?&lt;/li>
&lt;/ul>
&lt;h2 id="데이터베이스의-역사">데이터베이스의 역사&lt;/h2>
&lt;ul>
&lt;li>관계형 데이터베이스가 데이터베이스 전쟁의 승자이기 때문이다.&lt;/li>
&lt;li>계층형 데이터베이스를 비롯한 수많은 종류들의 데이터베이스가 있었으나 문제들이 많아 점점 관계형 데이터베이스들만이 살아남았다. (대부분 성능상의 문제)&lt;/li>
&lt;li>관계형이 살아남은 이유는 질의 최적화기 (query optimizer)이다.&lt;/li>
&lt;/ul>
&lt;h2 id="query-optimizer">Query Optimizer&lt;/h2>
&lt;ul>
&lt;li>쿼리를 최적화해주는 무언가&lt;/li>
&lt;li>이걸 발전시키기 위해 수많은 연구가 진행되어 현재의 성능을 가지게 된다.&lt;/li>
&lt;li>그럴려면 구조화된 query 언어가 필요하고 이게 현재 사용하는 SQL이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://www.researchgate.net/profile/Martin_Boissier/publication/332803446/figure/fig2/AS:754092716593152@1556801122020/The-different-steps-of-the-SQL-Pipeline-leading-from-an-SQL-string-to-executable.png" alt="https://www.researchgate.net/profile/Martin_Boissier/publication/332803446/figure/fig2/AS:754092716593152@1556801122020/The-different-steps-of-the-SQL-Pipeline-leading-from-an-SQL-string-to-executable.png">&lt;/p></description></item><item><title>회고 모음</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/</link><pubDate>Tue, 07 Apr 2020 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/</guid><description>&lt;h2 id="2021년">2021년&lt;/h2>
&lt;ul>
&lt;li>[[회고/2021-06-19]]&lt;/li>
&lt;li>[[회고/2021-07-18]]&lt;/li>
&lt;li>[[회고/2021-12-03]]&lt;/li>
&lt;/ul>
&lt;h2 id="2020년">2020년&lt;/h2>
&lt;ul>
&lt;li>[[회고/2020-01-01]]&lt;/li>
&lt;li>[[회고/2020-01-17]]&lt;/li>
&lt;li>[[회고/3월]]&lt;/li>
&lt;li>[[회고/2020-04-08]]&lt;/li>
&lt;li>[[회고/2020-04-20]]&lt;/li>
&lt;li>[[회고/2020-05-30]]&lt;/li>
&lt;li>[[회고/2020-06-17]]&lt;/li>
&lt;li>[[회고/2020-06-21]]&lt;/li>
&lt;li>[[회고/2020-07-31]]&lt;/li>
&lt;li>[[회고/2020-08-17]]&lt;/li>
&lt;li>[[회고/2020-08-30]]&lt;/li>
&lt;li>[[회고/2020-09-18]]&lt;/li>
&lt;li>[[회고/2020-10-09]]&lt;/li>
&lt;li>[[회고/2020-10-24]]&lt;/li>
&lt;li>[[회고/2020-12-20]]&lt;/li>
&lt;/ul>
&lt;h2 id="2019년">2019년&lt;/h2>
&lt;ul>
&lt;li>[[회고/2019-09-18]]&lt;/li>
&lt;li>[[회고/2019-09-19]]&lt;/li>
&lt;li>[[회고/2019-10-19]]&lt;/li>
&lt;li>[[회고/2019-11-24]]&lt;/li>
&lt;/ul></description></item><item><title>Javascript Memory Leak</title><link>https://minuk.dev/wiki/memory_leak/</link><pubDate>Tue, 07 Apr 2020 20:16:46 +0900</pubDate><guid>https://minuk.dev/wiki/memory_leak/</guid><description>&lt;h1 id="주제-후보">주제 후보&lt;/h1>
&lt;ul>
&lt;li>메모리 누수란 왜 일어나는가? - garbage collector의 동작방식, javascript 에서 메모리 누수 없이 코딩하는 습관 가지기&lt;/li>
&lt;li>비동기처리하기 - javascript callback, promise, async-await&lt;/li>
&lt;li>웹사이트에서 원하는 정보 추출하기 - 웹사이트 크롤링, 파싱하기&lt;/li>
&lt;li>나무위키 유의어, 반의어 - Word2Vec를 통한 나무위키 데이터 학습&lt;/li>
&lt;/ul>
&lt;p>→ 익명의 대학 동기에게 재밋는 주제를 고르라고 해서 진행되었습니다.&lt;/p>
&lt;h2 id="메모리-누수란-왜-일어나는가">메모리 누수란 왜 일어나는가?&lt;/h2>
&lt;h3 id="결론부터-말하자면-프로그래머의-실수-코딩-습관을-잘-들이자">결론부터 말하자면 프로그래머의 실수. 코딩 습관을 잘 들이자.&lt;/h3>
&lt;ul>
&lt;li>Garbage Collection 의 필요성
&lt;ul>
&lt;li>C언어에서 메모리를 직접 할당하고 해제하는 malloc, free 라는 방식을 사용하였다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#include%20%3cstdio.h%3e%0a#include%20%3cstdlib.h%3e%0a%0aint%20main%28int%20argc,%20char**%20argv%29%20%7b%0a%20%20%20%20int%20n;%0a%20%20%20%20scanf%28%22%25d%22,&amp;amp;n%29;%0a%20%20%20%20int*%20arr%20=%20%28int*%29malloc%28sizeof%28int%29%20*%20n%29;%0a%20%20%20%20//%20do%20something%0a%20%20%20%20free%28arr%29;%0a%20%20%20%20return%200;%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> argc, &lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">**&lt;/span> argv) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scanf(&lt;span style="color:#e6db74">&amp;#34;%d&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;amp;&lt;/span>n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">*&lt;/span> arr &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">*&lt;/span>)malloc(&lt;span style="color:#66d9ef">sizeof&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#f92672">*&lt;/span> n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> free(arr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;pre>&lt;code>- → 소프트웨어의 규모가 커지고 협업이 증가하면서 메모리를 책임지지 못하게 되었다.
- →Garbage Collection의 필요성 (cf. rust 의 memory ownership)
 - 단, 최초의 GC는 LISP 이라는 언어에서부터 있었다고 알려져있음.(1958년)
&lt;/code>&lt;/pre>
&lt;h2 id="garbage-collection">Garbage Collection&lt;/h2>
&lt;h3 id="초기-아이디어---참조-카운트reference-counting">초기 아이디어 - 참조 카운트(Reference Counting)&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="A%20a%20=%20new%20A%28%29;%0aa.b%20=%20new%20B%28%29;%0aa.b.c%20=%20new%20C%28%29;%0a%0a%0aa.b.c%20=%20null;%0a%0af%28%29;%0a%0a%0avoid%20f%28%29%20%7b%0a%20%20A%20a%20=%20new%20A%28%29;%0a%20//%20do%20something%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>A a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a.b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> B();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a.b.c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> C();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a.b.c &lt;span style="color:#f92672">=&lt;/span> null;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> A a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> A();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;p>이 때 f 메서드 바깥에서는 a가 사용되지 않는다.&lt;/p></description></item><item><title>송편 생성기 (추석 대회)</title><link>https://minuk.dev/wiki/%EC%86%A1%ED%8E%B8%EB%8C%80%ED%9A%8C/</link><pubDate>Tue, 07 Apr 2020 20:16:06 +0900</pubDate><guid>https://minuk.dev/wiki/%EC%86%A1%ED%8E%B8%EB%8C%80%ED%9A%8C/</guid><description>&lt;h1 id="추석을-맞아-송편을-창의적으로-출력하기-대회가-열렸다-먼가-인공지능으로-가장-완벽한-송편을-출력해보고-싶어졌다">추석을 맞아 송편을 창의적으로 출력하기 대회가 열렸다. 먼가 인공지능으로 가장 완벽한 송편을 출력해보고 싶어졌다.&lt;/h1>
&lt;h2 id="0-configuration">0. Configuration&lt;/h2>
&lt;p>먼저 인공지능 스택으로 배운건 Tensorflow, Keras이기 때문에 언어는 편하게 모두 python으로 하기로 결정했다.&lt;/p>
&lt;p>그렇게 언어를 정하고 과정을 다음과 같이 나눴다.&lt;/p>
&lt;ol>
&lt;li>송편 이미지 크롤링 하기&lt;/li>
&lt;li>Keras를 통해 GAN모델을 구현해서 한번 테스트 해보기&lt;/li>
&lt;li>나온 결과를 확인하고 모델을 학습 데이터 특성에 맞춰서 재설계, 데이터 가공, 통계적으로 분석&amp;hellip; 등등 원하는 결과를 내도록 설계&lt;/li>
&lt;/ol>
&lt;p>이렇게 정하고 나니 필요한 라이브러리는 다음과 같았다. &lt;code>requests, beautifulsoup, tensorflow, keras, pandas&lt;/code>&lt;/p></description></item><item><title>Endurable Transient Inconsistency in Byte Addressable Persistent B+-Tree</title><link>https://minuk.dev/wiki/endurable_transient_inconsistency_in_byte_addressable_persistent_b+-tree/</link><pubDate>Tue, 07 Apr 2020 20:15:43 +0900</pubDate><guid>https://minuk.dev/wiki/endurable_transient_inconsistency_in_byte_addressable_persistent_b+-tree/</guid><description>&lt;ul>
&lt;li>논문을 고른 이유 : 2018, 2019, 2020 년도 FAST 학회의 모든 논문을 읽고 전역을 하는 게 목표인데 2018, 2019년도 FAST에 동일한 한국인이 실려서 관심이 가서 읽어보게 됨.&lt;/li>
&lt;/ul>
&lt;h1 id="abstract">Abstract&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Persistent Memory(이하 PM)의 byte 주소 기반 접근의 등장으로 데이터 전송 단위가 page→cache line이 됨.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>쓰기 실패 원자성(Failure-Atomic Write Operation)는 8Bytes 씩 보장되지 cache line단위로는 보장되지 않는다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B+-Tree는 Block 기반 데이터 구조이고, 재 디자인이 부상하게 된다.&lt;/p>
&lt;p>→흠.. 갑자기 8Bytes 씩 쓰기와 cache line 이야기하다가 block 기반 이야기를 하는 이유는 block 기반에서는 dirty page를 통해서 내렸고, cache line 단위로 동기화를 해야하는 일이 없었다고 생각한다.&lt;/p></description></item><item><title>SSD 공부 자료 모음</title><link>https://minuk.dev/wiki/ssd-%EA%B3%B5%EB%B6%80%EC%9E%90%EB%A3%8C-%EB%AA%A8%EC%9D%8C/</link><pubDate>Tue, 07 Apr 2020 20:14:30 +0900</pubDate><guid>https://minuk.dev/wiki/ssd-%EA%B3%B5%EB%B6%80%EC%9E%90%EB%A3%8C-%EB%AA%A8%EC%9D%8C/</guid><description>&lt;h1 id="httpswwwusenixorgsystemfileshotstorage19-paper-choipdf">&lt;a href="https://www.usenix.org/system/files/hotstorage19-paper-choi.pdf">&lt;/a>&lt;/h1>
&lt;p>An In-Depth Study of Next Generation Interface for
Emerging Non-Volatile Memories&lt;/p>
&lt;p>&lt;a href="http://camelab.org/uploads/Main/nvmesim.pdf">&lt;/a>&lt;/p>
&lt;p>F2FS: A New File System for Flash Storage&lt;/p>
&lt;p>&lt;a href="https://www.usenix.org/system/files/conference/fast15/fast15-paper-lee.pdf">&lt;/a>&lt;/p>
&lt;p>The new ext4 filesystem: current status and future plans&lt;/p>
&lt;p>&lt;a href="https://pdfs.semanticscholar.org/b8dd/ec47f9fab1eddb5c9cacf703781dd5337b87.pdf">&lt;/a>&lt;/p>
&lt;p>개발자를 위한 SSD (Coding for SSD) – Part 5 : 접근 방법과 시스템 최적화&lt;/p>
&lt;p>&lt;a href="https://tech.kakao.com/2016/07/17/coding-for-ssd-part-5/">개발자를 위한 SSD (Coding for SSD) - Part 5 : 접근 방법과 시스템 최적화&lt;/a>&lt;/p>
&lt;p>개발자를 위한 SSD (Coding for SSD) – Part 6 : A Summary – What every programmer should know about solid-state drives&lt;/p></description></item><item><title>개발 TODO</title><link>https://minuk.dev/wiki/%EA%B0%9C%EB%B0%9C_todo/</link><pubDate>Tue, 07 Apr 2020 20:13:56 +0900</pubDate><guid>https://minuk.dev/wiki/%EA%B0%9C%EB%B0%9C_todo/</guid><description>&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> shorter url&lt;/li>
&lt;/ul>
&lt;p>todo list&lt;/p>
&lt;ul>
&lt;li>offline editor with md &amp;amp; my page like blog&lt;/li>
&lt;/ul>
&lt;p>hackernews articles&lt;/p>
&lt;p>my favorite musics (includes video song, mp3 files and whatever)&lt;/p>
&lt;p>diary&lt;/p>
&lt;p>언제라도 내가 원하는 서비스를 바로 바로 찍어낼수 있게 디자인이 거의 다 되어있는 framework&lt;/p>
&lt;p>golang으로 만드는 db&lt;/p></description></item><item><title>F2FS</title><link>https://minuk.dev/wiki/f2fs/</link><pubDate>Tue, 07 Apr 2020 00:01:51 +0900</pubDate><guid>https://minuk.dev/wiki/f2fs/</guid><description>&lt;h2 id="논문-정리">논문 정리&lt;/h2>
&lt;ul>
&lt;li>[[f2fs-paper]]{F2FS: A New File System for Flash Storage}&lt;/li>
&lt;/ul>
&lt;h2 id="코드-정리">코드 정리&lt;/h2>
&lt;ul>
&lt;li>&lt;img src="https://minuk.dev/wiki/images/f2fs.jpg" alt="f2fs drawio">&lt;/li>
&lt;/ul></description></item><item><title>설대회</title><link>https://minuk.dev/wiki/%EC%84%A4%EB%8C%80%ED%9A%8C/</link><pubDate>Sun, 26 Jan 2020 23:57:47 +0900</pubDate><guid>https://minuk.dev/wiki/%EC%84%A4%EB%8C%80%ED%9A%8C/</guid><description>설 대회로 한 자료</description></item><item><title>회고/2020-01-01</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-01-01/</link><pubDate>Wed, 01 Jan 2020 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-01-01/</guid><description>2020 새해 회고</description></item><item><title>회고/2020-01-17</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-01-17/</link><pubDate>Wed, 01 Jan 2020 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-01-17/</guid><description>2020 1월 17일 회고</description></item><item><title>회고/2019.11.24</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-11-24/</link><pubDate>Mon, 25 Nov 2019 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-11-24/</guid><description>&lt;h1 id="sundaymonday-2425-november">Sunday&lt;del>Monday, 24&lt;/del>25 November&lt;/h1>
&lt;p>휴가 나와서 이렇게 또다시 회고를 쓰게될 시간이 생겼다. 요즘은 훨씬 힘을 빼고 있는 중이다. 본호형이나 영서형, 재형이 형에게 크게 영향을 받았다. 특히 본호형의 영향을 많이 받게 되었다.&lt;/p>
&lt;p>요즘 평일같은 경우 계속 같은 루틴으로 흘러가는데&lt;/p>
&lt;ul>
&lt;li>6시 30분 기상&lt;/li>
&lt;li>점호~7시 45분까지 다시 잠&lt;/li>
&lt;li>8시 15분 상번&lt;/li>
&lt;li>점심시간 노가리 혹은 휴식&lt;/li>
&lt;li>일과 종료 후 휴대폰&lt;/li>
&lt;li>7시 쯤 본호형과 안광은 병장님과 보드게임&lt;/li>
&lt;li>9시부터 청소&lt;/li>
&lt;li>10시부터 다시 보드게임(보통 마이티나 티츄)&lt;/li>
&lt;li>자기 전에 TED나 3B1B&lt;/li>
&lt;/ul>
&lt;p>한마디로 공부란게 거의 없다. 사실 공부를 안하고 거의 1달간 계속해서 쉬었는데 불안감이 없다고 하면 거짓말인 것 같다. 항상 이렇게 놀아도 되나 불안하고 남들보다 뒤쳐지는 느낌을 받는다.&lt;/p></description></item><item><title>회고/2019.10.19</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-10-19/</link><pubDate>Sat, 19 Oct 2019 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-10-19/</guid><description>&lt;h1 id="monday-19-october">Monday, 19 October&lt;/h1>
&lt;p>흐음 그냥 생각나서 회고를 쓰려고보니 딱 한달만에 회고를 쓰는게 됬다. 별생각은 없었는데ㅎㅎ&lt;/p>
&lt;p>요즘 공부하는 거에 슬럼프가 왔다. 지금 하고 있는 공부가 과연 쓸모있는 공부인가에 대한 생각이 계속해서 든다. 그리고 과연 나는 뭘로 취직을 할것인데 이런 지식들을 배우고 있는가 괴리감이 드는 것도 사실이다.&lt;/p>
&lt;p>예를 들어, 지금 공부하고 있는건 크게 3개? 4개 정도인데, React, 알고리즘, 운영체제(Pintos), 데이터중심 설계, Effective Debugging 이다.&lt;/p>
&lt;p>Effective Debugging은 2회독 마치고 notion에 정리하면서 다시 3회독 하고 있는 중이라 사실 공부가 아니라 요약, 정리에 가까운 거지만 나머지들은 너무 다른 트렉인 느낌이 있다.&lt;/p></description></item><item><title>회고/2019.09.19</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-09-19/</link><pubDate>Thu, 19 Sep 2019 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-09-19/</guid><description>&lt;h1 id="thursday-19-september">Thursday, 19 September&lt;/h1>
&lt;p>서희강 예비역님은 계룡 전산 한마당을 주로 추진하셨는데, 그 추진력에 놀랐다. 굉장히 깔끔한 진행이였고 준비기간이 짧았음에도 불구하고 높은 완성도를 이뤄내기 위해서 많은 노력을 하셨다. 정말 본받을 점이다. 또한 발표 내용도 인상 깊었는데, 목표를 이뤄내기 위해서 하신 노력들, 그 노력들을 위한 설계(만다라트 등) 본받을 점이 많았다. 일종의 뽕을 받고 만다라트를 만들려고 노력했는데 실패했지만 다시 한번 시도해볼것이다.&lt;/p>
&lt;p>안상태 예비역님은 개발에 대한 열정에 관해 많은 영향을 받았다. 특히 상태형은 컴퓨터관련학과를 전공하지 않았지만, 복수전공으로 엄청난 열정을 가지고 공부했다고 느꼇다. 또한 느그 개발 코드에서 내가 무례하게 말했던 부분이 있었는데 기분나빠하는게 아니라 어떻게 고치는게 좋을까라고 물어보는 장면이 아직 기억에 남는다.&lt;/p></description></item><item><title>회고/2019.09.18</title><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-09-18/</link><pubDate>Wed, 18 Sep 2019 20:18:14 +0900</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2019-09-18/</guid><description>&lt;h1 id="-wednesday-18-september">## Wednesday, 18 September&lt;/h1>
&lt;p>이때까지 군 입대 이후를 간략하게 정리해보려고 한다.&lt;/p>
&lt;p>먼저 입대는 2월 17일? 18일 월요일 입대했다. mysql코드를 계속보다가 입대했다.&lt;/p>
&lt;p>기훈단에서는 육체적으로는 힘들었지만 정신적으로는 회복할수 있는 좋은 시기였다고 생각한다. 4주차때부터는 인편으로 백준 문제를 받아서 풀었다. 풀게 없었을때는 직전학기에 배운것중에서 가장 중요하다고 생각했던게 컴퓨터구조론이라서 CPU개략적 구조도를 외웠던 걸 계속 그렸다. 기훈단에서 배운것들은 솔직히 말해서 앞으로 써먹을게 없을 지식과 경험이라고 생각해서 리마인드를 의도적으로 안하기 위해서 최대한 안적겠다.&lt;/p>
&lt;p>2박 3일로 수료외박을 나왔을때는 나와서 짜장면을 먹었고, 정통학교에서 필요한 기본적 물품(컵, 핫초코)을 샀고 둘쨰날에는 맘스터치에서 햄버거를 먹고 못했던 연락들을 하고 밀렸던 웹툰같은걸 봤다. 마지막날에는 다시 들어갈 준비를 하느라 정신이 없었다. 특히 그 당시에는 정체단에 들어가야된다는 열망이 강해서 주변분들에게 물어보고 다녔다. (생각해보면 갑자기 연락해서 무례했을수도 있다고 생각한다. 그럼에도 불구하고 친절하게 답해주신 정민이형 우진이형에게는 감사하다.)&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/2024-12-23/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/2024-12-23/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/2025-01-05/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/2025-01-05/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/daily/2025-01-10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/daily/2025-01-10/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/daily/drawing-2025-01-05-06.04.41.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/daily/drawing-2025-01-05-06.04.41.excalidraw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p>
&lt;h2 id="drawing">Drawing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm&amp;#43;gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFABYyJE9VGEYwGgQAbQBdcnQoKABlALA&amp;#43;UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm&amp;#43;gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFABYyJE9VGEYwGgQAbQBdcnQoKABlALA&amp;#43;UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/daily/drawing-2025-01-05-06.04.49.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/daily/drawing-2025-01-05-06.04.49.excalidraw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p>
&lt;h2 id="drawing">Drawing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm&amp;#43;gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFABYyJE9VGEYwGgQAbQBdcnQoKABlALA&amp;#43;UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm&amp;#43;gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFABYyJE9VGEYwGgQAbQBdcnQoKABlALA&amp;#43;UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/daily/drawing-2025-01-05-06.04.59.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/daily/drawing-2025-01-05-06.04.59.excalidraw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p>
&lt;h1 id="excalidraw-data">Excalidraw Data&lt;/h1>
&lt;h2 id="text-elements">Text Elements&lt;/h2>
&lt;p>%%&lt;/p>
&lt;h2 id="drawing">Drawing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQAWGjoghH0EDihmbgBtcDBQMBKIEm4ytgBrABEYDmIYQgApABkAYQA2AEUeAE0AeQArJMkAIVSSyFhECoAzQIRPKn5S%0a%0azG5nAFYeAGZVyBgNgEYADiT9iAoSdW4jvkLISQRCZWluHiOL62Vg7gAGC7MKCkaoIdpsfBsUgVADERwQ8Phk1Kmlw2CqyhBQga4Mh0IkwOszDguEC2WRkDmhHw&amp;#43;AAyrBfhJBB4KRAgSCqggAOrXST/bSbQHA0H0mCM9DM8oXLGvDjhXJoT4PCBsEnYNSHRV/AHKzHCOAASWICtQeQAuhcFrhMkbuBwhDSLoQGlgKrgeKysQ05cwTfbHcqwktbtqA%0a%0aJxHHY7TrxeIXRgsdhcRWC5Xx1icABynDE3E6mxOfyO8VDKamZWYNXSUGDaDmBDCF00wgaAFFgplsn6HfgLkI4MRcNXiLd4lG/jwkvFNkdJ&amp;#43;dlUQOFU7d2LpD0TXUHX8A3lXA2M6cvkHmAClMSjqz2A/seLcfT2fnPdL84jjf9ifj2BnHPn6&amp;#43;z7ez3vKZnFjT9NjfO9P2cE53zAI4/ymACpiAkoX1gnhr3/d8ULg2DTggwDPz2T8ZwI5DPx/M8eDI%0a%0akocKVS9MMQ7CoKfM8EJKJDaKgyipk6GiP2fHiSng/icO/PDqP/B5OIgOBAl9ERwiPM8/m0I5tQ07UZ1DQsjk6O531U9TNK0pIdPg/TWPPNSeFDTo/lDUMTniCNQ3iQszkM7QeHiJIPgnYtNnDKM7OIlTtB2cc/iSJIo1OWypxjLyeB4E5Oh4To0o&amp;#43;TKdjuP5QPC05NmnRLQ1y9zQ1sryIxOHzNk6HZapSzpQxirz8rOGM/k2JITh2WK80849VL&amp;#43;N%0a%0aLxz0hz7Ni/No2q3Tarc3rfLcyN2talLnJizY/hyoKhJG2c83iWrLPqj4YOG6TAUIfQHUHBAAAV5OYRTuC3Hcy3wUIoHBfR9DUIcHv3ck0BQ8TjzuaTCgAX1WYpSnKCQAHFNGwbokkwIYAGlNk0AAldo5gQTp4AzTBQlZGZxHQBYECWcgVmVdY0C2fKLk1VAX3DC4rmIG5FXo0onheN40B8r4OB&amp;#43;amL1KdlQVxKFYURBEkEbNEMS9YgFfxdBCQ4Yl%0a%0aSSyKBWSpGlRXFNkISlQNhU5Hk&amp;#43;b5NBVNLWXbYQc3qctllpWEWV5VuC5VTRDUQxlyA9T7I0TXNS1yBtYc0H9HtlWdYhXQkXAdk9ZtiB9LsAzLIME94GdevUra4yYdMk1QU5K4TTNs2pu50rMuyqpTisqw3d6EEbHO2wyI38&amp;#43;Tss&amp;#43;wHIcRzHALp2csLSgXJdE5Xec2HXYve4uPcD2jyCGNgxiOOY388NEqDBamHYz/3z9Q2vqi8Pie/L/Qq&amp;#43;sL3s95%0a%0a6mHzn5KL&amp;#43;Sh4OBd&amp;#43;hFLz/zAClX&amp;#43;YAwFFkgdAt&amp;#43;TEP7fzwuxMAnEBIPxIofVBx8zxCTglgtBOFOh4QITgqYoYSGQPUpQqSCCyxyXlIpXehUTKmXMnpAyw1tCjWytOGKjUdg6VHFZK8alRzbAylGWyA0zL/yMm5eI9lRwOROPFaMF1CqJW6oApI&amp;#43;VizwUatVHYijNjGN2DsIK6liwFSmCNVqO17ENXMuZERI1tonFaicbY8QfJ5iOEFYhXDup&amp;#43;UEf4%0a%0aqczlUpOQvqI4JflerFS8QWZyPV2qqMUepIsMVMklhsdZO4/UCwZT&amp;#43;GYjhzlqpJHSqcfxo0erwXyq4tSxiZwOSCttFunRerVQjO5aMU4wwNQ&amp;#43;NEkaxjLGdDzE5HYGFtS5KvFdQMN07rVieowwIb16x93nN9X6/0ZBLCBgeZSUxqEQ0PmaGGcMU7FwgM0SQuAAAaAAtFsSQjChmYN0AAYnMIw7QHmbHIEcFslN4Ce1pvTSgrJmacyWuzY4aUea8luF%0a%0aZKQzxXjGzQBQ5U3xxRhzZG7bWSsVZIjVuiCOOIISKwJOQfWJIyTG0tNSOkDJPaSmHEKDk3JEVOwFOykUzKKisuzn4SQecA7KiDuqWAocLgR0NMafIMkrTx2XAXBGLooUQFwCkH22Jc7&amp;#43;2XqqgQdNi7dLOJVNKuSGBV0TLcF2kA0yJizBwHMAtIwhMSk6LuwRJ61nWf3XVg8OyHgNaPUo497omtHPZGeuxoqrmdEvVASdVxr05BvP1u5gbBtNIg88%0a%0aB9IFoU/KQ3NX4RFfhQYQ8&amp;#43;&amp;#43;bgHkRvpeSSdDa1sVgkkSBZa&amp;#43;I1q4qA2CJxIF4N7Z29BvFYJP0HThGZYAgGNq7WeTFoCqFhwAQu0&amp;#43;tCj67mekww5eTWGFjMrpSyc1WHaX3ZwwqPlwwBTGfmWq8FkrwTKr5ZydxTF2VHMlKMSjiphMnPlYp76YwYXqrovRljkoORSsVbqQVoqNSGpotKTjBG7CnK1QJhVNhTkyg5FyM56pyMaWceyJwPFJBmnh6q5iK%0a%0amTLnqY6c9V2ofuOpVOj4zIyuMMnMwuCyvpLI3as3124NmfS2QYHZgMs1bvwe&amp;#43;diZySiw0KPDSAiN0AIAABIADVqwDFaEII4GIACCacMz0E&amp;#43;QARy5Op4FswJBguWJCjYs5YUsyOGVBFDtuAaKFqi0WvA7Waslji3lnICUSDhES1WypUSks1iF3W1KDZ0pNoyj2AqrZspthy&amp;#43;2/NUDOyC&amp;#43;7flTI0tCr9r6MVZYJUhy1Li2VUcFWx2tAgW0IanTqrdJ%0a%0asIV3p9VJpXoXY1I4iw6WkZah1nBuDDetY3Z11NJy2UGW5T1lZvU9wzWWJsAb2zDxVaGyA4afW1yjeOSc2wD3zgTVtlN681mCa3lm5hTbbHVunUO4SsEp1rpAZ/CSkC7XCTvmOz8E6JyQM89/N7qDOOlAYQpeSkmjI7uPRZU9tjvIjMchM1RprOlcNSh0wBh2fIZIjD91Ss2zhtPyhhmKDU5rFgLKY/hsUir7QhwIbj91lnQ&amp;#43;ppvTZQJtkAz2RJ0G%0a%0ax4QfgLe7JsA8mSiKbKFcoYcAjBDFU8weImgMzdBqM4DM2BnBclwK0MYWNtXKipvMRYdmLhQu/HXZUHMuZodKLzbLM4LjCzRSOCWUt/h5dixAMLytWRRY1jnH3esEtGyS2bArEoit5ay47HLPKMt8rFCymPyoZQiq6xfFUapKu121DKrEcro6Krjo14uyaU6tYzp0DrerSvNcDH15Mkykh5QsfXautxs8jY4E6l1tcFEzkUfpBb3d03XciwPDbnZz%0a%0avKl2xuIs09Jz6SA/Gxcc/PqpuW5P&amp;#43;ht3JM4UXbM/7daHwNve/dl7LFYGwWcPAi/M6pgTu/FQ6JX57/YJLRGR7D/ntwTwR/pWpeHOmxOfp/h9lMCLnBIASzrJHxkpELiwkenuojg0oWMUvpJMjGB4j4o1G&amp;#43;kEvmHjsRj1PVAWNFPbtZKNH4lGLlNFPmKcKtFwlYn5I5NlD5NFBUiLkZC5rgTGDFJVL5DtPhs&amp;#43;h8NRsUhhHpFOPtDZOagItov1DpCA%0a%0aZQb1KlKNLlH5A1LVDtMTrAawLdDxo9PAVdh9AvCJn9PzsQPsiDDmmeCLhGFDHJhcmWMphAEYDUEYEkLgDUH3p0HcjsH0DUEIMwEkFAMQC2DUJoFZqCmbgzPZizH5MirbkWH5o7vHtbmWK7j5n5titLN7hSjrL7srMSpFurGSlrPkRUKHrSuHgypHinqlt7EnnbFygnn5nLJyCloVo0WWBnqKoqIHLnlKlVoXvqLVqDKXg1k1t1oamUNXugLgPEHX%0a%0an0dMdtmyM3vtrFMdMhj3hNjXCDlag3H3k3LasRrGhOF/OWItggHttzqttPkPLPo3mPP2BGlPNGivgNn5ovJvgvNvhPiYZANvI8TYZfleD/uAaCW/i&amp;#43;DftfifrYbfq2nCUcmAlsFQlAS/kicJOiYiYhLAVDi9DDogcjsZCZAjhwmgfpMdI&amp;#43;k5IWB0tsFwWpHojpLVDGNOP4q&amp;#43;mtG3nmPlJVCWA1BImtLsKRvmHQWlG3t1O1FTsRj4uOPVA5LScztO%0a%0amyGzrxislzitqYbzqJhYVYeiiCVie&amp;#43;BiRxOcgppchUH0AAPpDAGgWlwAACqMAnQkgnQ9AfQ3QD0/YzADy&amp;#43;gAAKlEabsarERbg5ukaUEkT4m5k7vsZkXqf4h7oFk0WCBUaFkURFqtqUTFsmXFkSNUeSLUUyvUV0dbIXG7HHvyG0W7J0dHt0aUL0VngMcHEMfntVkXmMaaBMcqk8WqmnBqrgCcEsV1pXr1ovhoUIUxp3jagLBOZNgPnpK1C5pFNzJ3%0a%0aFcTcRqZAGtq2DPtmkOWGi8Xtkvu8YohhMYuvomjuZAGuGmsYUJpDvvkSY/nmkWgWm/hWmQqhGWoAW&amp;#43;e/rBB2k9mJNAsWhAahC&amp;#43;Tib/jhGWv4sDnhKBRCQ&amp;#43;dAXhJ&amp;#43;V/j9nBGAeLrBXAWqXdtusgewiduFKNHpGMilMYtFKomZEMoyalBhmVBOL1HgXGUwaYi1D5GYh8C5MdMIfZNBkWFUoIh0nBsSelH1GZD4jOOVJMg0npPEtFKlO5Bwe5AyXcLV%0a%0aLFGlBYidHUgyaNFpalCwb5ERcdBxkqXoYsoYWqdeauGYWJgLgcveXBD9pDLiY4aac4VcuZg9MwEjFjEjDAC2MwEMIWOpljGoO0PoK0FjP6TZjERCsGSzIIjxBAEkfCsqKkbcNGd5nqSlPGbkYmT7n7irAHhmcHlmdAPFrmfSsqKbAWRbIKrHi0blomVWV7MWbWb7Jng3rXA2ZKhzMZCMZHPKuMfVp2SsS1j2W6KGAOe1eeWsRuFGO5DNEoQcV3oq%0a%0aONocf3tTNtApX1GUsuePuZVPutg8duT1ruRPIvgdpeoApladhvl2ReX8XtXvjvAfkWuCUAQ&amp;#43;FCa&amp;#43;V/rfqhV&amp;#43;XgkaWBZ&amp;#43;OiWDm9Uckfs4L&amp;#43;QDcAbfsDV&amp;#43;chdCZiWCRRAWngn9n&amp;#43;VBMhfYQjeDJeJBQjUfnpJAhQcJDBSDcJBBT9V/tAhWnifAVhaIiSZpGSXhcjqNDFA5FEnZPZKcJlEYmMnmBlCtDGopZFExRhvBKRt1IoopTBs5F4u5C5i4ppao%0a%0apgT4i1K5JEkoTEuxT0pFDGJlDejMiNJlE5DFGlHpBlOlMTtwnLcRv4rlPev1GMhRtsD1A5BUtqL0lbZISpelEJWVNGDzUwUImGLyW3l4podVAEjpe4nNerV0kTq&amp;#43;hTspaOJpboi7V&amp;#43;sQR&amp;#43;m1JdEZSqaZZzg9ZqT9NqbspYYLvqfBRDDJiaVLmaRIH0HAHjO5NgB4pIBmBmFjK0PpljBaRQGMA8kcH0BFTTFFYzGWJbo1PFeGQtSlRii7uld3llV7%0a%0ajlcVXlcUemdFkVXiJUaVYbHmRVcllHk1eliWZlnVYnqfcntVWnj0a1csdnhVk2T1bqK2f1e2YNeXj8UpnMZqvphNSPICOsRlLopOPBCtUtbXBcb3mtR5oIVxZOGPktv8TeeufcUGgA/PnuWdcvkec5Atd8bdRAJeTvgCbJHeRXYfq9V&amp;#43;R9X2t9YTQiVBejZAprV&amp;#43;BDbBX/kDYw8&amp;#43;BTUBWAFAZ9bw1AYhYI69sw6I6uuhfiZurZXDjhSepJVtPZGM%0a%0ar1JVC5nzeUqwVsZOBYh0jOIpXVP1B8DtKouGPSaksdDFIzsBrZEIu1C5PKeImZNtDpFjvheGLVFGB4k4qQYwYVBLRUuLao/VE5JJZUlOEWF4j5H1MedVA1FyUWO5P1MYnThRqRiYrlBYjtC3IqQ/sqfoezkYQJqQ19FqeYaXbqZJprWLjXUUHXegN0PgFUHMK0AgOpicPgMoOpjAEjA9AgH4VjDUPplwBcCbpFYGdFUzBsE0k5pzEVJGWkfPSLLG%0a%0aQtTkcvZfcFqvamQVZvbqiHrvYlvmY1TVYmWWdyhWRykczfS1cKvfZ1Xns/WWDVm/THBVWXlMVNanOnPMRMDqp1pNcdUahuO491OlBKamLsWNtOUcVNrcJFFxS1CWIg9cSQygxABuWEVuRg88adZGjgw1NFJagQ8NavJdkU6i0CdmihJQ0&amp;#43;XjSumjaflMDDSWvjYBZCXhAOvS82iRKjcaUqVI4SRXbI6SSgeSXNOlP5FIsQUdpJaomlGjnLX5ME3e%0a%0ahUttNqNOONBhkTUZPNWVMUmlD1FgTk&amp;#43;hcZQYRzgSeqbvkXXzuU&amp;#43;XShNEi5g4RLk4QjFcgMPoHaUYLSM0NSBaZgGwDULSPoH0FANrhaRacM8biCgGeCmPWsFMxODM1zBcbPZA4s27mLNkQFtles0mdvSmeFts0Hrs8VVUXveVWWJVZczWQIKWefec1fantWxAHWe1Q/YMd1QXi/aMc8x2Z/YQ5872e0P/V/dNZGjpOOC1B4lC&amp;#43;8FA7sTA2gGMi5Eo%0a%0a7FEi6uZa6gwdegyOwvri4eWMveqeSO8Q8gzdk9bZdSwxJAmDTw6CWDSTV&amp;#43;WDUy7w2DWw6TYjc&amp;#43;E&amp;#43;6CYWtw8jeI5y8BCw5jf&amp;#43;8BRBRy5De9dAjy&amp;#43;w2JEjkcq&amp;#43;1&amp;#43;S&amp;#43;PjTe3BdBLBFB2&amp;#43;1sCOr&amp;#43;wDgWmWmB9ByxMgrh3hJ&amp;#43;yh6B8R9yxRzjehzTZhbDoyXI6gYesK7hbB/TU0h8Aa6lB4w5NVI5MrYk8WJodGA0oAqYptF4uOKOBGLsMlGcC5iJfZMF%0a%0aGal5JFPBC5glL5DpTQXJ8RulMpxUnZHZHenohYx4vmEZ2x0ZFyWVJFCRq1HNWgVtBGEpS1FSdlIZO1FpfOYWP5O4&amp;#43;Eu1BGN1GjgizSVFFbaRbsB4r&amp;#43;g5DQZkmtOq7yd0pwZGIpfmPTi1PlMYj4iu0HUk7orZGkvQaGXkn1IRc5B0hYuel4l0mjiQY5DOBhHpXY6RhavBB4/YqlIZbkyawU2ZWSxZaU1ZWXTZRXY&amp;#43;NJjy&amp;#43;LpLrUy5RUH8A8vpmMA9%0a%0aOpqGKpkMM0A9FjFyJsDcs0EcPgKGLgMPRALZkGZM7FUWImxp/M9wAtTGe8Miqs07HkXm&amp;#43;gGvWmSiIVcW69yVTmWWxHlVY281TW2fe5mc3llW8D823ffWeKu29Kl231SXh/e8wC7MaNRnDUMO4Q0XNwMVFNMdjsYcTO1C/O6gF4pMpYmzDtUg4XRu5uYdViyda8ctXi4NNnkS1Nce3T2Q2exQy9TS8B6WlQyWuNyRFR5/M&amp;#43;Vh1jS&amp;#43;QI7e9BVQiR4r%0a%0ayRPe19Zgsr5ePByWh&amp;#43;TCZewjX9XL3BX9ch3/nDSbzhMhay3BchaR3/kTShfQyRKOkL4Dlb3/q7zeLR5znTUK4zSK8zdhSx/I2BuEvx3Fb56Ru&amp;#43;qQROBJzGLyYbSjgTm5yhkJbZFq2pA523mVKRsk8kgnxGBYpMrxQbZVOnztKRhGGMpNOIl5yE67cZKorZFZ9wtFOpCYybW5AFAnxO45GqxwY5NGJPXY5hvpJwdtOl61KkylClNn3ZC55rUZAWE4%0a%0aiE8Req75MlNx6cI5HwflMKdIUUi5IRvEt0pP9jvVL5AYg1HcL1I5tjvY9GqlP1DGBxclLgTjr5MWK3v1Bv8eeGMUhtY5HoxBIzUAhRrhlAnDXpuuxrPOma1egDcecxdMpuJlG4oQZkGER1tN2lwuEkgcwC0i2DmCc0hAxAZQD6SpB2k8YygGoGnCGDHdTuEzcelMxK4JVjgLkG7oqGRT3d2BS9Z7ivR&amp;#43;7vdC2ZRPZn9wOYH06i19Jtu0U5Rg9WiE%0a%0aPI&amp;#43;sc1vo3NYe5WeHsMUR7F46srzSYhXjR4Ds3QQKX5vXiZ6AsTUbqIigtGnbJhSexxRUCpQ8SVQ/0NPZFie32oM8t2hDHdm8UOwj4cCh7Qhtz3gGPVgSVLAXnryF5350IBaMBFr2fY9pdes6R3peHw5vsoCqvXhoBy4Zn4EhD4YRqCRRI5C4KNDBGm/jd50Rb81NPlrTXo4M0NITNZvtULYTB9scIyc/oAkEKxQfI&amp;#43;/EsG5B866JNGJ5bHAWCL4l%0a%0ahSCrNdislDby0Yb&amp;#43;xYbSmBiLDjhnIVJcMH5EUSR1AobfaMK0hE7p8xKkUQBJFG6hSckoTBMZMyVS5Xp24V1QqKXx8hUloME7JKoVGVqCIAkJjBYelDsY7QUouiY2qwR0g6Fc6&amp;#43;TVUgXQCFWsS6yA6wna0NLV0nKtdWbhICGAABZfQLAA4APIagpANXMoCSBDAHoMACgBmBqDYAs4IzKNmMxjZxFOYanK7jpDYHk802Pmb/FiizZrNXYHKXKlsxJR%0a%0aFtyUP3UtiIIraH1Cy1ZKHpINOYyCGqcgq5pABbYmg22jZDti2W7bI9NBQ1D5j/VwAfJsexLYciakygpRaSjIssL3lhZWCYWaAYJtJ0jDZ5CAXqJwTz3RaBpNs7grBruy8HRgeKvgrUb8VJabg1yvPIIcyxF68NwhgvcDsBDwQlCoIYCCMSfBDEEd60dLUMX/BbS0McOCNCCobz/z418hf&amp;#43;MXjjXN6EcSI5Q3JvywQKCsGOQfJjkwVa7oFtgFfAvv%0a%0agXCi7BOa/kDDDtC2EJ8bG6kYxJ4z4Jt5pCdnOYTPzUY9RCMyUHJMRmIxclbI8w/DK0LowpQGCYdDoe&amp;#43;lFI58Eoq&amp;#43;MFlcNaFZNFxx2HaBRm6h2c2SFPc6BRULCRhBsOjeYfj1qhQCZIvXIEeax54lNEBw3CprZVzFHJoRTrZyi6wqAwADQ&amp;#43;gB5GMFUz&amp;#43;JugmwIYMoH0wrcTgBobALSEkBIxaBo9CkY&amp;#43;ERY25jgrmZKi0UtScDa4mbT3DwJzbsiC2n%0a%0aIwQSW32Y1FRBgPBosKNrbSD6qObSHifWuYlYZRdzJ&amp;#43;p20eav0lRFbN5toJmK6CM4SEgwcsSmq49FQ47ewRZwsG1x4q0DawbXCiZ/9GoVom0Wu1Ib2jMW27Z0Z4MvQf99inPNHv4J9Hrs/RlLAMbGLfZv58x8Yz8NENyE0Ihe0CVIY5JIi28cILkuIaDW8klAkhv1H8t9j/aJiwA9vByXBQnSvsve5rH3uWL96sdROvkHqGZHk7jgJwpjcYa5BCRj%0a%0aItqwpGVqOGZIuYipNFQOn438Rk4c&amp;#43;BUwivhgpz2Rgk44vmi1ElLSTjxahEsI1DL7SdehMGLLnmD8hrRQojXFuLTmpxMFXOqidOsRn/7bCYMLURnKOF0SSdNKs1A4aYz5IiVXEuhGAYU1MnFNLKOpW1seBmQQ0puzrJTFcmaBVAPWrQZwOpl&amp;#43;RYxmgCIzoHMCEBIxVM8QUgHjDuTITxmsbSAJblsh&amp;#43;ZwyybFoscgyIL0F23AnLC90pRvcORJRHZty%0a%0aNhm/caU/3Q5hKIkH0TssjE1kQ21oksSpRMPVthxPlG9V1BA1ZUX209Hf0Me8xVTJqPEnrEio4YVuB3nBbE8py7M6uGT3UhlRBxpiVdii39SuDHR1MiAB4NZ57sYwBoheGdj8H3UQRgJchsEIZbngJetibDqEJCmfiNZRQwMaCXDFBTxeCNe3tmKISBSTZFsxysWMqEyM4pNQ/3nUPhyOzROWBILgNBwI3CGS3HJRPqzFpuQMMY4xxmkkEQcEXMcn%0a%0afilEzAYDZtqjYjDFEwWiqJ9hFiaQnpAsSnA28ocmTi4y85H87IASGim3is5bTAR&amp;#43;dJ8YrKIb7SbWKA48ETROk1MsBVyBAL5RenTgMwVQfQFjH0wtg2AfwYgH0D&amp;#43;D0A2AtIH6eSJiqcxUo2eJIlhLLAps/MeE7PE92hm8DkZ/AsiZmR5GUT96/IsQUDwJl4pQe2Mi&amp;#43;rjI6IYyoe0osrKUEfqky1BbZF5nxK0EjshJ8xA0AzLR4ST88OkISuHK5mTl%0a%0aUA4DR1IpO6TbQpkRw5wupKFkuCMWjPHSTiz0kr5iw2dT6HLLFkmTbit5PnirJUj6yUOUYqXufA17vU20ZQ4hVZOinSMyx9Q3dAlOY7xTGhjYtyDJzMgYQ&amp;#43;pCUEzqlAgz5JTi0iOxu402KtjIwBSIZCXJMqwD&amp;#43;Mu01Fi&amp;#43;Otbgi9SKETadbMwF1MIADyMIEjCRiYAKA7oZQN0B9I4BWg0gGAHTCNxlhRmI9X6ahI4VXdiMtI29MqAXkXEl5uKSQSRP%0a%0a9zryt6yM3kVRJ3k0Siy&amp;#43;8kUXW1kGCjj6xWNquxLh5yiEe3ExURoIfkqidBao5oG/JmIfyFORjSZGzMNEQsxYyKBSaaP2zqQiMFxa0SuUgV3FN2osqahLP2x4s&amp;#43;ohia6meWMkKyJFp7f0TEKskIcIK&amp;#43;CnGlewiEI0wEtks8BjSyFHIjZ3SvpcmL1mA0elhY6ZTjTNlEQEKwysmmI3V4I0WG/kktFAWd4hT7e2yuMbgliHjLb4vksADRwqF0c7ZVC2%0a%0aoZJUiiTIB&amp;#43;fU9VilOqijhdhkYKcD5Dqi8djhZtacKo2WjwQvaEiIuduKorWIKMwwrxLqyf4xQMoqSOyAhlYIArFo0hHaB7Qmh9InIfCIAfhW2Btj6ciUUfpX1SSr4XMGGNkuZAeHElLRWlFzLVDwYdJYmFkWNFvzILgDYm2iHaD4lpz&amp;#43;JowqckJPE2MQtRTEz6LpDpRbj9QIwLBWFWNLsECIP0ViU/oVAkr81BE7UxyEdiMSmI0lQUDHFsX0ZKJK%0a%0aemBFKfrXajbALEfMm4Z8q8RGt7x20/rs0oQHSLrKEI48P/Em4NylFcAVTCG2wCtAHoX0D5A9ANBJB8AOwVTDsCaD0AuQo883OdwnlNSMJzmaxdhOkG2LwZSzB7lDKcX4pNmpEhGVyPKKbzhBXi0oJWzPl&amp;#43;KsZ8eHGSDzxm&amp;#43;KQltzcJV1UiWlAnmvE0tfxKflqjwqokwcu/PWKFJcoV6WdhzN4DDruZQC8OqwVmiOCNJqLLSTAqdFwLJZroqaRcSM%0a%0akzE0FvoilnTQvYqRZlmQ2lgQsmX1pCFT&amp;#43;U9cJAzGlCVe56uyqQrmUnL0OX5MBB5Ioi9KheBvUZQeqF5w15lmvW/L&amp;#43;rPD29HwkCQHBkPIQrKcaL6nGvjUfVf4XyZym2RcsoXOyaF3y94mRTOCZyGKjY9oezVlqLDWo&amp;#43;/TKB/0nARIqu6fGPsFDpK&amp;#43;R2h3Y8pOcV6gFhku00FFbTlIxClwm8tDJSzUf6S1Cw4YUuK1EmTtQ9hZUC1PqwwhlwGMvnXD%0a%0aHK1iiwYGMZwJ9JEklWyky&amp;#43;eYDDCdDc4nRGoXtIqfKsGiKJYMXtLqA&amp;#43;kEKFITEd6LfupD2EEshNG/FyFJL1F1SlK4wxaWSo8S0UzggCV/pBnam&amp;#43;0BkCahhXoyYrSTZwNXbHLyW6j&amp;#43;IM5BXCpBRsASoY54GhTYnUr3UAjRFO09BReSrkyLJMaao5O6phEzc/xEgUgM0CMDKAeA&amp;#43;mIYIQE2BCBCAdyVTNgDgCaAagHyTYBaSEAxqzuDAlmBOAoLMDnM%0a%0a82FNU7npHLMs1MMgomvPzXkSi1qMvkaWoFHiC6Jh8qtcfJrWnygl8g1iaEsvmQBr5za8ODxJiXtrH5/bNUa0CSWrEP5GEWiqrQFm/zRsaAfYrkoHx9T5aarQWc4LKUizgSlS3ScusvRLD4q661YpurMnbrnqqs4/GEKhIDLgINkrpWeD2UYcXyCOx8jjVR0PtH4nvc5d7yqEob6FPG0gtNBymtRhVPmpgl1CtX6QOks4L2lX0sg3pNN3QiLrBhOF%0a%0aFR&amp;#43;o0UOgp5xzo9c7VwIh1cJiG4HSa52CiGNstOm/jzpFQdTBQAegPJOgtIToH0DGC&amp;#43;gKBCIoYJoFDC&amp;#43;tmg&amp;#43;gHrfQLjb9a281IlIi0Vk52KIZvAS1I4qm2EpXFs2jeR4q3nlsltu8/GayH8UMSNtB82tUKP3kXz&amp;#43;ija&amp;#43;5lxJbUnaKZsSqmaqNpmaoER12wBhuGmFxRjEC1I0WgG432o52QClhepyiTfa7RaDCpWjyqUHlXRbkPMB6K55NLst5kndS%0a%0aEPS1C9r2&amp;#43;64CABqOQkK0xb6kKWWmx3a8nJIUl8m3uAoK8sacCAtBjWjEPh7eGyoMbsvH1WztZUQ5HWeuPW2E71bES9Z&amp;#43;AgquS4K&amp;#43;NXvUGPg3qyAEm&amp;#43;wSOhAx1fhAcO&amp;#43;nMSwyBwy8y0t&amp;#43;uHXggf3azncW&amp;#43;8/S&amp;#43;H6Un73qR&amp;#43;D4AWnt7oCZe6ESfU/iAMQaqIRYyRrbOQ2MdRWTBInZWPwrTCkpekTzfJsu5MEzEkneUhlG8R8rZaY0CyNqDMhIKWae%0a%0ancdj4kK7RRHINU&amp;#43;LbUgMZaEs&amp;#43;fOiXcwYezDQvORFb4V/PiTFRMMIm4qDqr6hAZ7&amp;#43;6BnFSlCE7pRudeDEg5QTGSzVFExSD2lIgX7cJ3lbFTDa51Gjd9SMc09uGJQ8RMamDrBlg5jqMOmGTD5hmJBAPzDilSKN/QpO1G5LdQtqT6bUJcOJK&amp;#43;cqKDnYsPCulWFRcMtJM1DzsxUUUkVF/EUr1H04rCgkUaJLXFHVojbjDsO6AaXLEUWs9pou6uS6tnTv%0a%0ahf9Cis6TLgqAnALSLpI4PQB4DdAWmOwZQMUfVE1B8AeMfTHyBJHWYzFY8uNY&amp;#43;A7hlhp5lqFNmlQzWSTJtK86bfDI3oFqhBC2ktZSGW17yvdla8soEpW2B6iZYS5QREtUFRKkep2ykB2ou2x7cAGYBPU3kXxeJ6oXY1gU9priwdFqgCvJZIVyhldzj4CkpT9pRBF7/tJewHdUsPJyVFVssm6qgpr1brlZlkrWfssR0d6whZaeGnDoTFgnh99k5fcJ%0a%0aCH3lpcdh6nGjPrclY7P1RyK/ebJIgwF8dMUwnTAYD7014DsB/CoIcqgqM4oRm8pIuzRw0aJhj/SOhNCYoj5tEA2oxOxt3RYEqDYnCjBlESRysFOJtFFXPx5O/LGFSmkTS5HFJTh6CuUc6IYbVkZbTWWW30VIrBHOrZFtc6TPfml2wjSt6AB6DwFwB9ADQ8QLkEjCMC2lmAeMPGEIFUwECoA&amp;#43;AOAIbr&amp;#43;kQAAZHwakYNpTYcDrdVOssHbqGMO78qbi%0a%0a77i7uLXbz3dPigPbMbW3zHxR22yUdD0UHEyQ9nEhUZscj1na4lgktUQMEOPajcwtSDar41KDp66RFxnmTZuyh5gilECl4/T2gVuCxZpe86pOESbjgq9jS70bXqh3nsG9usmE8bMhOwRkT37NiFBsSPgIv9ZhgBLieHMAJga5CgVihF94OzUNiBtSulN8QVdI&amp;#43;TBIUw&amp;#43;kiRymk5oTFA&amp;#43;f3E4ZQZwr&amp;#43;ykzwcqhNi7OFiCMkEli7JSOpWBC2obREXqn%0a%0a7VterU0gJ1Ow4cj1TYrY3IqBjAdgUAE4DAFwANNugtIGoEMGYD4AMwmgHYEMDuQZhCAHpixdhrDKYT4qKbK4wvMG0hniJuax3aMbm1RmJjMZqYx7rrW1Ufd9bLbYsfrVKCr5Kg5smTLvm9tUeBZvYw9GLOywmZ3OwggNlkkyys9q1IBfX28OWpilu1CufOrbMA6l1XxrwTrUG1g6LsV5CuYOf54w7gD8J38DeuA2WzYSQvMGV&amp;#43;oH3FDX8Eyl3mhx%0a%0aTF5ib1pENE2xGRNIc8diGgnZcvJOkmDo/iKZOIVsip6&amp;#43;pXSTOXjna7EHik4p6MHzNcPJMqM3fLTkdgqRxX8oBWygrNWYzUE5TxYLzjzp8StjuFjmqcHIhVPvsFzpya6CkY1NmTALb4w6YkYcq8sfxRp2XRIBgDuEhgkgL1cwANAIiBgPpUMPplYCmY7AfQXIM0eiLmLx5j4ONImtmaVRaR8863XedKAUWT5ubVeSMc&amp;#43;6IzC1dFsPAxZO7THPdLFo%0a%0a&amp;#43;Wxfywpmm2QejqpmZvkbHyZ79SmYJdWLPzNU3QUS8YLGwNdpwfiaS2OpuMD4Jp3NDxI2eeOF7yl7xmYh2ZwabVdLKC6vf2aBOYKQTjel/RCexvWWQpze1fcBHP0ol5zJQPBKTbAB4Ilz3aKZYTYvUt7llnlo5KhTXOliNz9shoQgfcMknm&amp;#43;ThjaIIaoxmr9Wc0OwdQef5WqIubkIQqIRmgFhSrxKxJHjlAU38UV/BpTe5ATmF9AudtQ8TFYaif8t%0a%0aW1VxdHVfmQNX/zmp3LcBZkbSZz8hpkrd1fQD4ALSxAIQH0E0DxAxg7QIYJwAtIDA7kHyB5Hcgwx2k8Li1tRtSJnotF4qeEoM9teZFETdrLi8M07vcUFFPFZ1stXddW2ghRR1av3exZmM6o2J&amp;#43;2nPGsd4u3ye2KPASZ9bVF4xfro7d4EnUKXSWcl2evJU12i5VcobKl4Xa8dhtHV4bnxsvV30Ry9mN1gJyHcCbaWgm32YNCm4UKF5lpTLUCJyyFIA%0a%0aonKYEnet/evu/jU2DlW&amp;#43;5e&amp;#43;TYQ2QGkN7Nq5S7MC545GaWUOkgRe3QWdhV5fYpJk0Uqj8FCWjHKZOL45pNH0WqwGWIeeUdRikCp/jvpDvvsdVakqnVWJzCQOHGc5fKQjl22hVW2D/O5I5lvNtNXLbI3LI1MCEgOs8jMugoxIH4McAPkNQO5KQA4D0BWgygZoBQE6AUB9AdyToEBNDvtHruK1l8LHIdwtE7ugZwY5Rb4EHX1yX3JGWndd0A9mJCZnO%0a%0awEuTMcWi7e24PasabXrHw90S3M9sfO1iyvruAEeT2v&amp;#43;bJKmZInXqEQb8xVmAFM5ZuDNi5qQqC9qlt4wPdWII3vjMnDnijb7MGXe7SsjG9PaxtwncI7SvvUeu/V0MEa6Jc/Sw0svWyT7/l6AxWIpPEkpKLUARE2L0ohG0&amp;#43;9g4pEFwvQGUgkaqsAeq2Hxni8odg6w6XEL48PVTAus20LoAvYP3xFdTWtE/BzgWlFdpT6bSBOBYw8YSMOACcAQAwAMI%0a%0aMAfQM7ewCkB6Zc16NrGr62zNdE1I3FCRezx4T5nTIwicvKEf7W81NF53RI&amp;#43;jNu7GLcZ4JVdfW03XpHijhtSo9D3ZnXr98vM9HviV7G/SBjowQ3cVAItJoZOWSb4crNt3ZyEiZ&amp;#43;3SXsfeO0Wjj15y4&amp;#43;0vNR8GHj8e2jcnu&amp;#43;P5eQToMVCYpvBixl451MaOZxrhTMx6EGc&amp;#43;3qIjeWJz&amp;#43;&amp;#43;r9m/mMRH6oE&amp;#43;L98uhFg3Iv0IqL9HQzagQ733y2J1CMiefz%0a%0an6oCy9lIUsr4auWN9LLh3lvZxoU28OQr1Hazdinn3tzxJHxNv22gxQuVlPVOZeL6QUHFpgMjfoRUfT9QVGTUffjwk4KH9pxdy6qGlD6hcqak0GHToxT8gcFYo2GcWtiuJJRcvGRYSpPocr0YH9I0yTLiwWI2ArrVh4hWk30t2FQOkRnWeMdF/R9RYmiiV9FTxmxVP6auib2jqr36dHXXN93lZnMyhdjI6SpuaeePa40bI6fkScb0OWG440ugCO4B%0a%0awoL42b&amp;#43;pR5qaeBkhVCnTgilYfMsMjDidqkRVmVfxVQxUUAowtCpKOHlfidwwUhcpLpu&amp;#43;EicSw2h1JncGU5kGqK6mlOdnwoNFQicd4&amp;#43;qxg7qcW2MjeW2yiIil0eq4R6AIwJIEAmdBSA&amp;#43;AA0EYFduaBnAzgCgMrk2D4AOA0IKZ2SJmfG7Zm4sLh0VJsW4oF58VHa5tr2vDHtnh1sYxRP2dSPy1Mj5oqxYWOF308yxku4drUfHaNHb1qPR9ZGpfNNUI%0a%0adl5yOxSXxXblH/aS&amp;#43;Y7&amp;#43;fTYpondpS02Zht/anHvYIe52YAx7Qx74Oie6QyMtYKFzSRgJ/jSZfIme9QrkSCK68vuWKbR&amp;#43;HF1epPUyfEdAr1T1ZfMtrLYT1ksTxIxkgljpXgVuocoyjDn9Bs9UK2rJXitOQzgz9mJk0KyksyAM3m1OVlEXcFJKe8r1OT1Cr7ZOFaeU7YR8FihpumNM0GLZHVMZOHioRfScZJWLDpSL0qrVSQgyYLeaPaQUOKsAzcOl%0a%0acQFA0TTSxRjDCFukz6JJqzV7c1Tzi9gicZxvY3yKanB78uSC&amp;#43;ati7cHwkRdN&amp;#43;MUWXuvTgEo4MoA0xYw&amp;#43;mfwfsJ0C5CdAPk8QSQPgH3mmKTuKEsO1tYOAbAmutIi4nhJWbx2Nnidqi8nZ2ep2d6iH9GVnYrWJnwe8jjDwoOLvKPuLZdh5uo5zMEf7nRHqvHscszkeceQDIDK1yCiyTXt9H24OjiahThgXtetS8XsHuaXh7XZ89KDphd8e4XAnqe4i%0a%0a5nsdKwnYQvIZENR/ayl7iJydDj6imEmKFZ9ozzcsnAPpgvAmnxN7PQJ8E/&amp;#43;/BKJB2N5kuQ63QXcuPuOxzjgyoI4xJguSvRdI9XYD&amp;#43;nTRrnh7vTbDXuAU14aetXwTtcjAfkZcL6B1MdpP4KZh4BQA1u9AWkH2SEB3IBgbACgKpmIAPJ2Hszl8FcenmLPQZ4221II62/CPYPojo6&amp;#43;MdOsHPzrTF&amp;#43;Myc6TNMTkPFzriwdp4u3e8P93u51o/zM129j0a%0a%0at72LI/nIOCKOfH7yaNnLqJWaK0YH76NB9w3nHnHxG2nzXWw/9LpSjBa0qR/&amp;#43;PZ72nnHUjSZt&amp;#43;SmX7VgfUrzpu3q9PW8KA0T55s3LphMfN1LohjcUaCK1/LYmdDE7KG2KPSSRNoVS4yXREQXvBk5HbgFc9XxKvSJYhn/qqqDIvrjLU8a/1Pj3VtiuvazAudX7bxD9AH8FIBQBmgmgTAP2AGAYZVMHyIwJsAeT4ABg2AdTIkt/etH/3/044JuMIvDa%0a%0aLf0g/h36Na4ReQ29s1NkW2916OD1os9neixd9M7BRxOY5HL3yO9OLDMyucszPi0rt3rau2I9eyb6Uj9GZGaikRvDQRBbsE/amBLB4IMQ2KhU/MyXT92PTBgh8uPYRC656lI9n49yWRH130cFHMSR1K/SmwlcH1Nl3wQ&amp;#43;XWl1BJIpEDS70AnblzA1gKXy1iciTAK1b9ykIDEyhioXYGcYnIc11CtdIQDEH5svemj&amp;#43;FwtMBkqhuxfPmWgMoKklH4DX%0a%0acpDTpKuMqG34NOVOW5pb7YJAxxSNLpGAdCwQQmQd7aNAkXcTGFRECZB&amp;#43;ETWq8QGJSkUIcrJI1tUN/cXy39XxFr11N4SY8GhNWnA/wgsJATX1IB9uD5C5BTMYsHoAhAZoE2B6AH0hqAKALkCOBIid/1m8Frdowi0ujTCWzwSLQbQXlHuUAPt182aiygDdnfb1gCkPFAI99TvZAIQCLvJR0et0A56zu9bnASxwDnvEj3NN67Sj0ysomR7UyUR1DCHI%0a%0aDG7BzluVVEWgM0kwXWBRZ4tLLvji5ePfP2bM69aHVnNl7NFxL8EOe3luCoCd/RYY97ADkOUwhfhluCJ9DH1psMXS8DeCLDOCCZdUggJ3h0LLeeykDrJYKQCcl9DT0A1JAhE0b910U&amp;#43;zgNlAsaSL4BtCQ1&amp;#43;EZWDTg0hiNet36hLPBciT5F2fmgn8ScKnFi08MG/k4c45OlQU59IJqGnBkoIjEhtdVKTlYDGxJSnE4aTNvHERFKRJjNRgvSJm2FxWY%0a%0aJATlx&amp;#43;YqG88k5KRAzdipc1y5ISKCvgloCkWYRT12hajQUQN&amp;#43;fijp0icdvDWsmhXHEQUqSYjFRwdQhU3UQGzdimWt4MDig6QJ2Hzw8C3zTQhaQlNcAVyg1/WWEF1N/I9wSDMjJIJAMZfQhy6sj/ZtniAfSUgFIBQwGoCaY&amp;#43;gR8AzAjgdoFW4FuFsH0FI2Fo1qC2jE3wbFf/CeT0gVvK3zQBVnYMw6DQzLoJ28egvbypQDvaiXOdEAtDzO9LrTD3TM%0a%0aVja71Udy7F634sq7TtT2MjfAgL7URyBUnchLHS41xQ3tZuGSQCuM0P2C51Q4MXVjgyH0K8ppc4JJYvHAcy4DcXJF2L8ibEEMhCkQxezwhFPLfXQgSXOCjAR&amp;#43;oE5UagrwpISldiTBJyCs1IfhCpJ5VWeGww70Lvj3QRacdkDkz&amp;#43;Lfn44kpdxmXEBhPSjNRCuLsyXxVOIgwEJikJYVxwKzayAG1ODG4VIp1OVJB512uduGOwi&amp;#43;L0NZxYg8RXiCnVHB%0a%0a0DCkxV1TA47bDIPQAHkNgAtI/CI4BqB6AKoANAHodoBgAtuTAGUAoAdTB2BnAY3wA9oIXFGnkQZVNVaCBHNZwTJNnGD26CHfeD3m1nfAYNGDdrXO191JBesLGDLndsOudMAttRD8HnISwWCjuAcKMcNwJrhah0oeWlklRwnmQv5x3GxlnDhZVszB9M/JgMRtxSGH3&amp;#43;NUbdcPRsi/bgO3DfIzT2ckcbaQKCjrJY3ioQgNFmwJ91zNEIfCnZdEKVVA%0a%0aoTFUnlx3FSlq4PGGxg88DWFFQ0DWSbsQq43aW8TQcYgsXwIi/QoiMac7WImhacKIpRQzBpwVTCEA8YBEWcBVMTQDmBNfH5A&amp;#43;QEAPGFwBMAA3RqC6BT00txR8YD0NDZ5UGWjtNrCDzLDJIsM0gCZI6AL6D5Iw70UioPZSLOdvfFsMu8JgzSIwCK7HSNm9tHGPQWDqglsL&amp;#43;ZXnD&amp;#43;VUlp3YB2ktfvOS1uMQuDTjAUEYFjwcd&amp;#43;7cFyz9vjJV3ccPIzxw%0a%0aL8fHHyK3DkfUXnv0KXCT1XsAnZCkBDTlKEOoYHLIoShJkTWyzDE&amp;#43;XVEhU9WXfgPP0j8M8L/wwEMQIikXLBGI&amp;#43;CB9ST2RD6EZvxii6FLm23QThXWnlM5hEIyWgTjATR0RTiQUPsE1XZpA00vaFKUQV&amp;#43;DZRk&amp;#43;EvaAKF3QdES0WvR8&amp;#43;XdCCgFpW8y00apOwTTlgHcTnpIUVZJFvMfPFnwLBnA7RHi1zUEsGIwZ5YklMdtgcyA59ZbPjj1jBDWzwgwDA%0a%0aykM44SwaZCqRJCCjX05wMBqDMQ/IFuHfRqTf1ywMsmCjGSRWCYLhHDccXCLyYSotI0kVJfcXWZt3wc9zacuvWkEIA8BVoG6AXSDMDuRmgDgDtJJALGD6AkYZwCGB2gK7QGi5vdo09CuHDCH2IU2XCWt1cUSD3ztoPOaI&amp;#43;4Fo3oJrD&amp;#43;glaPO8lIpAN2s1I3bQ0i/fG7zD1A/GYJ7DdjBYOwAlgpmRn5TEbsSJ4IGQbQnCQweTmy5y4p4x7sQfecPb%0a%0aNPo7S2INkbX6NhcvI&amp;#43;F0Bjd1Ec21lDZQAz8jcYngM8lXqO8KUDYomVi/CFTCxnitcw0rkwJ&amp;#43;OSxDsEIkSUggFOVPAhMYs3ap3Qc/zQ9ywdt/YiMkw5EWXyIcXCUzBgBnATAC6cTgNgBdILSXoAQAERfHlwAiBPiK/9YqIGSW9CwGxWWdNrEAPWcwA&amp;#43;WAgDm4tFjEdjrGAOWi6wzaJzZ1o9D2bD1I331LsOwgPwgBW1LY0OjQ/XALdAljXVDElBwk%0a%0a1BdoquQDG&amp;#43;dW7e6NnJiDYqEGw1JaGzei2PD6JcjvjGeMJY8/NcP&amp;#43;irgocxMscfW4Ox8L44GN4Y8FBGkt5EQsxNBIZAhGgnRkTPBGPC7JYAjk81Pem3sT&amp;#43;9AJ3WUwDFfSF4WGZxMA0YQt9jwQqXFezAgTlVcyii2bSmK3NidQPipjEnPJHP5zOSFVJ8XGSSn45xaD2X4o1gw2OlYyCTK3xYKQlQ0ERNYzWMp4uxVOnE1dWJTT6ggtHjQE1MmFznis%0a%0avEM8T1dTHRQi78aoTSg5M05MTTRwPXIxGWhWSacRUYeCWJnFJK&amp;#43;afj6hOfEzSSR6&amp;#43;VhWC98&amp;#43;Yg0AQzUe40VcEIskyKlQGFdw00tqNaH1p9hRDC6SvaMf0ygVVfhXjoqcZhW7EhNLZLhxBELOkxVzOWByCRBFFhUoCmQxkNDiHxMuTiCyo7U0gTbKf&amp;#43;H39OvY0wgAe5SQBP8ERTkA&amp;#43;R6ABERqBnSZgH0x9MTYBbB1MOYDwSvTJbynkiE5FGriiw/C%0a%0aRt8oPJO3mjaEx3wQ924phMGCGw66zYTmLLaPGDZRbhKHjeEiPQe9dIp72cI1RGhM1gxE4yJNRlacuDsFaPLYMkkXGU4D9iZ1PRPoD1ExcOYChDVcK3x4fTgIRd/I&amp;#43;4NF4&amp;#43;ArFwRDTEwVz1ScTavzCT8aaGMZd6/fGL/w38HGPApgkgKQiT4Q3iD5dJXaJMM94o5HDu02kIREI1ErH50QiyuOZIqlpwCxEs9&amp;#43;DKWlNCiMdyFVdgoe0Lml2KPlUFtY%0a%0a0XYVUROVOFQuSOhekmQdm3e8wq5TifKF9okmbk12BZDbLnSQBKPJC5p1ITNPTkFCWJjVoZwRKyCDwrcpFj9otcQjbFM9Sw0Yw9RCdh0RIrIqP3dQE30PAT/Qk9wroiaOOPSClFZplIB1MB5CxhsALkCCJLTGAHgBugd0HUwDAbFIBkLiRKmEincUSKAD1vChM6C4Ze3wpTZIk6zKoFIzuLWju4qD17jCZVsOw9/fNlL4TNHARL0iw/BYKxSjIm7W%0a%0aMdaMQBHsgQbZ7VQA09P70VBIVXDFs57IqBQdEM/Djw0TtLfMDS0/jBpQPi9EwT0xtT4gJzuDv4TWUGVfgxISZcLUnCH7Rl0e1JssdeMmMhwKYpAgfj6TEOieFiKSwKMQEoOUgxwZKY6Ao1IwY2kw1ClYxm9lF/LJhniK&amp;#43;LSmEJFWYJkVc24FjQYwgvUwOUYBCFQi1ZfzPrjAT0jEdJ387WERANML3CFLmAqgXAAGBnAIQH8pcATYCsAfSdoH0xQw%0a%0aIYA&amp;#43;QPkMYEMiMw&amp;#43;a2zD&amp;#43;IqeiITzdaQT6N02WuH2J645xWoSBBVuOzJqU7xQfSG41hKbDGUjhLQDdoqYOHjuw7AN7CFg5QEniNwG/nJwgPdYIgYrjReMVAOdNinQk142nlUTHI&amp;#43;DMYCFUxGzAdoXfeLh9D4hH3VSgYzVLpc8bHDMRiLLRxMx9IYsvxLRkKQJIJdRXClw8s0fOv2Gz3JeQP09aM7m3oyg6LDH8RFTOaRM4CWOiksZRCFNxJwkMVLWw%0a%0aM3RPYKaF7YtimUYJwKSyaEnDPmm45RQsaPdTeZTxmi4zVP/kZ1kkTzQWFNNGvjgNWKDTif4qDR4xZpFybnUf4Ohbkl/CsbYqMHSAU4dPKipfdl2kwwUuXyuRsg/QHaBSAGACgA8YbYCRgBgEEAGABgd906BlAU6JMVSRD/160APRIiIT//J3FISgAzYPEjs2W3y2dpI89MWi24xhNCzmEruMbCRgm9LTNtollK0j9o/hKVRP0oRIzgmjM6MMEKPJ%0a%0amX4NdgO4GejZLbLLo85E6mDaTEoU4GY8VEkFzlSjg/cmYD6ddyLQzasjDM3CT44BJwyUXPcJOUWnAJyA0wk5/GtTAaMoR5cyhLlzKEKbdEgxM4KdEmRMb9XxJKBbcqGj&amp;#43;COrBQMJ9YkzmyST6aYBkyQRSSnGmlnlPMESs7gDJCSlthY7HWgCua/jTpykRzTqkA5INNa5ykKSgyZB&amp;#43;FaDUIM83RkjAWkC/g&amp;#43;VzXcMD2zaVMyKJVscR/ktcNpfLkPN%0a%0aGxdJSwI9Y5DLK5vZR2kr4LXTSBFo&amp;#43;OFpES9EoNihRV7XdJTTl2Ce2OgS1TVTKHT1M8HOjiSgTWnIjdMh2wgAfSfABbABgIwD6AoQYgHoc5gGax9IkgNgHaAWwCgFfkS4uoNmc3MpNSrjQZGuKACcrfzGPTyw09PpzA8RnOCzmc2MzCzvdelMiz3fJlP7iuE3nK7CsAwjzmCeUvY1wtf0xPR1ECWExm9cssv&amp;#43;QLCazRSX4oEMCuBlTLgjXIXCtcyr%0a%0aJjdlUr0Tqy1U4&amp;#43;OXMRPDDgsSdU7DLfYTE0J0vjx0a&amp;#43;LtzmCgHG6zeGAAiFc&amp;#43;sq/FcT0YkQMsSiOIoTLQSMlXmJi0gwPOii6MxJMfCZXeJPpoNbCxhsZJOTK1iZfEcTjMRYIwKEjpjGY8iMY&amp;#43;oATKMQB&amp;#43;DLz6k5st&amp;#43;LJNLaajHyRgmFRk5JJLPWichLIH0zGkqcGNxww28c4meUzVEcWmRdIPsTvR0lag0KRf0JkPGELPWgj1pzEEIOxwV8JJmTSE%0a%0akXKGUMuxFUK4p&amp;#43;OX4V&amp;#43;SfQ0HMXygUiqIhghINfPjiIUyQAGAYAI4FpA7SFsCEBHwcop9ILSZoDGA7kBACMAsYA4xvyXM/BNQBRpRoP60ezUbTSIAzF/PIsZo2nKkjKwluOrDf8q9I7j2EtnKAKOc2YsfTuckmSO12U/D2D8P07lO7IFgmgQQKjjSNAGgqkFLzQKQMhb2uMrHd4ChV6uGDN&amp;#43;1SshgOxYKs74wncfovXIuCeeTDL8d6ChDif159TF2%0a%0a1kMaSc2gReCwJ2xdhAobJCkJ0aTyF5p9dxLABfcrlk14cfeEqJsJCtCgmzUQmQriTqYskzdS8kLqFqVJVPxAzkVxVSgSI5sxqFlJlWE8wb59hPJ0eF5aN2OTTt&amp;#43;YhIwMepZky5Vpc01TToKpXVi2JhNd5KSk&amp;#43;xY2gYINA01V5krYh&amp;#43;1aQaAoJC5p7XNggkM06CLg0DIMWggqQCcVvEyL8IiOMG4NM4FLG4REQosnSuvE4H0VMc0gAoA5gJGHuQ4A%0a%0aegH0BsAOoxqAHoPoGm8CcrMM/8cUtAFfMei1ax6MWiLzJ8x2g9/NmiKw8lO/ygslGT/zDnAArmNhgnuNZyli5lJWLcPNYqD9ZgpLN7IlwPYpLNlqf/kr4Zc84r2JxUwfBQxDxG4r7s1EzXOwYni5KVIK7qVVJaULJT4uNy0dEKIQ5wQ&amp;#43;vwtyQkzrLfZOXaxKIVqMwEkmyEkrEtDzNzEPMfDmoFAyjQJpdjXzAoIyxjbhJOFihKSmuJIop1JoIzjL%0a%0a4UkjDCkQ7lLoQX4VMx8WyLI4iBLyKUdKERgTQwlwjtI7kLkHIAERboA4BaQZQDmBmgbAGIAkYFBLkBNAIwC3SxsHdMwkCUiaKJTIoElIbiyUmhLDLJiiMumKaU1aPCy70huLCyHrHnL2jICg6IFytimmQWD8AVLJNQvkwYXlzssu6PHU8lExAs5&amp;#43;EMspbM4M&amp;#43;4uZ4iCp4r05ayohg4CGy&amp;#43;vUMSsaRgvxtWCgENbKS0Xsq08mGIoTBoxC6DTKFoYq%0a%0aJwAMheCJxdzvqB3PPhxK2/GBLkY4SEcsDw&amp;#43;y0JjKMjSoDz0SuJxb9pszEvHK6hY6EIJEoDwsrTJKdOlpxVVU2meEKMYfGYxEFa/iAy4VBN0&amp;#43;TgVbAjFLxaOgjUIJEVOnEQ5pWqCAxS&amp;#43;cBxGgUMAsEiDiND1N0LI3QwsnZOaLQOxw9GQfnpwnk2gks9TPOSjmyzIcZAsLKQ2KFqSCWaREpIN&amp;#43;bYHNoVEScUIJGdCYSyYQWD&amp;#43;JtjuEf2hDou83HGLk%0a%0a58o8tKiwc3IohyUKd8CK0jSiFPwBWgfAD&amp;#43;BNABEQ&amp;#43;RmgC0h2B1MUgAGB8AH0gNBC49TCGAyPJzOmciczooaC8wpazJyBiolJ/lSwoMtGKm4wLOgr07OAIusosuYtOcGUkAuiy2wgeNZSbnBLOgL0yt0H6jRcgVL/STImlROEp2C4yRQiylzHIIRkHbKKzbRErJor5U&amp;#43;iu0tZWbRJqy3iwy0NyqC24PbKm9Bhn15oaWQK/AwkqINLRVK&amp;#43;dHCdUS2G%0a%0ai&amp;#43;wBCoDlr9r1AcowpdK4POoUFC6ziGxiDCZEH4KKItPH4tIDihIoEjd1PTpNDDyHPFkoZKV845DPYVwJMpfVhVyzQ7LlGg70Fxk2JKvSegqRJklVlLhfEJkOM5Xs22g75yKe9Gyj48ixkX82kPaH&amp;#43;F6vEHI6qcioCz1LIRfIsvLD/FwjxhTMfTDxgr8zQA&amp;#43;QFieFKGAHkVoAaMEANgEwAh6dovdKoUHhNtwjGWkUmjKc23RGLSUgLIjNxHJaNgqW%0a%0ac2lJYTEK1SPjKucxMqetVit9M5TNimAu2LeyCNgUFzo8XMXx&amp;#43;SY2JZJZJMDIVzuASxn1oZJPAtY87iqGqrKYa8UiYqIderMoL2KtGpCdyagKO71bU4J3vUBC3I0Cit9YEqf18fPy0UD4nWQrqENaCQwxxaKfOXfQU5QVUiZpwItLk5yKIKAnB6kHA3T4ki3YWNjJoIDP7FtEUKEHU2aQgjWh9hM0MhVnhfPX7TRfU2u1LHVLquXzKbHI3rkiijfI%0a%0aGAxgZQCyB2gboCxh1MaFJgB6AZwARFlAVoDKCPkNgD/KtQfYhDrbQ3h1TUKc7zKPSJIo6pDLIKuhKd8E6//LTrAC66uALjnUAs4ScPTsOmDnqx7zzrsK3sgQasysS0Xw&amp;#43;SMwX2rfnEdQwKTi6FlnIUDFRjrcqK0F3ejKyl0S74FhF4vYD6yzNAayjc6gpR92C58H6UKXY1Ol531ImpLQYSwmrUrgooiD5dD7Xit4Z4Yugr/gcfaGKnNGWcbKb8MS%0a%0aqbLnrJKIUm7EJac9A0DFKVRjGgNCEz1rEBa7Al00B&amp;#43;WVhSRYi9KVjyUpdoW4biSAfmyst3GoXqqQrOggv5ekHSgTYxpHqA&amp;#43;B7kq9DqgZpOtyuLo0YJhmklhQ/nNUFKLjPKQ9OcglQxSKCd1sCjoJco00OfYQkAyv&amp;#43;dxFS5zUBwwwJS4etzLhHaTUvDjnxKONa8UTY8GhzYEq5HiAFgLiM1w2AfTGAbaQeICgASAPGHUxsAJZsQbgAwbRQbmg0GQP%0a%0aTvMlwoOrsG6Ort8v8/BqpTIy13yOcdtW9PZy4ypOr7jKGl9KeqoCuhteqM4d02Ya/rd5xXdwqt&amp;#43;ILL3gKyKAUakNQPyQhGggq3jEMrvlL5dcqRvILWK64OE9jE7irPxDGncLkCBC0EK7Le6rrPRa32IDQptn8ZE2xIsau/AJaZKrfSxqwklhhxqj8HGrJd8a/ss0rBKulufA3cy1KhMRKry1vwmWuiBRJz9CfwECihcm3ntybSKOnqg8gytprsS7%0a%0agi8ZLaDhDmF1ax4TUIpONVlJUwi2IvHdClSZDdjO&amp;#43;VkJ5LQkAWkyh9&amp;#43;IzSmQw&amp;#43;T4TLcz&amp;#43;ZSif4aoEBlHEHPFXKkoOKLszpLLsqwo8RypUqwKkQ&amp;#43;Czw80KSv6pw1tQQRAxUeM0Bgo0PYr&amp;#43;VmwVKDais0lGEqGC88oErnpopYnlSah83ZYVNVw6ISny59OaQxqsLDY22ak2kGfhAxWSZItmoQoaLlEJfODsVSa0pGgjiQ1OFmq0JW8IKEWhuOX42sh%0a%0adhXpBUIP0U42SL/slyGlCLPXSm6bX63ptPLuqhb2FcOrcFI3yDAU430xNAPoCqAoQCgB9JGjUzECI&amp;#43;gCcBWbiSiuLOL/TVb0DNAyvZvAqY6lO0jMGEwhqjLiGmMrFEFiy6oTKwCqhp4Ts6jYswr6G9HgWDTMPCu4BGoQbCFIq6iBljtZc0G2pgPU2kjwIgWzeI0tHirwTIIZLIhh0SVUqFpkau6m4N&amp;#43;KbElDmfxUXCdFuDz4nurQ6/8D9U8TMWr8%0a%0ajsToSweqbLBCz4JGyX9aBA5bz4ZCkkqX9J/RRqXyWjsZaqOnDMFbBs&amp;#43;Ty8TS/fE2r9gSn/WXsf9CAx0qZ6vSrsbUmNsWiKFCJaGEIQBDW044FODWxXE3ICTWEpPNTLPdSdWsyNdpg03UW1dtQJ9CY1BVAtNS9BsLz0BsaQm5X1iAoAbGyczEPn3p0LXInFq98&amp;#43;UN3Tl7GITh0ZbAvV0r52uCcU2q8SjhGjBxCQ/kGhvPbmlEoqCEBQpw7K2n1T0J%0a%0ahTerPEEWHg03rP40GpZoVcvxE5VO&amp;#43;EUpQd8KMBi1Vmkmfhxw0Cc1T4QbPC2O87ojOt1bgjNXSBoo5oVPVlYCKE4z4I5obRhAYeSDYV5VJSBQh0QVs5kxtUB0&amp;#43;fOPKdSpfP6bF0UerSDJ2sMLtJaQO5Cm8qgIQD9YhgPGDmAYADMAAlddZQDGBxqAOvWqPSnzMtQUGoCoAC9qyOsOr9munPGKGc8MrOrr0xYoQrLm&amp;#43;9LTqUKpMuob4sh5q5TX23Rx%0a%0a/cPq3tUFTbuNkvrqeGgGswKHojTTT5YO5S2Kz1ciDo&amp;#43;NQW0jWydcUPS10TLgj4qRb5GrVMRaChXHqvjIxVGLCTXcgltZagwwSD7KRlQjsvBkSkoC0aYnUTpFbbGkcrkKPIeqAF9Mufknz5gm1WgWh6ScKoi945VyEagi05DFiZ24FaEK9SfNUsjoJCJIqkJ8kE1UYoccSLxkoZ4tbLUgk5d5UL59ND1Gp0qAvaG80/&amp;#43;RRG745&amp;#43;CnFQx9afmkHbRu%0a%0as2pPLdSs8uHRhcG2soiIASME0AhgKoHUxlACgENwDQLkAoBNAA0BuRTMUzGaZN2ylUW9htDZs8y9qg9ppzrusYtDKjmuSPPbTm6MpO9r2q5vgr3uzOuTKn2tMrHjeyWawB7DHL6okSAMfQuAyxwostlZqNbopei1cjeJEbCClutHdgkXP3hr0e94qRru6rH27K2y/vqHq7LDFrw68TAmtI6dGrFq0rLcnjrvjZ6lnvnrfW5NME5kpADsn90CbDGQ%0a%0aciKXmX35&amp;#43;Cbw3MjtCQaAo0n0ak39ppZJ5N80aKJTRz5Sq3KrUhoHFmUoDPiVBsoIPXNjAp4FpWRF9Togkbvaq36kXXt7uqomnUhnepRSSA7kMYC5AHkB5HKMxge0gGADQE4DcIlcZwDuR9HVar/dDuqFAwgFqEOtg6SLQYu8zfMqOqPaDm27qgrT2&amp;#43;OrRk4KznJIbPfLPs5yc&amp;#43;yYKzqOU59p2MdHNURd9&amp;#43;UwHrL6a6z/ntjAu75q4EIesGxfRhEP%0a%0azFh7wa&amp;#43;Hub6QWqDrb7MNdupYqkOxsqx7vg/HrEgsOgtFA0saCdDCTcMunqZdae8JMRKhCijLXsIYhguCS5&amp;#43;8ToX6FGSZEFiowZHo0I3NQ7H0hymytKH8&amp;#43;aTeq5UJ3ZNrv47k6g3jkNAlmvUQFCQlXk0l2MDDuU1bNWmg6NGSTiUZ3GN1FlaWaWRCq9qTLqGDSjbQ8v&amp;#43;Tbe8bo/r&amp;#43;mkRCGaryq5B9JaQPGCxg2AZgBOBiATAAGALSXXTYAERDgAxT%0a%0aQwBBM3bHIRNimQbFLZoDKwK/zLIGk&amp;#43;ylJT7qBxOvgq6B2Mte7rmu9tubB4&amp;#43;5owr2B46N7JutV5redeAWqo9pRw27iLK2SHAblZwOmQcg7oa0dwyRUe&amp;#43;DrIKDc2RuRqzcjsopswooSsH6jG&amp;#43;4ZstsWqhCsTKagz3vCJOmmuuUwMc9Gv5U9cqT6LGxAOkjdjaXlWy59WpwxXwcBh0OQcf&amp;#43;UKCv47aApW74AqvYU3qRe8Nufr1/HporlmvAMPy1jamb%0a%0aphy5uboDxguQVoHMy2AGACqAYATAA4A/gGoB4B6AfTCMBiANoowHCco3U6LJNakWItQZDayADiBq7tIGbuoYYvSz20YaIbph57vmKGBp7qYHYslgfWKC&amp;#43;jgb2N6AT9oFgAtfjSIr0Cqvp5ldaRJGlSwa2dQcjIa0RvgVjoZ9GqzXirvsRqrh3vtaz1BkiGdGeKojr4r4WyAlhjNlCweI6F9XRpp7yMwMaKEwEIwbHbQpKxpRDqa0Vt&amp;#43;G4DEBzshv%0a%0ahDqAvFh&amp;#43;NOTJxjkpk1q5QGTzTlNVWXLjPQOpZkrZoxSF13LTtCfQ1MQjNEUlnEpKDN0PEwHBUyj5fWgqVaRorO9FrE6oWZOowR8PPOmE&amp;#43;SNZOXCvObAklpjIOt3Khrev/uHbABz&amp;#43;rHaf6/qo3yagAYDmAuQYgEkBaQIQBgAmtZoHaBNgVoAoA6RjMGaAseA7u5Gju4ii6Hpa/ovB701bzOmiRRgYbFG8G4YcvSpRi9plGJhzPqmHs&amp;#43;rDyu8HqiAp%0a%0aobvu3Oqeb5iT024HS&amp;#43;xAthYekBaAHcwerUEBr8kNaWp4TR2VIR7wfOQdI1qkSRvllpGwIRUGNUr4tF4uWnH07Kn1f9VRjPc0iYEqf2bRtH77JbT2sGfhi&amp;#43;wYnZXRCMMZ5XePKpwlOSz3EIDWetyloCuZ5TihfaDn0liNevKH4MJVc4l8hSAoJBi1HXdxHjylNIZHHHch//tBELah3rp7pMUAa68DQco3My5gKAE0AkYD5DtI2AQ7gV9MAD5FIAHk%0a%0aIs2PGhoh7hJzeis7qdxn8zBv6Gc1QYcfGJRqgcW1Xx8Yava87VOplHFR38bQr/xhYaOjHnBYPWBVhj&amp;#43;WNpu/HZs4a5costEI1pM4G7s4epvorKW&amp;#43;sRvQmaPNgKwnEOnCbYqUO0fU9HqXRRoRLaWkKThpiW/urBC57IMaazbEic0p6Sga3LUaQpKAlY62WswbBCqbSMfJibG4csMqKSCz235loc/nEJGVRK2EppcjQhCq1IQfg8g4mI&amp;#43;uCRGVJrjF%0a%0apLaCqDyS8kFRnzkR8HKXl61oWCL&amp;#43;FF2SKDbg5Y1mhi12Q2pFN18nQzoFotEIItTkHIEQlJLsrDtO4Iw6dVsI0qAjypq77jS13IIJDcNxZp7OzWNbho0WvOUnUjScYm6SI//HfBQKGqK68MwVoCRh1MTAFDAhAdoHoBVMPEX10EAJ5EIB6AUzHgLORt0qwH3ge6e9Kai30ukFw67ZuFHD2&amp;#43;8cT6vJn/JgqXxtPsvaM&amp;#43;wKcrI3u78Z2jQpuLJTKR4x%0a%0aLML63QQ4Fin1iNOgSIxx/6tgmRBxXOopMmXacuJ14tPxQnnItCatHs&amp;#43;RQewnC/XCcaz8Jg/XKnheSqZRK&amp;#43;pjDnJomXBjoCd79MJPv0jB&amp;#43;/VvCXUr4dsHaFT2fydNCPbJV66kFmrmzq8r4XHAro8YTMjvhCg2MYqSVkIUp6dISlrEHWxCJ4oVSpK2FJ&amp;#43;Syk31paui/neV3hbEe9CtS&amp;#43;GYKHEZkRFShtJiFNDBSATQBgBVMdoFMwMwOYHaBMAO5H6s%0a%0asYJds2AuQDMF/K7JikTxxzxx/NTU92l/IcUSBtmeOrY6&amp;#43;hJ8nJjHmbfGAplSIFngpoWdQrRZ/PtHi1RhYO7mS&amp;#43;i6KZkv5axDengbIsv5IuSF2gOHsp2QeOHSNGfg77bRhDsuHkO2FsIzmplDhw6&amp;#43;&amp;#43;y2YARzZx4Kxrl7L3IdSDB0moZdFlA1MZsGe6xujHme0aa9mIF1L2QcYrATicYOxAJkJxu3XvjLTJ/DqVZiiwAKFDl8&amp;#43;QjXtcue1wzWTAHaX%0a%0aMcqVWbLkUoJhTnx0hkmdJGEJDsGpHakyuETlN7u3Jzr9aGoBlRlLIkAllcN4vNSlhnGrc2patP6ixvHbiR4ZoqAkgTBJgBWgINiEADQO0h4BCAfTGwA7kC0igb4gIYHTD8czMMGje5&amp;#43;yC6H8B0GUIGGRLBvj7RR9mZOrKBpnNT74A2gbnmNoxeafSfx8ArCmvuiKcET5gjVE0BtQTUfJ4zabwMKykp9At&amp;#43;bbjcDDLz&amp;#43;hJCfwLtZhDN1mToX1Lg7O%0a%0a&amp;#43;2&amp;#43;Yx6e&amp;#43;0qdw7qp0T04K2Wa2a/J0xKTydnUTQ8JIgepl&amp;#43;BIhgSsfSOV&amp;#43;C9Rsn7ia6pc0b/R6yStSqEUmJAWoxsTqYm6ajmzFbRylHFbhAMCzmkRgvOTnjlsq6WUb5M21SCVNOOUaG6FrEW1xBGFhXREp4BCT/uMKl2CJgiZ3OGqQ/N4i0vk59w7IJErjlKP/mIob&amp;#43;F/piQmkOnBQMs5lP2AEyKN1DlZJ6bseOEFyA4XrSbNP4SHyE3LSHk4SCEI3%0a%0a5oEFZJDdEwO4ASWgmxUxxWmwm4BOBybe1SZy0R26cbPdy5jfNpAuQeMI4BJAfTAGBHoTAARFcAf3tDA5gewGUBC60oBm9dFxa2FUruHdoFGiUxKcgA/MjyYfHLFuOusXuZ2xae73x/mYuZBZpxeFmXFledYHVRpYYqBvFo4F8WRSQQ3dFFZnzLgnZspigympBrKabqLRoHVI1GcTCYBNDZgGONm5GuFpayMOAjrCFtBuHWxjnyaBHf02OOCCMHUO%0a%0aSjg4r2WPJak8xXDRrNnaloMVCStBsjq/YJArGjClBpmjOGmcS/SqScJpBL1pVgoQHLlcNNfjhS5e&amp;#43;VxnCa6YpwrOF/ELNPdTsoVWNRV24XpA34yuEgi6gUDC6Yc1q8hsycMOVCjWqQlE3FVH5W4IfO/bHB8cTdoeY6Tlko&amp;#43;x7LgNi8kdgnM5dhQGT1b9GDwYpLQGHWm7a5yLVS7MTjfTrGkBBjEd4pGcOFS6SkmJnBj4RNbtZSaQu1Wj1p&amp;#43;FzB0E%0a%0aXEgyTHBp3wWcdm64E9oDGBJAO0lwAo1BEQzABgQgHaBYLfTBnT9MZQFsnKZ8lfaMvG4D2RjLgIxdpWCJVmcZWLFieYIa2Vi6tuqrq&amp;#43;gc/HGBpeY&amp;#43;7H2wVbXnhViQG8WPQGWcXwlKFgnoJpLEJYHwJCRQh0RVczWboDol8rIvmLGDpDhqb5i4eSWHR1JdxsaJmMXRcuKscwHqGNkfvSWey9Gv8Tb8IwaicyelfPZaCW4ntdG2II/CRi38YpYvUR9G%0a%0ayxfIp6qQpiSYxxidk3mJxQpUQxOPfgcDNOvJAEISCUIrLh9Z1L0a4fPFyF7c9RcTOsQq&amp;#43;BSmWE8x11yi4NAx0JmWJY5KT0oQofJFIxkiupBsZQRloWEJU9GaEwwZ&amp;#43;YDG2Ec1m83eJvAh5O8hJabRjihmFN5O5CHll5U442MBwUeEqcVqAvR5NVmWJVN63pCaRPUurxASYVoufUnR2&amp;#43;1n3WSRiQFUxOgaCAxEWwTAHZHNgDgDmB&amp;#43;6UMFaBqt&amp;#43;gGJF%0a%0an10uJN9TEQSI2ALsyABTYmZhkTj6WRBPvHmT2llamKgNt33Ibk6l7qQqeV5Ytz7PusWdoafuoCbRZikXxa4oRaFJmlWSKoDttQf0bRBGjIlxuvNGcpy0fVs94sjbrKipo2ZKmH5sqaY2aC1qYe2TBkxtOVq/blpJqWloabAWRprpdZ72pMvOoNLk1zyCZwqgpROgk5xQtlpAZMuEk0nIbnqLly16vMIoSxmJDlZM&amp;#43;Oikp9ehDdbUy7ehGfy0bbJF%0a%0abDDWgA0DGAjgZgFpAqgPoEkBSALoAREDQCZ00AOABEUwBa8HuYpWAOobU5gqnT9dTVjF2MnITf18AM8nmVyedZXfJmef8m&amp;#43;Z&amp;#43;ee5XHF&amp;#43;beYG8&amp;#43;mDYln15rxeihfFyQhNpjEY4qCXTijDesd1CILh/8lMV6OkGz5o4db7SNUquvnIWu&amp;#43;Z1Xrh/gNRbqGATf6y2IIV2hjmlvuviEgFijsX0eOhDmQpuN1hmdWv2OfSxpeslRuEDoY&amp;#43;3hJp6J&amp;#43;TY6W8%0a%0a0&amp;#43;zj/4w&amp;#43;Sxj44uKG0P042kb/gbyExmPh3EmNRacGRY0agw7XBCR&amp;#43;IOF5xexCB9XCovlRVSNSKuUNsnWPIvFFEZzfhG3zCHds82mi5Ip0GMZihUJYItjGknEDFXNSrE99LgUYsVBKAOEV8RCfCaPlOWz3qIjXDHUKoJpdkBHY8w5L1j7Bc1TAcWQ/ObwjcRiX3hX&amp;#43;momhRn18sMJOBlAZwCMA6tngCqBNgboB2A7AJsH0ADAdSGvy2t2/P4i2SRNm%0a%0a9a0G8nKJTTFobfMWRt3bysXxtyXfZXb22UdIab2kDZmGYskWeVHUy2Daim1d9rCQ2TUZhTNoi5dDaLLyoXvli5T55VbO3VV4yq/QDZm7e1W7toEL1WaNh8BfmcM5CknNvVyjv9ycMqAiD2bV4MbCF7ePQeUa7Vx7fL8GD13ap7ClgEKFcwk59T9XBygNbHL/tuoSoC03RRM8RVGOL1UlP&amp;#43;IpEpxs9nDUriExrv1T3js32f8g1W9fiDo2&amp;#43;XxAcQpK%0a%0aXxBFtw6Rvh1rZkpUpzXmMKW2SrDbVB3woNCVRk&amp;#43;EeKZzbQJWSMUk&amp;#43;zHzHwXycFoAaAR3NCW/jcYn&amp;#43;PiiSZUMNJhTa7lckg9b4uA/bDih2vEb6bEZ0FOJ2XCLGAGAHkVTB9I&amp;#43;gLGFIBJAPAAeg7kZQCOANMC0gzAPkdAe0XnMwOo2Bx&amp;#43;Klb9NgKq3RfzLu4XaoTRdgDeOabF4Dam3QNyYdm35djOsV3Ft1eZV24N9AG8X2dreZLri4VWiyZnK6VZy%0a%0azwM3gE6TGMEg9O3z5y3eMr0pqg7t3aDrNubKRD4ft476pm48l56/MMeEKx6nGmj32OnT0AWbLflqoQvjj4aHLA174cpM9WESjWXJxVeOJJpSfWr/tqPCtrSGEdoQi78h/EKBZl8qkFj4oQ04&amp;#43;pR2Z/fQw7EsCDW3Tbv2mXPX65&amp;#43;WpRqEyuY3cUKPmpn3IoZ/MdrsR5OdhZ8YOoQk5NscRzI&amp;#43;P2px/prHaoSsRZKGKgXOK9qHoV6VDAKAegDgAPkU%0a%0azBbALSdoDtJ3eszJWbWYe/M5gUh3rZpXujm8fcmRdplcGORhqA5GPzm2A7A2Jjr8d5Xl5lA/FmXqyWfg38oXxb4oqFp&amp;#43;pgnqzHhp5lNoMzS&amp;#43;bJB00dgztJMg5OD69m6IKnNV6g/0TjLKjadG35kEqfm7eF3bE39V6hnR8&amp;#43;Wtje0rQFtpfj3xWhqui8NpQjHcQEt8Jt75QRoUpCQ5OpdgqsVWSVpFsyktJFJ9fXcZe4QPlcxFVmmSRI/SO/kuGayO%0a%0aT9xGbHb/qVGYhTw2YNXelNAOAARE8YHYFRWrS/THwBA1KAB/Sv9joqO7vwZU&amp;#43;53nABKvGjU1f0tjIR5u8b/WwDqsIgOuZ3U8m39Tzldl3/dUY8QP7q/lbNPltwCctOFj0aF8XHXQKFi7pVv9r233nYL1003T03aVWDji3dymuMoZP9PPIs45ha6D1DoIyfV6fow4MaC1Y&amp;#43;OQpcmyRj8aeewgoCEOPfAXFD/wKli24HKR1VkiYZMHVDssaAJPv7da%0a%0aEVdJCfHiiNuQ25RGQx/C2iH9UmiJAkNdRNKVWEBaMFcAyv43HYXz8d4ufy0REEAZDDbaq5H0weAImAaAHIZiKRgjgdTHiB6AD5CqA4AdUF4iOd9oyowOjmxX62JtanJAOx53BrF3ANvc7ObUzQ84cXjThXaVGldlUbQP9ItXf27lj97w3AUm0wLNVpLOeJfP9sVFX6TcNzKa1nDhxHtiX&amp;#43;aL4nOHrtoC4MSQzp7bDORF7HvMTMl63l9GeszqbBCY%0a%0aLjjvtWsafhm4PAON2eFbpC1C9jHM522i4zrDa1RKSJayuN/RqDEJBM1bOFOilzBof2njcTGaShygJWcXrJUuhSxnIJgR4kmvR6k313KgziTVWNpakNzhAVaT7hEGg0kWQ2Og8GaUqBzf&amp;#43;lSfy2hF/psXPpMQ0oPWrkC02UAMwUgB2BCAMYE2BlAX5E9sjAHgA25NAOAflPc84DwvHlzp3CHntmoXbMXtLz/PIHk&amp;#43;58f0v0&amp;#43;2Rxm2gpky6mOzLmY&amp;#43;%0a%0aV2LT1XZFW/gP&amp;#43;iwPu8CQky5vvTY4Xjtjl5fBbM9DWa8v8Nny9QmiNi10hvkFRJfI3u&amp;#43;yjfu20l9TwkOWNmpduO/R90bSEKJmyxfZvci/QJajBoDVeOwzidAUqOD6yQgokYryV&amp;#43;P5DzpZyvsruTfBORafEKEoMCL2ga5HDGLTCQUM5OdVUb0CVWAdq9xsSy5W0lORkpSy6nV5U8MQKvdl6&amp;#43;5JLwxX0DrhsDqdAJFnhqDbLguSq8gJmeFS4NUvRvLs%0a%0aw/gNYTeqLWZOeloqRqgpW/gm2EL0WbFi49WRRLFZRKPVp4yiKIBJ/6X6vLdbOOT9s//hwSrs43z6oD5CGAxgO0h2A7kIwCRhBmTOKRgEALGH0A28H6yUuTfAJkTYaRS8bFh1Lq8bjsNzzU//XRt8XcgPp56A4QODT8Y6&amp;#43;uINk06g3X0/68ebrztbZ&amp;#43;ZbLqP3WJ1oQEYy7AOvXZ2GIBKRDU2EbxVe8vzd3y9RvRKG3cKngr4M9xvX54m5x7SbzE0J%0a%0aufRmM8ppybgfT&amp;#43;phNx4dBJ7eJ1Yr8bLeK8sHmbr8nt4g9y1aD2qc17e70y0KJMyuZNnm4U2jIYNNrEkkfhoMQ&amp;#43;OS6h84uFPHA7FQ5mfhwI0pLBf/uOKFhXloomfPjIp/&amp;#43;Qr0tUK6u1wKUr&amp;#43;ZJD1ZFpjpqWELPXUWBUOuvBnU5otRRNbyknVfG5Jg0iaWlJnlAQmjo8CVrm9kWFIjEVcQWXVnSqeoADA74JpCJZtv8WWjEcHwvaIxylwkBgm1ouQ0%0a%0a&amp;#43;OhWJxsO4J3T3IobyOrkWkHwB4gB6Hoc&amp;#43;gI4CgBl2zoGglQwZoFIAeAUzEwBMD6c9aP4iCW4XOLIGxQF33gH9YevNznS&amp;#43;1PXruu71PDL&amp;#43;xZuqTz9Ovva7m7SP5zFh9A6Buh2UG7yynk1uFg6qzSFYLKyeARC2JLNBuohqvTw49/Opwhe4DOl7oTxAvHd6C&amp;#43;4ghXcGlRiwxym6Jid7oxqPxoYidFE3J0L7fMGxsipbYgjB8mzKfISowf4YpNxnqyu%0a%0a/t7m7afeb5JOmF2MiYSAyOFq4Uq6EdkcJqg2fbkP4IY&amp;#43;ZhW1oLNlif0RtoS3pUIkmkEeWgHQxJgkIeFM/nM3s&amp;#43;TrbWTROG/nNRZ4LRJTTYi3eo9lVWHadnEAvJsTqgaKWcSFIIhxZb4IbzQt2l7p8x82gmeNXts3de2irjnKmzrIryH36grc/q7CYrfEWJAE4CYdGtV9x2AagJGD6AhgEYFMwBgeIFvLSAYuOMfqZ&amp;#43;IiASFz//ZVPpBQUe8ybHrS%0a%0a7senr8Uc5mHumYpgOjLtx/1OQp88/MvUDuY78erTo8d7vCA4uCkl8VXUZAzdti4q1BHB7imUS8Ng4ORudZue8P5Tjijfvn0n/4Ld2XtqiEfm8HJlxxrPVuCmfvZDqmuTP37jpfkLUzucnyQDEcktQLuamjVX4Le6L3CK/7DLwlofPWhbsh0CdqRVziLji7G7AXha5Ln3wYoYEuKgWkHUg7SD5GUAjAO5FocLSLGB4BVcZwGUAdgMYCEApz5o7WqT%0a%0axiel&amp;#43;e6Zv&amp;#43;&amp;#43;LvQMolKJeE7Ybfsfq7vS6cf9zlx5l3jLlu9MvkDhl/NPO7wG6tOtF65mLq7LiRK0ov0LYbnplZ7vCUKMMd55N3G&amp;#43;6e9IOEn87YQxknwC6lf7dx0Ztmozi2aonZX1vQstoYv6g6n6WiEoTPJClp7fuOnj&amp;#43;65vOnmJFngwRjYV3Rsq6Koml5aXAnKrNVP2RaRjIacJOnmSTqAsC2MCLkUYwkJTnranaP58LnpH7i9soZkTs4v2XCOAC%0a%0agAxgPoGwAjgV8uUAHoDgD1wfSWADXh1MP4DjfSV10pfWTfOKCu4vla6/jwudmO3uviXyu63OJinc4peaBjldceyG2l8g2Ft6DYsumXqy6BuNRQJ9AzCCISiO3ddmuGxfcspSW8Q9oJcmO24nhdT7fyD51sEG0epJexvpXi48iuv2TipwzaC1e4jOlPWT9fUN7gmMKeWp5T/dzx3oZQELzGt/AEOL7gfqvu1eSpa92vxdy0BKjwgtHSuzVvCG4PIV%0a%0arEmfIT761Z5bN7MIUA5rV6BFqeClrqY8/vEsz45vft/4&amp;#43;9mUz7pYOFdhc2hHxtDKaF0KjOQsctcu3MJAH4SwPYVYo1oeL3x5MCHKG74cCmZLbF1DmqQ5NjGMWivMvplQyyYBOX5VsKHDSGcFVeZfJDBmZDLTSZ8V3Qg3U0pJ&amp;#43;wb0QjoNKzJwokLPioIl3MaQMRWxPh&amp;#43;QdAusPI6FVaUxysMi2jxgoNdhKjRfe/GM1W5I5qO5bzmlVHAui0mPdJXj%0a%0apTiPihkpHaQJcoI5&amp;#43;CJhs9zoXWgi4XDJB880MCas&amp;#43;K9TPVLh1uOG0rjhYXPKjA&amp;#43;UQjUxhv5UmpjHaPqdKgzlpFobWKK8i01vHJIWYpzijbTjNmm9SfzNqrmv33oF/6bNaAmn4uXex/celSAXwhgBiAIYGwBmAUzEkAfSV0n0AHoTYE3n43zAcTepmbYBQ&amp;#43;GZsbTVOAy4Yorv&amp;#43;jrU9zehjibYMvMZIt5pfUzOl4fb27yj4Bv5jtbZEk2X8RJHAOYz%0a%0arefPTi8cO2OfaZkiY&amp;#43;u34V7nDRXmJdRv7EDVaHeRPkd9Curj3cMd3uOvRv4Cg9/GlUat9fcPrQkY9CFj33Z&amp;#43;&amp;#43;IBPSDbQjP72mjqDi8UDckpK8yKeB88KQu2RGtGbPxfnzBEmechRHQoQBzSkZy8ZAJxJKQinteJEEdav47GHVVYw5&amp;#43;Xtuh&amp;#43;Ta0O/ZOZH3fxyNz93&amp;#43;rDCoAUo7AaKd7qOUBiMfACRgkgfQDGAjAEU89MyV9rf4jUuFD48zssVyYZF%0a%0a1zvo42YBjln51P839n&amp;#43;ztUPOUfA2FRsj&amp;#43;mOKPxl4F/mXm88mcRfoHuWo8r/g25ea4SX94bgO&amp;#43;pHVa6Vye49Pbi789nujjrxmtuLyQK&amp;#43;YqtVoM7SexPoTvHfdPN7b0GUaP/QqecMyEtRcT75C&amp;#43;t/5&amp;#43;qBfvNgHTC&amp;#43;37VVWYU6hZEXJOnFiQjlBDCqH9MIs8oLXIBgXGPa8BkJ4EClOPwb&amp;#43;vqwuCC68AXgAMM/mDBgBqcgf3lcg5gPEAEADsBiADJd4%0a%0agEUFVMPgBdcABIOAGwAeohPE87vX8SwltUMkOtYgDhqcmflXdwDmNtdzj393rv384DvKMYDjz8vHnzl30i&amp;#43;1Vtt4tP9kXUxcvW9cwLSoYHgv9thq28BYPOQHNp5cp7kjcZ7ijdd/t0IIWovdh3uccj8MvZjGoxs17lFdFPgT06NgE4BpqYMiMhYC19L58tXmu8dXsT5DkgZsEmJCoOKCIYknOq0yFsZpXDBk45aEKY&amp;#43;kIux45M2k&amp;#43;xKYEWCOMlWN%0a%0aBWMCuDkhekPJwkAbCtK5G2dJMD9gVriVt0AOG8sYFjBMAHMBnTKQAsYHMBJLpsA&amp;#43;gPgAkgO0A8YM0BcKtQDOinfgM5nQC59ni9ssL0NYyL0dbHjh8c3qwCa7uwCM7M48Ofh9cB/kacS3j9cy3n9d&amp;#43;fpW9Bft4s3/NP9eBpJITjAV8xUnIDUAA21W4KQ8FfojcRXqoCxXkccXEDaNbdtoDgLmf8bhnjcVKvX5TUhBdndhTVz7qUspPMTYQ9ueF6li%0a%0aRNsliWh3VlYDHUr/MIxjYCmenYDUzu2lDoNSdsDNz0MmA4dO2oZ1hbtlAeEL3xh1mv0ScGJRbWodkAVBGt1NmZxmKPKtXaNsIRwviVaKOko7&amp;#43;tohnGJgRe3DJwy&amp;#43;Eq5FYlKlaKFTg7GPHkoMDuUIMONB4/pYEFoBpBkthH10dqocsoLBFplmV0QWGRd1CHV0GQSycC5kftCIh&amp;#43;8x0nut5HhUA4AOpgyRgiIoAAMBMALaVVMC2B4gPUYYANgBTMHa%0a%0aQQ&amp;#43;vKckilSs90mkQMGq38mAR39mfm0C83p0CC3t0CuAYadm7kP9W7uR8&amp;#43;fmP8RgRP81tt2oJgeBMXtKcRPOs5ca&amp;#43;rbQEkOv93TshNlfoRsNgcrdJXpr8dAebMIrk7ssMkuh6/PktjlNU9jPi8Ca/AGN9UhTcTgV/gj8BldpNq6kg1ntNmfDHxr0GdBvGlaNLAoRRukB2J92PF5YIsppfft5B45BjgDWPOQnlEaF7GBoEV8LIhUFovxJrpBhHKgNp%0a%0asznkgU5MeQKcHMISoNJotVFQEiQuzQlgcHdWTmn9&amp;#43;QfD92zouhkgWC90ABuNOgKzs2AKphmgPQBE7hmBiAPphWgH0BOgKpgwqC75a/t/tKgeqCuHFzU6gVqCiUreN2/o3FWgduc2AQR8xhnYtOfiR9ufsP9frqP8K3itsu7t4t0XmIDPqk6DyeGyROai5ceXoDVzoG9N7PNx8zdr28fzpaMv5A98Elldsj/oGdMenhNLjuvdRDjK9YLubN&amp;#43;KuxtC%0a%0aeg8Msnm8DWnv583/tq9Uzs5pqTG10HGEnltIG8pdbDP4IuGEYBCKhhCvhFw8oChhNNB7EcMD1sJwbyC2TtOD3XvlpF0N&amp;#43;8c/i4RNgHr5lAH8AvbA9A7SFUAT1lyBz/D6QBgKEQkgPHoKgbOdcoIQkWYPt8&amp;#43;dk7hS7krNdms0DmAbh87uqdVJHJS8G7tS83wfdYPwYMCvwZechAb&amp;#43;C/gBpDHQfsUkUKPwKdFX1ZAU6dFJLQQzEIAJ9jvE94IeQchE%0a%0aMm9UMtsCgwbsDdAWDF8Ms8CwhGRkhDoZ9YQv7sS0Cwxb7kfhj7Cu8Mwbb8Pgd0sA5tRC6MLNR3EP/c0cDZ5EFOq0odiThjYulIXwnCxgIvMs8LqEgioPIYTNFvwmYseh1WrED5rtutbKMpU&amp;#43;qqtcKgHjBNAEIBugHAAjgAaAdgOishADUAfSDsB8AFAB9MM4AsYOuN5TnsJVLmm9X8jHZdQXeDSXhzN7upZDCPlS9iPvAd3HnwC5ht49BAb49qPl%0a%0aacORgBCeBkBCFoOOxIIk&amp;#43;cUpskw8cFx8G&amp;#43;or8zRiFCd/r&amp;#43;cL0LodIoVoDooSFcV7ibkQwdJ8IYWGdJPm&amp;#43;xapm1M8atRNrjihd8oY&amp;#43;EeSPZxAfMJRlOkeYVoJlxxCNvtWwTZATEEDU1WLsJpnmHkKdJT5fWqp1MQQHIIkMEgzIsXkgkJnIykiRR60uExhuiHcpHun8BQShARcNVFMARUAHoPEBUBvphTMH0AHoD6Rj1psBMAHjBiAHAARqs0AMwDQ%0a%0aljwTOcAZBFDI&amp;#43;rMwP1v6ZVzqlRdoRBVdLqz83rrzMegdwDB/rwD7IfS8hgTaCfwVW8bzk&amp;#43;sHoWBMPITYIaSCeIZARnppftXVPSlkhplqh9voSsClfmsCVfhsCPXFsCQYfaNRPrFCfdvQd5PjjQP5ubNlKuJ8ChJ0oiIeP0dlLFdeGO2g8fEiUb1EYMwEGU9A9mCU7huJt6NqCUsaHU8C0Pwwynqb4vPmjoIKA58XyNat&amp;#43;GK58fPlUsy4RJta4dQw%0a%0aMaGGN7Phq9Phjb8AvhRCgvoRow3FSQFaB1dsKGUl&amp;#43;EE4gomLTNSDDlw3HIUh1aL0kLPAusR8GLQHDCL1Y8thhPClEEDoNoxzOAl9K0gKQDlu0gThNZ5NNNyDuEBwgoumpRVJATgUVBSVUmvixwHiqEHDB8pMrLmdypOOC4cEWN01nrQqfkeZHaBkw9GDEYAmmehABBz5MVC4wFslWI1WF0Jn7JzRy&amp;#43;EYg3lEXxqKNoYQtqEZV/kDskpJpQFXERgV%0a%0aKHsJFlock1Zu1IVSsCsWEAXwyuHdp0cGjsjIEKQEWOHliNBf0qxDNBzInRQ8rBZUTGKVZMvCowVvoJQFDCOFhhGOBM5KsIGzGaF2aPwYLwWSZzPHmkm9nUlZMtYgk5Il0WKOMschi2ceYTOD8tMAMJ0kNCJAD6QhAB8gERA9AkgMwBmhirpugDABugJnckgM4BiABaRpZhi8KfibpHJrMw/YZeD3gLSsmgdh9TIfeC8Po&amp;#43;Cjoc&amp;#43;CiPq&amp;#43;CzoaR9LQ%0a%0aSP9rQd&amp;#43;CrznbC1tiJY6PncYaoORg3oXMD2SCtBB1BINPzj29t/moCAYbSpNASk8dgWDCcIaGdsIQM004RktowQcC4IAJ0z9HbMlKqeE&amp;#43;4X8cFDu08yIWhdbAgNgizsa0ePNToTjHoxvAt8I1Cqrd60oWB1AhEYU1ntMU5KQRHNKpRPNHYwy8p8JMVHKU1NvxDD9oJDAUloj&amp;#43;oTkZdESkCIABaQDQMUhcAA8h6AJVoWwN&amp;#43;AYAGwAA7JgBWIqQA4Pt%0a%0aMAEPnX9KgTPwUPgPNADnT9YyDeCTIXqCWAQ&amp;#43;D2gU&amp;#43;DpRtLtTYWaCF5t9dPHpdCBATnVnITEjvFrnd3IdmVUAMwp9aKSp8DikiBtD0gOfMFDePqFCfTvF5&amp;#43;JgBc/ooUjl7sUiWyuFdQYuXDbgaLwH/uZ9ErhhxISmoNXVl&amp;#43;wwEFp8M4Vj1jgfSi8evp8jGk8cDAWxAPdiXDl3kmd3ga0iWkfQi1OCk51OINBJoLMIeoIMl85OFZk1I2JpEHYIROAL%0a%0aQb0KJxsME4V/aMEwgvJKQ3RKtIl&amp;#43;E&amp;#43;gAip4darNJpK4s8JEFPFYiDKkgQmlpxK0g7F8&amp;#43;EMIsNJZBn&amp;#43;PnxWkM0hJETohBwa4UpaPMJEtDcIgYcoQZ8k4ZSVOLR68jNcuYbD9NEcJDT3NJhs/nOMwwvoByjt0wm6CcByBHABGjCNU8YKpgAPpG91oVzskiFdcADmkQwPJtYGfreCDYQ49JRsbDZ5iEieAQ3cLoY9UroRCiboV&amp;#43;k1dnXY6PiOEeSDBh%0a%0abooDVNIDeYddssDlAasC4If9CEIR0JkUEJ8sbhHCtfuDC7jvjdqNtcc9PoYCsehb8/iglcZlPX5wSg7M&amp;#43;UZfdoNDwV3dkK4rgSS0Magb8pKsyi4KK8FGkZzddXgVCHAdEYqAgFBsqulMG/qwiuMuapEIZzRa0kpwNxBg8WZM8p2NFVJ9EEkxzAkVIJDDFpXlBLdU3OlwJxO&amp;#43;crXJLY2ktvwiQmoEuhFyUvlh286cLt9c2vKQqAlhi2&amp;#43;BV8sui1Cc%0a%0auO4iYkEZwAEXnpdgMqYxpFQZFloAI6oCJQ5oJWteZMhkyFuPl&amp;#43;DApwjltzpRnhI9ZrhoihIX1CmnMjNhQRIB9AJ0AlYUMBaQKphQwAMAhmEMB9YOlBugO71NAHjl4PjosHkbOcJCJtC0Pl&amp;#43;09qizNPkXtDCiGekKBgEjawkEiToTWjzYXWjLYbz95hj49IprdCbzk0da3uIC&amp;#43;7t9UKxuBg21kIN88DsMvIXLQFVpv9yysOickQhCMmIO98UaDDCU%0a%0aXsCfdoS1IsdDECbOcDykTuiUdI6spPODEzgYmdWloKjmkZu9f4UsI3Dl0IcuHyoP/jZ5yoHwi4vE55SfKrUN4al4r&amp;#43;CpRk9nvtnlNzQxOJVYedOoRPAhrYLOMmsGNN3wlTOlMhVBwp/aMIoYfjxj1kVGiK6LxdY0XojFwUZkbSjsB&amp;#43;nPUYKAK0AMwH8B4GnAAhgH0BaQP7UnEfZNhtK4jTfE39dqm8j3gFh8s3qAc/EeZD8PoEj/kS&amp;#43;DAUU3dgUf%0a%0a0DQUQ2jwUWwNbMS2igbs85YUSw1i4IQj1aD5CIMoDUKFtRRprv7DB0YHCAsesCAYUSEQsehkCUaf8o4XFiF0QZ9shNk9D0cp424YliYwR4k4cXBwcfPhAyUUUsPVlU92Dm5YdBmlDZ9MmCgxHjEb1PfcILijChUVliN3uu970EQdUVJ5pK0m98PII&amp;#43;gCuFKVXZARQtIIhh92CGl5SGc94JqAwiNFUlJJnNQxbHeg2Jv7QomEkwLKuQRiCF&amp;#43;jLAml%0a%0aYA5AvtSvJIiHDMVI5/PbQaoItN5CKEhYHsv1agejsReizFMmFXsacB7QJhDlwpCCFtOVNKiXOMmkr0CUlZSLRgPzHThtDL791EQIsuLhsjRsb1VBMYuDCwHfgyjAaAFiFAAkYFUB8ABNUERPQBK/haR5TtzRnkbSJAAts19Yce0DQUbCOASbDTQTdi5diCjZhg9j0KjZiPFrAUSPN4sVqo7Dt5ovhd&amp;#43;BagLwR5jeXsv9buOXA1OHCCN/j6Cg4X6D%0a%0awcUC48UVDiwsTDiQwQvYZPnOiSkfDjM4Ufc4KBFEEYZ2UacZliGcbej8KDPwcuBCdrDNnwblNrsgVlLdnIAWj21ngxD&amp;#43;LZ563GeMZSmnQedGEwyVMbieQasipwcNi&amp;#43;MagJDSLbZBYRIArkeUd9ABmB1un0BCYIuNAqGMBOgOphAUAE9NsahI5mJdd&amp;#43;Rqmpi0ZTlS0bpjy0V39HHkaDe/sd5rsR&amp;#43;M&amp;#43;gRaDS3lbDHIQBNIUaMC/gK953sW80bdH0iw%0a%0aHMii/IQ9EGFiFBfMR3jQccHDwcQHJAwVOjgwSSiQwablbhublz9HDR6bs&amp;#43;Babs7lUYrjQmCr&amp;#43;BgSrVNkTHDQC4XvcAnMatPPpUjxCbuiSIau9acQziWxGjhTHPEhf0Xa55yBAJw1uSCIvFRig0myR2voKYdGF/IZ4odllkXDgiMLvwHEKHMZOIckccEyUiQocVUkK6iTembR0pnvDivqpJpcglAYdm50gMlpQ4doVIXUXNI4RlLQ4qP2jDAmoFsM%0a%0aHqxcEYJlNCJ5poMCFxuwYYExVGq4JECKp8nCoRLGJjCOuD1C4fiNi&amp;#43;YdJgMAeJCrkJlBFoV3RmAG6QlqqqAjAKZhVMDwBVMCQB8AoASw7PKitqu5iWgowDNLsdjHrvpjDmk&amp;#43;NK0dnjq0YgSuVsecwkagSrMY2insaXj86kDcI/LgS1hqpR2CA2NNjvrtbgOZFPEAsIMUepYR0WFDHXJDj9ctDjwwUnCcxLDCEOFDDiUaUimDm&amp;#43;wonIhcJ8ZalCJq%0a%0anCt7rwwT7leEpDoIEXgXk9VXsy0LBrPj6cfYDcSvTQ4mIdg6VCY4iMfIgBoOlJK&amp;#43;BkNqzk1wYVBtRh8OOR2fIdl&amp;#43;EI3xOoN0gq8tXkCpHPwQnmclIuGJw9RNFZ2kjRQ2GlkwRlkV8J2BmtSviEwNVO8ksoHtBr6iQtWNJyp&amp;#43;QoXxQkCRsmumXkBaMKRFCLTD3vmEs5TPrZNKHwhkvBwgs&amp;#43;GjcsiZGjb8RDAREONidkXMB6APEAVfDwB9AEcA8YAN%0a%0aZ1IPZlSAAiI1FjvlE8dOoU3q/l/TC38MqEdjNvNm99oYbDu/nATOAVIJegeaCLYeEjPwZEinIc2ihcjed6iVXiVjodjCwdBjvnI3jnTvUkquJ0NYnrBDskWDiEIREYdiQjUQXOhCTZphDycSGD3hmEINPm9sKbCTYyJgS1BCebMhNoq8/5qNleDsPifcrnDhAkYMJ0EHtISufoT7tIdO4SDFkrkatqyS/oWOpXDayVJ9GyWi10TN8dmydQxe4dIT%0a%0acoYPDUYbzY2Sd4ZF/DHwn0AeJrzNlV2uCQQhYik5pZI5oaKPjwukA5s1AkL1tGG50pbOoYeCBEhKweKUOYa0J4HDVI8CJzRSqmV4qCEutp8vTooMVbtf4uoEBMoDJHBqxpZaGowwVnKYowBRgA6IXxc5kFxSpIbFn&amp;#43;CnIvGPl87&amp;#43;igYIVG7IaSDjgq8gLR1ygN1iERYcmfDuU5hPuw21oYEhapNA2&amp;#43;Hl5XGkmMn0TSR5yOQt&amp;#43;KOxo03NK0W2lrRW%0a%0aCHvV8ru2NG9moEbGOAIQGFkg0uH1JUVLRQ5SBOA1UYPwNbEdBp&amp;#43;I&amp;#43;gZav3sIgXdpKfCgjtCOXB0smhtX3nyCb8QSN&amp;#43;oTojA8RAAzTC2AoAFaYkYHtwxgM0AEAJyAOAM6gYGkjBXScpiWjpi83EQBVnMGykSLAS8GREaTKEl8izIYZjfkRdi/Jldjc8UgSbSRZi7SQ5CHSRgSnSZ4sgbhti3SRICxYISULGEsCPMXfYInkAoRaKYVuwe3iolr6CHi%0a%0akRt3POGS7RpGSUljOiHguO9EOAlTcapOZcasCUeDtYCcyRlTuUQlDcIWfdKnqYDTifcTQ9tcSYOLFiX9GDQCTK/duyeRDt0JWkzaLgQQkJajGKIUgbGBXoCkGsSg6IQQoIYfxOHmBh3aBgRbToUgr4VMhlKPJxJ1EBhBQvrQCpDYw&amp;#43;CG4C9pgtJwdh7Rz0EYhkiCYEhVCu5U5Axo1GDNhNdg0lt0IwpfGuHRXOI3sawezV1EBO5&amp;#43;nqkNbBHVAMvL%0a%0a8o6VisiMjtfjOqn7iwYMpUosRO0dkScAlqqZg3pMQBHkOpgPkKUSkYNrhSAM4B8AEYBSfhpSE3ltilTid1jgNUCPETYJrwYNsOiSS8uic9ceiVPMLSTnirSWbDkCbaSRifwDi8ddDnsc6S1tv2EZiZdE1GOrZm3jsdAaqnwZSDD1MkSoDKCV3iEIdehLtlFC6CTFCMyeO9UatlSIwc8dBNrCUIEOjioEMiYLwkHtGUQY0iIMITCXAjDIoFjUf4AU%0a%0a960EpV&amp;#43;lEpUn9GU9wxrlAaWpfB&amp;#43;NrLThAoIhYSkbTj0aAgjBiwdmngKjSIXPiE9iPhtdr3w9XASwIuPpx3iKAxrdtVCbICdkNqFW0kkHJ1CuKMgXlDnN3bs&amp;#43;EQWHHxcDlxNQkGXl63A5wUnFENf0HoxAqnSQf4d5B63DUJNNEDt8KfIh&amp;#43;SNpDWLpnxVhJWtHNnTonDF0h6KdUgSHuiMBpPbQRODFpRoMOT8nFLkImFbdDxAlYakPkhtaAojXsnXx%0a%0aSMCxpSuiXTEtKa8BaJTx6mg/xMMOzQfjPU1gvDzoQ6LbiivApx5xBwozzOEDJVMxhV&amp;#43;m4M9yZ2405GPCcDHPCoVtxifcfkMXqYM13wFGBxKeOdJCE6VNgBmAFScQAPkIBJNgFjBWIoPJ5Tp&amp;#43;TNYYhwXkUWi9qpm9jSSdjTSRWisaedVjQX39caUCj88XdjC8X&amp;#43;M3FiXjBci5SrTo5l3Kc5idRJEwhTPvsHTkwI2PkbsXOJaJ1iU5EqCQhDelrQSY%0a%0aqTjciUTr9kWm9tiJgRMEqY8SsaBejqGe8SxIFARr/nQyq0PcDOUWyjLUtcDeAlyjmDtSiEOPwxJzFwcGyaui0SlbSZCTbTPgUIgJ3OoRPtIMI5oBMgsuDhhnhMAxjCr0IuaEclhvvQiROC&amp;#43;goMNCpyYRK1ScGkwjqS/w4DHtl5yCRR0CBBjQqkfwPUnSo4oM7S5slQQ7OGI9NKF795hEKoDaPwiDvuYVFyNk4IjCgzXXLu83YmJNPGCU0BkDyRJW%0a%0aMxQk8hTxDxJaIRkPW5&amp;#43;rgIgCDCOC5vizRpQiEgoMiE0oMKKTeMSJSxuCLhtkQuCIAJsA8YLUc5gKZhrACUEkYJB8xztgAxgBUYxgLR8Gie0Z5fuY9xHojTeAESlICT4iTKadizKYaCAGfASUPMAy88UMT3wfZS0CY5T3FtAyy8WrslMY&amp;#43;k63ggzUqIfw24PXiqzNDcvYesM5bJUg28d6DQqZ3jwqRsDccAFdMbkFc9ieR0UaglSjiVhDcEMq9L0X%0a%0a58xGUF8yvm3BBkNKiUMDACYSdMj1bGgRMGbBhzzNviJkoJS1kc9SciUaj2puJS0Xg0x&amp;#43;rFEAqQBQBaQBaR6AMwA7kBUMKACcASVnciVMSeDZzvv9zHlcZ/TNpj08Z39M8eaT&amp;#43;mZaSIsqEjRmYTSwUcTSm0aTSYGTecqAZTSmZCHJlGDqTmPr5DmPjzJFXKpQakNgyysvsyAYYNAoqcJ9uaUUiIsW9tJzFnDkocLTJWYalpWcJAHPu2SrmUcg0wTl%0a%0aCPZjVSt3pJYNoABgQvGeIKdGzRdaIlpFEmKFG&amp;#43;DmDVCBgR4KfIhcvCEw3aK3sXUd2Z9EBwQNArV8taIFUb7ArEnDLPlU/tzDsmaOlXqctdxKUYB4gLfSLSFAAagJgAdgN0BPWEIA/gPNDlACk0jHmT8uRjDTvwIqdEODtUaZteDgDqjSWgb/SYCb0Tsaf0TrKYMSC7CgSBgeMzrMSTSJiQw0gbiIl5mey88eKhiNjg6d4lugyKSrXSgoYGSvzn9D%0a%0aAsWFCcxgQyNwkQzRWfOjTZhJ8EqYattZCR0X9KSi4dDbxnyMhQG4RwyxIL6tZWeAhsnh1koIHLTfwO58WIGU88hGU8/qG3hhAnfgg9j&amp;#43;p2CWfgynhFFl7Bh0cWiITkhM9sCIfFividei0Ye34WFEbEFDIVEWENowHQqP46cNIijIAqZQ/kxQIgkud3Us1jYMHps5aOAj3UrOBPvrGtMkN7JIbPW5K&amp;#43;LvVhbJFoPCrvxmVPORw5l2YmQknI&amp;#43;EAz5P%0a%0aCvJR&amp;#43;SNyQtbooVoZiL1TDsZoM8p7i1aGKowVBgZJEhl5DVPRCRbLYJD&amp;#43;IZ122ZSY4rJ1tCmqqEPhNapCuF1BlhKb0tUdtlewZdRZegawIkIb1BFP4TUESVc29vt9FCuO4QWFP43aLG15EJ4hBFG0hD3sqdJ/JEDtDJ2ismEpzIQTwjlcdyQK&amp;#43;Bl8&amp;#43;wfT5exm0ksmcJSfWceBNaDpkCiRUB84ncg4APEAbpM0BaQA8gr9qpg2drgAfSHaRIJOpS0W%0a%0aZpTnEfGoqVpHZU1G0TjIV0y9MTNpCWbATiWTjTSWbWjzoZZiiaeFMoGVhU32mrs&amp;#43;UjnBAIc7CuisxhnNiyUHTksSBYLt9DOuQTdmazS&amp;#43;WQhCBQn2zvItOjiGfsTyGeR0wwS6sUcUOzsyX1y4SrczbAbIT7AchkP&amp;#43;KYFtdv&amp;#43;duQmA8CkD555hCNcl8FYFNDMsJhepKR06JOxJELfYU/rlsvWQ5zNMikFokPkzeThIB6ALgBNuEr5ugJNUPkEcAHoA%0a%0aMA8YG6QHAqQAXSuiy1YUt4dKW4i9sTXVU8T5hM2d/TOiUlyfkX0zHuqZiBiUedi2QTTS2aMTHsUKs7Qd4tbkWmZa2aL9JJL/w0mD9j4UQv8eZOeJoMNM8QqSdsu2SGSwoeNcWuUfE2uYOzR8XhkfdnoNGlvwEXZrp8HgUwyaeneyB9Jf8SYgnCmCfezY4eeVhDh6MT0Yu88qd59&amp;#43;eSzcz0Zal/9FQgWGMvZ7qeWg20FCZz9E6zEYYvYx2Q7NybG2%0a%0ah6Om2gY9m2hGbm2ghGLAgWebCF2eWvZnhmvYzeLAhXhn0pNBn0p&amp;#43;GLAhngrAgf5u&amp;#43;of9H2gU4e&amp;#43;pzib9R4YfrxP5vrwxCWYDreV2TVWW0i4DB2824OxMDGCiCEML/YDNnrFzDluIquIxp2FlLZAEVcJImJACFetW4wAdlV0klNIuvrO55NNlx2YTgN4/uahhSWKpmFCJo9EI40cCLEyL8dfCrELX1BFANhojikzSVGQR/fvTgXGDzF42oVxh/Cst%0a%0aqdKY4kMFIQmSG99D&amp;#43;LzJsrDhtZxJNAxOBa5B&amp;#43;K3gEtCnQtVKJQB&amp;#43;LrQHNLeZckouQ6pK41Y8shguhPVTAcXiUs&amp;#43;JXEZoHbF/yUpw90EGlQvPlNNEFxQqKI7Qszt/1IQWA40pMltzoHLd3Uj1ccMEpQhSKpRX&amp;#43;CEgmoHviL0Mf0AMilJZsKYEBatYZvKi7RG8nxw1GACNH0Mowr4c0hHBh0g60pUgQjGJR7Xk1w5KF54acL8opoAfVyxvHRTPBty4%0a%0a&amp;#43;CAoi2rkkZsGgiuxCzVx&amp;#43;QEhlEORjFntzVu6a5AKoDY46Ed5BKrN0J6qUoZyLu6lHNJypgHMfDG2dBzKuDJQcoFzQLGSnSLxHQRP4cxgnWVnTO1kfyr0N4hnlFEw1krl5alC/S42nqIl&amp;#43;K4Y6dKcQ0og4EtVK3wXmRV8ycCr1rQh5B7OUCzxSbggRcA/jXOSQ4HkO0BNAKphlAGwAq/lJi6hvEB7/PgAhnPC8Vmn4zX6fHkbFAZS9SF/TjKYlyRH%0a%0aGdijMSFlLscEjQecW8S2fdiIGUtsnKTSzpmUDcUsvEiakMsIbhNJZ5JNsd9DjF8FqDsy8eZijNidiinClzsJ0Scz&amp;#43;8fsSY4dO9wLgu9Wso&amp;#43;xLPsRDH9CVTz4PrycMpcT4oRjEyGSuiKevK8UYrjilGkNyMsd8TPgX&amp;#43;caMLvx4vnpoZOibQ6cMhkTOUtM3pgoSAVOEccTpEx/lFNTH&amp;#43;LOI54FQZkVMyY43HfxPpnrRMmONBnyXfwPXAvs60rpBw5o%0a%0anNJWLioP0ez59YgYh0pj7DGYryR1oFxkUnDuUGMHwiqDP/9BFOYKt1jkywYEJB3qTydvXidyDQBjM7SM0A8YDUA7SFyAfSJIBJALuN2gMoA8YB8h1MP&amp;#43;CoaeT8YaTw9/BYYsRIntV8WfqDAeVnj82QCjC2WDzbrAXikDmWyxiTDy7MWtsRcvAy62RnoNyVJxK6ofNc1gWMeWbRUdsNvEAoDZ42UpULUIak8ahTeoJeebNXeUmDjAXRBZRQPp3eTZ%0a%0aZ4yWliftsNz7mWjDVKJThOaJNdZsNyZ&amp;#43;SKZAcBh/xR&amp;#43;VVwAkBwRXaOnl2fILisMME0sGd8p3lIAl4vpNdm0gHEGzNHx1EECLfccCzpzHeJH8egAuQPpg7AGf4YADyAxgPQAKAMoAhAPEAKAJsA7kEjAxgBTME2VTNIubQD/BZxi2mUwI2gqSLvkf4jzKcZjohSDzqRXEKIeQkLXFkkLJmXlyvrN4skxY5jiuXCiFOM&amp;#43;hMCGBDLjGszSKgPgHAs5s%0a%0a4&amp;#43;PyLm6gDC/&amp;#43;GcNjmeKLTmaoMIQiwTD2efp8IXzzSkarzNPoYMcfEb8SccfdFxcnCF2aUtVxVjoL7o&amp;#43;yF8UPC0YX40UpAoQt&amp;#43;AFw&amp;#43;vgUpCuDMiFhN21zIK1x2mngxjCff1U9F2shbrWJhCLmDehEz59EJRVvlE0gODKrjedGZ1zEJvxjaNlYQHtOTF/ObiRrhBh45KvgnCQIQHNGJxovA7FlBWntzxJ/x&amp;#43;ulXw9NHlBeSMEx4Eckzd6eGihsRYKQ%0a%0aRZLpY4uJS7SA8g8YEYBOgFABlAHSMKALUcTgFyBugLTtsAOilaxeFzoaRSJeZFdwJ7imxvubGQQhSel0aWS9DoQWLLKTELixVz87IWMyoeVSzxiVMzJiVaddigyzvquBgxyWjyP1mx9ZWHW4LPD2KVVmUL4qsTzO6qTzYcUZ8YyVksCqYujrmUMKpWTWTUsZwc3jghxSybf910d9t/VncyxhQVCj6iJQsmF55OKOV01WHKx9WOMjDAglMdWkvVBQ%0a%0ahtA2MBwgqFqIL2uHgQ5TDOJrDPiChORNBRCD&amp;#43;hFaiCyHqc2d96W69LBcBBgBh14dkQgAagDsAKAPEBPylrh4AAxK5ScpSjAA8goAKizoAPciMWUHVagS0znJvHgghYvR2iX9y0aQDy8xUDyrIe48bIWSzJJRSyi8TlyK2XJKq2VadMykpKhUgUpJCF9lh7tX0UkT&amp;#43;1SKAGSYIZ2yShd2y9JSg8MbihCO6hQUjJQnDx3jLyxxabTOeXg4meWYCGef%0a%0avZLAbwTvdi5K5Dm5Kn2XFFMwTEhTaOIh3WXmkuzDxSo6DUhcCB1SI3LQQovBKob&amp;#43;sLcJQr8pwMIokh7vTRwqr&amp;#43;geDJQ85bGtBiCNhhAZKKRdpplL/nnED8Ro5zBlAHjkfkooHkKZg0RJoBSABaQHkJQIsYKUFWgJSM8YPQBQiPDzVYSY8lJCmyUiZpi8sntUjKQJK&amp;#43;pREL8xVELRJUWKhmTZTbsfELwGeWLZjuP9mRd4tygXNLbuNRhAMj5Swnhj%0a%0aysCkRgxNBPcihTx8NiTtLIfDB0kIWKLDpdC0RWcZLyeaQy/dvKKoIJ7y0dG/g0qTy1rPuvYZeKmD8cY/ckroLyFGvFiSGby0qkfKzmbluLfifQj&amp;#43;3Ixpnbl7JzXOzjZEGdBJ2OcKrhKwLzOJw8LxD35MkBOwBGppojKm7SZKOLRWhF24m&amp;#43;FnxeSTETnabHlLIMKRMNHgxJSFVcq&amp;#43;EYw8QWKUZ/Ld9MuBNI5kavDFlvILnBtEYszte8FCIYwaDAm4%0a%0ahMvM99bmGjJwbtyCJXjLpfFlTo7mGELSIQBkXupgvSA9APkEjA7SNgB6AHBIVuvEB3QPGzcRYmyKRBtKagTT948KBUDsWLAcxaZSXrnmzUuQWzhZUWzaRWAz6RdJKJpdSzK2flygbu9U2RUjz1hn8IrDLTSl/jzIcDMIi9IZrKgyfjzcGaqsyCIOoDJUdL6CaUiIrrUKzZalCwzukIihJby0xFQzF7BOz&amp;#43;Ueljrae5K5CkKZ/IM3lgvMnTMFpho5%0a%0aepIgNbIa4AWl0INoCxhMknNJWkHqxouITCImECD8znThthOVxQhsogJkLlVvcZutvRblKAEFwRxKQMB1FDAA8YPoAERKGBMAHaRnAMDcjAN0AlSbgAxTg6DkxYh8APEFwuJaASXJntVOmVmzfETmzkuSfLgedZDToRlzhiZDzsuZAzJpVWKf6N4sGpaBNq8cXBvEHExIbN859RjnoNpBYw6ucULtZQTyfTmQQnlvtKuaYQzI4YwS2hbRsx8QbJgl%0a%0aYJsb2dQwD7lQgTiSTdLwFGCUoWO8&amp;#43;OgMKkTNjjl7HCEJ&amp;#43;h7Keeb1zRCddLWNmwycIAIy7ibGCGWqAQYlXf9QolwzhGWgrRGRgq3pXlDDAlRc4WKFB7BAlpAMrq5onrqJhbm6JLqCW0l&amp;#43;JwLk5tFpdaGlICvpdTEIsAwycCcIBaKcYoid6kpkDJwCRYYF1hF3Kp6cPts3OlJYuNFwgarzYSNhRV9DB64FyIFxF3NxDu0uqoIuPIzgHJG5kmFKklSt%0a%0aF5eSWJw7ktvytaL7NmKLwQ1&amp;#43;M2lD8aG4RkXQqbPHExx3NfwHAneg1aGXAvlusk&amp;#43;OPlEqkFeh7XJjKA5b9MFTLRQBTDKVflqRR1CGLQLGZwq8dgfSfRTiZpMAVKCmWwAHkAaA2AK&amp;#43;55uvoAkYJ0A14E4KPOR8hL8sL9FFapig6nGt/Bdi9cWfvLeAJoqepdmzBJQdCLISJKpdlZTz5TSLkKllzKWbfLZJRYrY9N4smGnLLPSuJxxkBVzWWUZD2WUA%0a%0appqZ4hmmX/KtpZ4rAFd4qwwBrDkIf4r&amp;#43;2YEqwzo1NmCRuiXiQTcZWRarj9AeiElVRAX7umDfecKi6laEx6dJz5FyGQYEaZP5jyAEz60o64/2VWDuEWMiPaGr0xxPVJAhhhMVWKpwuxJ4wqxizCXNiPhLVExQbhMycMVZxcsVTwrwEKBZxKdrgEAGcAMwBQAHkLSBvFu0BaQM4AHoMZg7gN0AmZU1LXua&amp;#43;dk8Wm9brn0NupaELoCbor/6foqhpYYr%0a%0azMZlypJaYqKxblzfupYqhvBrs&amp;#43;SA4ylpR5i2xa5d2FhO47HB2yskQAq2aUArdINtBQFUbLwsSbLZ0dAroQjDDoriYC5Xk9LNXqMLXpXYNbzDhtIdiyyWJl5D/aCDp8qvaiJaJtBYMAVkb&amp;#43;amrXXigDeYa6otJoTKuvDAAfSHcgeAM7ZRAMtxwQEYBVMEYBjEc0A3kPSz6Vc1K2jv6iFztl59IftjrxgyIdMQlzW1eSKiWR2qDzl2r8aXZSxpYkLJ%0a%0aZbaDpZcr4NdlaNDeqx8slMAFAau1ILaBrLmaUOjgydqrdZUEFDJIf9DZcoNwFZdKKpkui1XpEq6loRDT0QJrmeQnDinlTcSydujr7m8c/Ze9L6EdlBn0BW5QRuScScLIZDsHPwtOYsLJEPcY20uAJFCN40j&amp;#43;oZ1srHYJ9&amp;#43;Hwh80jF8dhALV4oGQST&amp;#43;cQrwVQUgrbk8J2NOYxvNmoRhHrXSvRemrCJUEkIYF68XemMAxgPoBlFtGLyBC5gfSNjB2g%0a%0aEcAfSEYAh5Ky9oNbWrOYAawZmGor0PtqCMqIfKemcfL21YNLsNWZjcNT2r8NRLKO7rbCsCf91n5TP95gbuUbUdyKUkZ&amp;#43;hrDjpLvTrrKRxqRsDVa1zONcOyyOJDDB8ebNneSmCE4ZOKwQhE4Rhegrj1ZAs/eY8IA7k2JY3BNy5OHbQO7FEhVVFBzEItO4vhK3sOuKGiTXt&amp;#43;0k5PzjKrKaoExjwYc&amp;#43;Mv4ToO5qcpZ5qlWffjxKUQJYXljBX3DGAWwP%0a%0a1ZsAQaBH3B0gKAIpdGmR1sziiHVNQSGBaVnXFR5r1Lwhb0yKRafKqRYKqSxXhqTFaKqzFXfKppQ/KrTsX1StZMDUALWJ&amp;#43;ECrdUGbkL1mcZAxaKKY6tXx9vFV2IQOQf9BxexripjzTwrvzToYTxrDid6Nmsi7KklVITMqUcgdPnjifdjjjMcbZ8LpUchOCRcDqetOZBtbUrhte0tKIXYY0cPK0PYsnTwrIJoFGWIYFBlwgh6dKjbOPJpZ&amp;#43;apx45cm%0a%0asWqtFoo1V4M1CHOQH0CuVJrrQqV&amp;#43;F3KOxCOJekJyEdEIRo&amp;#43;OCnRdVTKQm&amp;#43;AtzO3MQZGNAXJzaJKRVNAq0OCIMJlMoNjspW&amp;#43;rD6VzyedV&amp;#43;qIUixFiYB8g4AIQB1MPph0oA&amp;#43;4jAPoBNALo8kYOrh5Toq4uhu1Ky7o8BNrG38oCRniMNSlysNYW9YhRJLz5CKrxpZDrxVYOrJVX8AuBkVzHoSVzZ4VoRDhagyVZQ9EWFHhgFVQOi/MdRUF1Y1ygFcwR%0a%0a1fqFjhWeureaRbLR3qcCslawzcyWui6dSZLRFmPrrJQLT&amp;#43;XGLSJ6rdLyepZKO4W7Kv8GWgrflVTHVXTj&amp;#43;dW3kcxh7QC5eO5ZxF/E0cOoQBxBerJ/OKwmfB6iGKWCdxlYuxn&amp;#43;NeZABGKE8MPFNeaowpTeh7F1CJ2J7fr0lS&amp;#43;GaERxClJk1qkh9YhTx3PDdM8mi0hDGGkwBlmXwJkI/w9oHjhErJriK1kJwaBaKUAWU9TgRUPKyaAJi/dRvllAC2A/%0a%0agM4A5gB6xHAGtjaieVo&amp;#43;gM/sPkJIAbLrFqWZXOc4ac5gktWyyU9S/k0tTorM9XoqstTnrxJbZD89b2qIdf2rzFSXry8X8AVhjKr9sIHcMpNKsqubwAycF&amp;#43;gzINjqsUQ1rYuIKzJ0QErjpQwTSdebNYlfxrSkRh1eddVTRtUk42&amp;#43;CMhudJlUvaLZ5NWEa4sMNRhBTAZtgifixxWI3tdaAESPXLmCtbOgaB5Zgb9uT7q50aPKXCFGzQwE1pdJhmB&amp;#43;n%0a%0aFUBWgDOlOgN6RMEvEBnuRFyk2e3tvSmmzlqESlvEVorumRwb&amp;#43;pYDrs9SaCQdXnqREvlqBVsMCitbDyn6XR8NAqZ5UmrMDiCQPgRwubdtmfRqQcYxrF1bjriFquqONSTqIFReFuhbj5l2Y8chGZJqClZgg8lXDFd1YUqdDUErwromTtZKLzw9lCFpNQ0qRoHEs9WAHJF3CCxzXE0g3lPzRX2ZklPNHFQV1vYg&amp;#43;ISThPsvyE6fGyQvSnK5xCMWtbOB%0a%0aSUiri&amp;#43;ZmMNEwCcJqwOuiAoxSFUhABGsq8kM7qLIGdAn0fY1NCExgJhOao6MVWJypEdAFyAwRkiuqwm&amp;#43;EKo9oFYFfhRwolGC0hapANjPWRGjvWb4bgID9gbBXGiXCOG9FdMQABgAiIKAFUBEWSqDmgH8Bduh8hyYAnjNIZbgC7sB536SwaUUMPN2DdyqzSVnruDXkb0ud2rjFWWLijTbDokVgSQJhXqnYQ2LhVD55zItJZJ1Xy94URclMrO4qtZTg%0a%0azWjQ1qd3B0bidcbLOtQPrshOEqwxHqbUIKqKcMurz6hYkrvilUqLJSUqZ9VLTyUUYDh9WZL91QNzUXI7y1Ra5KNRc6qRtU6rSkOlMPGECsd6V6rz0KA5V&amp;#43;eEhLPKyRFWAEZgFQtrREAFD9hNZ5o1pHzkcEqY3lEtBGqgrQBaoFV&amp;#43;Qq3xsCGvhEqp9D&amp;#43;VPcloTXHxlwpyTRCBLFdQtMt7FQ4hOpJkwWCN24TGBpzuEL0ImxPYgiQrJR8ulxi8JZ7q%0a%0a1JtiruNeIcIRS71mAEYAEAMoABmCT8qgKwAb1jwAsYJQI7kK6Y6Ta9rXMgtr4NTvK8eCBUUaZyrtFRya/6RLs&amp;#43;icDreTblr&amp;#43;TeLLBTVEjMCWUaYphIa61inQCRQ3jD5uEx4&amp;#43;Eqb/5dtKvFQ1q0BRqbbtl0auNeGdL4BvYZaa2T2dQAh59URBWCROYhWg6qB4Wqy8qmAx9xap1njXJxCsYIQ26YoaBhGaE6uP4t8VGBgh3ENgmKRXogDe2l7BmSV5%0a%0abF4aMTXtzLakfTXVLiaJsRAAIBs0A7SAgA/gAMAdINgBJzljltgPoATgHMBNruddpDPBqUjXJILuuybeZQDrMNdyagGfubbKXlrwdYXqhDVDqJVaIbHEfDqgIQrRO2oC1pVrQLlpc6cJWDeYhXgHDfoU&amp;#43;amNZ2ZG&amp;#43;NGg3zTQcPzW1qcxLobYydzzyOsmS8IQaapMC0L1Kg0Lb2ap9TeFTqHTX4knTQAsSIFjFlxX/gJWULSlXk8DBaenCj0c5YV9%0a%0abww2DpISsqQmCrTQLyBsj7zwLcYb21s5ssditykMIpRRbLicNOACoPaUDVtIS/ZzIAEhYmJYgpcrWJCNIPlles3SwkO8pe&amp;#43;Kb1iCEcUEMN/qHDFsQsMMtBEOU0T21vxQU6K0q9OHJ0l8NpANoJNBDOmBhaQa7j3GG8aq8irQ9GDLF5fn8SgMJLFXaMhhdGU&amp;#43;EykixRE6d3SQiY8l85C4YxwAoLgBMtBxKEONKsVxyMOXipZSDhg5oETgG6ausmNP%0a%0aoxyFSxcDNcASz0P0q2knipIbHk1oHj1jMCEzD8KM8IDNfxRy&amp;#43;JgQjtV7qezTDEq6OJSkgDvk8AdKC7SKGAfSGUDCAM4AFuGpSKAEjBq1S9z6DYMtgPJ0dzumyqmBAysuVYJaMtTubKRQKqxLaLLSxUeaLzskL75dWK/gJDS5mU5j2ResMcDBeIEIr5T69Zhth8FLk5lkDjW9cI09mXRVLdo3wdNn4rw4RobWtaZKUOPoCKkaUiUyUFb5eVOLGDtP%0a%0ajgSkBpVbUu8p&amp;#43;mGcTTWFb7pUrbYrc5aicQer&amp;#43;4a/8krejtMrEl4xMlhhU5CP5rAvQROWaExbCdkhF3MRQxQrHlqSJyy1YooL&amp;#43;aJnR6FV4VUvBxRdlq6FV8KJwNqOeLWuCFx/UZP4J3PYxnASbRK&amp;#43;SxQ3BrFUXNZ299OfmlnNq3h6kv&amp;#43;TDCrIQ2Lq4aAjgbjVWLyokHHwqPdVwqPNVga&amp;#43;GETtcDWGEkgDA1fbPEB5dArCERCcA9HAiJmAO7Zbyh&amp;#43;1%0a%0a6TQ5h4brbhmDZYI8beuaW1RnrsjcJbjoQYqcteJbDzdfK&amp;#43;1YRrSjdLL1ICOqdbvbEWxbcA0de2LJwjZx2uNpbgcbpatVaqaDLTJw1LfqrxbYarNDd0bheWJA8ENatRClJ5L2euKIlSwzISNqkQpOLzD2Wb9QldLa7LTrIeha6bnpe6bt9Z1d6kMCdWYhsJiQt4gY&amp;#43;KCwNUaILDst5icwdLIGzYBl0viRRnhFXxjNVIiqCPv0POA3ki5LKwB1C0I&amp;#43;%0a%0aOAoQqCDpR9bHgqFKNUgnDCbRMMELF&amp;#43;QlQs42dzRKwQrceKGqqDNv6bjbC&amp;#43;rkAd2aM1T/aBYbYL0ABwBq5k3NWgLCKHoDUBugMoBMAHUZ3elBI8YPOa6DVpTvwAhrp5LSJavqybmZgJb/tcTba7qTaxJfka&amp;#43;DYUbJLQRrCtcKbYefBBfFtNSaNPDcqzBRr1mWJp6kvzU51SzSWjR3rcdV5tjLSf9JRRk8QQhLSNbUMbnwEpUwaGU90SIBbhhQIVz/%0a%0aqFbS4UvqZ9WElr7QjC3iRISwQrktilcJAwkp2TWdXBBuDv0pbgh7wUrqAZicQfYsyeAg9AXk6HpYVo2yUzqVRc2TFjT2TiMZYwQuJ4gGKQ99GlTHxH0HHw0&amp;#43;B1bodoipkiSfjPNpnJLXFeSekA2awGKpIBHp9N9ljiodpg4gvsbYx3khTpZktxNDRulLfrenJjILvNMnL0kccERRClEtJthNVU8dRbQZoNWM/hNhhbvihKLnuyQyFgXwkMCFs1kp%0a%0a4UfGrlE0&amp;#43;KyE0HTu4YMBZFscJG5ukDyRk/kHdlNVxkm&amp;#43;I20E7YKEtlbM9XWjviw8rOAw6IzhcVDL1gBDZ5FWFNIQuhw9OSMkd4kCvzhrccIwukkU6VM/YxdeSVwjPpxKeBr0bzPDtqKKCwU9Fq1CkPYgKpOZxV6gsjkmDwZAMAEclcolAdGOVxOYf3LiLYPKsTSk6/WdXaXCPQB7IFGz1uJgBnAAiKHoHcA&amp;#43;gPoBL8qQBY9edc2UiHVPuRnpP6Ro%0a%0a6DMVo6OgUDqybSnUKbWDqBTdTbKxSIavFncANdoMI3aIMh4/HMCAmK&amp;#43;gpVptL51XpaD7cvgyKDwkDZUoNNTX3rtDS5a5Gh/acqVuiEnQljmbMljDDZvqGcSSp0pItI5&amp;#43;Wpbz9enKBtNOJPkq/wMkJIhFljES5qZP5DxRbRLlpnkMvmWC0mH34G&amp;#43;MDauHSdr35hDAXOXiarkHjAEAJoBTkexb3ehaQkgBaQTgIilmAJrhPeujaEjahIykonqbFI2r%0a%0a3kSq7uid5MSbRq7dHeTbQGWLKZ7YIa57SY6F7a1sFLSVzmHQEwHEEQTlVe3ZVWmqolDaUKGtekT3HVGTdVt472subkSnnxqybjqbyEG5bJ8babQSLfbmdbcEHZUmTpRaspMldPq4rY9LhNb67qnRBbGkLdlcYTW4RkFENpQgjshECoyEFvBN1VK3s7De86qTjSR9aOe8xxBC74VH2I4WGMqvVWThPnD8pvDJMkmHpoVmmq0yyTGagxaINbVEaxpn%0a%0aAbUoEMA7Rekr2JG6QVJiDJxQmfEIor&amp;#43;MtSLDo/xoEYRjTaOa5DRYwp3aJAbZGUSU2ukF5KmkRb8JT4bSLY/an3QEarkIZMH9mwBgQB7Z4Xj04DQFcAMwJIAM4rLL5HZFy78GWkeLSnjaVj26MaX27tHQO6hZUO6RmaNLDHQVqSjRO6XsfBsZwBrs3Ikdhm9Tea5gTuUjsBKpV3TrLD7YqbN3bFT2uT1yiqe1qj3UCFOuee67LVPjudbr8jbU0iPT%0a%0aQLqCoSodeYjuUGLhRoMvKf1WCCRQuKOMI80unIzVKqpPDRM6f0YlZKoQCo83XCtw7pJgv3hRadkZsBmAGEQfSBmA5QAUD84qQAPkC6RaZTAAy9WqC1PUkQcba8jkNRlQ09WhqR7XzKBpePbO1ZPbtXRJbdXeW9HSSkL5JQsd/EBrtm&amp;#43;fazaaX5T0GTPFQ3EzTu3k4729ULbcpmRRFoO56B2RurPZd1zN7iF6appjVgvahAgnY7kiWsCUMOkWSyhF%0a%0ad6uCUjDsTVTc9Adp9daf1zUFeqKj1duK8Ss1inYsEg6QXnlFXOcRaSAxT8dWHkeKEThsMFpwwXZ/dDisPgppNKFrOiJRyNHSDfFYbFVCEQ7SkDkgTNFJNn0DwYjNU/zxlVpRImG9MlTItIUvS61IIQEwv7GfwUnAix2KKVUz9etlOfG2I05C&amp;#43;hGKmNIcNgs6NqKPx8vfEDCvf1DokKC9juegADQHUYqgGOcWwCetCAFUAHoMoB9AErCoABUExgA1%0a%0aLmZQo6BEImwVzUjS8bT9rGfpkatzbmzMtQN7stbnr9HagEzzjfKi9UyLzPVN6ljtO6GxZ98BPh/LqNRAJlGD5SNVba797S46GtUbcdvUaqIFS6amyeFbSXHTy7TU&amp;#43;6Z&amp;#43;ne7n3brawQtTzQvVeivvSNy9XvH6ScBO4Kxq3gK3IkVVONlUgmkKSI0ofUNCPMq&amp;#43;ECKEFuQKTZKFUgBOUyqsZW&amp;#43;8xSQW64IIdzxKaZh1MFyAh5D4hdcCUFaQH8BxfXKg%0a%0a7SPNU1QezbbcOza55CBUtPUJLeVQLL&amp;#43;VYO6tXcO7KbaO6pLeO7TzQvbFiBUaxKFMjWpRY56aWQY2&amp;#43;BkjVvQxr1vYKKkehNJoML77z7Z&amp;#43;bQwc6a7LRVTzcj46hNe963TZ97/ZQ1UFoNfxpbPTh4ifQinCuNzAMC5wYVff1GNEBK&amp;#43;KFGg9cYRg7OCzI5bJkhtuZI9OXQJ6NJsYM6hR9T8VaGAERB4L6LQtwoABaRUUs3acEqX94gG5T15SmKk2b24u%0a%0ahsyaB7Z16vtc2qeZZo7Maf27cjaJbJ/YZ7&amp;#43;DUUa9XQOrhAacANdhKw06J29fKZ/K/mrIZPCu5j3fWt67XV77D7Y20BxQdKXXe&amp;#43;atTe67SkUPibpR66OCnIHEhHZaUFXDDRjUP1LGsuzq4chRq4f5aJ9Wuyclfkr9A1&amp;#43;QWGPBcz3eejNxS/8bBm&amp;#43;7AHTIZyKNvj5NOBgwGKXKbyeHxovLz53kiQ81ficZjXBxDg3LRgkORD8KvDgYKcHtBIurXqeN%0a%0aIwsAcnEd92F8zXWnyRFhCpR9oEbZr4Y1SyVJ4VjxDfzGzQJpqfFwoSoAMqtaObRWochlfKvH8EXUXT1EGKQ7GLNgC&amp;#43;OaJE5V1jLaJRTxWPFArWn3KBIRgbuFTX7NaEdzIRegBBEDNUDQC2AOAB0BCACCA0QPgBugPpgKAEyNK8bgGlFaeD&amp;#43;0S0yVHYZD1hsP6eVedi&amp;#43;VfXdBvSb6RpfQHjPcebxvbTbLFS5hfFgkM6KLzsqzAjT/KbcYEmHRgTjo%0a%0a46d/YIGNvfAplaHEwj/ZLaDiTfFfPZXbPg&amp;#43;A5FbQ7MoSB7s53tLzfHdrwL/UUIJKmLy&amp;#43;aW/awQ&amp;#43;MaD7KoHM4W/gPdi960xDbKIQ4Mav8KU9ynWabV9Raa4NBUrqGNvpMQ77qbLPwwnZi&amp;#43;QnZuUtF7Ek7F7FlCqEBiGihFoG3hqiVX3abbuCB29jKiMiTxc3r2OLvV9av/FPbRgYJhCrkpYqN9haOqxBVHJlk0sLQV6VsJZyYBk88pEhUmkUhOOHk%0a%0aHP7lpBpUZV52CBPD2OHZwBqQnaWFLO4PUVaMicD7djhPSQRSqeIj3ooKO3N2IXzM55I6H7IqKIIYLaCEZCDr2Mo0G7EivIayVWGF87InAZS4HqovKlgRmIYzC1kkVBtRZUGskHMkNsswLd&amp;#43;HLNW9s4x1MXAZM5Ff1XDLyQ9qam5omGG7wBHbRSOfIgJxP6Gc6RNAy1lLEjNfnJovFh75ENp0v0DFoMmqvs&amp;#43;SLXlTAhRiEoiMrCMCb0JMkYhWaIZr%0a%0a0nBTw&amp;#43;fBI0pbvjwUSbct9DHA9KfCvyHDLvUfZI24HAuAG96WXbjtRXbwHPODhfRABRfUcBCAHABQwGMBEUi1Fccmo8DcIo96APdCZgwyrGBGs142Co6uZSsHOTVwajfTwa9HdsGDHaN7rYSebnKakKLPSDcJDWqVpxOzLFVf/Idhuz1O/A&amp;#43;bNVSqahAw66rlpzTT7S1rTLVLboycCEjgTeoynkhcksQlaTbU6rVypG5goPUgZoBvw03L/YK9Kk0h%0a%0anaVVkHCcLS3Nd97aHJoKDP8svphw6cZdkdJMLxc8VcuGHoJgB4gIuAPkBphuoMjl9ADwAagF7ZnSjwA20QubTwTviFznvKOZVRq8bR8ievQSzODYb6TMRPatg0YryWbsHGA8IbmAz3c7fR9i8eCc9DsmpKfSSqrCNCyRbPfwH7g577Hg53rl8a8HoI&amp;#43;8GXRhE6fXfEqhXFTjvLdX5zGuzcEyTwzReCfdH/mTjiqRyiv2ElCp3vmSHjicot2aPqVA%0a%0a0IzmQ16bt8dA9i3KLQ/hrB6zWVxp1GRnxHChtQTEAm49Odqx48sPhHxX7bKTFQsKoIeIS9hCCazotI5teRiPYskgjbAxgkuLBFeZLGgzlnDg2zRtAvwthFJOiRgk6WVbM6Y0h92EDs5VFNqxpJGlE2pk5vAuYxEFEACo0PTgzxJA6BbHL181h6yduZAH2gxXafsF0GXeles8BD9TnIHABnAFKD&amp;#43;5EddNuvUy3Icp78A0hCkiEnr3nLH0rw9ubdPd%0a%0aQGECbwaHw2b7n0mO7jHfP7rfWiwkwhtt6ox8o9I4DU8rtIhX8iZHmjbv7xZEKKQVb7QrI5IGIFTLbt1dOK&amp;#43;aWVT&amp;#43;pge7ISD&amp;#43;pCQ4MLSlWjHHLaE6OeSPiLiTCG/cvaaChJS0mliH7ISPnDylb7KLAxF65CukjKNBdM42a54sFU8zXkpIg70LMldXDPx9bIXseCFozvrUgZC3FlAtCoYcr4Twg5aOW0loGogRNPBNnGJoKQoMTgGMMGl2SL65pYzl%0a%0awBpOXB2COIL48ozoNuZqw63FAiQHhahdRGVcY2j3kgmmms&amp;#43;ZHPwN&amp;#43;Bkx&amp;#43;&amp;#43;PzRtsmeJc5rP5oMHPBLjbhKOXfx7lo9y7K6CPL/RZvlz/FAABmDaRj1h8g8YOj8y9aGooAHcgPwydG23Wb4pmIEKM3tdGDfVQGRLfdH7w0pGjPU&amp;#43;H0Cfq7mAzFq6xZXqGxcJx05EhaHTlwGyKpJwJLDvb&amp;#43;bcC1lDYfa&amp;#43;SpDG3XdDG8Ywi1eebLaonfZGwLve71A&amp;#43;jH%0a%0agrWCFoEIG7ErV6ak/ff0K9DYUTAiparhPpxKNCb1d&amp;#43;BrCvVfsIADVOEHye&amp;#43;hbBMKRf7OEZNVJTDuxG4Nuurz7cZR7GJ/IxHugxAAL8pisOADVpOgOIqJxPQB6HJZl2gKFr1oXpCQ6jFz6gZp6yAx/l9fW2qk47eGeTbQHweTq6qbWN6abdDrqxYChjg6yRQWM0y1/Skj&amp;#43;&amp;#43;GIZVHUDG97SBHzI7jqB1HXGB8VIHvPbBH/PbxqFA/jLsE4yxuypFGt%0a%0a9a5BGTF1A/nclHtIIlF5yJbRWkHnlqfOkhKkNKxTVOExjNKFZWajvG6I7ZQfsLw6S3ZBYPkIhZTMJdJFupZMKhh8hWgDXN9HqYB742eH&amp;#43;tIq7PMXjbuZW/GibZQHbo8nHBmQZ7f4yN7/48&amp;#43;H9g0AnDgw0zNI3gTSVF4JuWapbZEhvbliWkgeBRXGKCc47EEw1r0puOi2NeIGTLVDGT/TDHPZbe6ziTKL44VrbG43gmg/TcDhjTTYsQ6H79bUTdEw%0a%0aXra2vFTcyngEkEYTE7L7Qson7VgmadTkt6lgQn13uSCOhKuTFUWoErUUqG/NMJQfncV8ImOAJ9Yrpp6qsF9fTuZ5SNFHLUhsRR3GPk0H&amp;#43;U5wqsgpx7WmWH73uH9lnqMjkqqaoThDG4tCERhXILkmEdkq4FEG2JZGbF5QWGagj&amp;#43;StTKcOcRdaJfwhYhq4lOI1iZnW4wBkDA4QoIuwlNSoZQGCYU0mCzIMg4ZrfEHdorQprFUkLcpqDKSpnAyrFLdW%0a%0aoQNbMtzTVPz5/xaVYyrXwZBhNFYPYrSQZw52a5wyDaM1SIghfYfHMVrSB0Zi2BlQSTAAacQApqvQBiAGwADQPUZ1oRH14NZ9qXtHtUdfWWjevUJauTV/GaA59dhvdPbzfbPbXo6&amp;#43;HJvR9G6VbnHxTVpGXtJ7jFyKvatfbUbm4EVVqPVv6foZ6cHg3v60JrDUcec67j/lu6HdlUiDveyjzJWoHTGgIVgSuK4BCk5Go/X66gowFa3veFGHI6d6&amp;#43;jYJ%0a%0arFU7H6XpYPG4fZ9k/NJVwnletkToPntp3CqxXZIRol&amp;#43;qypUHSuIFSoG4Agc7HFCsoUWkKslVnj2MVUYjKpaB4z2OBOIJEHXwVoG3zJYnRSAfPaiwzRXploPa5k3Y8lHRcSd4VAmNAuHtB7jPwQNpNIKaI71Ca/SLgfNUoojgFyAF0uDTJFe0BgiMtU0cjABlcAaBTMGvK2JXiKLFB1aFzk/G0iF26PMAnGP48omcUynG1E5fKR3YSmXo6Z63o2TT%0a%0aNALUdjXYnLXoQ6d9I7cZ/FmIZ2bXAm2U2ZGOUxfNZWEALe8bsTqhWcyKXO/oZDj7s84Q/bj3WiGinqknKY4F85ChnIMI9FxfYUV9lQyCxAXFQEcLWfwvlhHxpUQhhMpC5x8quhi7OKJxwbsExO&amp;#43;HqxjCYmnsiRmrlKoCmBzeRLK5jG8jgEQJf8aja7SEjBtrkkAqgGKtu7Sbp3uWhJaRAaTDsXWnZI5/H5I5sGHo2nGdgxnGJmUwHfwZNC7zkogQ%0a%0arGpKWxWTwoVdFxChU0b4E7yzbE4fbyrSgnPHQKn9fqUiiY8uy&amp;#43;LolD7JZ5GrPs7KqIHSisTFZKscShHLAyyHraG11ZwNpDCKJtaxEFodQGGayXCVCTotHL1poI4Mq8rUp2ek6E03DKxa9uBF/wj/EGOZnw&amp;#43;SDP5uODQZXDiMg&amp;#43;k3vzshqXbMVfOGPY9jR&amp;#43;M3AHlw3aQkgJYjg3h8ghAGyMkgA6Y2AJIBMAI0wBgDUBpVVHHFrBAIruJr74UUSlUN%0a%0aRkawhaq6lE&amp;#43;q67o6omf4y2np/W2nZ/cSmJvdNKpveMD9E2sMeVFFwckHSnZEwynliU41&amp;#43;Bs57nzTRmBKWLaCkfOmRxSi1T7pO98qZ/a91WZaPg4YH6ef4n8OqYH2s5P00kz8SZNQ1VOOJehIiioUKMCbcOHr64UMAmaewfHTtCPCcTEIF4LkoUgpSMG1Xphaj74QgKEAaSCZaPtMspI1GP09X6K7UJAf00ooRqpaVQwJ71WgAeDQwDB84AEIByBP%0a%0aBYtw&amp;#43;tCak6/Tj7SmwGgcsSkM6PbsU6hnjfehm&amp;#43;TcpGsM&amp;#43;WyZLQa6RVkcAFFRSnbFYsyBQs4wD5ikj8qkMJt&amp;#43;bjzlTVRnJ08Lbx4d3q&amp;#43;8b3rUE0xn4k3HC/I0kmylaTVxU&amp;#43;xmR9eEmp9ZARniWLToYlDE&amp;#43;XOvqwLahG6cZJpYzb5x2FhnICOcYwYuK7QV1iHwjXD&amp;#43;Tt8ZoZvCgwR4DUKYvxcPwoXPHSb&amp;#43;GoKjaPFBxSPYhvEMoT8KCJwApRkxReos%0a%0arQqpPQJpDwLlYsl0&amp;#43;kCs6zppaGDlpVHnEHwp&amp;#43;Qt8nXY12aCvagC9TMeApSQUyuQL0woADwANSXCyqgAH0BgPuDiABQAOAA9BDwNBmJ5Ov9&amp;#43;/e1748LrCxYN16Is&amp;#43;hqPszeGvs3eHm08KqBDclmO0ySm0sx9GcRYzb6xVSn88NfyzaN8517a5cyKGXB/mTa6BAxOnQY/v7jyAMqT7ZVmMc/RmBuZgnKdbgnezU1mCxATHOGYEnZzIhGfI0bx285Gc%0a%0aW8471JDgraUsU3m5GnoMdA&amp;#43;TrorbTqSc2PnLVU6ajBoJ0b1NN0YFdRwN7MqyRGUYaB40fznGHFwMxql4OoPa9qk0GiOxAQYP&amp;#43;OEwNAplGIoO1wB8tFpEoN7I9Yhkh8WAYUYniCNn7AbQooK0kpcYyZWbbBhtQrpsRKA1wakFiCVqdQpGcBtB9bKiNXKha4i5K7Qt5ZQQOQ5NBDGPG1z&amp;#43;B4dEjMbZGzbf0IBGkhqQqyYQmJ4gM5OeIVc95AuzOGbw%0a%0aORtaOxMIgjlg4dAtnG7DCUvw6kCL1xerBF83NF5bPAh72HRZm01VZnBPSUs2IEuHD45HrfM8xGatHcgiTT0AqgBmBSMBwB1MFUB&amp;#43;yD7mailImJ5P3bU2HjaQ8xua9fYomdPTFmVE0MERZVP6/4zP6jHfHnUszDqpvcdGwc&amp;#43;6SORU4hyCPN7ZDSLRfGR&amp;#43;dt/cDH2U8XnOU58lRA81qSeW8HwnRTrPXWY0KXC3DfXQHscQ0GJHJY7K8Q1qlbZjLwzU%0a%0as59/C75H4rYFHfdqTmV8pTi&amp;#43;43Tn58ff7JNAWCHQnzQk/g5pnNlayRkNCSpUbZwIBPa5evpSZnWo4VyKJoy0CDyRYpb4ykkDCgMpTm0qxI9kizrcJ4&amp;#43;eCcseYAJtIIXLhCFPHW9sJMikDfriMQLFOaNExgCwvw2EwkDNkU5zxKWEaxgCGyxgAxFmAIncoAEtiqgCpD9MEUYVYTWr6DXqIqVpY89qooXh7TJHw83JHCxQpGfswea/s5onM4zhmoUU%0a%0acAjwynm842nmmHsoiceWE9s83Ka1KPyFBGncG7C0XmIXDHwcBhPceU2hCPPWTzCqX2bA/b3n6dbKm8ybEXYY&amp;#43;Pmwkz5IHvTCXH3YFaVU46bmNjjH9vV5a6szf7/7Xf7es9YHBi8n4P&amp;#43;N5L1nsDKwtrgw5sAT6EiVpy83O3BcXuv1rPIfjEkCwQ09vJx5aOLV24N0XNQzdNdILFxGYqcYh6RZAlEIz6eo56lOtpLRVkyzQTaJOw29qioa0h3t2SdK%0a%0aig0jSRmuHx6zc3z6Lc&amp;#43;9QztXy6rkDsBBzRQAA&amp;#43;lyBQwKZgkgH0B26G1pLpDsBcAAaAwuY1KMbQo7eRhXEq07mB9i&amp;#43;9m&amp;#43;vTkb1C3Sk8aVPbLizoWTPUKbO07SyPow7DjCx5TeAJ4gQVWpLPYWYmIMgWN9hCymdLeOmEE8jnNvYMgvmsCWJRQumOyp9tvgye7YI2lSL3WxnnJf8VIiyhwfggJmqY3UJOcZtBpoOZAQ4olVHXHns9RONHvZIZxI3FRh%0a%0anWhMhxhMeQpYmGAPjSqHvINPxZSLGtw6bO4J3J8IMcG0kfA5dQxKOwsiQh/yNS78n83RXbMOCchxKQxEYxUjAgxfgAsYGMA/gHLClYX8Bg1JoAkgC80hI2pjjdvBq5C51LPSh6WsUxHnTi2hnU479n041cXsM2pHcM3EiJDepww6Il7zXQVn&amp;#43;XihghxCVn9LQ66y2kcyxA7ynQS3t6EcViWRU1LyxacXDm4wqndUqU75U91nPgfm5VVKXwuOHwsf%0a%0aXEIRfhNLICzsMkk6a3TEcKKH4XZ8XjKoyadzGnx6E5C7U3i0Gr8d4b3Y&amp;#43;wX2pkKC9SxUB5MRuGjS5Kc7kH5nfasSq6QBwBMAMSBE8fjrkUxp62VQ/dy7himji56Wx7ZHnv43imtCxomAy3sHAE7JbDXTCjMs3FMA6FKl3MW8XqNSF9UMORnbC5RmBRQ4Wp03JqoKy4XDJW4WiJoxmGs3J9YA/VnHvf&amp;#43;bqbl5XEOLCUQIH5WyyXCGVPmFG4lWH6Db%0a%0aQ&amp;#43;7qlR96htYPG9EHTgnCfMm1teWkxOJ1GkMJAX2OC7ERSPFZB/LF9&amp;#43;NLIZvBpypmFfZsmQpypgGMwLukA6FzborKSCO&amp;#43;giqis65qGUlnYu1JxEDHSKzWOJ0ZfDL&amp;#43;NM1BWQjnT9OJ86kMOyoX4ixSJVMcbds5iaOK18Hp9SJ6KgKInKBKiIERMuNVMA9AmogaAjgNQ4TgA8gAiJJXcBt/5O3WimHy2q6/kYLKzi6&amp;#43;WLi&amp;#43;&amp;#43;XNK6pHAc8wHBI/pWmZJ%0a%0a/wGSherfKc4rbjK2JmkEDK&amp;#43;bdYmQY/8WVCCTC6MzmW3tpk9VUzPrOdSFX0oQvrozi1nD3R4WwIEjGhU4jjl2YKna87ccsKzeiUi8XwkHLU0dVG5plKDxQpOmNSN&amp;#43;Gw853XuhUPQ3lWaHzR2wTG4bnYeJovFbGAKVg8X2Vc7iI1LlNVMvTUi1xkDNsSpguDrZvDPqwtDCKFsnBwo4kOazRqyRboAzw6D4y71mgPGE&amp;#43;gBQBiAJYQxrKr4vkOpgMwAa%0a%0aAPkC3RJC5eXLcI7quHDfrENcnq1HQyJ0jUoXIs727yXhZTx/fp74szHmGAwAms47hmHMQ8XKUwYme&amp;#43;GNy8s6/kW2fWYpJkoDK4wRtQI&amp;#43;hpV&amp;#43;M4XII64XrI1Arfg/CWjvbIGsYxEnQ61&amp;#43;QrZXakQa9ZbUXHBdQLpPm8S4eroq/f6FVMnQ6HdapI7ZSFYDdlVuFgrQy1lSReIYQKLXFZol8EVw7aMIhqxpvxqKB0Xqa6HL22ttmB2qyV9WPIQ4kElV%0a%0aJSF4EvBJwZqE8uXLM38ma/euWeUeJSWwJ7YOAJMHqjIeGxK1jAhgJ0A/eqQBXIaIDjwzBrnMPDn&amp;#43;/Sin5CyQHiA/JX09YpXHyycWjqy&amp;#43;Xo83NsVIzbWbi6MCItTN7DRXZyobkWUSC7XT4bmOmt/p9WwY4D5WpVmXhxRhCbIzDoEa25XDgVarXgXKm4S3cDh6iA3N0W&amp;#43;xzVkIExaaunEk65bUK6FXvzSIVsc71MoS3/a063zqNU/8qS9gOGzVPvxr%0a%0a&amp;#43;I21c8&amp;#43;QnXGiMlLECZ1ganxxaMD4Nq5VVGt8xxQXQVlsbluhgyXTNSBkzKYMDAuRV8cccnaVFYlOAU1qAl8ayTMbnN6i1GbOiLZgGPK4KSqKWS6fCoItkZwK6WNI3OIoQokELVqzk3s3lDSQ9yjnIB66wWh6wuH/4NbnlwxwAsVpoApYZj95cEYA7SJLBaQMQBVq81p7S6r6VPRNAruDImsxdboOVYcWyRccWUM8&amp;#43;XvsydW/S2dWks7oWgywnmDC%0a%0ax9Hpgw7XwcxigYVGNBjK5Rr1JXkLxoPByky7vaUy0jmbK8LbfNk1rA645Xg64NkcfMjiFXsiW4IzZZbiS8NgQ0Y02CajHUIDTmVWf3Gt9RqnkmNzEtNE4huenbRQHPK5KkC5sipHctzUGrqZSoV1fXH8zQKwcslELgsePbSQYVeMX&amp;#43;fbv4wRUY3D44tDRHVyATy8Wm5QM3MJwK4BlAJ0ALAIni9VedHdq9r79q9FnDq&amp;#43;bXjq6fXJjv9nGRZZd3o9%0a%0a2mcCTdWRyIuwABU765gWKRBsMaN3q/VybE2mWngw3T8kRr9K839XYS&amp;#43;Y1PdqbL3tqTVl7JWW5RdKmxjRTGN9Q030k04V5ONdEIrEI3rODNgpONHSpJifn5lVfZTiKAjlrZtMHaIv44&amp;#43;OLQWPb0I/jTeZ2epH9MIqV4pEnvDha1y7xq1EEuCy71cAEMAoAGwAhgLdBmou0AoAHVFLpGtx4gFjBRfXs2ZC&amp;#43;lTMxeATvMgcXyA1FnVC6c2Ng/42Lm3S%0a%0aLgm4GWXw/oXgE9MSHm8XAQ1noh5g5AmgKyXBv2iqiLK6ynX6/YWvq&amp;#43;lEK01/Wqsz/X3C65XbI7iWWyXDXsY&amp;#43;y4mpu5XU68bbBMwPGZOB/xl/TFxXPKoVPGG2IS6xeZKfHntTIPu93kkBlq8vCoOOSZzGW1AHR2qJDi3ZRaBgBmALSB3IIJDeVPKHcgV5bgAs0ZIBMRXDrV63FqXwPEt&amp;#43;/dH0DIXFy969JHvG0pXPs342o85bWz61c3oeTc2u00cB%0a%0a7SzYqTC5/JMFpSQl/mvbAanLrGYUBGPfamXMm&amp;#43;mWQoAHWK8xLb8m/DXJzHTdBGZHXWsm4mtUtS0gi/A2NBmDWJ3vcd0nekqkqQlT5bWqmAHRqnB43dpecx6ECKMt47&amp;#43;CGsnGOKw4mMoZaCDuTcFnPxdUxFBOfRpA4AfXzW2pIhtIJByjGHCDJ/COJOfCzC0ikB2TjVxop4bXScCNz0tIGnJGqSrR46Dyo&amp;#43;3NxxlYkusv0ELnQkGLQdsywXX1auXr%0a%0aM//BUglNWJABmB4bepgg2O70NSTZN9AGYj2gC7YXbCW3S0xvKw7GY88BjYpeJZ4jX48GUsjQ22ny8fWlWy23Lmx&amp;#43;WAc8XrmAzgGom722O3hzGlZZRrZDQkx1WsQ8wK/a6/a7pp7K7k2wFfO3927CVnvXzSBtdCH9VsjW5CqhgjyMNctnhQLSS/Qm&amp;#43;aB&amp;#43;gy1n35AZKerEw24wZy&amp;#43;FtvJR8tdG/h3zc&amp;#43;&amp;#43;q2IM04SvQUy2wDUAH/HcgYAJ6xJQTUB6Z%0a%0aTUBcgSGyjAHAzS2/QbJVFdwA81pjJI8c35W2bXFW8221K3QHHwyJ3rm1R9bm0cAKadq3/rAxT0UTtsdhiKZBOMp3fawCS96uzabW4C3qs0mS4of0bscS5WU62HXiaIkXvW1vrCwYuQdpioxhbo/1hVObaTejKxI3P5L9DA5UgXZqwLqQkQdBUAiJaBNBHQkQKZm9qWxDv/hxKUtCfSDRE/gC2BsANuMA7F7UMwLSBWgAY98AKyLYuwo7d3O&amp;#43;s1Lj%0a%0aW36Vr9rCbRQHUu&amp;#43;sGugbinrSfin/S6q2tK7bXbizF3JOxGXkiCpKshpsdObdY5wmJYgvax9WLW&amp;#43;/XziCWNy8wC252y4mG83/XZeZU2lxQ5bo/TDXLUorzrJL3GSm3oHW4x13lU9E7hAlS0d25at7VfU2kiz1mljWIh88paIEBcHNsfVi6UnLVbd&amp;#43;LEx9WY5w66k4V6NGaE9&amp;#43;uag3Bs4Fnmylt9xWKWsuNzoH&amp;#43;EVICWFoZ0nPL04fTC75c9yQXblR%0a%0agWqpkl7YtGg1VevydQvOQXaP1iWMkeZW9prH7BDZVVu152Y4oM1xKSxHPWIQBHBdgALSMIrldHch&amp;#43;g7SAGZd6RE8SJHbcIl2lXbJWUu6bWXu4Aym00J2VW89G486E2NW4cHZmQjymbS/Kixiem0eaD3/vN4YHEI0bLK&amp;#43;k3rK5a2x7mHDZ22fanK/DW8y1DWcc0jXt0zuL6lTU7/2UYFWoWXBXDCXb0TW7Hy7XvGLytxWJAOphHwOPWHTN0xmABQB%0a%0aKiT&amp;#43;UyZROBH3OddxW18bda5DI8bb73hJWP70u6pX3u&amp;#43;pWCUyH2Qm&amp;#43;q2Dg5KqjgFBrwywszZVZMq05IBXF3QPg/WlypoIZ82PFRO2M&amp;#43;/rY1DVUKGu3a2jEhS5zmfmXPgzj246yxsjO6X233aeJOemxhNyjhKU3QRRtdulwE5iEZXAYJzplmEgQjNohpSFUbPvjanL8Y9S2K/X3xq2CLxa&amp;#43;04&amp;#43;gK0B6AO0AkgAaAfSKpgOAM0BVMHOlmgPEBL8icBT%0a%0aMD&amp;#43;WAs6&amp;#43;sutrFReLao6Y7PxKFE092/exP3Xu4H3Mu&amp;#43;onZ&amp;#43;84sLfdJaxO7hma2dH2ytXyRSmhAnKNWJHt&amp;#43;83BiNOlM4SQXnTI0f2Ye2rRWNYTqnEx46gWyPmEK9TqHWyEqPWzKn38H5XkTEBpNB3ZbFRW3GKeVf9vCxS5rPp3mAG&amp;#43;C2IG7&amp;#43;aES61mXju5YfC/WgUasJ1Z2bUiZeIDgGXP/pmOgqygxBjQynnvowSsDWanl13qy3F5HYz5K03G8pw5%0a%0atnxtGFipSCCbG4WDCbjIGYhZxHFK3lDqLIBKl4Ry0DUjNJEOorE21u6aa5G9qZV1btPw5pOEDeKcMICeFqpzkwA9r6guJAVT7NUNlw3jYhVAorIZqRi&amp;#43;3hHbo7jxvkKR8FZPsmKGqxsqjTCxQhVBRbKHMrkt3zbnfjwJVDxRui&amp;#43;bR&amp;#43;OFFAh3GVXr0GqHmFPlVbxWBiaVClJ9YjOn0MFlwZEE4Us&amp;#43;BLmnwnKYlBXLZmkrs61SpQsx7r60vbWWNBCA%0a%0ahjwJWcKk&amp;#43;DT4rRdyF8eJGmApfqiwMOW1BFAVw3YmL2qNBvzyKHcovmUvgGXZWdvbab3vdT3mOdeJS/qXaQ1Ht4AagM0AyhraXTAHaRMAA7UVfHK7E2PDcSLCBUZW9QO5W7QOTmpP23u76WPu0E25&amp;#43;2q3tEzpXgc4VzREo8WDEyV0bHC83DW0WN0RpD2vm2/WS8720Z2wj2c&amp;#43;1p2BuSlTfLTBxKyV57v4EKOt9MYP5aT7tIwAEOd03UJWxHv0dDGr%0a%0aRHbuYhMw&amp;#43;ws9RI10z&amp;#43;K&amp;#43;3ZWJKo7OCl7/acxR8cAMWjIPToM5I1wVnd99F8dOH8w/KQpDOy7Wg9AO2C6LXokLKOm&amp;#43;&amp;#43;gAERGuNcAEcB65pit0ZswBsAIHYvM0jBfSC272JYFntq/1oQs0Hm&amp;#43;Ldx2cGrx3D6742BOxl3p&amp;#43;1l2noywOiU3oXF&amp;#43;&amp;#43;XjgPhrs1CDZ2J7mE9B07ORSSbRhWpS/X/Md83J2783wkA4mZBzBXdvdqaC&amp;#43;zqWrLSOyt25GITB9xB%0a%0ayyzmIoLsnXIk3xmq/C12fdjUju80CEBjcEmAvaWW9B8AsPK6kqqy/KPJKBqnMVLlFzzAEDVXM&amp;#43;ZLXGm06SO7d4oLRrktmdBK&amp;#43;XD6Y5X61FGL0kFloIpSTiaPqo&amp;#43;8ldcbvwLxGBjX7NwprVCy7plglpErGpQZSHHwgpTVCeCF5KbNM&amp;#43;2h8jRqkPTQjvxw1VAYekhJaB/0IR6DbI7qm2dkUF2hgMWnTED6QOgI0xCAPuChFQMBmgHAAwy8x28AxYpY%0a%0aMyyrQZClq9YXGOTSe/HkMw2mVK6SOQGWmOffOdWL61&amp;#43;Xbi&amp;#43;kLfy/a8XlJTwF3epbFJHKZBnqk3va2FTqMxBXphLyOe9Yj36464nD22gm0S5E6yc/wEyanEXqkTYP3LPUjklek6pU&amp;#43;hXZx17LjvW1mcIDEnkncA2MG163Ah7Iy8ME1ja6XEgXUf4YdDjSQu/CA9msfiwXlEXGczm7EhbCd9HzuhgeMookmfHpxYZcsbCkOIjyKBsrNKF863&amp;#43;sM2p4%0a%0aYkGZJiRhzC/Q8Poaao7tOcQpk&amp;#43;nII3XYhbOE79O7FICKMNYgOajdMl8PY0AkFXxImO0ISo7RTQVMNdrxDlsIA3X3nR8m2uK3ZnD45IBugGMAkgLKSsfuiOGoLxH4QHAAEJAeWOhtiOiA/MCh/WROf6RROfG1ROm21P2yRzP3Pu5SPvu5fXTHRd3/u2v2fMue9D3rJJZTU3iM9G646Kwf3Ec&amp;#43;n2Yey6zfq413q8212t1SknWx3jn9B4ZOwvUSXTRz%0a%0aTCvxyRdN9j99iQSAwaCOsmGMAVdhxAgjRKNBP/kzkZxKRQALSJWAYGqaYzu/QAjgEjAMwH4AHoKphJAGGOy0&amp;#43;PJwno/HDmzvXB8GP3R/cSP6B3FnGBwlntC192Lq&amp;#43;wPbi6xKo&amp;#43;6nmna9VbCcJxPLg2DYizoFUx24XmJByXnU2odOL&amp;#43;yxnF03bMhXAT3kGxhXmXArboYqGNq/DiWiQ06ataZxmFbQQ5oW953XvXBAl8zUqV81vqVhwAa9Om6JA5qA%0a%0awA2k4dNClA8EhtnxjQscaVrR65g7apJQjp&amp;#43;ynyf1ighh/3ljcPkDjfE16cHYw/ED4UPaOFVpBTZBr&amp;#43;CrkmYxC72VOXlJQ7cJcCzwRaunZ0b3h7Tnmad9qDDVUzZxnwTx2pxzoE4UeYiypKSHowMvUqU&amp;#43;YgMgAVFbjNrYm32K9AGogizr&amp;#43;zUopMAApC3SP2cBgDjB2gODQwaUIAKAEMA3CJH2nG/iKdsVzsSLEsHuLQTbNzSoWiR8McA&amp;#43;1jPUx0wP%0a%0appxmP202H3sx4a7FJUV3lqCRpovIO2xYOtOyeP5ACLnQ2xB78X6Z44WDCUzPYI9h0OtXZHwSyiXN1Rk6b1IrT6/OS5&amp;#43;ArogwYtwcPyCC2GkSxmFxb4WS0BZbQSNU2lU/9RUS7/aGpiJqCy7pOd23SGuZ0HtybAe2I/fPmwq4/2LKi999EBVx4vEP4ULfThSqu8ttk&amp;#43;oQn7P2NouJbR1dSSR/3YMhm&amp;#43;LPD&amp;#43;m3NNQfetkOKP/xNWEkwmKCHwNlpYEJ%0a%0aue&amp;#43;256UYwS9vj7ulfFpLqGgK5SIa5MRgw9vNP1X4Sc4wFDHT7yKd/Z4rK1aESe26g6NOI5&amp;#43;JUkLkm99tOHNRrca0JnlOHy0BZtMGzBnkgjpvxcML9KjzJ/CVWJ2GUMLQtRGycsExiRQJYoFVr8xz5BQ/U1LqERG9GFN3RVJhcHLnCxX/cV8ZbHE2FaG&amp;#43;sCuggLJS3NI2&amp;#43;FyHIB1lKVy553IR6RFhPd7HlAH0BCAK0BB6A6QKAAdxVMH8AJYUMB4b%0a%0aUkAxgP5nLu5FyV1RXE5C2cU8JOFmja2Hm&amp;#43;O0fWzmyfWg&amp;#43;1fK8Z4xPLq7hnZpUPPa4Pm44Hsa9lpf94UpgnTFlnxOoe38WYe3WCl59u6vHZFil06OzfE4abUG9iaOs1fbOl8wzAawpOr/Z4nb&amp;#43;zoOvE2vOY60FW1PjpPb4FYNi&amp;#43;72T7GulMJpiYh8x2BgJkCMg1ZYB2hlqrQ9zDHIekHJxMVFQnYkG61ItGqHVCKiiumgMI&amp;#43;SNHwkdmJoQ0kyFrEM%0a%0aiCEBXf1mzXXjnNK3sYmm54Z/FJwK9GlXy&amp;#43;81WBoH0hPClENWe5pqVKLJng0uao1GERRBsN7J1bmzRRxiw9bnrgQHF9oYTQptSXzPJxcNJTDsopdRDCtQt70Y9nK/UJSmW9AGqmOJSiwCnc4U5otw1CuMrgKqAagEcA/FzW88J7MGjug9WPtbd22VTvS38gpX624mOxp8mOJp7ROu5xSOe56H2F&amp;#43;zoml&amp;#43;0p7V&amp;#43;8zafwi0k8s6o6W2fDKPzFV3BJ37%0a%0aW5GfUv&amp;#43;U&amp;#43;bLmx/qa688HtPgyBBWl1&amp;#43;Btefk7el5Bcd2/oMtJ2C2fLZ8GoTBWT2hSwSUK9wxj2f&amp;#43;ptByxAg9hFEKbNi1l7EgqQrfHX0e9Km/554E6DPdpE3IUnQ4Y/mFOCRRbxVP4I0mJQPYv2nU1kqZkMhz52CJgtlWEq5/fpT4kvAz4RwuBinAqlFqdIwozngaxoV&amp;#43;W5p&amp;#43;LPA9An4M/GIiSsoE3zM&amp;#43;Zw35oPfVtNuYvpchiM5nt5S0WzZBkmCG2%0a%0arRonIivDwgmHsyyckK9MfFZSQhsGaE8mi1CvNqPluo5cKoZuFVWrsguSQvHw42Vbrw5jn5d0KlJ6OZog4qGxC5slzQZhbOBW&amp;#43;Kvxn1Xh3OHW4vQbUTRWW0opaQIgA98jBZxK38AOAIYpTMPoBdu0kAuQBIqVmkPdRI3IXXs5dGhp/9yaB&amp;#43;P2MZ&amp;#43;3ONCxfKra&amp;#43;fWtE9pWgcxZ6n5ZKuX5RZBC&amp;#43;NeI3QfZ7prcZVTW8mXzWzUv9/a3is&amp;#43;3yOoI0j2Y%0a%0aIyKPPgwjG1BzXnSMlj2LeF1qd20hHmdRKPwG1dO4/ff7zxG25LlbbRkPoxQv5IhDnGvCpXGlRSRHi&amp;#43;hADf7bMNNO51llGbTR96iMNOKxN6uQsonpsRAXFqpx1/ogJCJ50nF42bFpEq1prUdga&amp;#43;4tGqp/o3rM/aw4JwUyzTOSqjERERUVjUAKkAiJmgIs0HkDAAHkHpXolzDSvoa/SOVyRYa0yXc0Z2sG6ByBufSwKucZxpXsl5Bufu1fXrFWKbom%0a%0a/hIKoLZw28UWPh23Gab0Equfm0AqRaDrX6u2JPMcxJOpJ4A2ZJ/Kmh9aPX6/PbMie8/oFJ7sBZ8x4m2IITnnI2LSP52unNJhfPIa5YOjGrLxiY5VuT2wSXae1htlDgRQBfDc7P4RsrMFh1JQ095BalK1SCkBVX9WjmsRaEMPYMAgs7p9k4hDD&amp;#43;HSuFKkrRtGg0kv6qseZ1sKFzVAXbdePfrQHILIMJQHXNpLYXWWG453KwLXscJlVNKQxud1Cg6J%0a%0a9MnGLSQVEFqHrOD7TWuH9au0Rz6DhIGaDrSa0WK1AOlozAOM57xdfO8uGeABQAeAImEpKUMAdgK9Ja5t&amp;#43;AhALSAowKpgjC4yuTw3llGDdCgt635SF5Oin969yuDq2l3MZ6BuhVa22cu&amp;#43;228u522ol4tPmbYYwD&amp;#43;m7WEmwn2xYNdMp/FUvOR9D3sN1YhT&amp;#43;0OLbW8vO&amp;#43;x7/WHwN7yIi6OOvwBlCnJePqFB4OOQG6k7n57RMd1VobhU26tpd6fpUK/6%0a%0avGKNtlcEb4hWnQLVpkBwir&amp;#43;HRhLPCKZcxol9NoJZ4pbNDLh3DowIOywKFDPl58eOr0q8pkwYvDZ1TPCZO6KH3xOCLgUvDlSRd4tzb4rMnTQ/pSQWNZV5lpAVHfaEWlekINuT0xoQLxDCTzF6HNNCvhH3EPsN3O6eutS2b3am8fTxKWMADJkkBaQCCAigQMAOAEjAULE8hvkLgAjABlnHNxxL5g33ave3ysY7Dju627mLUl0mP0l4J3sZ&amp;#43;Bu22zJK%0a%0arfZ22LywUuY2rIZbg5Vzyl5CNd0FYnWd1hvOU0ma0c3Onz&amp;#43;zzvMYky5vBxJrFWb9hCm8/94W9T3KIdExXUezQzUfrv7XA&amp;#43;gsmO6r7h53xRKFEwnm5LZDOkZGpoFWcHR6xX/t9VPhFtEgGOiR2TTN0A2wOOdGoHaRQiPQAPOeyMdFA9ATgBqMfc/F2K4lvWYx79yvG03ueV2oXG0x3PJp3ROKGgxOgt3NOF7V3aJDV0rU/XlnZDT/2B92PvD&amp;#43;xk3L%0a%0aW1AvpB9BWQS42PpjSGC5jTZLkk6LwilYTjf59MuE/QVCHlptrlaHEM8uHugH3gNvofU&amp;#43;EXWoKojasF4y&amp;#43;AiTMMEZH5rdpvKp5qXd4&amp;#43;NWJW2YPs5114HoPr4xMRI6wM6ImfSC2B7uargVq5oBImw6XW3QjPrzex2toYNP4uaHnMU/jv/ewMyid6DqAtzNP8Z93uQy92mStXBuyteVIXoTrWqzAzv/5NnJIgQlvqx0lueVP83RJ/yOCN3zvhPALPLp%0a%0ay3HOZwxv1UxnXxoHV1TXNjt8hzqo3aC1VQZgtHxD64vU9&amp;#43;4uLjoZumI3KDSADUB6mapgkgLZuTgEIA73KZhNAA/tQJJu0lnVtVns36UOmZ5vIhcBuLD75vhmYKvMM6Tuu9x237DxTtfFo3rdbEhCwnqYnXLoCWToP3XZ51ZXexU8GNkhBHs&amp;#43;/hvxJ8j2HwDMb7/mMucxJrz5jYg2KGedPm81jnjVWsfTByq8uswwfNRTWXoEX4hTAgNhcw0tNuaO%0a%0apnSfFsQMnEz4il9nxkkHLH6i6VHUZS07FrX7vfPAxSKeMk5/yTnzR&amp;#43;LRpFS14cyVOdAlQ9t91GWnOAd6O1ap7IeIUljAr9jsAfSJoB9APgAeANgAsYOgO7kLgA9u60AdgJoAS0zofwx3GoXG1w5XN6DIpWwNsmj/zKWjySzMl62mbDzkuCZ1fXy9fSPHa1lnHnrXsx58SlXm1UhNWJAWEc4&amp;#43;aJ91OmJKBmL4e4EeFj&amp;#43;luljx0vtV7utdV7HWaDyT%0a%0aGUOF8Fed6xmBucLP2xy4lim9p2UlSEfUIEqegxIavWt&amp;#43;nXCS5EcskOV1rF97JmWVpwvhCk58MJu5w6FYYFO5XyFCFYbAbMPhMCFbRrCgiczVNF0fT60kOSZzX7ztmtGuD&amp;#43;h48gIgxS6XAFDEPzSNIbOZS4IQwjAmGwVpx6JLMI9g0o1HraIlZoVSHRAoWtyMEcyRlJB7Efp8PWRcDkfD4w8hCALVK7uYQA6wAmKXyrCkoAFX87kHoBN2iUuFzpSf%0a%0acbSjPVHU3PlC4Bv0Z23PWj9NtO5/5vmB3ytWB3P6wm8AnxDX3uFxHM8ckDUbBBx5g5CLW0fD4QfaumqvB9VWTMtwafM1WGdDeeH7&amp;#43;hTrbljyrbUYurbtV9rbvVxFW/HYLOjz/4P5xyX21e1lF&amp;#43;xRZx3lNmtU&amp;#43;GXkOYU06ScEQQupOoYpGeyp43dFpK0pdNVhOsbX0KoTvNEBfI3BIgrRg50g6Pwh/2/cvbGayF60oCX5tW/qxxHxQMkNEwNtTsKQ%0a%0arLowaKVBlV6j/njc5QEk5IKZz3uxo2koDIiRukfB6wR3xq2JT3RxJTpoephBK6M1ifqpgMgVjAg1IQA&amp;#43;gPQBJALBuUd2vXClymz4lr0ZLw/&amp;#43;u/tYSOgN0OeGT&amp;#43;3uSd0gfri0xOr60AeJDZJoFOKV3i4ylMK9PpQWd/ge9p9huP4VuftfjueIFUaaTVyMuOM9qeHwMWTl2w1uv2PwwROsvmg3Tq9F6saoFloaiFUV2Y6QSVAThAcOqKFbcSHexRhK%0a%0aFGr6cClIPhbNTDdSvEdWuO5zlydMa6QuQhNAohb939vdN0xfRa3YR4B114dHh8B2gJjlyAWRKsYJKp8j2uMDwe2fxW/UfpBL&amp;#43;u/wzJfHu3JfBz2z9FL6OeO910exVXYe3w1N7RTRyfwt3W4nx&amp;#43;7DHTsueXtNdkFELTPxBwQf363cpry6lugj4sfCN43mMSxPnRUwYP6/GUsVT51madSruI3DRo5SL61VCEwXvIG6JCrZnaotqmtESYBgU9PpQDxM%0a%0akxPEI&amp;#43;h1OBAPr4bqK7R6Y5TiEwWYTw/v&amp;#43;mgdnxKUMATgH0A7SA&amp;#43;VRoEIBlFpUT&amp;#43;nGMAMwAFzYRZu1nYzeXaROAfaT/17qJwwO2r8pfAt6pfcl7cXzzQUvVQib1x1WE8J50ApMFhlHDL7tPpj0luJKJzuidRIGFr3uef7XTe8e9CXuZ0zfrVgFGz4qavBDjEX7W4oP3LadPEKzZaJl26MfVx3mIoycfwvX4w/EP8MBSbqKo&amp;#43;KMjf7PrY3A9yEThN0%0a%0aInkgs9uD8XwpWDZPA3B2HNlaVYRcY8K3GIqPjOkvx51mKxZuYuwd&amp;#43;iRgDxKpQQdDgRtp0F09RCD6SK&amp;#43;YgcIxzVOJnOvcC0g61Ry8plpji3q68JRuSmOWxSqaiFdXq111snvaIxMWK6EJA1o0oonoOuNMAHtw7SA&amp;#43;5MADciEAEjAoALY3IQMnmST/DOyTxWma9zJWUZx&amp;#43;s&amp;#43;z8bXtPa3OWr2lzGT4lnmT8ge1L6Y75LU4eEdTt9ltfN6Rj3KaClPFY%0a%0ainOufpr4XxcN1Keg68EeV5/Kfjeaablrw5L2l4afNr10vcc7sfR87lvvXWoPWUeg3PW9dOmm2bRvaI4zXU7enXAcQQyKIuwoIoQQ9Ys5tCrhkGF6ZsONOMmkMxefr6kg417aO6rxhFoQVJPORDU0&amp;#43;nWxN5DOFARX5btogspFWdPsuCpJS9u4ah8lPPr3pvmWzga6py70/gPoABgC3aoADZMTgAeMHoB0gfSM7m5oRiAYb5GOJ5P1O5qfrXUtQ1fm%0a%0a5wOevN/Seq70pfhOypfPy5jer6wzbiZwyO1hnoFJONIah93MDjyEBjoMj8Wpj7pLdZTxkhT3NfpT1Xnpx6U3rz&amp;#43;EeGlorvfRTZejGlbKdr&amp;#43;6lktu1xCVK&amp;#43;hCvFBE80vGaFxN/2dQiRgM5A5xzxGQm22TZoDnulwnt6A&amp;#43;sr6O00BOJT9ALGyvED6Qy1Q9Br13jB1QHLhIBoQB07ys1HO1tUnJ20y6ryXeHu4Q&amp;#43;mr8Q&amp;#43;FL6Q/Ub&amp;#43;Q/0b5Q/WT7DyMI%0a%0aFZ67PNsQqtYa3FUeLRrzRWO29WzvJ93FRiDw5XNO0PfCnWRulr&amp;#43;HXSNwLf5d4d6ybOaqZ9dLOoq1g2M6yEc3plSZMMBJmhsK8PSrBgQ3UyTgsoC3BaoU7Ejr82bD05a5f&amp;#43;IKFloOtBZkrhhQ58n2vTy5PZOibnHR/fuwH9AGDSpuW5oQiysYHcgc08A0/gFyAw3vpgMwLgBJAA9AaH9XPe5hPDOz242lg7B1S7ykvoDwq3Cd20fNCwge7qrXeMb6%0a%0aE/pZR8A8x5xxeVIWOEmyXGB8DnwVKJuudpyKf552KfAC2Ze4qcvukK70LsnqeyMY4/OMe0Lzr/aI&amp;#43;wzry4vK9PnOxyoP4i/X492TVu4Smi/E4VrTQW7j3zA&amp;#43;vvuuwzi2SGqUy8rqO6TBgYUFlNMKoLNaaoTeJKAp4xLREP5v8y19R&amp;#43;Mogwg4hE6dPTpvVUJRRarEUa6wHQhNN2LUvM61blEYTjYnZVSzU4EJGn8PbzD9MPoeM7XXBA6r&amp;#43;HSQTk4G%0a%0a2y4MlUQmDS73nfWkcpKSp8sZ4N06MiN9EMRpCHVPHxUTMqXNiEVCXQ1xDssGGFDQ5s1CPr3fty4vGL2euv0//BY7115ugM4Bw49twEACH0UT9KCkgJoACT9aIu5i4/cH33awD0Yfa2yYeD62YfvN8Oexjpc&amp;#43;Oj9l2KH6J2ur6SnNAClBjXb/9P/dE&amp;#43;Rr4Uu2SN8q8D2TeuHwZaiQrB0&amp;#43;H4PfabyHX/69k&amp;#43;H5&amp;#43;vPo64hWsn/EqKNzLuV25rb239I/%0a%0ay0ib1W4OFwbWfA8yvLnsgagUWSmpo/&amp;#43;ODlFKSjjDDOvyRZaGdBzWdwgDH5z3zJ3whzM7X2JD&amp;#43;wnBQSkEKzy70BzmXuagBaQ39iztmgKZhaQEDADQOu0G5rhPc7yx241NUaKT7xbtoYGYG9zG&amp;#43;8dyc2Cdz5uRz/Afk3&amp;#43;mOJz5mO&amp;#43;52Kvy8bsAbTrss1SvN73ixtO5JPT4XWj3fsNws8AX557g/Tf2nW2A2XW8I/DTaT0qbuW3MPzwTX7fd7XW95X8%0a%0aP82/sjILehPe3Goj6e2M6zpQTzFYVnGK0Xy0nnI2EayQg0szWT&amp;#43;EIQNqSVH9QhWNI0uO4petyZ2PbGbymngrpoIAODEJPIOP5F4uxIx8lbhRpKrPIZ97083vZDlwikC8lpN4Jl1ZeA8FyEuWnOzgRbOPuVpkxHek0wuHF0KmmuvJgAi27M0/gK0VwgAw47SIQAjgLdIGhmMGw31g&amp;#43;78BdHt615gX8vImeOyNPm97yvW9ymOv32Ofu57&amp;#43;/e56KuaR%0a%0a/BsN2vEjZ&amp;#43;bEM8s8WOhB2RQaETB/J91nt4P2CXjiZPfd27JP0nRqfMSxjjcP9/P3ji&amp;#43;6xbzdOUcOVBEkDN3AIgnx05BsJsCOZFUHY6fK0sLVy2pWkcTkuxwrAYw534Wd1VGpwkioSE0TTpv131He7WIuhBoTsidgAiJ9MGVsQl6u0EAPEA4WYNU7kAT8TMPc3K9xSs4NRzAfKSRZOO79iCH/2ffH80f/H2fLlW1kubnyE/034nnM38See2xGW9b1%0a%0anJZV4Te8lL&amp;#43;7tnhyOjL&amp;#43;TfvFR&amp;#43;g4NZW&amp;#43;8mxk/IsWf75TyiRGdf46KXGjEgG3fOO36ef9Jzk8UG5bLJZ1D/0Szk/7&amp;#43;5EewW9asoW9rJKUWPfQkxZf574hWwX1lv753ufE4fPYEQ5LOtaW/hsoW5eEWwnsIgZtAI8vdfG9sKKP&amp;#43;LqJwqlBN46NrFwkDp1TjPaHpQrbQMcLeZ/VXORYHQyYRehqVjhHBylP68t7UTqn2vnEcWmsAIQunF9QkHyQ7cQ6%0a%0aEaoOwqgg3riQFKXncIwwstDLoxzxPnJ0CJVw4p8bEKdFG5WD6xo0&amp;#43;FhpomPW4laOFY3aEoSokGJvraORQjhwjs63BWGF3wCWZSJlZOCCXynxRdMLls&amp;#43;jbF6&amp;#43;iKzb/yZsNrYx/Lco8MORrAuKpQQugeKSF6ILn7PbcOhE/DQin11CL0VIFN&amp;#43;OSGMDypEQY7Q2ktRGT15HfZm3axokKN&amp;#43;Cma1E&amp;#43;gPYLYuJ0AWwJ0BZiyYA4ADsBJAGEAVfVsWFHZ1s%0a%0aZmPDmSLDGOvH7r6y7yP6/H5Xejv9XfcZ6d&amp;#43;03z0fur2iwMoDN6aoOkgvmmE9ZDe3BtYqy/hT8BGpr9hv5aAEf0c2luBH5vOTp8zfst8T2IjxvPLTci&amp;#43;Sy2LuMOGqfN21f&amp;#43;2yi&amp;#43;R7B8KOoIE/95xScpz2Wi&amp;#43;35&amp;#43;R&amp;#43;2t2X3raPQRQ3S61TaGQFKxhABDRRJOQTqSOgIRQvJ3pwCkhacC8YK5dsQk7lKOY5sgAHL5dr4TMQHidgqiKQWPdDsDp8KEkt%0a%0aOGCgSotiKDoIN8ln&amp;#43;Ck6RRFwoVVUVvgpuRZoN20pEiJKYRFBSCCKPTh5DBwwCWI6zGXWEXomqXvMBUxqKBBHD51xw2E5CtxZS2/HIx8XXxr9GZBL1y68O5A&amp;#43;gCxmaRVFEHwAdoBb6XXBIwBQtVxWH/d49T79MbBeLUOfIe1ZWxNreS8R/z3NMf9rD2FXeftqR2g3BY4fIHMdHtI9KF5PeTt1OAwldDc0m0w3X59hbS0KdTt5jyrfGU9Fr24YfVcz%0a%0aV0nMWJ0Bx1r9Xo14wUirW/0zT1p7JCkjyGfhCEYJMxFLRaB9L2vQM10kwwvEY50HjAc4VJAKowDoJ59fGVLPNct8HGB3Q&amp;#43;NKBHkhUgBugCtKaSknIG6AK6QsYA&amp;#43;kKZop/mIHDrYLgw5gcdUSLGpPWMhn32SXUw8333MPVq9Av3avVN9cuyllW5tUoHFWBB5vDiXPLidnq1zKQzhi3x&amp;#43;fTf9J91YFVL84Ky65VHttVzv7OK4JH2vnDL8MlWP/auEy%0a%0aYyCAvYC0XwU8UntqczlHJ89mpBFiGFQccEliMvgqTHdFBVp1SnQiWvIczyf4Ul8vDmLaWcl0vVb2Mvg8rQ2EJ/1bAzF7ZIgv7is2GYDHbn8KEsoO3mjQDqRnDiUYFZc7q212Cr4FKE01Kr5OODWgRWMTliykOJBLrWCgKJBXIHGQDp1QqlH3FxgT0w1cPICPYzP2CG0qgC7kEV1xnHtMJGBSACMAHXQeABnSDgAW7Xj1cN88eEx3Oq9j7WOfLoDn%0a%0au3jfXoC/N36A4J9J/3J3ew9bICXtKUhKL3vrarU8CFb4Ca8553mAsU9HKiWA/vVkP0vnVt9GeSctIwMTvUI/XH9gXxn1Uz46ty/YDGg9Bi8HQbJqtwqdSP07zxhfawdHzxmXVpoTCl1xRxpMmRlKcqBF/DSGPxB3Hy3eC9AGYgHeM0I0CFUIUot6Lj0Qbg9vAk80bcdM8hCgQLgjoFxUIUgCrh&amp;#43;tHjRuunsDATQFywi4J0JLqDSYNKQD7z9DMW41%0a%0aZUIID8UlVAtodhZAC1ndFQI/sha6EBFGYkCqZBwzQ2nWewkqfXC0JHYU7WcXbGVDPz3je1gFmxd6dTAhAEkACgBmgCxgQk9aQD96GF4kgFMwGMIOAB9ILBJ2QNIHLoo3P1g6TD5Eby9LWA9LDwKNH99TThZPc79wm0zfSOMm7yAhIUgooFFSTY5wPzJ4KQhL4SQhBJ8BbQa5ZVcASVNxKm9ZBz5Tbc8uuS9dPm8uCkC9NHtxlyB/EptFziJaOSoO%0a%0aCUw/blpMyRDGJ/85lCqVLt9GD13THKRziES0LP8irmvEAqQ6pHC6QbcG&amp;#43;FSDSaBr&amp;#43;XU0OJBNYkcKKs1URgafWSgWSBd/W4D6HhWJZHppOBKaITRTg2kQHstjhFiGZgClX31sYq1F6jNCQOliDGH4Q1R45nt&amp;#43;V/1RAMyPUG1941yvCFJ3MyVJWlcRvHaAOAAEEjqGXygG7VGAeoDVv2UufZsa6lr3BDUF5CSXSA8j5W6AgUCAnz6AtG8J/0GAojVh%0a%0agI0jPcCZ3UPzUEEnFWo1Ovo&amp;#43;ZCS/MU9fyVVA8K51gM8HFpddVxkDZ1tVBx1AyF98Q11AzGNUP1y/FdkV01F3Jy8UOEA4ScxAOHf0G/93I1nvMSB1XngjPvMqblNSbF9YziZDYr8NUxHTbfhlESTnEIx6SHRBElt9EGL9Ax8WSFZ7Bhcz0DpBV4CDDl84ejEmHnfOfqlykzmXHF0LGBNoff4taDJUAzZnCX3qFFRGEVVYAxgFpHqgo2heECIAsl1o%0a%0aL2ZhNj1zJ2sqLmIdUV9mehcoF172ZmEoZV5/U2cYw0M4MQwGuCySRK9mYWf4X1w1biIMPtJdt0fMBJhZnkXcfEEqDB8qY511XFGg9LgLnW8CTTRTVEgwXccKOX23e95ZUTM0eL5OOEfhePJAZCE0Z08WEUdfNsDP0xr9CfxJAIhSG/Y&amp;#43;gFMRC0g&amp;#43;nGUAOUlsAA5bUMALkVolJwVzrnkgs0QQszkrVg1vMn7/LlcoDzjfEh9R/zIfYPtTAKpHKDdh%0a%0aAR4AAAkClzUoXFQ411KXHb9WRzoIZKQ3fQozNPs3v24fPmR7wIbHP30Mt01XevNXwLbHfJ8v7S2PMUdQWSHHS/9sfwCLRF8HwBF3W/8BYOcvae90aFNXYn9ooMomXU9rQJEfcCDTj38CSyAlTEkIU4gdZ1Z8VZ4sI0h&amp;#43;aWgf7jnIFLQi5GSKMOQ9OF&amp;#43;HRDEJYjBWU9URhC2HFJkzIjWWVpBpbk0oaxc7PDygDNZ2MAOWTWppkCT7cKx0wKZid/kB%0a%0akEb4M75a9iaQAQ9iCAy&amp;#43;Z/U2rQ1HRs55c3HESC9JxD/4QQ9QWCpgszYh1DJA5lspujBZJrYDQBGcAmBQwFGqWkA/ah3GTAB9MAboI8EO/xU9SNUVrBfpYftUZ0HtJcDlK3GnGid2jyC/IVcQvxFXcwD8YJzjKnd4NxSkEAUhT2sdJ6tZyDioNzge8UmPWmDS3wddNhYcm08A779q332BGfUiPz8TdUDN02hfeKCV4K/waJUVaXQTFgodj3I3Ej8O%0a%0aCw0nH&amp;#43;dwNCVTW&amp;#43;4&amp;#43;Z3gVDL8mnR8gmyxISnJjTmCOGDEfKEckf3B/aSd7z2fgsID8SwiAn/8WkCKQUlRJ6RePccMyVClzO68YinlzJXNLEAnJTSUuSg2EOp00ijDoHVFPhCi4Qv1zEG74STRfdzGSHXpQJyNFVTpF2EnkEYQ3j3woQ8RiYTCsWLgo02ZhPECqcD3EcfgQC1rlMSY9kkdnJk4iE134eLwsoHMYPEE6kjpIaUJeFAS&amp;#43;Rh8UrDYwFrhC%0a%0avGuDYgDktmH4NqRqPF6/Vl9nWTM8Uwpv&amp;#43;Wc3Z5Un80P4U4RkukJdKhEccCluUIIQ5l6QVuAqXTGfO/dMrzEAiu0KQNYvNgAtn1pAbAAFmiGAC0h6InIlLGA4AGUAEFNUVhXrUS8y202IRLVXSyVVJGCGRA6A1SD0tXUgjGCjAKxgk78cYNmneu97nwZXWh9OTxSUenRBETODBJsTwInUXYRMHVJvOYDjL05TYDACwBsgiBVleU2PFe8MOHp6dm8C%0a%0av3P/UBtEK1RfIXdzARAbPoU920FHZrtTTzKfXrMDhCk4OnRxTzsCWRlRdVqtNWZNqSKqCIYl8VkoFBFSVAH4HSg7DG2EXTQ/EBOgcr9pEirEKzwGG2hGMYQDe3WgdkhpZCZ7S60eCBsKOqAhTE6kS6g1NBkoRQkusRHEVpBFyDnESvklh0iQoitEoBXfAz9voLXLbTIzH1XBBbFmgH0weatugAqgTphIQHa0GABdwMcQzG1sXg2/WvcP1nsUOuDG%0a%0a2z5XRuCk32bgzo8BgLJ3IYCu0x4APRNDIIbFQG0ecV5PM4p0GXYDUchEkI3/ZJCp02oxRmDSD2Zg2U8&amp;#43;CnHvDUC7LyulY0CYrha3bSd6NwjrfHNUcSPgylCz/w2A41dRlz3gtrxye2OA&amp;#43;0CIIIVHKQgJpmPqbwZYmGv6F5IGPQNvTq4bhHkyaaBS2no0ML50VGjoWo9sKED&amp;#43;ZUMb0A00W&amp;#43;pQunuUJFQ6Py1oGUhdDEXYM2huoynLBcRGMWSPXydG%0a%0azXxAuXUJKD7EbKIskDOgXXtjlyU1VOCM50XQQ7M0ZiOAEU5GpwxPNvBT/CMAB6AtnxOAB6BQwBMwc64mgNLMNldi710Agkd9AOavKtE/EMCfbGDW4LMAvGDfwR4AclMu4OcPdKZcVAOXXS85gWWgKThnh2&amp;#43;fVFC6YIMtbkpp9wjJea9vALpvbrVBYJ3g9dkDj3PgU1YZeGvdRjpgiwP0TjoWUKVgz005Z0lUEZIGSn4IDnsDtg0gHHB/x3dnJRgP%0a%0aUw8BMhNO3BmSEBg4DWSnBd8V4jtoCkF0nCtQ7qoXwAKA8SlOgHdzKoBj3yqANdIkgFIARgAf9wolHfIKAE2LR0ty4PW/XMBa9zvLULNdv0H/VYMDv0MAzV1/EKZPQJDbDyn/DN8aiTvOWDB5QKwPFKY6CD5kI7dR4JcApUDhbS78Jc0vv3SfWeD6/GKdUtCdTxEfRH9Cnx5nM4CHQLgMMFYJkEwWLkh0w3pqb9pMCzwIGAUjEGUoXKDd0EQNYARu%0a%0aqVDkSeheVH6/Bi89G2MfT&amp;#43;ofsC7ApRRVABKBOxE7SE2AWnYt8ghvb1RJAFD6cmBzrlUdDmAxlWrghcDrdENrLxCEx3Rgw78w0K0goJ8dILBQvSCIUIcQsJD&amp;#43;rygwZZZXa1iQ9uwxrRSaF78S33q1HNCqknSQk/1LmQV3MDCp9Ay/PVchd2kPQbkjVwPgg1Z9MKnZY/9aszxQt8DNgOJQh9lEoKY3TLYBtGToPNxXpggBVXFlGHZ6GnBOJlMCeC9F%0a%0ahSoIaINBBXYXXAt5KFkoJKRCvF4WEvlxaHxYd2gqpDxXEaAlKHDAoW5DDjF7BxBUrylsPWhPnxE0bKpBFG6EeOkb0wFKcflaVDlYCKUfgNZLYLgv0F3MBNNi/3bA8asfsG3fJRRO&amp;#43;z&amp;#43;AdGBsAGVhSD5AEGwAPoBi0yEAXyh9MG0PHZ9FrC78RLUcHzaAyFgz0JOfQTCr0In9G9Ca7zvQzcCH0Iu/Y648x2ApQ25kN0NbRrhE6SN/Dh8x4LUwh11M%0a%0a5E/rRxMmYOP9HFCvwDsgr1YEqQF3cdl9MKXZJm8Rx2yQs6cB8xPCZXcHMMJLEtxEvUeg2jBdChPEbSEEUTk6LaA8MEHUVs0sHiZCcLQKoAkIaUClVECvSTQeJkHDShEpnRc4GBx6wR3MKRJDhEXIWBC3zFKqHjcl8AEQH9t8V0BZJNtP6kuQ1i9ugBWrRbp6ACKOVoA/3htMPGAHkE0WGAABgCEAOR1ZIPzuRGdJAWRnDz9pWz&amp;#43;Q/jt/P35XJuDh%0a%0aQLEw7o8xQOn/TN9Qc3jQ5u8po3VaWL8a&amp;#43;hQwYrCUUPHbX9DNvT7EXnZAMLXVQtDub3Zgn&amp;#43;sF4MLddt96UJ1w7EM14KMaOM5qkNlnZItCS2ykBI5ywVdxDRhzVCWyJShcCCAAxVheJlz4RzUZJjxwEUJhVFu&amp;#43;BNsasPOQveMiOwawrrwBvAfcBBJOgDgABO4JvB6iW/YG7QJWQmDmcNcyWDpOMPiXBG9xsL5Aiu9Q0OvQ8NCAkMjQ3GDgtzCfHO9r%0a%0avyWnYpNQVgerGLdU0KugpZDLIL/Qq49NMJOw&amp;#43;m8/vwhrLHpz9EyQ&amp;#43;H8fAI30PmkOhVtAreDJl10wh&amp;#43;CoMK5nfgkJYK1AmFtcQ3Cg9yRul2xcLdM8X2MnKfDDbzfReq1mcWjPT745xA4oSdxJyXlIU40qjVzrRkhpN2AwQ4Q7qRRlBU06CA9CWahiVGAYX1wAAVURG2cITXkMBJgVYPj&amp;#43;PzYEvgJYNUIW5VlCYZUyrjoQ8KpNkhCsVsQVY3ycf0MP%0a%0ajT8aIP9EzzJUFI9ImE7cXhQNtUblB95nGWQpFTQP/l0YdK8nX1IwvRC94zrkcSlumAGAFjDZQRmaZv9aLWbPegA5gAqGQg0WvRkLWJdxIwSXTawqB28/FucDALTw6bCM8NvQrPCgkKofMJ9kd2kw3tsV3Dj3GeIyAhSRfLEaVAVAzh9dsPQ0HiE6xxIPbMsjp0hLTvCld1Zg78hHIPHeY9tcqVvg3eC6UKBfHL8MOEA4LT4TUhgw1lC0CCagBQhO%0a%0afC6gF/NBozqdVpUHLmQw9902PyagtXdo53bld5RSfHLDTDDqKAv4dvAFajsqEFgPXCjmESgzxGLGTaAbzHDoHkgPhASgIwkrshpLYZBjGDMrakxcAJnQx/d2vEowtGZ5MXpw9oALSAMRBRZOgFMwLGA/gBpGCG9ahha9VxF1ZiWcb7UucLSXEkcUbxEwiNCNwLrvZgj7n3uLNgiIy1bNO5Q3DwSbWQ13aEM4b9oK8MVwzMDq8Jbwq2YL7Tl3azDe%0a%0abyEfclCISyfgroifcjstZ/B93Wf/c89UyReBQKsN03ECDyMRGFslN&amp;#43;DMGxNwmntP4JjcXSADNkVcQDFhswnYSnx8WHt&amp;#43;SP4yYRKgSGwlN3oxRkpCMF2gJi566Vb5XvwuD16SZ24HXA3pBs0HECYwV5VXUV00E6YqCHC4WbA9cz8MTQwwumC4SgJcrTJKU8wBNwU0XTYJ3DOydVoR4PCaKSYfCUD/GKURkQHuHYJDGAPKb3C9sw9jOwhYiIhSD5AY%0a%0aAAegRCQxwL6iQN8HoC1QD/FMACxgW0wJO2vffCdFrFOXb0p5g30pPaoIDz0A8u8aCN3NdPDSiMzw8ojbny3A6sUeACvffPDmbWR6Zkg/BUerGvpdhlz0Noing10ofu9d/wLQ/f8CkK1wspEvIM3ncEVD4NqbNMl3Ww1wv/AaGXfnbHEAgKJzE0CpNRewyID2UL9kBINqrkqDfOQExl5UZLYSl3poHihsQllUSNNAvAeVJTISoFZxeclomSNFbjh7%0a%0aqW4IKXN6kDtvDuUacCOKRPI6SH5Qg74O0SU6JJAcDDSsGNwcswIMCod3kiVcRSxcPQyiei9Zw2dfHiDuHXsoEz8IUk0Ad2BJgyqANF4MwBzTN5AuQDgALGAHkGdIBNFe/UVOcZFuMNGw1I1k8NjfHxChMM5IoUDtILmwioi7n2GAogdoULTzUpxycGc3XykHv3e0R2h&amp;#43;BjlwumcFcJlIyKVOiL3PE1VsvxvUCrc7/35vZe9yt346FyNq/DK3LL9N%0a%0aJwvPZQj6t07jeWDMK1NIn/8Sv3sqMTQFDBB9UJhjl2MFGX8PfznIQHDZDATpV&amp;#43;wOFHgxFs1cGHo0EzwG3H8BTak&amp;#43;HndoXkht8WYVQfZ4EIvEFp05oDYIKDAelWqQGaQOd0&amp;#43;mLigppAliPWJD9yYWQEVUiT56DLwbzH3xR5MFhVqUMRDIhjOQzEi04PhPF/cVQDGATAAqJR2AdoBsADEVNAZXgB2APGBKoGYASDM1QQ5XBPCehkaPVsjX335A3xDO%0a%0ayL5w7sjGCPvQoXDH0Ic3MXCgIUEIPcpbPSrMN59m4H40PVx&amp;#43;CJ2wnHVdZRY0OY88Ny8AxUisfxrwtdsbMKXg0EgonFNSAH8am1YYYyi4fy//D&amp;#43;CrAwBlEZJblHiQUSY&amp;#43;Dwc2SDB4C3EyaZBCpCi8a4iWEFNxJjQeEDv5fklpxDrSLQhcpyOvHAtNCCuiTKsrRiiIzk4wRVtQ/3Ug40xgVoAuQFL&amp;#43;TAAkwk5bUop7IDmAB5AoUPeQtX12KNzAELN3%0a%0aGzZNbii0YPbIqbCLaxmw8f8eyN5IhbDtwIEjEdUWFCluPLNZKNu4K/pnGFmArNDx4KEIrQoFyOydU1dupj8gzH8lB2RIWEp5J1xjfJCetSK/SfCFxxRlV9AcORS&amp;#43;NlRnllxwWwMwA2cQzqlO&amp;#43;BmwKVQFiXlufW8nClcZdmt81ysNAAVA7kgo825nEB8GC/FuIMkPa1CCZUgfJRQ7kFNLDugo9QREPoArGyDFTABCAEwAboB/bEIARf0NaymYRsjm%0a%0agKrbJDUOcJ8wfEcqCKIfS9DaCNKo&amp;#43;gjZsKEo&amp;#43;bCRKMWw&amp;#43;2saiILw&amp;#43;X9Y0HVmKsw4vzeIQl9ry0vAquM13RzQ7DsuqOcrIiZVgL0o091tV0ThZUjcanVI5YijJ0mo6fDUhi04IDI&amp;#43;DxAwI2DmSHWgQK9EyzwFe0IUtAN/TqRi3Dv5SLhM6XOojd8y/0NIf3CIUhD1PmB4gGkhdTAAiAkdLrCacOA&amp;#43;H6kFpxpIplcJ6DOjPHh5wObIwpdCiJb3Yoi4%0a%0aDy7I0TCKqLO/Kqj&amp;#43;SLexApcRBRLcIa8tjnWZVVgV/zFI7GifaxvAiZ44kDUoge8Z4LVwueDT/3UHFFoOZ3rfREs8f2cgnLd4Kwv/DVcKULyQslDrL0NtcyiakNp7C8iKnC7Q5zoNqLR9MfJt8V1uB0j6EQ3KBswV3EhAzak5hG&amp;#43;WenR3&amp;#43;iLaLeFkORuyJtck0k4IEDEi0gJAhqp/Cn40GaCnPWZhY5dgqmNiRRhMyJ&amp;#43;TbMiLqNnQ&amp;#43;yhCgJd6DiIM%0a%0awHFhKoB0R3NKPGB/1THAhF44AC6AMSiVaNR3SkRX8g2/GRN3NxLgHWi/Pz1o1cDTfXonEUDdIPntYYDtDyFIl&amp;#43;VgoCe&amp;#43;eJsR1EaomwRO/BlvbbCf0LRQv9DLGA8A9Sj3aM0o58CpRXZnRyMN7BtXBfMxaQK3RWCbIGAwA605xAgwDK0av3doVmoWwW1cL3dAqg0gN4DLskqub35jWQqDRKo8z2YoF05WaF5oe855aH9&amp;#43;LNYiKLGraAN/4Gf3b2Mp%0a%0a5XhyZQB1uGsAAuJZHTIAMoE7SGUAMmY1QXe1XKjOKLkTZeiYD2RvfWiBKMNomGjeyL5IyxUeABW/cSiSuTVWdQheTxPorooEfRlIRSjL6OzQvbD4tDzQ6KkFSPkHMK5FCK7HBlCVSI8tDUjCkIitbsc6IAf/ZrdElS/okr8pkAyiZaYzaGUYVkJSSRGRNY4NXx31cZAGHTz2KSgll1OMDrEqMDbac1wOMlgvXwEISM&amp;#43;gqv0sGNHaERAK/2XDDdIk%0a%0aYFpAaxF0QDwEO0hVMH7AgYAeAANASiUzEXvjd7lSCMLRa3w2VUoI&amp;#43;McfP1Ofd98E3wuaKGjyqLYYyqi4aOqorVtByIMTVP1PsjR5QRjbWhcYQQxpSKAVRbsRCLSfVXCH6ONI8K5zeSZvZUioTH1AkH8orU8rZvDsai0IxtC6aMoIJdgEihn8KhVFhRK8O4wizwDaIrxVYM9&amp;#43;QjQUmkyAjLwaFmLlXtpu61gLAGx05HLrTBiRa26qfmF8yI3yPugA%0a%0aGk6AcvdugBQHD/FA&amp;#43;mVBUMAEAEkAC0g/gHvjZBo8eHiXReizil5AtsjeKI7IugiuSIYInkjjaNyY/kju2zC3dgjyoELydm1rHVjLUY9ppCWELGiaYLEY9qiASW7pdxFJT3lI/h9ZGPdlT81lgLCVBm5x3nRIOqZPzRYOAslmdTrw2TxSag5cWtDISBpDTeDlGMK/ag9FiMpYtFjhby2vNHFjcPcvT4FMNGTNSLoUmlvFDqAA6GsQfghxYn5JUghg%0a%0amEnQ5Nxu&amp;#43;HJwcs4Qmi/6fEFzWkqsYUNWkCc4btxw8nLWU5CvDgatY45YdjYdBd9wMAUoJ5IGYMZLVXNQQTdcFmRaSEOSWFj&amp;#43;nwS&amp;#43;OjBOPRYIL517GEYMOAxUDCliNpBEHBgNIOVr1Ta&amp;#43;QKobZyeiD9B2lUGTGUoaKTMNKGUb6gGg8G5GFHU4dcRV3wG/DI9O6M/qGO9xKSRgPGAFsQegfTBHMwzAZaEbuXIlFatkLGYAaoiBsPaMKihu/1vLd0tC%0a%0aqLUgl5iSqPObYwDxz0&amp;#43;Y0UDwUPFA6ki96LK1STQsFm0hHIV6aT8vUDpKmO8VbN1b6LdooDCPaLknG5lDfg&amp;#43;2avwiXBJQr2jVCM9lcccyP0EfOJNFGKpzBtDxbypUeJAP&amp;#43;EaggQxhaFEoYRBAoCi4JxgTJwCMafhO3H8w2fx/LiVfahcKviEQKShgHDEMa497Omdok4c4GPwQ&amp;#43;145hC0QVmJY9wBUB5VcvDaxb0CEsLKsf88CpEAIyghaKADoSqpC%0a%0aMzW3RJEt&amp;#43;AtRJVxm5XcYglcCcP6aCjDxKWhSZQABC2olSG9SikEvfQBVMDgAVoBsASxgKejM2JN8Ww4VrB7/FohPHy8/ZJjqCJDQjki3mINosoi27nLYiTDxQMK7Apiss1EIPepbzDWw/N8bfyIbHHkHaIEnRLdW2MbaV2iEWI0opFigX1rfJF9L4OP/E35aWNMHdSckS3MHMEpIW2pxM8i33Q6gO5UpEBUQFJwu3HmFOFgqLgdfKlQdoLC6JOcc%0a%0azTKkfrNotHysXepoqlpUUihRkBqgMisQg3opPVont1GuTqBKYMGdH&amp;#43;DpNEGdXnFrDD4oBAivoOIo6AMfsB8Yw&amp;#43;MDQFeo4gA8YEREUq9lAGoNF8AYAE2AGk1wgDjQ6eixL0fAKuCOYCxZKS9a4PzY7xDC2Iho4tiyqJMA7JivmIrY4XCzTFI1WrsA4IbYlh8aSURBFtiVKIcVAmjo4VHFMWkqaMgw7piFbTMo7yCwf39oxt9eGBWPNCtX4Pa4u70h%0a%0ad10GHpiZ2MoICB024B33FOg0jjcYKecBumEQTZUrUQWozqB5OBKTBLg2&amp;#43;DVVe48TOOSaKpJZOQADZyj0MINYbyprvlVYWLh9XAp4XYQNGCb4WT9jaDz5DAxyzhjbJxgK6LgcJRBXKncQIa4Q2JIwjzscyPEAz14SJRaiJIA7SHK2fxic4mORO5AsYGIACkZhgBjwrKiVPTlDXDiAaJAOBeQWSKDQtkiSOJ0dSGj3mOhostit6LM9CFDI&amp;#43;2rYhHVs%0a%0aoykZaJDj6Jr6bPhguGMjSFjKxy5HFJDrQhq4gVNLV2kI0TVe2LknAdjeMyqRJz5o6NWIxP1/fhEoJvlSmlfsfpAgfSi4QGUgVX6RS4iXf3fQYUIs6Cy4M3UcHVs8EBFiTggwcFRZqBsZYFVPhAioxGZ2vHdfCFJSAB/xI4BvbCxgFEVOsI0wZwAkcnGAO0gl2nWhHylOMIRglvhbPTwkEaAtIAYYs58P30TfMDdBKIx48TDt6IhQlfseGIbFD4D5%0a%0aVlkkDw8UrXL4Fb0zWwp4pJ90UKBWGnjYS2v7JjMbeOKEOPjBuIvIvcpCklDSdyjXXFP6NWhBpD1iNXj6OBqEYqx&amp;#43;II3yA0AFPU0wZgByjGL&amp;#43;MUEuQBKKMmVmhgQADS8GgP4iABwVrBaAi3QX42MPToDnmNTw0jjUePI47kjKOMx44MsCuM4HEmcssw1aWsQhj0o1Dw9VqQvzLnYOOMFtLjiVKNdBWdN80MRY8QiG32VIpciJ9TX3WnN8XwT2W2hk%0a%0auFk/SvgwwNMcXURxuL2EBik26NNzMNjhaIhgP0U&amp;#43;HVcIFsAtulpABEQKGNZAt6R9MFO5SQAdgC7mQgdc0VnA9yAbFBJFNLiBMOKozLiMl2y40ti&amp;#43;&amp;#43;I94rHjxQLpHRHka2N34cVg8o1/DBTD5EhILTHDKuJzQgqRUnw07OpiBOJ5gg0CwWy34qnsd&amp;#43;KZY4E000KWgFRBtEIyvQb9S/wO5W/juE1I7eIBCYAYlfQBTMAxPGAAhgCVrTQABL1MwBwVs%0a%0ab1jwyoEmOJWsTb9z6Dz4tlV7eNs9J5ieKM74lHisuMyYnLj3eMFw/LjH0Ph5XHigISS0OSY0eQHg5uBVqPdoC8DyeMSfUU8/0O2&amp;#43;KPjRPDj4g&amp;#43;AE&amp;#43;OnYm6chaKG/N8xVNxqEcSkuQHL3HcsjABu5SzIHM1O7KTEogBbAB5Be9wEE2c4QrG7/Nz9WmTwfL9pCOPInYjjh/1AEtvd5BIgEq0EqOM948UCWJz73cJg7lncfDzFXi22OINIp4WfrAwSr%0a%0awKrHS1sxyV44mfc9/zwEhlEQwWLQjmDPzTOwwmM7LXDGCmjdByhfevDSaPuw4OjjMJiLRfcR8KCTelio6wCdMfDW8KF3XGpok2JYloSbQPa4tnjBiJX3LysCt3a40WkO4wAQCcUnBy6YufNwq2/gP8DwDGECIrc1BwygRdNq4X/0az4f9Gs&amp;#43;e/R7ZRpcZ8gf9D2E9CBOhPrQep5LhOMosuZ6Q1uEqwSz23KfXYRlnjeUWBddnky4AEZmMGSPfMEZ%0a%0aqRiMOzgan1moXxkeBWIeW1kY3ROTT4RSoP95FRBVJE0IZPI0CGQyILh2CAYpWIZx8iMjD6FiqwuueXNxoHtI&amp;#43;3VWAJ6TWNIMuDd1dOiGqgHEIWpGLgXETwIovgcaZRhkIPIjVVRErFM2fn8KSnZMLEFIMDoVFVEpOkXLAWM&amp;#43;fDbZcfh7Kk3wxnwhcxc4WNJp10dZaYEsFyaScFQUnBsYYVR/aFJEiyAPYirGetJdyitRJREDDjW4gI5XDCtxHDBv%0a%0a8LvJJ75BDHEQHCJ8nCAwDnMquABUa48/y0p8HAg51w8YRzocxiW3NKRgBzUOKL5lhWYrGUte33teYTI2kHFMPdBH&amp;#43;SgxZpVluOmzOdj6&amp;#43;BqkYHZrVCKxfAV6mg9oIzgiDDk0Kl97&amp;#43;m&amp;#43;WPRi9VDYob&amp;#43;xczxcPVkhgSRRwaXIo/lWQgihxhCS0GDByEMWkW54ZtTaSNJh7YO6LUOY7jWmQDtYU2n5IacQGvgFPHPj&amp;#43;oRxNP6DdmPwAGoATgH0AFHJf%0a%0aXmcAJGBK&amp;#43;IzuY64PqJXSRPFe7W0jC8M2VXZtKQSiqIy4rvi5BLR4rJjFBM6vE2jOGOVotQSSuQdCJVEhr0EY9Is7ODX/WfjrwPn4nNC5hVMEht8Y&amp;#43;IqQr2jb7lFHfoidhN3nOnjP4Eqpbfi&amp;#43;mIIpeqR3fnQIGRlGKFtDPBhh&amp;#43;R0YfzZfaDdRcIxVeMhI7p5zqT3QOhV&amp;#43;CGumGa80r2gI4E8vDDzSTrYL&amp;#43;PGfXRCPuIrtRdA3R2uorrwXBQFdIn4M%0a%0awEmQb9x9AFDAKbw7SDtIfTA4AAega5ipC2v4GZh9Fi2hLWi/KVnEgtiZBL09RcSe&amp;#43;I&amp;#43;YyASlBOo4griiZ03E33jA/g7PJf9h21k0ArIMBIddEBRx1RVwzo0fvzIZMI8RiKUY3vDYS1ZvdRjJYMHYszCiUMRrHoSwWzE4wnsHsLHYqBsB8LulfyCEGwjo8YS6mwp/DfcPJRC6KZYClEdcbZMeCCZ8d8xH&amp;#43;g9oLIsZOHqQaUMhywaxAwVsnBUbZa1k%0a%0aRN2WTaBh8gj3f0T5XB1GZqBGfSSDYLheYzX4HjIOCFYyFwwqNHoIUCcgalF6b4Q9hHd&amp;#43;S2NM9kgNSqQivlpUKSYOo25LLzDrWJVUXSAqoSPAsDj8cPTnbqp7KBxIjfITgGYAFsAeAEDFHgAhAGXQv4BMAHHlSoJ1QEkASU5E8VZws0R&amp;#43;pz7/JJiIhLBouk9XmO74lhiKOPiE/vjpz04Ywec6OJSUHgxOVEcDY8C4Jj1YBxBcXnX/eXCr6M29cfhR%0a%0ayKkk110u2Le2S8TH4IKQhF8pxyJ7YaiF7xSddyx8&amp;#43;zCra6T2hM0nKXdFGIG4p4SYjwzrCQxrEEsCDYRVEKDoVgVaSCmgcq44vEXwsQw0IJeNZqkI7T5fBmpb6mCeJUw2yyd/PNIoJQAeZKRxENZDWvkSK0wlHp9lKCigCqD6qju0FRAZ4jZIUpB0ImTkYQVqSQ&amp;#43;vDEjPGM/qGZAdmMv2VWtDw0xWKAAkRVYiAYAbH3wALa4xgAdMeU5YbyS4retu%0a%0aQMd4tJjBQMmk3vjppKgEgfjH0PyXBaSmZHrSBbNgqVWZFKY0JRHwFTCkkPEY9DQ0uikYoVlShNX49L95TycgvSSebwCTGewdGP3YPM9bCMCgYEEW&amp;#43;RzWGaCOvj7EPwEnPB4MVsSK6DSPb2Mi&amp;#43;I4ANwh3ylIAFiIMwAegILjC9zt7BEViTyw4/iJ8yk4wzHcrHl3re7sB/wmwkASFxLAE2ITgvxXEy301xMlVHgAJVx94tPN4JUNFV2txyOA6cbs3%0a%0anW/QsPijBN2k82gamJwE6STgMJiLITiqpgR/KwdlBy81Emj3eHfAsM5Obwn1W2UhYOHlMOjBHyuk2lDO5JGotcjl4O0Y&amp;#43;TihM3ITMq0Tehso6M8g2KIjCcQaxLutNOgGYNowTLg5YlZ8dxgRDyV6eXN0GIIoKDEYgRlKJmpVGGX8G/DUkDViXGET2IS1OBExbkp8SsYvxPgweAtS&amp;#43;G12GTJbtyWga14gPW6LOlQcfSliSl9AvBJ9KQcbWh8vTLpM%0a%0acMsgbhZogOQknRCaBLW7RlCpi1YvVTAG5mJ&amp;#43;aBo5gBSgVrDXSCYiFF4xgEmDZ&amp;#43;lYmNcQ2McUZyH7JiT0uJYk2LM16MejDeiBcNXE75jOGJEvRGjmbRwGET98b0o1ZtkYbmkQAigyIIvowuTXAN2kstpzxIKQ5nibzzaEmYTEK1sgdmdbVUvgUdihFPE8DcjL4F3IgBB&amp;#43;lzy3alCDJxfggOikGx1IuiASN3cgsmir5wKERlEtGK0kiljuFKpY4yTK%0a%0aNzUkxrjuTkmE4IC3pN6zILxkhiE4QmTmgxNeAWtF3CjnJ69wrASIVqMnQ1DnU8xH5LlsI8h60kjoCtIu0MwwfzpZGV1ffZ5tUKANNcQpERNuU3oQAXUCaLxQ4Vq4TTh3ZCC4DhCDexxwtZJCDlxwuHAdOSf4O1jRsxRlIpJi9l2tLM8kKXeyGeACVCOom&amp;#43;wpaAs4OzjTXWZfImtVrR0It5QDemC6Z0J5cz4IF9BcxgOtTyo5pF&amp;#43;mONs7cW1qWiku%0a%0aeOZfOZEjAjUIbGsO3nsJReoT6g3vcMTcNASaSuJVshTaSp8IJIQwebsKpLaDWE8I2NxVCG1lAGELdoAWin0wH9VmAEwAYG4KxgPfMt0fUNok2HjOZSObIASUmMmw6ISAv3Yk9HjOJJIU5QTFsNC3Pq92CIUSeYV5vXRoiDIG1gJwZWS2qMEIgEkXaAOw&amp;#43;scsUOOw&amp;#43;STT/UyfROs/AJxYjH8g6NJxLoTGDjRfem87sKvEonsJFIIEgyTPgx6NLys&amp;#43;%0a%0auInHJT5B5Imo84DXxP/ZVgVkVHVYEjlwVTnIE51ixPRw9DAn0GwWX1oCuBWSazZFFxQ5LM8a6XxYMpIKoSi4HpD0lFF6dWMiFyy4YfxXVVsNWhZ0CB&amp;#43;HNPkzjGGSMjABGlrqP/sAqPx4QDBJphwjAtcFZQNqSNds5XAwBikpnjk6WsRcVHZoBWJ32zzSFXJguD&amp;#43;yCIpHZLvxCBSsJIhSfoBkOOV9cYB/oGqKPoAYADGAfTBMABbAdoA7kFnPfwSA%0a%0aZBkLZpkCBmvBTxtWSKH/cGjY5JiEpcSFBKeUpOTSFJTkyncKFJflHVMfoyGvOVcYbiSiFmR1VTyEnGiXPXEk2HYOFK0oxRSFGOkIkesT/VNkPqjFJO4ZAlD092rUzL9K1IbfR8SDZPYZGH9bhmEU98haeUjEYmjshC/nbhg8nwg4DQdYSn7w1Sc0Pw27UxTY6PLgKgINOCKxRc8aIOVcGnc3aFdA6bkHOEDSfQw81wGeSLoUg0tCTJJ8OX78Ii9P%0a%0aVRONfCCH8M25J68sui/QEr4LkgDoJWoXSKSQeQ0blFcMWfY32xu3FhAEMDrSU/c6Lya6L9FmkC04U7jTRN9aKms29i3aNZM0SJbEeWgdGz8MIRFaCHvQWJpzAiuieNNvBCHLC9s9oPd/KL4cTkOtAOJJ6DmyAWpY10BleSh21xB9XZY4InmJL2gHjROdcyBoBXd1Nd8r&amp;#43;NsE&amp;#43;uTJ8zIo4gF6HBlhVTAIjVDAKV1MAAQAXa4DJn9eOvi/VJJ4XDiZ%0a%0aE3X&amp;#43;HaFrlMiE8NTZBLjkqNS4hIiRBIToBIK4vwT05IMTUqwXWnhzGSiCDkcnQwpWqO2k1WTgVLNFAtSdMPkYpRp9VxftXJVbMJuJe&amp;#43;C5WQM06&amp;#43;Cx1J//ZDADrUSsfBsgr0bEx9AOhEGESsE3lGEQFsFZqWzEx2gQunZqWrwiNCZCajAIbm44fPgrDBgwBQFx7mIwrMikCLQkveMZkAL4sMJ2ZMMmIQAuQAtIXH43SANAWkAhgAzvMNlMgW&amp;#43;o&amp;#43;vjO%0a%0aikezbnYuz2ywcOT5gXCE4adhNLGkotixNIeU5cSY1LYHDhiU5LQPFISXYLKcSyIH61lIH1EnAP4nOfjfD28VCsYzigOkmm8jpMqQljM5JPAQRtSAEHPnUBBXLxlnRliUazNwrp8JfiaQBp1xeNEoMqpNmTkXdDAdpiYwRQhJWCtUjKUdaVYvfQAhgCdMfTAFugBpdoA1FEeogk8fSB3Gez8VmhwlQrS3GzqvKSMX3znEvBTvS0/fGrTo1NFkriTE%0a%0ahIK4xw85NKyzHjdXAzR5eTtYsMfMCFjU&amp;#43;yhYoFScwVVLHTSqhJcgtoS2uL0NVUjV4L1wp4Yb2R0YjbD8FVUoNZZui0bDFzp&amp;#43;3BPUpI9B1zsMUcZTVCoISFUTxCU0eLCbBNoEnlFRaPEpVAYYHw60FE8exMwHcAYzJgf8fbhbfR40hdgsHziYtpl4lhjsFSDQ1IvQyrS7lN5woFD&amp;#43;cKNoqTTxZMWwpjtE1OcPcJYWKD0hc4MQWLlNeikcDlEYlhTZ%0a%0ayKAVJaSd/xKEmRjtZO2PBuSZ7wx0xD9jz3ngtpiiWO1XAw1phJvUJlE5iK5gglTYI0k4kOjvIMaeQyTQaAxfHyw4wXOk&amp;#43;tB39H/0LT4bJBSpT/RmhXfowXco9PDozgspPFJ/DwdSYyqdIeSB4wzrbTYP&amp;#43;BwGEDtAVB0QJBDRkgLWI8wi6Uk0cUh1AnQXBqooTQKrVPRjyFToRsMQGAbSIhtJY3qDIThomG8Men9lhG34fNJ4ImmjUjRMhzAcFdwh%0a%0ayygwTWI8NHyiTxA4VBIIfThxrRqtc5NmHjNDf0k1tyl6fkJBxHqpE6kg0nRUZLZA6VoWLIUGuDDoLagzkkxUa5Vxs2NbDroH8JIwVGVoAWiMYNwIpWAdQij5c0zNPYdXIFeHHbUPXAWeEellYIhsBEl2v21YomFRD3CYT8SRmN9cEWJ3XEqsMhNsWw0FbQxLk3ZUf2QafGZfRh1uvwBdKdwNaGjTYIF6g0ZrKgTECPe48NjOTkjuDsT40T6APGAW%0a%0awB5AV3Nu6A&amp;#43;kUzA8YEkdc0pemFFwuLi4tSRTDb9&amp;#43;p0XonWscFOAE&amp;#43;cTRNMjU77SJNPtJeXTZpJTk9k84BLx4vnthBV3EntE/EGUXLrTql1YUp4NFEiBLQ7DwVNz7SuT8WJ64wtToCFX3OpE7ZhvEoiAiBIskkgTulimQKo1x2FR5JqAo&amp;#43;FWopjAbaHp0VkIpBUT3Kkh/CIbySK82km&amp;#43;tEDjvFI4mTWJv5X70oTRwBHJBc2hdGXp0sBSvzSgQfIkG%0a%0aBJUwE4A8YEMmBv1WgCRSbAAkYGEvB6BsflQfDgAmcMh4mGlg6i&amp;#43;5UDw8WSE00aSkbwbgkoi2DITkurSpz3D7FOTfVKB0y6IE1zc4NHlEYMpneL9gTgv4MSS1ZJLAhHSfPUt03BRv7UZvUOjjyNdlN3SxIF7HEzDBqK6Mmccq1PaMjsdDMI3bdJ07pNOkxCsO1OiLGfVIG31km6TkK0p7TQzSVLUgIaRINIs8GL5dnWoodVFnQxzAhVFPGBS4GFQc%0a%0arUEyRZZmcXpwEW1hCEXcQWwnASIMTBEyNUw0XklrcRfJXflFCGSsApTl7T0QBJhpe3bNbNo4p31iL4UlGGo9TalrPGLWfmhyCAdtQ4Rfh2VvGJpl&amp;#43;HjAi8dJcRlUF8wBWQFjAlhLyT5kehVtOR/PLwy09xgDGYzbVI3yLR5l2g4AarR9fB8QRbAERBDHR9cKAH4E&amp;#43;IyOJQlPeeiGATxtMXTEeLDUyXSI1PuU4WSOJN&amp;#43;055TuJMfQ7jTCjP7UETc3%0a%0aBhlNP7FoSVA/aozgVK2TOoy57xrw7TDEdN5gmIsjFJWvRSdmdSuEuPS5JzRU7ozWeMP/NQzxOISTLUzuhPJYnRiYqxHCOilFWgsYZVCYfXNQZ/gwAOySXmhHnmj4ezZ1byO4gaBMQnS4H48SwzlLNP1zt0VYydhqkB4ydKxpNAkoARQIgXgIy&amp;#43;wOCAZJSmEMJXfhRy5B9PCqOP4QVhUQAQhQRmf4ewlVAgL4ObtAbEp0gk5/jzYaDhVKZM2Yz&amp;#43;o3%0a%0aX3EpQgB81TA1HYBLJk2AMHcIaVL&amp;#43;UMAvWHiASijN2iH7Db9NaI0VAWSegM0grIyW4MTk&amp;#43;rTk5MA/Xq9eDIkozAw2N1K49bD/ZDK4XB8jxIKE9&amp;#43;tcPREnPjj76LKE13TJCKbjPTSFzP0k5FiqUKdNGLEjSNhrdrsUP36omlidFN9Xe6Tt7iHw3RS9yNXvRjdXsPbcJmIl2E4IO60zaCUMbXUT1LooWNI3BlV6ZIosMDVYNpslhHZ9bYcv5BP7cUoc%0a%0aLirEDKMmuAZJLxhrOlUZVrgPlFFtdwwNNgxGTvhHsnOTbAhCKQS&amp;#43;K3oCCASIdY4KzikmUkS/CmpJXaCfaAi09uiotIwMxGYRcGwMlwhQwG6AcQsWNJuRVFICgQDkkgyLSD6AU/IajzxSM0QMFOPtNbxmzI0gzGD45PbMnIyUs37nEVYeAApM5XSEdUsUoLxMhK4aWQ0r0Hs6GwtQ&amp;#43;MME8QyDdPwA8UyiN399VedFzK1XR7D/HX6ExHQnZSrQ9uTg%0a%0aKBvuZ8hP/1ayMPY4dDig2y8dTOrkmlCHiR900YjRb2JU2DDaaKc7NKQADWJAwrgyKzwYMKUImQnpKVQwWP1iQ8coMB3w8RB3yNL0&amp;#43;N1IqSuXULpZGSsQVHYrPAiYFakjoE6rVIMkXVV3daBVOiz2MNZRF2UQPXdWCFKhaBYIMAsYbM019MZUEwIPQgH4F7InO0evBN0N8xYxP0iQK0ysm2J0TKyPGZBNeI3yTmSzuRfKdKiMUnu5ZcF8ABOAbII6%0a%0atCV0oOTOimqQRLV5wJPQsozGDJuUmOSWDJZMmXS3eN4srMcAPy8WHgBG7x5MkyJlcnJnVS1NdIg/HAZqxAqY5hS5LP10vrSzOCUsut8sVJ1kktS9ZKbfd1c7LSicEwM3INBrA3CtgNl3DSyWxwss7oje5JXMrEzJjIPIgljxZyk41nkXdI&amp;#43;JY497LO0IsV8H0HV6aUIaC2AEcs5IHFDkU24yX3FqEKwzUF/HF8knDI&amp;#43;XN40Mvm6uMMAqIItQAI4r%0a%0a7BygWahelXTArLx1kxEeVTpZMlN3CnBplk/QkTQzfzTkaRsgC1/id5RDXhooRxgVYnVacpw6xKqhFalo5G5IPTgF5PtDQbBzUHMQLV8XUREDYPjLTxdwpVR1oHRGLxgI5zc6bj00kFUYeETabNeERJgA6DVKUNMGrN4ggFMF0KUWYS4VHg8QIo4HkCG8Llt8AHUwemUc70Gso7ovFNw4&amp;#43;cClg0DQ0Gj9vyZM6azpdNd41hiOzNyM/iyIvxofPiSh%0a%0ayIfOBj1aaR&amp;#43;UpSRQ3T6QdTSZyJ2kiQzKXROsv&amp;#43;tD/2VIw88&amp;#43;5Lrk5Eg6hJx7fUzHMM02OqihmI&amp;#43;gwSh4oF4ArSAsXWSKeaRN6lEbX9BAfgDbBk4bzGh9bWyv0zgHcSkTuwREdTBi0zmAHqy&amp;#43;gB8QC0gXpCEAJi0W&amp;#43;zeQqgyWZWGsyuC3G0Xox2yiOLSM5cCmGIIUjDMU303osWSuDPLxSKA8xxnKZjA30JhzJaA0mA5XMczKeKnTeggW2nhY43SV%0a%0a&amp;#43;OZnY6TPaO64otTRKjJos6VLNIU4yUMRkAXECCTbgOL2Cgxx2Dhs/wJouEhdZkoieRvHD&amp;#43;IiMC2ZZhsOzUv4jujr&amp;#43;NAIXUtsTLDCbXigjJ9IOv9OgFRQQ5T1MEwSRQDsAGMRGG9XEQH9FvjZK08Q8XTrwyKI858vtNZMx5T2TNjUl5TtwNygEdVGPCOSLftJgL4aEBwcNhFMnMFCMA1k9Q0TdIPs2EsGuJUIplxVTLy/Idi25Kd4RPiNUw9xQ4od%0a%0aqQ75Yxj5XHhUDh4b0CzPUXpYDXM5MeNOrkeedKZsnADAk1C//xCYewYKDgqnSLT0DIAcjuS5WQhtGg0AuL3BO0hkOIQAZwB6ACRgUMACYFwAO0gxgHiNUk9ZnFislawCtMJSPG0Q1IZMiXT0jIBQzIycHNq0vBzOzLjUuezENl/LR2hkUO7RGHNIuAU7ahzbKKvk4GFp4M7Y&amp;#43;pi5zKR0/ATlSIiuAGstFIKQ4diVCPf0Vm5CnW7k3TS9FOLUsWDn%0a%0a5hss07CtLLMsZcy2hLfokpyQk1PIkGzemMcs5/kX73hUN/kYMEs8GyoWZAQ7LaAn01cGbSF71N/kxbdfxOmge1keVEgojYR4qj3TDhtRDEysZZ50iwMM95JrnhlaeLwefVPhJIpvQ2jkR/ghWKigetwcmm4RaWhBEXZIZ9BNYiLaYNo7BEK8d&amp;#43;SFGHNw3qRwrE/4YZJTAlXJHdwT8xBYJQkadAEQTjlf7JQk0BSMTP/gaKiN8mocAYBoHyqAD5Aw%0a%0aiDYAOi1zu1u0j5Ba7SDeGG9ZwKXNJkj2Vw4sviiyOI8cn7TJNJmkvIy57KndKWTF8F8QIzhCwN/DUpiR8GyYEPiMNz10yOyDdPHYUuSonNwE03SBqL9oxQzmHOJzOJynrOt0iF8GXJxfe6zDcKx0lPTCEz30xkSHAksYwBwAEmmEZpBAhIc8JTg5tyrGIK9W6TH4m1EG6L8YWOCunQ25VWx0lHDoIIpKcE8MnMzCV1HaP3D&amp;#43;FWCIdTAmNMnOGoBO%0a%0agAxAKoB/KG7EmoAsRDhnG98bHL2pbnY6JLIIkrSrjAmsirTXHJ5wwFD3bKmkxFyZ7ORcrxZ&amp;#43;oDvOZNxTUWhzdbCh0ONbacjJryJcvrTdlhjs16z5zM0cqlzaXLdbZrimbiZc2FsGjMtSHSj9KPLQv9QhdznZYQISn3CAmOjzyI1TZ24jsCQg3lQe8kY0PLDrcRVsu/hDOCtGKgDQlNf4dL53NCj3OFgI5CEQZKt720VvLgV52MbDFKD7NCFcy48&amp;#43;%0a%0axEQUR8w/0X0zGEiC7VagkD0GSz74KJh9tJwTL2M7&amp;#43;My0maxQNRKlXpgyZj6ABkCMwC5AfQADQFD1cFzaJO&amp;#43;QgjiYXPGktiT4XPYMhylODI9ckVYLEH6PZ1wElPhQraySM0IxLRcwnMhUX5Rw3PesmuSY3O9o&amp;#43;YSOuOftPmkm8P3uNNzAHMBsjRiEoKqcobivVTlMFXJJNBi&amp;#43;KNU7cOYUINIC5SjVD4VABDsEKZBqzntoamzzIkriCqAqvw8uV7dD%0a%0aFySRK4RzOLpwFig4&amp;#43;3HDNSgFaAGwTBZTTOrsn6DokBIsq5APWBbAPoATgG7ErkA&amp;#43;ok0AW8okgEIAFR4HkGIAOYAE1Ots7AZ1aOLCTHdtv21o1IznbMdc1eiLnxdckWS3XL&amp;#43;06TSM3yjAUjUj8w0KLPN6aQc4O2h17OzUx2iTxIddILZX3LaXR6yUOCXbLJDlbXhrXlFtQNR0zpj8vy/Av6zNSJeBKuThPHMaBkMejNUY87CNJIt05JygX0EU1a9S%0a%0aUL6IwlSAvN1IgzSgIK7jWRSmhK0UtOyzcKeScvk5uWSiQsSe6UUJbW9EqnMiJHVKAhj4QbdK4iXwGrE2xDMiTJJg1Rz5Y0UUDELccTgPIEUXWNdUmAJJcLChVGmQTj185DMQM6BFpBViTCVXlTDoTahh&amp;#43;Ca8zu8c0klQ55UyVGsMSl9&amp;#43;ECc4WWMnEGnTTlRCYQCWK8QS3DDsi/FBxlU6eSi4mkL4MvgZbhIIRwYIHhNUvShN&amp;#43;kZ7B7RmFT4ePiZ9%0a%0aDD4PYbMFly2dNIpq6IIQ4igJpGnceFQQiJo8hcNEVlYvPbhntT&amp;#43;ACiiNqyxgd0AQ&amp;#43;iMAKMIBCx18Fx8OMM5AlR0xPKOfbx89v2DQqITmTLds4ncPbPms/99wvwWOYxArPQSQe3EraODs1yBeBVgTHTzOON603WUlGFfyQbTnEwrkgbkTpPkUoF9ndLestmCZDz6Mj6zlT2HU1dsFiNJcaBs79BUk58BAOFRcVH8FJ1Sco8jPdMqVJFS4OBA8l8Sa%0a%0anIcspJxsvmxwrQVpTTjGJKJuYhmpLqCH/WmYxkxwzWcZFA1qPE1YKBDAuD82AnAHgPDoHbdvsg8YZ0yXzCk0JMMQT0nYZdgZENVDZwwDEGzyDj97XH36CtxfOFGcqlQKHjX0j&amp;#43;J53Riic3F3Yi5UM9iCuFDWFOgFfM84jxjczM5OC9dxKTmASQAtgA&amp;#43;QRphcViqAC0hcAHSgC0hGjnHlHNEfcybEGZgzHihclGcnHKdskHyRNNYk6rTj3OyMrxyv%0a%0abMWsi9z1awKXU1xoIjR5YOy51074LNTodMJczTTIHS/7QzzCnOM8nMR92RBCMJI4aD6EqzzGtw8g08zoj0JLLq5uxDuVUV94SSROelQqMAcdeW5HGgTGBZVXxw57PKw9ajdkIZ1PviTVO&amp;#43;puKQ2YtVzpxmiQdpiyKJA1H0g6tjt7fYwGJWcAExC7gGIAVoAOW0cbMuCYaUOyRLULlKUkPapXtPb46QT2SNds51yIfNdcjgykXO9s2HzaDTRc4uAu%0a%0aKVXYqx1aFOIzfyFf&amp;#43;H5fJ9yAFNJcu&amp;#43;jonNnMiUzIVPbwpUiu1LpcuzC0dJ7kptSlCLlghSc2HPc8zcz2HMDokxSumMyhApzE4WhiE08FCPRU6YyT/yJ7NvM4Wz58klT&amp;#43;fPyDGghsLlBBTfsMQj0oen0gH3KTC4R7jHXEVAsf9V/4SeTxkE1Q7HlHXHLWOWgXiPjkIvhblE7cMghnGWgiKcoNNFNoE6lvh0pIQdQKDA16FE1uaD7curpG9mPvTvgP%0a%0aQnAYjL4l8BNoFTQxUQCOIFQZyXiYJRhD5ITcPcQ7NE9icZC5tWDSKEl2hEjoRGV2SG0MWzRJyQfOaJgRB222eXMZYlZE9WDXDWncpBAnelYvW8zjuyaGSD4&amp;#43;gHFOGawLkRMwdyAXHyxZDmAh&amp;#43;z62e/yD3Kq01gyc/J4svPy&amp;#43;LIL8&amp;#43;DYdgB7sv2yDEyygeQx2aApnRFDum0gccAKcwwb80MF0nO/tKUz6jN0kxQztA0Z8pcz/XRYzEOs2gsMwyKC1%0a%0aryqRXzzwvIoCy2lZtMp/PV4eF0Z/VRl0vEIdZIZE6FcZIl1WoUIbeP8k8T&amp;#43;koQx2eFPqSw1hcQ1Y&amp;#43;2J3tz8McoV5mLVjCTkZSjatFShaKW6ueWMxDHvQQ3p4Jj72FgDJxCH5O7RJSFloE&amp;#43;9yHW8QVEYPkmaQLaAwcJqkdw5jsFsMjnMHDFZs6WRZDCvQMECVslBmbBcbNTX8iDiPXmDCYByXCEkAVTBIGgEvAeQMwDtIeEBKHFMmXXwdgFJ2Fx9J%0a%0aUO52NvFB/XoYiTyM/JdsrPysgtmsyHzcgoWsmHy0WGjeXxZVNnUQOncR1BzkxuwrzI6bGoLtlyX46Rj97Ln3MKC1LKM81oTLLX7k6Uz8AvZ4ubS0YUCZfzwKcFZIPXELTIdxe5IMvE0oEpNZP2MYHkJuQRu86zMGI3EpD5AHc0HEjMAAiGxyPbtWZJ9IBu1sAEwHJIKdIUR1b5DbXOHskaTJPLHsjIzmGMpC9/zT3M/8/ILYfIh44SzFLUfMFq50%0a%0ahIJvB&amp;#43;spTWMqXXSDrJDcrHzf&amp;#43;DqCsnUD/yZcMRSrLKx6I&amp;#43;cQIORU0aiS0P6MpnyUVMxfKlEgPOf/IgKCnOHzami173ekv1pYtAE0MlRxMj&amp;#43;EA/cJoBs0OhUL6huEL9lbaEOTYUghvmICftyvOHJKEvYEHDygCv0Gi0XxBNwvAxU4ncRMgO12BqMCcD/dFBEEWGGbb2D0KPQwf0MgMGraIThGYlrpAOgApWYofdSazl9maThTXSLkEQDVXJhC&amp;#43;iNS%0a%0aKO9jFXAo9Tx&amp;#43;TRZSAD3AejCEREqPMwB002VowTyfmgbI2/zcHzwkYaTytNHs&amp;#43;uC3HOdC2Ty2TPk8jkz/tKU8zuDvQpnddzi52PhQ4AK8lDUOFr8QwvyEzezhbQkMPZ9cfLkHClyv2HBDMIskqV15a/9TNMb8l6z1uwGI4&amp;#43;ycItvPIYjZhO4cmI8LhFkQdBY00iryHkcFNPAEdtzk5mcaaTMkuiBtW7dBVHvOKK9VwqXwJ1xR9g9w5KThXK7yJnN2%0a%0apHjoMr4tKH1sPmRU6DabVVQwkHXcdEjKNP/s6jTF4MunMijvkFC1bRQMwF7E6zIypVDAbAAKACGYCjtYuNvC8edmLOtClR0SJ297Nvj&amp;#43;MMms5gzyQpmsz8LcHO/C/BzOTIu/HYBQkOKCtYYsMBEDFkcWOLilQAR68Q3s8PiYIq74BvyN&amp;#43;K9o5UjymxPIz9ylRTstRGCT7PAMW&amp;#43;J2XPnxb2h5&amp;#43;XzyLVxWSn68zCMhTHfCIOhp/AfQUKA52LVRBZ4J%0a%0aESNU4ul2fDZJe0jek1jpIBFcYRV1KQhLXBCC4/R6BMotfQAc4hKCDMBc4Ps3YYNyRhBc2kAGHGYAH/zKTPHkbpC7HNYssaz6TPT8pHjQfJf89xyXQrk8j/z3XK/8ukLMqIAihsU5iTiYF58R1DMeNj5S8yM4etj9rKgi3yLNvTdiESN4IsfA8y97IKb8xdkPwJ7Hc6K5GnaYuRSTKLJY1CAfrKQC5tSBQpkIrCLBQpaC7JyFDMpco/8vaKkU0Yy1%0a%0aGOM0l&amp;#43;cAYq7woULdzJPMy6T1cLFCtnz7Vz3Mz8CYYuTcxMLzewmMxlzpFKjrCYTsVLsHRdNvI23sXJ1sYr4OJYTYSxWE2YS9AXNAooRISmzc9&amp;#43;Dc3KsDZpIAIhZ0YwzWTBvwpKQj6hoir1UogS50bQwNpEbGKVJvomRI04y5bAANVsQEp2ttKngk2jNoYNiCCEc0COVQ3G7pc5VAbFS2fAwhCG/9UqTR&amp;#43;G/MU3E5yRkmUnx/hUmuepMnrx33LvwJ%0a%0apACqbMT2mijmckIsq3XHCklV&amp;#43;FEeSsE96nE4bf9YKKRRWIoPPAwIah1MNMSqKeECVG&amp;#43;SVDB6sWICBORpe27aTYcAbGjpRJAXyVyzJOcUuG/9FdxQHCKxOvYiF2FfFeNyrjlzV1xCXW8CX1ok1XsaKpBNDCYxLu804rmJH8zKrAoRTq4KfEVcSKlkZSqxXtxxkjlVPY0SKyraboQNNVIoBgxjOUk4TckV/CRXcFYIkFcaeI94Ji50TBFl1LngUUjf%0a%0axy4mRvgnT3/CJ554SXrcLCV6TjYpVW4QzONcW2gJMwQcQNwDjQIgsQ81HJT3Qiz8tFi0&amp;#43;jyfXntQ0MAwaSxgYIgjgAPfXNVvSD7AyQAjgEB03uytKSVMJPy5C3ZtGOwQaJHsh0K3wqdciaLrIs8c2yLvHIIc6sUdgFi45yLKPCUSHpBeTwuDRb0IQPMgcAKkMGKE5fj&amp;#43;OMQi/Jz5Tw3gkF8fK3ImFlzISChMJSooTHidOzz/PMeim1JiN31Xe3kB%0a%0aCnTJbmDU3MISgoQhjIH0DRT4zkGEinE7oshi1YTOuy8rJH5WeKLLVuFYSxw/NnznpLtAspsl90zhE&amp;#43;4JPECgoiK&amp;#43;/IiMAODTGG8QTfDeEEWgROlG9WQXNNxOCEY8d9lv/TTWXoQ4r25IW8jVClWY7pBI/l9oXTkLOB9NSCivdzaQuPh7JIOEOkggThOMVYd&amp;#43;kB2CtmMm3Ego&amp;#43;YQuVGG7e0UWEADka&amp;#43;pTGGeKPTR1SiUoajB28kGQqQgzC3RlfqKI%0a%0a3EOyWulaPwCQP7DW8AnYKxBJrkNioJgiw2YCiGNBXwBkzrYlOBycGPItCEs6LllvZ1HDVW8o90T2WXpv4Ia4AT5ExJZ8LYgLUJykJtcFaBICMZJOsS6QCfkS61s8ZDz6TET5Jco2nJlYdnp9aHM4CCVxPxfHYTJaCDFLFhQedHMQTeMc5XNiYZCvhHtaA4cbpg6SIvg5shHEGqLwEER&amp;#43;MWiN8h9IamUOACOAB0gWHED6H2TccjxgNgATgFpAH9VE%0a%0a8XSE7qhVHSDUvG0&amp;#43;MPQcm6NGGKdCiey3yxBQ6eyFPIV0whyZINWsnURBkFodCYDyjP&amp;#43;8PFRgsXAClRgpzL3sqBLGHNWPXVdSAs6FBGKp7yWI800udVZ4spzOgpAbagLqWNichFT/IwKchU9Uwr0w8ajaAoF8vaYBYwWkJ49avOOEGUK1nPKkBb4wAVwwOTIQrGfiVkw2vKmgbdifz0WMvu8adEbC/UNobOZJJOR9QlAYDbMgGMM5WQhVbGzpY3c6%0a%0aCDgpR5Ne3C1UObl5NFuc6w1AbAOpTwj8QWvQYESI8l2Tc5VzUDKS0gg/hBTkGZKUUtXMsiiN0NsyTYBmJUZ2TAB/GLxgdGZw2BOAJGBfWHHE9HcPRLaZLWjsFKB889CMHN1orByXeLf8qaK3Qpmij0K6Qqkw3&amp;#43;KmZApwewZi8Mo1QRjQoBdoAvhwAqzOAKLz/TVAvJzYIzRiz2VlaSqRCxBxPGdSUDyLyPPbGwLE0OXCddiZdVoxLSAzhXgxR09J%0a%0aEXLfPP8tazbyTUNvf2kQVIs0QNgiprFdGDVilZSnR0mfbqoMJOassMInTFJIpE8iRFdIdoBwdxOAH0gOBPiAPrDS4P3QpNlOShWsKRzMxUOfNPyH4tJCqTzHUoyY8TTc/Pfi/PzaQowsCvcnktzASNNcQJkSIsoNNi9&amp;#43;SCKc1NKzfTzFEjocs/stZIBSyOik7JrU83SqCic8jxdI3NsspNzAYoTch6yP2GnxX6KifPI6QH8DzOFCnJzfAIukh6Sd%0a%0a2SKc8p5FGKvPG6L8VMjS7eC/V1iinV5CcFkIJS0C3G75WPIwBRSaeBZ6TGCgINiVOLE0FGUaBXsGQxgiK2atU3ELTwq6RESwgksYUzxfRLFKKs1Q5mYpILxqzRo0SkhOcQFsv0MY1idI8b5AvGMgAlQPp0xrFtxE5gs0IDFd9O&amp;#43;VKmyZbNy&amp;#43;XRg0&amp;#43;EXC4YRDkyR1BDtrNOO80uUzf0KsFxohWNAUbOVBAoTcas132U7sFbkx0OtcR3EhNFVYF9yZ%0a%0aJg&amp;#43;yMxcAFNGpGZKJAP&amp;#43;nZoBhLkgaUMB4XgHA2kBMT06AXABJvw85Gv5L/KAJfqSlJGjHWlZhosnS0aLM/PwUmTznUq/C6aK7ktnsz1zKDK9StLI&amp;#43;vKfIgUz7PVudFmQg3MVAsMKDLXD&amp;#43;SAKO2PJc09KEAuB/OjcUAo/clHTdKIh/Lmd/K0c89nz9zMR0Z1dfwDb8i70fK1neDL9OjK5nYaidGOrBZRFHt3LqEPhnzMW&amp;#43;eOZ5EoBY3mIiHgTi8ZU7%0a%0aTy03aa1ILNK4A/1MkAeVC61Gi3nLKdTIbFYggCyOEE9BSNIaykYoCVZUKIRw0SZIHFvzROhPngEmW8lp30cGdUtdryyk&amp;#43;5RkMg4/DGypbB/CSh5HkycBPPgX/XfTHcKqpPIw/UxNy1KCZgAPkCCodTBNACC4/TBvSFIAPZSDQFDAbcY&amp;#43;pJkLT1iyCIYktBznHPtSleiZ0sbuSaLAstdS4LLz3IKCvPC/mIjLRODNaitolATJwhOgaVdwAvFYTFCx%0a%0aCPSys3SMArPS1ozicol3WEtNTM/S0GLEUuQCv6L6XKC89AK0Au1M29KfDIJ/GKKk0ueEwksBuk/iOMj7jEUFakwmwWqxMdDk1gDvUUgWlOjPHjIDjVpCFWhgtJmzAnAyCEPXZod1k1IIWpobdSfJfHhC3NVvbIdKYRNvRjQ2IPwMRVhHzDioV7iV4pL/bwziMO9jcHcHkAJIrtt1MBbAE4BmgEanIEAyJRYcTYApML0i7SkZmAW3auCyjJjsB/yz%0a%0aIodcx0L3wquS06sbkuIUuyLfwoci1gjwsobeFghGH1kkAQdyHMZTa95cMF3S3TzMfKSy/Nwj0q53WfcGl2aY9/Q4EpaM2Nz4EtB/X2imuK/clriDAyn0Q9lX0rwi0py5xWCjOfVhAgei6nLG5KzCwfDKctGEnczDZLGE/Ylo0sJypVkK1KlnTJzxjM3IpVNWEoi8hnVjKPHynRiuSG/iEQMnxTbGelRfsgj&amp;#43;BBYfh2UFWWgkvlu3E/iX0D6WX/ZW%0a%0aEULi8qAXlw/ZTq4NOEfsODzd1wzyBLwSKBSHOoQLbmOwQggAkpnjOHBvNEOdTQwEmA9/T6ZFoA6kHPgE5gcMOaRO&amp;#43;Ua&amp;#43;F5RPAkF8eHZZwGv0oB0kmH&amp;#43;BNyT&amp;#43;IsYoQKAoinuPeLdGKCmdAfhxyXTme0MSNkZxauUwCIxdPLD&amp;#43;NHeXWHDBKH2VbeyE3WQyXQpfWiEydtI9ej2C&amp;#43;QwdGFeFLbKOfWagKQhvDhmVZDs5CH2SNxxgtOYebaDu0kX8SZJW%0a%0aMCJk0Uh0konDbKRl1Xskg4iH&amp;#43;HjkKNpOSFKTUqx6YS4XWtKJnzIwyKiocnEpDIE2ACxgExtnACTiQsBfAD6cbAAmgEigbhiL4vLg25j2BAffErSENXtc18L/kOfij8KAspsioLKfwsU8hyLqiOjyvHhZMJmBExMa&amp;#43;kRwFK9wAunQ7kLNZIYcvkKmHIaC06LTrOvSutTzV3UkkUL0Og3M3gIYNGfICCgjhNvE6W0sxC4zf6y2jO88r6LOHKPMq3Tv%0a%0a0ojcrczFDL7yr6Ks5zBbUoqG3zRi/UzEtGNUB8wuKEZiW9jFu0L9J/CE&amp;#43;X0MNpIDUXKY81w2v1Fi6rgNYI&amp;#43;IBKSHOEk0HbzppAl4ijz1NClSbaZHXWNoGqQ3pmyg42JakBGRBAtarBb4OagjoFN/L7wvGFj/WpAbQz78O5QhWN56UC8ZsAGjNxgZwrcGYBcobMKgv4RMMBnyZQoVAj&amp;#43;maty2aCEIWwINvOS2ffdCkxK&amp;#43;BCzpSBjnJUonXD6eZxL9%0a%0aEDVS&amp;#43;1gm0pcIAJiSjmVwMo9KiRhTDEUjAFgsE7T4qLOUkdKmBFaA2lY/crOSxONIcud42dK2zNDyuXT3QqXSnYBBSORypacWSGwIL58yYJrg9bCwAL3k&amp;#43;LKBCOUopLKEyLDS7VdQQwYzJ3SEiw3RWMKh8vy3CGLCYpUIqUdINFa7HHwtT1yK7vKwYoUU8nzE7IyK/MKzzNjog0zRYpXwf346L2fFPwFPvEfMNi5OiuB&amp;#43;bL4ypJlYII5Sgrs8HjJz%0a%0aXE1/CaBxSFtoTlS/72AcOwNsrFY5Wih3CPoFOeKnjX9JJbsxDGa86B4yxjcqRgDW8E74FqFs2NeyNRBlON1xMZLksMFoX2EK1xlLJ/hTAnZodVRBn2nLdfkAEW5iJ3UbjNAIj7IevNbA33z1/IR&amp;#43;PIlxKTgADgB4gAXlAtVO5jXBTFJaOwiNGAAPkBdqB7NPcpxZJ/I8RwyCqXTX/KsPE9yGRTdSvEqByNXSpBoUPJPmaVZUaJhuPZJmEVEM8fd5%0a%0aLO8VYjR/&amp;#43;ICK&amp;#43;hzeQtzy6vMjQMfSxFSS1LhfaPSO8uv0EYScxBPuZpdf0qBfQUrTMIek9krxWX0wnYDMipFK0XgMaBZ8uIqvPLKdfU9eFK&amp;#43;is8qsemKK/ojQgIoCm0028owQIUqnosp86y0ciolnZdk5hMLy8BBzGn/0NKkb9Ac&amp;#43;Z2ZI9Kogf8rT5zoPb&amp;#43;A0qSf0HSTd7BOUErdphMQChYS7Zi3KrfQh8xAqz8r7hJiLfhTMYjvK&amp;#43;tBQoyAq6Cq4%0a%0aG1VpfhLpSozrKShn0CgwBAT3GCryIEi3fLhYQVyFUQfhB2lHnlXwFL0f0F1ULEIp3NiKcWhO7BtI4kJ52KP4dVETeiHyXRhWSD37ERj1Cm9THm1PjU6kBIhI8gRYQKo3itcGQzMRYiSKR4L6i0U0ELR0AKK4VVK4MPDbQ1hjQ1fMwHsdcnoFed9b2KbGFp8i5BilD7RSFlooNnozkgXEKThCCHvqEklkjh2CiwkLaC84E&amp;#43;ogMhZfOqBu&amp;#43;AcYbkoo%0a%0annEIVcLk4u8EGfhwbOtnB6YuP1SUEA1HyL5YtaQOy1/FLcRakA6aDfDrvjjgm/D0uFZ0YGT8KPzcG9B7RP95J2D6ki8YDYqCCCGpdW5v8JOMX4V7j2wxBBQ6EKLSZn03CWGEKWzak2L2X/0RSEGwKKwuSDs0eZMz&amp;#43;TlcHb5mFHXXHD19SuBA&amp;#43;pNxSggFe9tcmnX2Q2L2Iu6SF&amp;#43;IlOjwyvddlYhAYEIiF330Cfkh1yjQLEoNWaA3y3tJ38Ko86bcG%0a%0azBfsOxg7lh4QQ9LNDFy&amp;#43;RThbrQoMaADzkycGZljEFA4/R/MYKTQxGut5yQ/JIocAMH1HI8xcfUtuKWgzpkPQfQi6kOcKKXy7nN37IzhJxAiQH3zwOPuy/pocGI&amp;#43;csMJER3gsP2omADqiSbx1MANAAYBDfDm/Rb9zrnLKzHctaPGs21Lo5IsivzLsHJhyhwq4cqcK&amp;#43;5Kv4qnotwqBYHoquPxVLVAi/5xYzT&amp;#43;&amp;#43;cALIdIZK&amp;#43;9Kr0vZKimjcEoAy2vDD%0a%0ayoJxWY1mEuNNLhKkUpXKr6KlTJJyh6TBgtXIsDKmcq7yxrM5xwgbCdi&amp;#43;Sovs4eSOctjowaAr7C1nWrlw5lpwaJktqEryWIo9WjEoNsQ0pPAdbfFpSFb4ZYULKlBYT7RtIGGEJaqFVHbBOnAdjLoQ0xxCvAKLe4wm3Ixw2fKj6mh6LDklSxi0dihC8ifQe942&amp;#43;GbXXsYEoE1Q7zQycDIMKA0hP1ScaVF/0WVoV&amp;#43;wigzmK9ngLHnxSmO05aEDuVTcI%0a%0a4qy88gg&amp;#43;KS2WS/NCCEHUfWxcO2kigiyNHLJsFQrWLztINXBWgCv2VoAHkCMAaCwHcs2AZ4BvkFYjQOSXMr6iz3KENRS4ns87QpfCx&amp;#43;KbCuk8kmrX4oRcxwrw8ucKwhzrq1/83MATXXP4b5TAaj37CYQv1x8iouSngyFUbi1DotgrJsdz0oUksKKgoq5q3mdu/LwCivL2uOggbgl77XPgO3TfwDaYrJy6cuAgc2l1Pgy/EyyR1PJilYiJQqf7YeT8%0a%0aqnx4cQhd&amp;#43;URMi7c&amp;#43;KCIvMSZ9RSenE11KrCJwMZKpSiWWXvSxYojcFql45HVUcjEhnV6LbRABQigwFwkM5B30oqADryX4IfIGYQ7BcswhcpwINvhImFUociMWPXxCZZ4ZqRSq0ekg5gWEc1MzOnyqR1wfAt/yqsRQZjpUbniX1NJBJvg9OE1DIl8ZkoD8wxDfbCNARwB/WHwAeX1GikaiI4AjrmBglx9Pcp1rfIi2VS8y&amp;#43;0Kp0sDy2wrg8sCbbErc%0a%0auLPc2aKMLARommrgAgKqiIk3kvQZafgOhCh02Sydoq3qoBUCBTqC5ozdyr88lxrKAoKQmWrF70a4iYjmhNby/Q0hl21XeAK2hNAwo2TIMsT9Jjd7khisWbBNWVn8u3VsovUCVkw/NDqjGd8RmI/&amp;#43;VKpT1R&amp;#43;wuFQrt3GuVeErOQ4mK3UhSCFMK1Ep&amp;#43;UloTPYew1uWaUJ6nwTDSpB4/niHWCLNDA/y63F/lGw2KHpNiqqhQO5njXRVO7K1lM5OOqKd%0a%0akXxgNgBdunYADdCKOwDYboB9ADgAQSsOLyokn6iBjARKmRM&amp;#43;/zBykaLGTOnSjErocsnq&amp;#43;srJzzyCvEqzaIXql7Q7lR0/P1z83xoINKptPOr80MLa/IoE9KKKsygCtLLgivF3U7DejWui0nLj6ppREMENjyoPcpyGmMPI0UKssoIitoSXwOoKL&amp;#43;i0ILp9Awj7GD6tG1oNEKaQVwwERlrxW0Nw2xAeZkhSrEC2bb5MkkAyFOZFuNuNY19q2krEzWp/%0a%0aNgSQZkJpvhXcP2l&amp;#43;YmRNPbjdnT8ODHBKeBFU8fIjRyqkDbCK&amp;#43;GAU6gSqNIZ09bs/DMotbAB9dEeoxb96AGplaU4s7h&amp;#43;pdwgHkAxEOsz&amp;#43;6rcbLWiJ0o0anzKyQuJqp1K6yvnS6eqP4vsiwhzd6MJK5m1NuIiYLFkwnjvc7idVqT7vJ9zuzCzy6m88fOG0sFt1&amp;#43;M1Ah8rzPPLy/WkMEvx/Z5rRSoiKppjxQrGCgqFjzFsAmYdehEFCdsYe4LmEW8kr%0a%0aNDZqKxA96gwY&amp;#43;W5jKlRREjBpQgW5G1FipF1oIppnAk0OdTNKLhsXHjRQFEtEdZDXYTSPE3LasOgDcANvYx9UmQDSAFF9BERoLCMAPbspvDMyI4B1RDTk4wqEjMVOFRUtoRPQwHyo5JTw5/zLIvB8&amp;#43;VqcgoXS7ZqLALpCowqTGtVRf09Xa20Ete1RHh8KA1qoMBSy6czoAugSvy1x3gLym6LcsvmIzvzF2o5qlt9u8M4rWtTXPJPPPcrWXNrUn4Nz%0a%0aJNGCyyTdxTgvYTkl&amp;#43;EsUOX85yGVoaLxd6gOHHhB9iJxAzkl1GxnLB9AO9JZzZpCaCGwIPnp9ssNiKFRhwxCsOx02FzwwTBYMkEWgbpUxqX6VTCMiFz30yl83CTrLYbNjBRfUhaQhVBmS8BxapLDCcV1poXSo2xD7kCGABEVtMAgkIwBUBj3Q3Q841GaZQ5KH308fU5LwcvOSp3j0mPWa&amp;#43;wq34sVaxdLu2owsfJiWyvwkLsts&amp;#43;W&amp;#43;cHVr27DNUckpU%0a%0a8ox8y1t7&amp;#43;DlIv5KZzOna48rIVMaE86zmcrayHysbWqry2WCX6sw/d/8l2ounKKK33PrUiFLHyvE6sUqCkKwqrIrl2q&amp;#43;a2oTFGOSpQirP4MzSRoM&amp;#43;CEvas8QYcLZ0UFgskHUbQqwKcBcaFClh&amp;#43;BnyBYUifWs65gDqW1ViJOjlCAE3CAtPa0SQH4DorE56dkgSYLwQ41F3j3XXORKPiDqkHwNUuE0MVDB3DWmK5nNeFxI2QCiUVHjEzpIflFi0FmNV%0a%0aKuhCqGr2zldHcSlA2VpANSk/KA7oNgBwiBhTTugxqkx&amp;#43;YxR&amp;#43;dP/kVxEAhTTeJSCS0WrKsHzayrXAohScSsbK5jqk7nMdbK1Jh3jyxmrm4DdQDh5lqILki5roWJadYdZIwrkIsYiLWt90lTr4YsmIhTr7oumIiBsWSoEKHCrt2oM68ljqGGYzThKgYpeOOoT2/MZDddkLutta6yRJOvXggDycVXvKh7qtOvEKQYS4VIqbMM5Y2m/cgoRbrLbQJkru%0a%0a9Bk6hliXWtZ6f2VNfM&amp;#43;M/LqCukzlGsRHY2PIEpxphHS&amp;#43;UCUbxEqLcJAQoFCUvzp1GVB6i45uwqWKtFR6mr3qZ2jKiwxwLOiwwylLR2CbNAKafyqBVMvsFbcsMLWNJnwMeqx6sHqFCtQkteLT3E38&amp;#43;ZKwwgQAf9UCVldQ/TB5fXwAXnr2gC0Ab0dmRgRo93KH427we5j&amp;#43;LRJC6VrVmto64aVJ7PXAqHywv366qti1Wvg3BWLP/VTU1kL3nBniJ&amp;#43;x&amp;#43;%0a%0aOp60wTqRyzqCoJr4nLgq15qr6vvqq1qo6xpckrK1OpvS/5qP3L&amp;#43;ajTrFDJJ896L&amp;#43;iNLy4C0Tupo0iDDrPOd6zriCnOrQruTG8Np8zvLcAsO6jF8UQ1Vqp1U6kJMgJKQS1jL4K75v7kKLbvTMurjTVVQjNEq4LThirFNRDeSdyhcQCKdEC3p6ovrwesi6wvqS&amp;#43;sZ655yQFJZas3LBfXEpXODcAF9fAtU7SDBnMKguQF8oTYBIBjxgOAAbwt7qsk8P%0a%0aeyXieDMpetMi1Er60wuSoPL/MvbavRrPbK7a4QEdgFo4tjqioFUIXFzossNbTWIUOXzKTer&amp;#43;yt1lBTThOsgS0TqCcsfo7tj951ZKoBsn6tU6hvxsvxUnDhKJ9TlMh6SKcoO6/FD4Uq7zJ/rwMsi8sJqHmR3QOPqRSEWKqAtk3DSjdbSzIlr4JnQb6NzcBThWwqE4cOVnhBfUwKqlhwS&amp;#43;fjhekU3qAvrS&amp;#43;ux6&amp;#43;Sh4Tg6EFnMClNOmVDzWvggpYqxr%0a%0aNXtCE9NcFwK6nprEZias368jADgAKV0STJa2DEUkYHXGVTBxMVD8vAAajywfApRFgwKI6XqVmq0a8eq5Wu66xA9bkopqkLKL3L&amp;#43;7BaK083SQA8l1dP4Hdu8IPxtaZUpedk36w6zt&amp;#43;okobASyXPLk01q5GOZy0tSa8KNPcWDa1IMw0nzMIv06hFKhgraE9kqRjLfS0UKsYteii/RTV0itYWrPPNUkqOiKfMKKlMKHzxNWRPTpbUg4Z8hUrlw4JIrc%0a%0aOC8Gjio/Bpl4QDhrPgrhWhkrQIkIgfK5JzXK6Eco&amp;#43;rpxDrSTIAa801xxww0oXwpGWsgk3VSYOUZouzi9025rRVxhOBPU/myP4XqQn0yNpnbaOtw53VoWDaAGCAtIiV4CCByQIa05KHJUGqQFYhBVIxLnbWL6xAsW&amp;#43;Gmy/2hl9k6&amp;#43;LQwtCEQcFjB9WTmRb8NxoC2oIdD0ImEQbLodkN6yrWgILI&amp;#43;fdIlsxPPEAbQIcWSHNpAf&amp;#43;sx62UxrgziQRQlh%0a%0afyANIEdI5n&amp;#43;&amp;#43;I2DHDjigVgh6kmS&amp;#43;FVh1Am/aMJgzqpcovfElEASIS&amp;#43;xomGYXVpSnAuNy/Cz1HNki3FCtHNYvAgQVqyNLegBsABbAJ6BCAAJg/TAqgHaALGBfXivfd3K7aHLK3i1PH3UakerNGqfingbMSuyCqfqlevbg38FCTw22VB1ZkIqCmG5FrStcAFSNNJm62TpT5Jua1LK1BpicjBMuFPBfNUjD/yd6x6SyirG0qYy0nIX3VhztuqAbGvLg%0a%0a&amp;#43;snYz4l3&amp;#43;slC90qwRNZBZX9poHcQVQhsrPVvBJSs6As8BxkZpGysdVhEJI2gdljXhX6VYTKCwJtnTjh/GnOIJRglvMBGDQgtUQPApAbs2hb4Q8UQBEpwbzZvipzydzx/&amp;#43;AUMbKIaQj0E8lR1Ah&amp;#43;Am5V2pH2TOjAkypt4sAqwwB5ITYhEmBmSqDjWLwoAVv9gRuKlB5BTEKcfE0ojrh&amp;#43;QCoJctMa6wR5vSi9ykiwEMxbeYfqqOrRKsfrtGon6vgbr%0a%0an166&amp;#43;HLDGp2Ab3jRBrwJTOzWRLa015tY0HYocOzg3Muap2MrjD3qsg8IFS9XEFLFGLnQ5FLk3R06rVIHLziG9JMr7AHyZFqqFi84HAY9GGNQ&amp;#43;ZEAoHp6zUKpD2TdPziXejGQSo9OgEMRQYM55WYAceVXTD6ABEQ7kFhtGo8LUu4lFohF6ORGgDdR6u5w9Ea6Osn6qeyw8qVaiPLCHKH4uh84plKqMaAbHQgYeTs8fTzi2saEsvrGr3zfkr36qdqD%0a%0a&amp;#43;v6IzFSrMM&amp;#43;igp9WRvRi0fNgWoHGjSAkhuHGsZsTnUko6hCOIW/JC/hnT0rrU0a8cNWUr68cjnfATeKJADYACowqgH81OyBj8nv8N2ScAR7oCQt56t6isk84e0OS75DjIq6KDrrxorsKi8bFeupC6Hz&amp;#43;utgErgc8eIAecuB8yhMrKsa7tAa8g1qKFmN6ioSKD30w16TPmq8ailFTVze6z8qWRvMGkTiVGNLy58TiBIWMkr9ZSEnpNSgOoHuPbvgD%0a%0aEC/FeOQ5ESmcsvqTJuQGivqXYxec6vqMTKEgdnrSLIGACxBOLxbAfXAEREAzSWsEJHJw6iUd3IRKxsy2VUlalEaZeu4GqHL5euuSy8aCxsEGhHLYfNUEtXqE0KV8iY9fw2touMt4UUOc9/hhJo93SJzbmtpGmAL/yCW6&amp;#43;6KcppsG&amp;#43;U8nWvsG3xrtOsQq6wa8EqAbIpshiKi8yID2egcYL9AEBXIxHccPDMCCSIFgDPLgOZ4EURYWGaZM5BWyU9qD%0a%0auKAlIKy35QWkf2I1EAOgkjBecrwwhfScMFfZKRBgzMS&amp;#43;Qfh7t1mY4gbMJqgST9V4QquQIoxTQuIAKszLCC5AAYB65huQFsA9lOlBZzLB0o4lUjqkUH40krSUSszG0fqaOqFk0mqGOvJqmerKassVKowbTiefB2SyuxQ3EVIf7Jb1MQzFBoMtPSgpDLBU/HL7mo0G7Sj9Vz/c5GKTsM&amp;#43;6imifur7G22lWkvYIQytp4BlEoaNnTITpJPJKFhfsRVon%0a%0ahpr2WWojnK4ydRt3COqxcQUF9OQ65pxbJquQfEzlmzmAYHjrENIk7GAGZQegMoDB6HD6IHKRIyJC4u974qlarga0RqCmnDVdGtCm/RrcSv66jcTopoR1dxBNiAR2PN9E8qRQHnx8XOcAmvyKRok4LFkmxuxQyFSahIui2BKLmXu64pyH&amp;#43;vwE4rLjBrlM6qbzyJmo2kIkKOogrdc5&amp;#43;CyaC/h3WSeKxDCM2liPCr4sQggiG8QEZN/QdjRhnTAcbYUA%0a%0aSo2U1i8GpP8oeIACRB9IMawDQDmAZgAu6Ei1V6ic03D6WtqiRSdwW0LGJtbarrr16P4Gq8amOtn63iTJZsUtMMMAqPhQ5HzfqggEDgMFBsSyh107zQgSnkL/kvBmz6zzev7yhzyBU2Vq/LLrerJaS6LgYuZy1sawJuAmn&amp;#43;tXysNm0UK21NAmxrjQMslqw8z9JOBa2bIT&amp;#43;lHnBnRMgPNM7DKmCpOyhTt1XACo8ksqVC5ZQ/NKAl&amp;#43;&amp;#43;F8kSCHs7S&amp;#43;8E%0a%0akGyHbxK3NMAyJQKtNUqQC2hndxTIg40zImS2C2JOhrMmrYblpvrS4F4vuNYvZF48YDL1EFMSAEmahEQlmmiAU0LOAEom6tqOJR3s7qhE5vjwMTzeZv8m/max6sFmob0ppw7axjqZ&amp;#43;txG&amp;#43;aS2OqkQNQJWiO&amp;#43;m9bD1bNbxMkaI7K/G3kJ5ut1Xc&amp;#43;yBUxrym3rQ&amp;#43;vrm/6LO3yFG3&amp;#43;ro&amp;#43;stoOVgR/GUQUQcWaEyGN5VOvn3mZmFMGrT5OVhnLI&amp;#43;Gv&amp;#43;yq%0a%0a6u&amp;#43;G9F8t33&amp;#43;ndTAHoHtKA0BuokkueoY8YHmhI4APkAr&amp;#43;XfyOhiBy8J5VGp7PMrTjxtRGmBa1muCmkPKRZun6mkL&amp;#43;uslkhfrHOAD/FfqWOJ6kVhYDWuCYPHLv61rm6lz5DOjcrHoyFoVqx5rHPJHm4Chv5jEqbD9ONjKEc715KmnxV1c8pq7m9rjVJvmM&amp;#43;gLqnJoAxmo90wCDWlKnDBNCBGVtqLdqkq4jNC5UI0aPjJiQG38u9T04bKoEZOagazwv%0a%0aatovDBCgiW48B9Bnki6QadVVRK5USgIDxGXqZFC7uMlsR9FEMFvMPSglSkGkBcg9&amp;#43;yN1RAFH5qUKxGZ6sLrs0oD66skAegBguxaKH0gjgFRSBqBtuBgABrqqJpsckBbLppUdRZqU5tlajEbHpqnq56brxtnqr&amp;#43;Kq2pMa49i1AhLPZJFDW2q/fyB9BPOauxqt&amp;#43;qBmh&amp;#43;w6guhml5rzGjZvNnyPFuTC890dLMXsU&amp;#43;DAesPamhat9QVNBA1fWma6TJIw%0a%0a6CA5Z0NaTGbSCsYmQTAcP3dQSRV/Bz0dX14WyyaZItZayRTiJVYvOABluiyBDjyWinXQz0cdoFIASD4/8SrnXvrZnDQNb0oWiVVOYu8bpuWalxzApq0WoWbyRyxGtibletn62TTSxqyzBprpSH9C2hTpBt9JfV4OzzLm&amp;#43;saqWp/G6ub9&amp;#43;tsWk6KMkL8AwzS8AsWEtdr7LWeij5rNJ2rhJrcggLP68y0Q&amp;#43;qjSntTZatXal/q2ChBiswNa1J8SdbrJ%0a%0a9VoS0dSt2roSt5atDInKLihKcFgxVKQZP2HcQGxDRg&amp;#43;qkEYj4RyjXMTJaCw0161qBVBCkIx0KW12XYJrg1YyExBnhWiBfTjmFotaYNJqK3i0Tkg&amp;#43;sXC0Mbyyq13hAhE4oFS9INw7FN1iRB41t1mQkuaKxmy6dTRoiUoaoTQSvkugpXNtUMxbbuleFGt1CJBlcSZrThsKFmGKmkEbavC4epAaxmB7JVRkMgJBHVoyrOYWu4Rk5xEqr5k4HgCWN8Ve%0a%0aCBMymNFxKQWfeCQKRlq0IwB9u0yAbiI6VzEdBO4XHzY7EMA8qJjHI8bZLw0W08bYFsUjEKbWJs7a/RbZ&amp;#43;qa0vZquiiAYosLTFvlmgWAeOUtcD8aaSurjB113firmwIrRyvVXB5qQ63sWqIq65vAqlFTeqJQi7nzgKBj9bWQ9J35CwzrYI2qyoDKMvxlWnvyKP1ewjOsWqL4UWukAErSsY1szWhOIqgrMuiPIWnAGKWnyCuDTJr86iwjJ0OUQeLDG%0a%0akHPQeVZmWXrEmiDHsmj/LAsMrV7cCi8MCtqHacK5SqAiHZC6EKDtHDsJrmGEaNNlkI2gmbBdU2nG7NqIHwRPDfIZFlYAXsC/1RxmCoo4LD1csYBG7OQ4udbmuqQhf0x6JqQhKwqTxswcqla4FqufG5pQUMLG91KMLHPinZbJ6C/FI&amp;#43;j/2iHanMpm6XY49HyDevfrExgE8t3s38a7mrHKyIa7epeiw&amp;#43;qAeswSovLbPOyypPSwitPsuGNFGIlTU/r9%0a%0aQIYSgGz24XCigWr&amp;#43;tQXKuiBexs&amp;#43;OJlCMIp0G8haysrd68hb92tKfDnjXWt6LUT9y3wH4EWxUGokisilkpOj5VfpQ5EjDbECVSwDcz6Sek0jSRukyrWoA3KxsnFNCTJhV8Ai6qAsDzALrJtZ3xxa4Wj9JYlEoAaBOiuc01JQMdXE/TPqZQolUT4ikCti2eprAR09DWkhx2FTDHW5DqrYaNIMsMGtgmQx0mHQxMAMXOGS&amp;#43;ZXj9&amp;#43;VljTaldRX8ac4dP%0a%0aUTPQKQcBNFs4Sbs5YiwwcpJO3AuSELCrrQMzHkhhwSTK7jagBl42siiERBbAYiSHoCsADCx5sUlBZaF1CrCINsAXH2tcvMJy4GSM1LiMxvJWiHLsxrPG7RbhZq3WxBad1txGpXSdlvAwRB5NpJLw9bD&amp;#43;CAtqvgMzNuPE9PLr1oWgpxrKGQSpGLb1j15qiLayyzFqywbAWr066SaKnO&amp;#43;ijFTCaP1PYe9ipoGM6wazV0S2nNzktuB6wks&amp;#43;oOc0/yVu%0a%0akRw0XqtVhRg6EqNauyFzRF0O7Hy8tZ4NoAOmDLxVhCzkLVkUFj93HjcEgyYTdKzBm2xOXHAgC0BcPrpYkAI279An1Jtgo2ICeFp/fId3Eq/svpBrdwS4NQ4Uvg/6ENcXDxxwOIoo0B1imjR6fCOgH9BAxrfMTjcWxnbcc/gIasqkkgad1kMbOvq8YCXG3sT6bQXSeCBvSD&amp;#43;QYpAsYBG8AHbOZviXQ581FpXWgKaBZpU2jdadFth29Zas5txGngyu%0a%0aJrzmtnRongsamX413Bqa7aK90vArdDQMzQnakTq/xqFW/oiWmIii/VdyEpAbXbqycuMUx1cv1sEWgwbE4RxqZdNItt3ax4ETVvUm1oQEgINUqLdqxLfM5CVf2SI0bSgNqGAwLlCz&amp;#43;CV46eTwGL8k1sM4gyTkOeBPNlk5E4xxBSSNUgxch0UmSdgMCB0IoRylUKPvRp9GSFeEFWc1X0YdYn1hAO2tffthuOEqnfo2mlDmQLghCFYeS3yHcWQ6oSBa%0a%0aZJcIfltQJE2AeABBwPaAdcNeojuQVCxaQCSAazcAdve5A9h6JOVdTgaKVrT2uXrqVvgW2lbt1vYm2fqCjKZW27RMHXBWEpj30LfCTWyn3JZIMx4NZohUotDxJsaYjCL9BvXKmSaKdoCgo8qK0JNI9nKM6zL2XuLa&amp;#43;TeCxQUXhvmJNsMiXSVuJC92&amp;#43;GqtVepEhjt1cr8hYgy8pxg&amp;#43;f2xXGFaq&amp;#43;rhW7wzEqW81aYtRXVpAS0o10juQRCwvpGYAPSBT%0a%0aMBGAWi149v7q2/yG2uT2xq9V1uU2tA7VNu/fHrrRZr662fruTLwO/tR5z3n&amp;#43;Mhz3kuTAQw4axrIO63V2auZy1FicArp27cy4wpFvGIqTJIirY2SfzKADWDa7OOYyYtysuFOGSEkFxGDTdKR4ihPUi3dSM2hUJhTF8RjXXep5WgN/P3aMJqfmyDj0ytYvduyOAHjCNRRiVVIAFXwm6GaABiUHMwYGlx8CfW52BA6yCIeYsw6fHwsOh1L09vOLGHbb%0a%0aDr0W7A7cRp7M/PaZ3XC0SGwudiEklJEBRJzq/XqcdstbJ41b1pHKmua7NohmiTq/AMoPNH8UVPR/PGKmDqVWrvaIrjMGoVxVVod6qnLAjtQClvL9FOe69NyiVIxS0GyR9stEzeT45BTofzZzaCSKCWzppi3zcKTgjDj4DDLgBDmee1NiEPsSnjRknHHEOp0O3jSW&amp;#43;3i&amp;#43;e2kbCakrDIK6U3drOXlIN&amp;#43;wgDV4QDqbVUT8k6FdJQ11sdnsfvlCBeMCL%0a%0aR0VExjAIRl9ofg9Hk3EIGL4v&amp;#43;zTErpbkCOYvK6i&amp;#43;NrDCL1Rc53HAqoBQdywAa9xuxJmqciULSCts/FbicncxDthMdxPQvyb1FtT2zRarDoz2vo6M5rCml6ahBoKCoSydlsTGH1ajmpPW9PNZkkH3TNDyRth0xjQ3yTqClGNwhsnK0lxAovQiyVatBu7jBtToKuECWTiiFr8An4pEZr1eJ5s6Fv8qX3aLNVFIIyNR9gZId9qUelH2P1p3To&amp;#43;hV49q%0a%0aFilyToRXkjj6tjAiL0fvR29DxBi4PVoRrRataihwdgnEc2IhbG8GKmCm12ZUa4N1CDlsbVi1UqEgHuilFE6AC0gzeJ2AA0BNgCGYJIAPkA4AGoB/eh2AVphkBzxWs6a&amp;#43;ota9bvAHwrTGvlZFNq6O9EqxTt6OmlbdFuxG6NCoUQjUfo8WkCbeVHbKNWR8oQhDWBsaglzpus1OsddlcOkMsGaVjoek4475JId047rpCK7GiIquxo0Mg9rTVt5sJ2Mp%0a%0aWjgWGdTHhAqhJWJfKixAhzxlh1jlDVoHFPBuNIZ0kGJkgghEtETaMP5kgKZ615ysjy1s1i942IC5OwAeIn3Ld2wkgFnSSQA5oUPLXZqZluJyXnZQFu&amp;#43;Q5s67XIJq5trkeNTml&amp;#43;L6OrWWhsrNNrxK32zc5pndEDBHGnm9IzbIGAgNYJAL1qUoq9aq9ueEI3SbNsymsTrHW2qEjFj4Yz5pMVbRSvYStVbvev7HLpjb&amp;#43;q/wXJCwQgnQRNLbjvCWzFKY%0a%0akHkFQ0Yv4hcaYlQLTLHAHrFrDEBC9oQ5tV4mWRBAQvKkNhZtIBNDQ28IgjU7MWhuqr2mLwYn0B2EcUh/NiPIbulQ5BdoWVhirXlcYGavhHteH4Lvkkc0KQL7aGQ6sgbWL3xgem04AD8zegAzPwegHELLShbAJgAaQHIU93KJpqJW57SmzOQOiHb7ptbMzEbuzrpWnEaoUV0QDXZEkQCWIJysFpmSEcJqSqIu3Gjr1sdMq5a8pvpvBdrhSvQ/b8CO%0a%0a/Ou63XCrepUYiIqIrgnKowa9jtRS0I8LBwlK0UqE9Me67A0u9stWL&amp;#43;qaaLoC1q7kkmlYQelwatngURdomh9Rfq1P5OrXDqrR&amp;#43;F3QPnx2SBZIaeSHaGMKMZib0EnpW8iXAkYUUWJdcsQvNPh4vEUuzYgEtHtod1At&amp;#43;EAFcYQjhyooTf0zBELEp2llwgMQSCkcNBN/V9FZsFgRBVFKAl5KHEFV/MeECQgaxI98k&amp;#43;FKTDWEKvhssyZatAzV4urqnqow%0a%0agvWmioBsAEPLeT0fSDREZQBcAGjYpAZDHOVJTAAIMxWaM8FkxupWaQRsXkXAoK7qOsFk0K7Vls2av996Vt/BNvB8RqPIXTRSjIxyvHhCp2obMg66KHbYydrbNofWpkbV2WnxU1JAQwM7fU61XkNOruEMIoYZE/rBaup8tQihareayFKnTVLy42a74Pqu2v1yez6CwLbyrs5aPSzPY2fKyEhybFNSU0DTOssojg7plkcZBDCWsUSqLKKE2mcaIxjr%0a%0aRRwLVfoWfWMqqgtiWxkCkJBNVCFoeCV5SGHpLr4iALX4Gst3EFJdJqCxkm8KdXNSpMlU6&amp;#43;8TjV8CYtzbGRnnS7IAmC2gAUtpUUPHcJBgKNRVfWxJbGKhA15FlgOq0&amp;#43;FP&amp;#43;DibD2Iz&amp;#43;Mik45JXAg7eETdD0H6SOjA5srEoYAUnm2wIAO6CPK4FUdZpcmsk22gQ&amp;#43;Ci4X1o99gQFcfIR8DywgFpylOQ6vMjxKTwETYAkYHwM91Su5AxEaT0hAFdMTIBz%0a%0a4t8uplUWjoHqg8bW&amp;#43;OjfR/z3tJba5ZbzxrzG9TaBBulOiKa0WD8gBkKEjnEG2SQSboXYDlRJ5F7K179VZorE6xbudwXO/m9zTttO&amp;#43;bSljQe2vMy/p1YvEEA6BoREIQAkgEg&amp;#43;WG1sAHwAEV16AA4APa4ytnj1F/pzHm4tNzcOBrB27zLoFrXWno7hZWRQCU78xrsO1C7u2twAGZq&amp;#43;9w&amp;#43;XciguOq3Sh3c4rsDJYEAhAE/Gikbe2lwxYcrj0qCKw&amp;#43;6v%0a%0a0prwqy94qVoOr3qX6plu&amp;#43;g6XBvKEgp1MYmqu34av3JvK33qh5trkn3qsptOs1FwW9s/Km&amp;#43;1cXx4usDzTR26uSrDEvUlRJoRPQQ5JAKSekuuKrM51hFA4xM07jUgdPLz5NFU4NQIRkmYocOqnfyaQZNZs&amp;#43;DVgwXtVOCDSQ/NPSMDNKNVNWNLNXAxXFLooBUTdBI5fTY1Q0mmojUMVkijyDbUmxCJwGXKZy0kIIH5J5H9iCCzdfKvvR8im2M&amp;#43;mDzxq%0a%0aHgFDAFRPCjK4OFhvRtYeSFQcpELlJjQKNNDYxQ6MTJ/tIEqrkDYAW8pDXJlouv85FtsbEKhLtPsRKv5zrjmW9esuQNpWYerhTsAeyw6HptAers6s9pQu8KbZou9HPMc8HnCQWml1/nQZBJh7EFkulB7SADQey9bUrsPIGukVBoymw6S6RuUs&amp;#43;nKelyJyz2VBgs726/qbovKKwq7v4GvZXGKo6wvKmnLaHrICih6QjvyKuSLVzKM0yq6eNkau3zb/%0a%0a3MauwuET7swVKXIy1tcNBgxnaFU6XMTFQ0&amp;#43;w9nx&amp;#43;KHZITB01ek6EKgwMkF2TMMBd&amp;#43;jaxXaArGqxc5OYwOtM8GXELnNF/LfSaKE&amp;#43;hVH06vlYwVIsVpEyjSKTxe1aU9QICsgNGlJSdVBS&amp;#43;OYqmumH5dqDcMAEqmiC3OGrcC6Ygs2&amp;#43;UIqBI2hs8ZEFZenCJVKxjHs6kF5RiGytktbJz7s5OXzjxKR9IPGBCADgkTABY3hRSQoLPLoYlIZx3VJQWoBa&amp;#43;%0a%0aooOSkMAmzuvBJZbPtN4G9ObwHoGO3G6&amp;#43;zvIUkxq9&amp;#43;1z2ECLh236VaOhgXFQe9B7pzruq3fqBVrr2vB7vmvc2kzymjKb2&amp;#43;3S8pvJo01J/g1h/dnaKYs52j5b0k1Iq6&amp;#43;xfaEZayKTXNjVoI/kARgj3NBFBDFXwbKzQntMOE67WbJTkTLrVjRABX/NQ2gKOutLulvy0TfzUOuBKnrD9Hm6AE8sFoQ1wQgBvbBqJfQAWom5Ous7b3z&amp;#43;ohdaVHQYk58Li%0a%0anpQO0U6Hpo2ahVrs9qQWvs63lN7M3hi7lQv1b5xRuu7wEzs7bhVejp61XtpKiubS&amp;#43;Cng/p6htMGep7DL0vVWpzblFN3ub4NnGoNWyzyNVqkIucrt2wMU0XhP53rymRT53i1Wy1IGeLC8nGo9nsSdMLbCxGpRYFrDuM0gL/rCGvL6h&amp;#43;bMNoPe&amp;#43;&amp;#43;aGeqPe8yb0JrDe6k6M5wM3S3s0QGUWaUE/gGYAVaF6jHJ2FsBHACanU6biOoJWwe7QFpCzKzaF%0a%0a5A6O4HyRTqAejs6Amwqe/o6ezpzw6WVn9hiu79pG602sxV6lTD0QJt7OnpSu3NT0NGT0TV671uWO2m665pDrJJzR5vI6WwcJ3rLQ3Y6YOCpoOz5QUvLQIyy0dA4utHRXlt/W5FKnEhOUYEo/1slu/ub1FK4etSawlp4e62h0ALN8tTRllOYWhYQqCCU0cLgEZO/uKBw8L270kTRyzgPMadxJOAa2097MeuvhVla/Wiz2BRJf4iVcCnhalAiOQZ8t%0a%0ahBOdLKpMVCc1QigOFEloTxTD0H9exj4JCE205ha2pD0QQpr83DGLKk7otOZbfMyFFHAAACBNUDgALqcogGrAbgB4YGgAJ4BMgAqAAcBSAElkhgAnHz7oNV0YQDmAWL64vuRACABsABEAOlADQGrAfQB6QHMOysJEvuS&amp;#43;o2BUvoyABzIprLd0bL6owly&amp;#43;tL6PkEdS4r6UvrS&amp;#43;jL7FI0q&amp;#43;0r6MgBq&amp;#43;mw7CgDq&amp;#43;7IA8vt7Ej8EWvqgANr6BgGy5Tr62%0a%0avvgabIBXan&amp;#43;gLwVVzWa&amp;#43;pL6Svta&amp;#43;sr7OAEzvas8V/lWAPr60vp9ILAAloSIAYlYKgGCAAyYEvvG&amp;#43;qr6GvqiAU/w71hBAUMaQgDzqBb6MgAGDbcEowj18J4BcACuQUkBDvq2&amp;#43;nL7JvoyAA769fB7SzMJNYAS&amp;#43;gMc893wAb6QF2GtuNkBxnAhAfAAh6Az0QHbXCDYATdI0AGlwU7lfAGbgGphTvva&amp;#43;95SytBzgBL7MQBIAROIhzUbseb60fuIAekAE%0a%0aAHdMM0RsftIAEgAERDYANOABg1wATQBggBeMdlISAFiwaXBIlym8CoBSAFxyXAAAAAo0xJLgWMAufuoAVogAAEpWQDLdKMUvoAKIFn7UQA5&amp;#43;0CpR1ABAKX7efudgAX74fu2&amp;#43;o2BGvoQAHr65mk4AJngP0jLdF0Bifslgfz7lQCyASn7qfu4AVV6LgCfu9cNjfubei4BwPmC&amp;#43;tAATfvFQHu6FwGpgVV74frsAIYAEACYtSnZwPgHOMn7m5HA&amp;#43;Kn6C%0a%0a/E1QJi1SZgQAbbsIQD1&amp;#43;vLTsvqBAAwA3vupgTt6CvWUWOZpGAFD&amp;#43;3CoQ0BhgcABJcFd8UsRgAGhgEABoYCAAA===">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQAWGjoghH0EDihmbgBtcDBQMBKIEm4ytgBrABEYDmIYQgApABkAYQA2AEUeAE0AeQArJMkAIVSSyFhECoAzQIRPKn5S

zG5nAFYeAGZVyBgNgEYADiT9iAoSdW4jvkLISQRCZWluHiOL62Vg7gAGC7MKCkaoIdpsfBsUgVADERwQ8Phk1Kmlw2CqyhBQga4Mh0IkwOszDguEC2WRkDmhHw&amp;#43;AAyrBfhJBB4KRAgSCqggAOrXST/bSbQHA0H0mCM9DM8oXLGvDjhXJoT4PCBsEnYNSHRV/AHKzHCOAASWICtQeQAuhcFrhMkbuBwhDSLoQGlgKrgeKysQ05cwTfbHcqwktbtqA

JxHHY7TrxeIXRgsdhcRWC5Xx1icABynDE3E6mxOfyO8VDKamZWYNXSUGDaDmBDCF00wgaAFFgplsn6HfgLkI4MRcNXiLd4lG/jwkvFNkdJ&amp;#43;dlUQOFU7d2LpD0TXUHX8A3lXA2M6cvkHmAClMSjqz2A/seLcfT2fnPdL84jjf9ifj2BnHPn6&amp;#43;z7ez3vKZnFjT9NjfO9P2cE53zAI4/ymACpiAkoX1gnhr3/d8ULg2DTggwDPz2T8ZwI5DPx/M8eDI

kocKVS9MMQ7CoKfM8EJKJDaKgyipk6GiP2fHiSng/icO/PDqP/B5OIgOBAl9ERwiPM8/m0I5tQ07UZ1DQsjk6O531U9TNK0pIdPg/TWPPNSeFDTo/lDUMTniCNQ3iQszkM7QeHiJIPgnYtNnDKM7OIlTtB2cc/iSJIo1OWypxjLyeB4E5Oh4To0o&amp;#43;TKdjuP5QPC05NmnRLQ1y9zQ1sryIxOHzNk6HZapSzpQxirz8rOGM/k2JITh2WK80849VL&amp;#43;N

Lxz0hz7Ni/No2q3Tarc3rfLcyN2talLnJizY/hyoKhJG2c83iWrLPqj4YOG6TAUIfQHUHBAAAV5OYRTuC3Hcy3wUIoHBfR9DUIcHv3ck0BQ8TjzuaTCgAX1WYpSnKCQAHFNGwbokkwIYAGlNk0AAldo5gQTp4AzTBQlZGZxHQBYECWcgVmVdY0C2fKLk1VAX3DC4rmIG5FXo0onheN40B8r4OB&amp;#43;amL1KdlQVxKFYURBEkEbNEMS9YgFfxdBCQ4Yl

SSyKBWSpGlRXFNkISlQNhU5Hk&amp;#43;b5NBVNLWXbYQc3qctllpWEWV5VuC5VTRDUQxlyA9T7I0TXNS1yBtYc0H9HtlWdYhXQkXAdk9ZtiB9LsAzLIME94GdevUra4yYdMk1QU5K4TTNs2pu50rMuyqpTisqw3d6EEbHO2wyI38&amp;#43;Tss&amp;#43;wHIcRzHALp2csLSgXJdE5Xec2HXYve4uPcD2jyCGNgxiOOY388NEqDBamHYz/3z9Q2vqi8Pie/L/Qq&amp;#43;sL3s95

6mHzn5KL&amp;#43;Sh4OBd&amp;#43;hFLz/zAClX&amp;#43;YAwFFkgdAt&amp;#43;TEP7fzwuxMAnEBIPxIofVBx8zxCTglgtBOFOh4QITgqYoYSGQPUpQqSCCyxyXlIpXehUTKmXMnpAyw1tCjWytOGKjUdg6VHFZK8alRzbAylGWyA0zL/yMm5eI9lRwOROPFaMF1CqJW6oApI&amp;#43;VizwUatVHYijNjGN2DsIK6liwFSmCNVqO17ENXMuZERI1tonFaicbY8QfJ5iOEFYhXDup&amp;#43;UEf4

qczlUpOQvqI4JflerFS8QWZyPV2qqMUepIsMVMklhsdZO4/UCwZT&amp;#43;GYjhzlqpJHSqcfxo0erwXyq4tSxiZwOSCttFunRerVQjO5aMU4wwNQ&amp;#43;NEkaxjLGdDzE5HYGFtS5KvFdQMN07rVieowwIb16x93nN9X6/0ZBLCBgeZSUxqEQ0PmaGGcMU7FwgM0SQuAAAaAAtFsSQjChmYN0AAYnMIw7QHmbHIEcFslN4Ce1pvTSgrJmacyWuzY4aUea8luF

ZKQzxXjGzQBQ5U3xxRhzZG7bWSsVZIjVuiCOOIISKwJOQfWJIyTG0tNSOkDJPaSmHEKDk3JEVOwFOykUzKKisuzn4SQecA7KiDuqWAocLgR0NMafIMkrTx2XAXBGLooUQFwCkH22Jc7&amp;#43;2XqqgQdNi7dLOJVNKuSGBV0TLcF2kA0yJizBwHMAtIwhMSk6LuwRJ61nWf3XVg8OyHgNaPUo497omtHPZGeuxoqrmdEvVASdVxr05BvP1u5gbBtNIg88

B9IFoU/KQ3NX4RFfhQYQ8&amp;#43;&amp;#43;bgHkRvpeSSdDa1sVgkkSBZa&amp;#43;I1q4qA2CJxIF4N7Z29BvFYJP0HThGZYAgGNq7WeTFoCqFhwAQu0&amp;#43;tCj67mekww5eTWGFjMrpSyc1WHaX3ZwwqPlwwBTGfmWq8FkrwTKr5ZydxTF2VHMlKMSjiphMnPlYp76YwYXqrovRljkoORSsVbqQVoqNSGpotKTjBG7CnK1QJhVNhTkyg5FyM56pyMaWceyJwPFJBmnh6q5iK

mTLnqY6c9V2ofuOpVOj4zIyuMMnMwuCyvpLI3as3124NmfS2QYHZgMs1bvwe&amp;#43;diZySiw0KPDSAiN0AIAABIADVqwDFaEII4GIACCacMz0E&amp;#43;QARy5Op4FswJBguWJCjYs5YUsyOGVBFDtuAaKFqi0WvA7Waslji3lnICUSDhES1WypUSks1iF3W1KDZ0pNoyj2AqrZspthy&amp;#43;2/NUDOyC&amp;#43;7flTI0tCr9r6MVZYJUhy1Li2VUcFWx2tAgW0IanTqrdJ

sIV3p9VJpXoXY1I4iw6WkZah1nBuDDetY3Z11NJy2UGW5T1lZvU9wzWWJsAb2zDxVaGyA4afW1yjeOSc2wD3zgTVtlN681mCa3lm5hTbbHVunUO4SsEp1rpAZ/CSkC7XCTvmOz8E6JyQM89/N7qDOOlAYQpeSkmjI7uPRZU9tjvIjMchM1RprOlcNSh0wBh2fIZIjD91Ss2zhtPyhhmKDU5rFgLKY/hsUir7QhwIbj91lnQ&amp;#43;ppvTZQJtkAz2RJ0G

x4QfgLe7JsA8mSiKbKFcoYcAjBDFU8weImgMzdBqM4DM2BnBclwK0MYWNtXKipvMRYdmLhQu/HXZUHMuZodKLzbLM4LjCzRSOCWUt/h5dixAMLytWRRY1jnH3esEtGyS2bArEoit5ay47HLPKMt8rFCymPyoZQiq6xfFUapKu121DKrEcro6Krjo14uyaU6tYzp0DrerSvNcDH15Mkykh5QsfXautxs8jY4E6l1tcFEzkUfpBb3d03XciwPDbnZz

vKl2xuIs09Jz6SA/Gxcc/PqpuW5P&amp;#43;ht3JM4UXbM/7daHwNve/dl7LFYGwWcPAi/M6pgTu/FQ6JX57/YJLRGR7D/ntwTwR/pWpeHOmxOfp/h9lMCLnBIASzrJHxkpELiwkenuojg0oWMUvpJMjGB4j4o1G&amp;#43;kEvmHjsRj1PVAWNFPbtZKNH4lGLlNFPmKcKtFwlYn5I5NlD5NFBUiLkZC5rgTGDFJVL5DtPhs&amp;#43;h8NRsUhhHpFOPtDZOagItov1DpCA

ZQb1KlKNLlH5A1LVDtMTrAawLdDxo9PAVdh9AvCJn9PzsQPsiDDmmeCLhGFDHJhcmWMphAEYDUEYEkLgDUH3p0HcjsH0DUEIMwEkFAMQC2DUJoFZqCmbgzPZizH5MirbkWH5o7vHtbmWK7j5n5titLN7hSjrL7srMSpFurGSlrPkRUKHrSuHgypHinqlt7EnnbFygnn5nLJyCloVo0WWBnqKoqIHLnlKlVoXvqLVqDKXg1k1t1oamUNXugLgPEHX

n0dMdtmyM3vtrFMdMhj3hNjXCDlag3H3k3LasRrGhOF/OWItggHttzqttPkPLPo3mPP2BGlPNGivgNn5ovJvgvNvhPiYZANvI8TYZfleD/uAaCW/i&amp;#43;DftfifrYbfq2nCUcmAlsFQlAS/kicJOiYiYhLAVDi9DDogcjsZCZAjhwmgfpMdI&amp;#43;k5IWB0tsFwWpHojpLVDGNOP4q&amp;#43;mtG3nmPlJVCWA1BImtLsKRvmHQWlG3t1O1FTsRj4uOPVA5LScztO

myGzrxislzitqYbzqJhYVYeiiCVie&amp;#43;BiRxOcgppchUH0AAPpDAGgWlwAACqMAnQkgnQ9AfQ3QD0/YzADy&amp;#43;gAAKlEabsarERbg5ukaUEkT4m5k7vsZkXqf4h7oFk0WCBUaFkURFqtqUTFsmXFkSNUeSLUUyvUV0dbIXG7HHvyG0W7J0dHt0aUL0VngMcHEMfntVkXmMaaBMcqk8WqmnBqrgCcEsV1pXr1ovhoUIUxp3jagLBOZNgPnpK1C5pFNzJ3

FcTcRqZAGtq2DPtmkOWGi8Xtkvu8YohhMYuvomjuZAGuGmsYUJpDvvkSY/nmkWgWm/hWmQqhGWoAW&amp;#43;e/rBB2k9mJNAsWhAahC&amp;#43;Tib/jhGWv4sDnhKBRCQ&amp;#43;dAXhJ&amp;#43;V/j9nBGAeLrBXAWqXdtusgewiduFKNHpGMilMYtFKomZEMoyalBhmVBOL1HgXGUwaYi1D5GYh8C5MdMIfZNBkWFUoIh0nBsSelH1GZD4jOOVJMg0npPEtFKlO5Bwe5AyXcLV

LFGlBYidHUgyaNFpalCwb5ERcdBxkqXoYsoYWqdeauGYWJgLgcveXBD9pDLiY4aac4VcuZg9MwEjFjEjDAC2MwEMIWOpljGoO0PoK0FjP6TZjERCsGSzIIjxBAEkfCsqKkbcNGd5nqSlPGbkYmT7n7irAHhmcHlmdAPFrmfSsqKbAWRbIKrHi0blomVWV7MWbWb7Jng3rXA2ZKhzMZCMZHPKuMfVp2SsS1j2W6KGAOe1eeWsRuFGO5DNEoQcV3oq

ONocf3tTNtApX1GUsuePuZVPutg8duT1ruRPIvgdpeoApladhvl2ReX8XtXvjvAfkWuCUAQ&amp;#43;FCa&amp;#43;V/rfqhV&amp;#43;XgkaWBZ&amp;#43;OiWDm9Uckfs4L&amp;#43;QDcAbfsDV&amp;#43;chdCZiWCRRAWngn9n&amp;#43;VBMhfYQjeDJeJBQjUfnpJAhQcJDBSDcJBBT9V/tAhWnifAVhaIiSZpGSXhcjqNDFA5FEnZPZKcJlEYmMnmBlCtDGopZFExRhvBKRt1IoopTBs5F4u5C5i4ppao

pgT4i1K5JEkoTEuxT0pFDGJlDejMiNJlE5DFGlHpBlOlMTtwnLcRv4rlPev1GMhRtsD1A5BUtqL0lbZISpelEJWVNGDzUwUImGLyW3l4podVAEjpe4nNerV0kTq&amp;#43;hTspaOJpboi7V&amp;#43;sQR&amp;#43;m1JdEZSqaZZzg9ZqT9NqbspYYLvqfBRDDJiaVLmaRIH0HAHjO5NgB4pIBmBmFjK0PpljBaRQGMA8kcH0BFTTFFYzGWJbo1PFeGQtSlRii7uld3llV7

jlcVXlcUemdFkVXiJUaVYbHmRVcllHk1eliWZlnVYnqfcntVWnj0a1csdnhVk2T1bqK2f1e2YNeXj8UpnMZqvphNSPICOsRlLopOPBCtUtbXBcb3mtR5oIVxZOGPktv8TeeufcUGgA/PnuWdcvkec5Atd8bdRAJeTvgCbJHeRXYfq9V&amp;#43;R9X2t9YTQiVBejZAprV&amp;#43;BDbBX/kDYw8&amp;#43;BTUBWAFAZ9bw1AYhYI69sw6I6uuhfiZurZXDjhSepJVtPZGM

r1JVC5nzeUqwVsZOBYh0jOIpXVP1B8DtKouGPSaksdDFIzsBrZEIu1C5PKeImZNtDpFjvheGLVFGB4k4qQYwYVBLRUuLao/VE5JJZUlOEWF4j5H1MedVA1FyUWO5P1MYnThRqRiYrlBYjtC3IqQ/sqfoezkYQJqQ19FqeYaXbqZJprWLjXUUHXegN0PgFUHMK0AgOpicPgMoOpjAEjA9AgH4VjDUPplwBcCbpFYGdFUzBsE0k5pzEVJGWkfPSLLG

QtTkcvZfcFqvamQVZvbqiHrvYlvmY1TVYmWWdyhWRykczfS1cKvfZ1Xns/WWDVm/THBVWXlMVNanOnPMRMDqp1pNcdUahuO491OlBKamLsWNtOUcVNrcJFFxS1CWIg9cSQygxABuWEVuRg88adZGjgw1NFJagQ8NavJdkU6i0CdmihJQ0&amp;#43;XjSumjaflMDDSWvjYBZCXhAOvS82iRKjcaUqVI4SRXbI6SSgeSXNOlP5FIsQUdpJaomlGjnLX5ME3e

hUttNqNOONBhkTUZPNWVMUmlD1FgTk&amp;#43;hcZQYRzgSeqbvkXXzuU&amp;#43;XShNEi5g4RLk4QjFcgMPoHaUYLSM0NSBaZgGwDULSPoH0FANrhaRacM8biCgGeCmPWsFMxODM1zBcbPZA4s27mLNkQFtles0mdvSmeFts0Hrs8VVUXveVWWJVZczWQIKWefec1fantWxAHWe1Q/YMd1QXi/aMc8x2Z/YQ5872e0P/V/dNZGjpOOC1B4lC&amp;#43;8FA7sTA2gGMi5Eo

7FEi6uZa6gwdegyOwvri4eWMveqeSO8Q8gzdk9bZdSwxJAmDTw6CWDSTV&amp;#43;WDUy7w2DWw6TYjc&amp;#43;E&amp;#43;6CYWtw8jeI5y8BCw5jf&amp;#43;8BRBRy5De9dAjy&amp;#43;w2JEjkcq&amp;#43;1&amp;#43;S&amp;#43;PjTe3BdBLBFB2&amp;#43;1sCOr&amp;#43;wDgWmWmB9ByxMgrh3hJ&amp;#43;yh6B8R9yxRzjehzTZhbDoyXI6gYesK7hbB/TU0h8Aa6lB4w5NVI5MrYk8WJodGA0oAqYptF4uOKOBGLsMlGcC5iJfZMF

Gal5JFPBC5glL5DpTQXJ8RulMpxUnZHZHenohYx4vmEZ2x0ZFyWVJFCRq1HNWgVtBGEpS1FSdlIZO1FpfOYWP5O4&amp;#43;Eu1BGN1GjgizSVFFbaRbsB4r&amp;#43;g5DQZkmtOq7yd0pwZGIpfmPTi1PlMYj4iu0HUk7orZGkvQaGXkn1IRc5B0hYuel4l0mjiQY5DOBhHpXY6RhavBB4/YqlIZbkyawU2ZWSxZaU1ZWXTZRXY&amp;#43;NJjy&amp;#43;LpLrUy5RUH8A8vpmMA9

OpqGKpkMM0A9FjFyJsDcs0EcPgKGLgMPRALZkGZM7FUWImxp/M9wAtTGe8Miqs07HkXm&amp;#43;gGvWmSiIVcW69yVTmWWxHlVY281TW2fe5mc3llW8D823ffWeKu29Kl231SXh/e8wC7MaNRnDUMO4Q0XNwMVFNMdjsYcTO1C/O6gF4pMpYmzDtUg4XRu5uYdViyda8ctXi4NNnkS1Nce3T2Q2exQy9TS8B6WlQyWuNyRFR5/M&amp;#43;Vh1jS&amp;#43;QI7e9BVQiR4r

yRPe19Zgsr5ePByWh&amp;#43;TCZewjX9XL3BX9ch3/nDSbzhMhay3BchaR3/kTShfQyRKOkL4Dlb3/q7zeLR5znTUK4zSK8zdhSx/I2BuEvx3Fb56Ru&amp;#43;qQROBJzGLyYbSjgTm5yhkJbZFq2pA523mVKRsk8kgnxGBYpMrxQbZVOnztKRhGGMpNOIl5yE67cZKorZFZ9wtFOpCYybW5AFAnxO45GqxwY5NGJPXY5hvpJwdtOl61KkylClNn3ZC55rUZAWE4

iE8Req75MlNx6cI5HwflMKdIUUi5IRvEt0pP9jvVL5AYg1HcL1I5tjvY9GqlP1DGBxclLgTjr5MWK3v1Bv8eeGMUhtY5HoxBIzUAhRrhlAnDXpuuxrPOma1egDcecxdMpuJlG4oQZkGER1tN2lwuEkgcwC0i2DmCc0hAxAZQD6SpB2k8YygGoGnCGDHdTuEzcelMxK4JVjgLkG7oqGRT3d2BS9Z7ivR&amp;#43;7vdC2ZRPZn9wOYH06i19Jtu0U5Rg9WiE

PI&amp;#43;sc1vo3NYe5WeHsMUR7F46srzSYhXjR4Ds3QQKX5vXiZ6AsTUbqIigtGnbJhSexxRUCpQ8SVQ/0NPZFie32oM8t2hDHdm8UOwj4cCh7Qhtz3gGPVgSVLAXnryF5350IBaMBFr2fY9pdes6R3peHw5vsoCqvXhoBy4Zn4EhD4YRqCRRI5C4KNDBGm/jd50Rb81NPlrTXo4M0NITNZvtULYTB9scIyc/oAkEKxQfI&amp;#43;/EsG5B866JNGJ5bHAWCL4l

hSCrNdislDby0Yb&amp;#43;xYbSmBiLDjhnIVJcMH5EUSR1AobfaMK0hE7p8xKkUQBJFG6hSckoTBMZMyVS5Xp24V1QqKXx8hUloME7JKoVGVqCIAkJjBYelDsY7QUouiY2qwR0g6Fc6&amp;#43;TVUgXQCFWsS6yA6wna0NLV0nKtdWbhICGAABZfQLAA4APIagpANXMoCSBDAHoMACgBmBqDYAs4IzKNmMxjZxFOYanK7jpDYHk802Pmb/FiizZrNXYHKXKlsxJR

FtyUP3UtiIIraH1Cy1ZKHpINOYyCGqcgq5pABbYmg22jZDti2W7bI9NBQ1D5j/VwAfJsexLYciakygpRaSjIssL3lhZWCYWaAYJtJ0jDZ5CAXqJwTz3RaBpNs7grBruy8HRgeKvgrUb8VJabg1yvPIIcyxF68NwhgvcDsBDwQlCoIYCCMSfBDEEd60dLUMX/BbS0McOCNCCobz/z418hf&amp;#43;MXjjXN6EcSI5Q3JvywQKCsGOQfJjkwVa7oFtgFfAvv

gXCi7BOa/kDDDtC2EJ8bG6kYxJ4z4Jt5pCdnOYTPzUY9RCMyUHJMRmIxclbI8w/DK0LowpQGCYdDoe&amp;#43;lFI58Eoq&amp;#43;MFlcNaFZNFxx2HaBRm6h2c2SFPc6BRULCRhBsOjeYfj1qhQCZIvXIEeax54lNEBw3CprZVzFHJoRTrZyi6wqAwADQ&amp;#43;gB5GMFUz&amp;#43;JugmwIYMoH0wrcTgBobALSEkBIxaBo9CkY&amp;#43;ERY25jgrmZKi0UtScDa4mbT3DwJzbsiC2n

IwQSW32Y1FRBgPBosKNrbSD6qObSHifWuYlYZRdzJ&amp;#43;p20eav0lRFbN5toJmK6CM4SEgwcsSmq49FQ47ewRZwsG1x4q0DawbXCiZ/9GoVom0Wu1Ib2jMW27Z0Z4MvQf99inPNHv4J9Hrs/RlLAMbGLfZv58x8Yz8NENyE0Ihe0CVIY5JIi28cILkuIaDW8klAkhv1H8t9j/aJiwA9vByXBQnSvsve5rH3uWL96sdROvkHqGZHk7jgJwpjcYa5BCRj

ItqwpGVqOGZIuYipNFQOn438Rk4c&amp;#43;BUwivhgpz2Rgk44vmi1ElLSTjxahEsI1DL7SdehMGLLnmD8hrRQojXFuLTmpxMFXOqidOsRn/7bCYMLURnKOF0SSdNKs1A4aYz5IiVXEuhGAYU1MnFNLKOpW1seBmQQ0puzrJTFcmaBVAPWrQZwOpl&amp;#43;RYxmgCIzoHMCEBIxVM8QUgHjDuTITxmsbSAJblsh&amp;#43;ZwyybFoscgyIL0F23AnLC90pRvcORJRHZty

Nhm/caU/3Q5hKIkH0TssjE1kQ21oksSpRMPVthxPlG9V1BA1ZUX209Hf0Me8xVTJqPEnrEio4YVuB3nBbE8py7M6uGT3UhlRBxpiVdii39SuDHR1MiAB4NZ57sYwBoheGdj8H3UQRgJchsEIZbngJetibDqEJCmfiNZRQwMaCXDFBTxeCNe3tmKISBSTZFsxysWMqEyM4pNQ/3nUPhyOzROWBILgNBwI3CGS3HJRPqzFpuQMMY4xxmkkEQcEXMcn

filEzAYDZtqjYjDFEwWiqJ9hFiaQnpAsSnA28ocmTi4y85H87IASGim3is5bTAR&amp;#43;dJ8YrKIb7SbWKA48ETROk1MsBVyBAL5RenTgMwVQfQFjH0wtg2AfwYgH0D&amp;#43;D0A2AtIH6eSJiqcxUo2eJIlhLLAps/MeE7PE92hm8DkZ/AsiZmR5GUT96/IsQUDwJl4pQe2Mi&amp;#43;rjI6IYyoe0osrKUEfqky1BbZF5nxK0EjshJ8xA0AzLR4ST88OkISuHK5mTl

UA4DR1IpO6TbQpkRw5wupKFkuCMWjPHSTiz0kr5iw2dT6HLLFkmTbit5PnirJUj6yUOUYqXufA17vU20ZQ4hVZOinSMyx9Q3dAlOY7xTGhjYtyDJzMgYQ&amp;#43;pCUEzqlAgz5JTi0iOxu402KtjIwBSIZCXJMqwD&amp;#43;Mu01Fi&amp;#43;Otbgi9SKETadbMwF1MIADyMIEjCRiYAKA7oZQN0B9I4BWg0gGAHTCNxlhRmI9X6ahI4VXdiMtI29MqAXkXEl5uKSQSRP

9zryt6yM3kVRJ3k0Siy&amp;#43;8kUXW1kGCjj6xWNquxLh5yiEe3ExURoIfkqidBao5oG/JmIfyFORjSZGzMNEQsxYyKBSaaP2zqQiMFxa0SuUgV3FN2osqahLP2x4s&amp;#43;ohia6meWMkKyJFp7f0TEKskIcIK&amp;#43;CnGlewiEI0wEtks8BjSyFHIjZ3SvpcmL1mA0elhY6ZTjTNlEQEKwysmmI3V4I0WG/kktFAWd4hT7e2yuMbgliHjLb4vksADRwqF0c7ZVC2

oZJUiiTIB&amp;#43;fU9VilOqijhdhkYKcD5Dqi8djhZtacKo2WjwQvaEiIuduKorWIKMwwrxLqyf4xQMoqSOyAhlYIArFo0hHaB7Qmh9InIfCIAfhW2Btj6ciUUfpX1SSr4XMGGNkuZAeHElLRWlFzLVDwYdJYmFkWNFvzILgDYm2iHaD4lpz&amp;#43;JowqckJPE2MQtRTEz6LpDpRbj9QIwLBWFWNLsECIP0ViU/oVAkr81BE7UxyEdiMSmI0lQUDHFsX0ZKJK

emBFKfrXajbALEfMm4Z8q8RGt7x20/rs0oQHSLrKEI48P/Em4NylFcAVTCG2wCtAHoX0D5A9ANBJB8AOwVTDsCaD0AuQo883OdwnlNSMJzmaxdhOkG2LwZSzB7lDKcX4pNmpEhGVyPKKbzhBXi0oJWzPl&amp;#43;KsZ8eHGSDzxm&amp;#43;KQltzcJV1UiWlAnmvE0tfxKflqjwqokwcu/PWKFJcoV6WdhzN4DDruZQC8OqwVmiOCNJqLLSTAqdFwLJZroqaRcSM

kzE0FvoilnTQvYqRZlmQ2lgQsmX1pCFT&amp;#43;U9cJAzGlCVe56uyqQrmUnL0OX5MBB5Ioi9KheBvUZQeqF5w15lmvW/L&amp;#43;rPD29HwkCQHBkPIQrKcaL6nGvjUfVf4XyZym2RcsoXOyaF3y94mRTOCZyGKjY9oezVlqLDWo&amp;#43;/TKB/0nARIqu6fGPsFDpK&amp;#43;R2h3Y8pOcV6gFhku00FFbTlIxClwm8tDJSzUf6S1Cw4YUuK1EmTtQ9hZUC1PqwwhlwGMvnXD

HK1iiwYGMZwJ9JEklWyky&amp;#43;eYDDCdDc4nRGoXtIqfKsGiKJYMXtLqA&amp;#43;kEKFITEd6LfupD2EEshNG/FyFJL1F1SlK4wxaWSo8S0UzggCV/pBnam&amp;#43;0BkCahhXoyYrSTZwNXbHLyW6j&amp;#43;IM5BXCpBRsASoY54GhTYnUr3UAjRFO09BReSrkyLJMaao5O6phEzc/xEgUgM0CMDKAeA&amp;#43;mIYIQE2BCBCAdyVTNgDgCaAagHyTYBaSEAxqzuDAlmBOAoLMDnM

82FNU7npHLMs1MMgomvPzXkSi1qMvkaWoFHiC6Jh8qtcfJrWnygl8g1iaEsvmQBr5za8ODxJiXtrH5/bNUa0CSWrEP5GEWiqrQFm/zRsaAfYrkoHx9T5aarQWc4LKUizgSlS3ScusvRLD4q661YpurMnbrnqqs4/GEKhIDLgINkrpWeD2UYcXyCOx8jjVR0PtH4nvc5d7yqEob6FPG0gtNBymtRhVPmpgl1CtX6QOks4L2lX0sg3pNN3QiLrBhOF

FR&amp;#43;o0UOgp5xzo9c7VwIh1cJiG4HSa52CiGNstOm/jzpFQdTBQAegPJOgtIToH0DGC&amp;#43;gKBCIoYJoFDC&amp;#43;tmg&amp;#43;gHrfQLjb9a281IlIi0Vk52KIZvAS1I4qm2EpXFs2jeR4q3nlsltu8/GayH8UMSNtB82tUKP3kXz&amp;#43;ija&amp;#43;5lxJbUnaKZsSqmaqNpmaoER12wBhuGmFxRjEC1I0WgG432o52QClhepyiTfa7RaDCpWjyqUHlXRbkPMB6K55NLst5kndS

EPS1C9r2&amp;#43;64CABqOQkK0xb6kKWWmx3a8nJIUl8m3uAoK8sacCAtBjWjEPh7eGyoMbsvH1WztZUQ5HWeuPW2E71bES9Z&amp;#43;AgquS4K&amp;#43;NXvUGPg3qyAEm&amp;#43;wSOhAx1fhAcO&amp;#43;nMSwyBwy8y0t&amp;#43;uHXggf3azncW&amp;#43;8/S&amp;#43;H6Un73qR&amp;#43;D4AWnt7oCZe6ESfU/iAMQaqIRYyRrbOQ2MdRWTBInZWPwrTCkpekTzfJsu5MEzEkneUhlG8R8rZaY0CyNqDMhIKWae

ncdj4kK7RRHINU&amp;#43;LbUgMZaEs&amp;#43;fOiXcwYezDQvORFb4V/PiTFRMMIm4qDqr6hAZ7&amp;#43;6BnFSlCE7pRudeDEg5QTGSzVFExSD2lIgX7cJ3lbFTDa51Gjd9SMc09uGJQ8RMamDrBlg5jqMOmGTD5hmJBAPzDilSKN/QpO1G5LdQtqT6bUJcOJK&amp;#43;cqKDnYsPCulWFRcMtJM1DzsxUUUkVF/EUr1H04rCgkUaJLXFHVojbjDsO6AaXLEUWs9pou6uS6tnTv

hf9Cis6TLgqAnALSLpI4PQB4DdAWmOwZQMUfVE1B8AeMfTHyBJHWYzFY8uNY&amp;#43;A7hlhp5lqFNmlQzWSTJtK86bfDI3oFqhBC2ktZSGW17yvdla8soEpW2B6iZYS5QREtUFRKkep2ykB2ou2x7cAGYBPU3kXxeJ6oXY1gU9priwdFqgCvJZIVyhldzj4CkpT9pRBF7/tJewHdUsPJyVFVssm6qgpr1brlZlkrWfssR0d6whZaeGnDoTFgnh99k5fcJ

CH3lpcdh6nGjPrclY7P1RyK/ebJIgwF8dMUwnTAYD7014DsB/CoIcqgqM4oRm8pIuzRw0aJhj/SOhNCYoj5tEA2oxOxt3RYEqDYnCjBlESRysFOJtFFXPx5O/LGFSmkTS5HFJTh6CuUc6IYbVkZbTWWW30VIrBHOrZFtc6TPfml2wjSt6AB6DwFwB9ADQ8QLkEjCMC2lmAeMPGEIFUwECoA&amp;#43;AOAIbr&amp;#43;kQAAZHwakYNpTYcDrdVOssHbqGMO78qbi

77i7uLXbz3dPigPbMbW3zHxR22yUdD0UHEyQ9nEhUZscj1na4lgktUQMEOPajcwtSDar41KDp66RFxnmTZuyh5gilECl4/T2gVuCxZpe86pOESbjgq9jS70bXqh3nsG9usmE8bMhOwRkT37NiFBsSPgIv9ZhgBLieHMAJga5CgVihF94OzUNiBtSulN8QVdI&amp;#43;TBIUw&amp;#43;kiRymk5oTFA&amp;#43;f3E4ZQZwr&amp;#43;ykzwcqhNi7OFiCMkEli7JSOpWBC2obREXqn

7VterU0gJ1Ow4cj1TYrY3IqBjAdgUAE4DAFwANNugtIGoEMGYD4AMwmgHYEMDuQZhCAHpixdhrDKYT4qKbK4wvMG0hniJuax3aMbm1RmJjMZqYx7rrW1Ufd9bLbYsfrVKCr5Kg5smTLvm9tUeBZvYw9GLOywmZ3OwggNlkkyys9q1IBfX28OWpilu1CufOrbMA6l1XxrwTrUG1g6LsV5CuYOf54w7gD8J38DeuA2WzYSQvMGV&amp;#43;oH3FDX8Eyl3mhx

TF5ib1pENE2xGRNIc8diGgnZcvJOkmDo/iKZOIVsip6&amp;#43;pXSTOXjna7EHik4p6MHzNcPJMqM3fLTkdgqRxX8oBWygrNWYzUE5TxYLzjzp8StjuFjmqcHIhVPvsFzpya6CkY1NmTALb4w6YkYcq8sfxRp2XRIBgDuEhgkgL1cwANAIiBgPpUMPplYCmY7AfQXIM0eiLmLx5j4ONImtmaVRaR8863XedKAUWT5ubVeSMc&amp;#43;6IzC1dFsPAxZO7THPdLFo

&amp;#43;Wxfywpmm2QejqpmZvkbHyZ79SmYJdWLPzNU3QUS8YLGwNdpwfiaS2OpuMD4Jp3NDxI2eeOF7yl7xmYh2ZwabVdLKC6vf2aBOYKQTjel/RCexvWWQpze1fcBHP0ol5zJQPBKTbAB4Ilz3aKZYTYvUt7llnlo5KhTXOliNz9shoQgfcMknm&amp;#43;ThjaIIaoxmr9Wc0OwdQef5WqIubkIQqIRmgFhSrxKxJHjlAU38UV/BpTe5ATmF9AudtQ8TFYaif8t

W1VxdHVfmQNX/zmp3LcBZkbSZz8hpkrd1fQD4ALSxAIQH0E0DxAxg7QIYJwAtIDA7kHyB5Hcgwx2k8Li1tRtSJnotF4qeEoM9teZFETdrLi8M07vcUFFPFZ1stXddW2ghRR1av3exZmM6o2J&amp;#43;2nPGsd4u3ye2KPASZ9bVF4xfro7d4EnUKXSWcl2evJU12i5VcobKl4Xa8dhtHV4bnxsvV30Ry9mN1gJyHcCbaWgm32YNCm4UKF5lpTLUCJyyFIA

onKYEnet/evu/jU2DlW&amp;#43;5e&amp;#43;TYQ2QGkN7Nq5S7MC545GaWUOkgRe3QWdhV5fYpJk0Uqj8FCWjHKZOL45pNH0WqwGWIeeUdRikCp/jvpDvvsdVakqnVWJzCQOHGc5fKQjl22hVW2D/O5I5lvNtNXLbI3LI1MCEgOs8jMugoxIH4McAPkNQO5KQA4D0BWgygZoBQE6AUB9AdyToEBNDvtHruK1l8LHIdwtE7ugZwY5Rb4EHX1yX3JGWndd0A9mJCZnO

wEuTMcWi7e24PasabXrHw90S3M9sfO1iyvruAEeT2v&amp;#43;bJKmZInXqEQb8xVmAFM5ZuDNi5qQqC9qlt4wPdWII3vjMnDnijb7MGXe7SsjG9PaxtwncI7SvvUeu/V0MEa6Jc/Sw0svWyT7/l6AxWIpPEkpKLUARE2L0ohG0&amp;#43;9g4pEFwvQGUgkaqsAeq2Hxni8odg6w6XEL48PVTAus20LoAvYP3xFdTWtE/BzgWlFdpT6bSBOBYw8YSMOACcAQAwAMI

MAfQM7ewCkB6Zc16NrGr62zNdE1I3FCRezx4T5nTIwicvKEf7W81NF53RI&amp;#43;jNu7GLcZ4JVdfW03XpHijhtSo9D3ZnXr98vM9HviV7G/SBjowQ3cVAItJoZOWSb4crNt3ZyEiZ&amp;#43;3SXsfeO0Wjj15y4&amp;#43;0vNR8GHj8e2jcnu&amp;#43;P5eQToMVCYpvBixl451MaOZxrhTMx6EGc&amp;#43;3qIjeWJz&amp;#43;&amp;#43;r9m/mMRH6oE&amp;#43;L98uhFg3Iv0IqL9HQzagQ733y2J1CMiefz

n6oCy9lIUsr4auWN9LLh3lvZxoU28OQr1Hazdinn3tzxJHxNv22gxQuVlPVOZeL6QUHFpgMjfoRUfT9QVGTUffjwk4KH9pxdy6qGlD6hcqak0GHToxT8gcFYo2GcWtiuJJRcvGRYSpPocr0YH9I0yTLiwWI2ArrVh4hWk30t2FQOkRnWeMdF/R9RYmiiV9FTxmxVP6auib2jqr36dHXXN93lZnMyhdjI6SpuaeePa40bI6fkScb0OWG440ugCO4B

woL42b&amp;#43;pR5qaeBkhVCnTgilYfMsMjDidqkRVmVfxVQxUUAowtCpKOHlfidwwUhcpLpu&amp;#43;EicSw2h1JncGU5kGqK6mlOdnwoNFQicd4&amp;#43;qxg7qcW2MjeW2yiIil0eq4R6AIwJIEAmdBSA&amp;#43;AA0EYFduaBnAzgCgMrk2D4AOA0IKZ2SJmfG7Zm4sLh0VJsW4oF58VHa5tr2vDHtnh1sYxRP2dSPy1Mj5oqxYWOF308yxku4drUfHaNHb1qPR9ZGpfNNUI

dl5yOxSXxXblH/aS&amp;#43;Y7&amp;#43;fTYpondpS02Zht/anHvYIe52YAx7Qx74Oie6QyMtYKFzSRgJ/jSZfIme9QrkSCK68vuWKbR&amp;#43;HF1epPUyfEdAr1T1ZfMtrLYT1ksTxIxkgljpXgVuocoyjDn9Bs9UK2rJXitOQzgz9mJk0KyksyAM3m1OVlEXcFJKe8r1OT1Cr7ZOFaeU7YR8FihpumNM0GLZHVMZOHioRfScZJWLDpSL0qrVSQgyYLeaPaQUOKsAzcOl

cQFA0TTSxRjDCFukz6JJqzV7c1Tzi9gicZxvY3yKanB78uSC&amp;#43;ati7cHwkRdN&amp;#43;MUWXuvTgEo4MoA0xYw&amp;#43;mfwfsJ0C5CdAPk8QSQPgH3mmKTuKEsO1tYOAbAmutIi4nhJWbx2Nnidqi8nZ2ep2d6iH9GVnYrWJnwe8jjDwoOLvKPuLZdh5uo5zMEf7nRHqvHscszkeceQDIDK1yCiyTXt9H24OjiahThgXtetS8XsHuaXh7XZ89KDphd8e4XAnqe4i

5nsdKwnYQvIZENR/ayl7iJydDj6imEmKFZ9ozzcsnAPpgvAmnxN7PQJ8E/&amp;#43;/BKJB2N5kuQ63QXcuPuOxzjgyoI4xJguSvRdI9XYD&amp;#43;nTRrnh7vTbDXuAU14aetXwTtcjAfkZcL6B1MdpP4KZh4BQA1u9AWkH2SEB3IBgbACgKpmIAPJ2Hszl8FcenmLPQZ4221II62/CPYPojo6&amp;#43;MdOsHPzrTF&amp;#43;Myc6TNMTkPFzriwdp4u3e8P93u51o/zM129j0a

t72LI/nIOCKOfH7yaNnLqJWaK0YH76NB9w3nHnHxG2nzXWw/9LpSjBa0qR/&amp;#43;PZ72nnHUjSZt&amp;#43;SmX7VgfUrzpu3q9PW8KA0T55s3LphMfN1LohjcUaCK1/LYmdDE7KG2KPSSRNoVS4yXREQXvBk5HbgFc9XxKvSJYhn/qqqDIvrjLU8a/1Pj3VtiuvazAudX7bxD9AH8FIBQBmgmgTAP2AGAYZVMHyIwJsAeT4ABg2AdTIkt/etH/3/044JuMIvDa

Lf0g/h36Na4ReQ29s1NkW2916OD1os9neixd9M7BRxOY5HL3yO9OLDMyucszPi0rt3rau2I9eyb6Uj9GZGaikRvDQRBbsE/amBLB4IMQ2KhU/MyXT92PTBgh8uPYRC656lI9n49yWRH130cFHMSR1K/SmwlcH1Nl3wQ&amp;#43;XWl1BJIpEDS70AnblzA1gKXy1iciTAK1b9ykIDEyhioXYGcYnIc11CtdIQDEH5svemj&amp;#43;FwtMBkqhuxfPmWgMoKklH4DX

cpDTpKuMqG34NOVOW5pb7YJAxxSNLpGAdCwQQmQd7aNAkXcTGFRECZB&amp;#43;ETWq8QGJSkUIcrJI1tUN/cXy39XxFr11N4SY8GhNWnA/wgsJATX1IB9uD5C5BTMYsHoAhAZoE2B6AH0hqAKALkCOBIid/1m8Frdowi0ujTCWzwSLQbQXlHuUAPt182aiygDdnfb1gCkPFAI99TvZAIQCLvJR0et0A56zu9bnASxwDnvEj3NN67Sj0ysomR7UyUR1DCHI

DG7BzluVVEWgM0kwXWBRZ4tLLvji5ePfP2bM69aHVnNl7NFxL8EOe3luCoCd/RYY97ADkOUwhfhluCJ9DH1psMXS8DeCLDOCCZdUggJ3h0LLeeykDrJYKQCcl9DT0A1JAhE0b910U&amp;#43;zgNlAsaSL4BtCQ1&amp;#43;EZWDTg0hiNet36hLPBciT5F2fmgn8ScKnFi08MG/k4c45OlQU59IJqGnBkoIjEhtdVKTlYDGxJSnE4aTNvHERFKRJjNRgvSJm2FxWY

JATlx&amp;#43;YqG88k5KRAzdipc1y5ISKCvgloCkWYRT12hajQUQN&amp;#43;fijp0icdvDWsmhXHEQUqSYjFRwdQhU3UQGzdimWt4MDig6QJ2Hzw8C3zTQhaQlNcAVyg1/WWEF1N/I9wSDMjJIJAMZfQhy6sj/ZtniAfSUgFIBQwGoCaY&amp;#43;gR8AzAjgdoFW4FuFsH0FI2Fo1qC2jE3wbFf/CeT0gVvK3zQBVnYMw6DQzLoJ28egvbypQDvaiXOdEAtDzO9LrTD3TM

Vja71Udy7F634sq7TtT2MjfAgL7URyBUnchLHS41xQ3tZuGSQCuM0P2C51Q4MXVjgyH0K8ppc4JJYvHAcy4DcXJF2L8ibEEMhCkQxezwhFPLfXQgSXOCjAR&amp;#43;oE5UagrwpISldiTBJyCs1IfhCpJ5VWeGww70Lvj3QRacdkDkz&amp;#43;Lfn44kpdxmXEBhPSjNRCuLsyXxVOIgwEJikJYVxwKzayAG1ODG4VIp1OVJB512uduGOwi&amp;#43;L0NZxYg8RXiCnVHB

0DCkxV1TA47bDIPQAHkNgAtI/CI4BqB6AKoANAHodoBgAtuTAGUAoAdTB2BnAY3wA9oIXFGnkQZVNVaCBHNZwTJNnGD26CHfeD3m1nfAYNGDdrXO191JBesLGDLndsOudMAttRD8HnISwWCjuAcKMcNwJrhah0oeWlklRwnmQv5x3GxlnDhZVszB9M/JgMRtxSGH3&amp;#43;NUbdcPRsi/bgO3DfIzT2ckcbaQKCjrJY3ioQgNFmwJ91zNEIfCnZdEKVVA

oTFUnlx3FSlq4PGGxg88DWFFQ0DWSbsQq43aW8TQcYgsXwIi/QoiMac7WImhacKIpRQzBpwVTCEA8YBEWcBVMTQDmBNfH5A&amp;#43;QEAPGFwBMAA3RqC6BT00txR8YD0NDZ5UGWjtNrCDzLDJIsM0gCZI6AL6D5Iw70UioPZSLOdvfFsMu8JgzSIwCK7HSNm9tHGPQWDqglsL&amp;#43;ZXnD&amp;#43;VUlp3YB2ktfvOS1uMQuDTjAUEYFjwcd&amp;#43;7cFyz9vjJV3ccPIzxw

L8fHHyK3DkfUXnv0KXCT1XsAnZCkBDTlKEOoYHLIoShJkTWyzDE&amp;#43;XVEhU9WXfgPP0j8M8L/wwEMQIikXLBGI&amp;#43;CB9ST2RD6EZvxii6FLm23QThXWnlM5hEIyWgTjATR0RTiQUPsE1XZpA00vaFKUQV&amp;#43;DZRk&amp;#43;EvaAKF3QdES0WvR8&amp;#43;XdCCgFpW8y00apOwTTlgHcTnpIUVZJFvMfPFnwLBnA7RHi1zUEsGIwZ5YklMdtgcyA59ZbPjj1jBDWzwgwDA

ykM44SwaZCqRJCCjX05wMBqDMQ/IFuHfRqTf1ywMsmCjGSRWCYLhHDccXCLyYSotI0kVJfcXWZt3wc9zacuvWkEIA8BVoG6AXSDMDuRmgDgDtJJALGD6AkYZwCGB2gK7QGi5vdo09CuHDCH2IU2XCWt1cUSD3ztoPOaI&amp;#43;4Fo3oJrD&amp;#43;glaPO8lIpAN2s1I3bQ0i/fG7zD1A/GYJ7DdjBYOwAlgpmRn5TEbsSJ4IGQbQnCQweTmy5y4p4x7sQfecPb

NPo7S2INkbX6NhcvI&amp;#43;F0Bjd1Ec21lDZQAz8jcYngM8lXqO8KUDYomVi/CFTCxnitcw0rkwJ&amp;#43;OSxDsEIkSUggFOVPAhMYs3ap3Qc/zQ9ywdt/YiMkw5EWXyIcXCUzBgBnATAC6cTgNgBdILSXoAQAERfHlwAiBPiK/9YqIGSW9CwGxWWdNrEAPWcwA&amp;#43;WAgDm4tFjEdjrGAOWi6wzaJzZ1o9D2bD1I331LsOwgPwgBW1LY0OjQ/XALdAljXVDElBwk

1BdoquQDG&amp;#43;dW7e6NnJiDYqEGw1JaGzei2PD6JcjvjGeMJY8/NcP&amp;#43;irgocxMscfW4Ox8L44GN4Y8FBGkt5EQsxNBIZAhGgnRkTPBGPC7JYAjk81Pem3sT&amp;#43;9AJ3WUwDFfSF4WGZxMA0YQt9jwQqXFezAgTlVcyii2bSmK3NidQPipjEnPJHP5zOSFVJ8XGSSn45xaD2X4o1gw2OlYyCTK3xYKQlQ0ERNYzWMp4uxVOnE1dWJTT6ggtHjQE1MmFznis

vEM8T1dTHRQi78aoTSg5M05MTTRwPXIxGWhWSacRUYeCWJnFJK&amp;#43;afj6hOfEzSSR6&amp;#43;VhWC98&amp;#43;Yg0AQzUe40VcEIskyKlQGFdw00tqNaH1p9hRDC6SvaMf0ygVVfhXjoqcZhW7EhNLZLhxBELOkxVzOWByCRBFFhUoCmQxkNDiHxMuTiCyo7U0gTbKf&amp;#43;H39OvY0wgAe5SQBP8ERTkA&amp;#43;R6ABERqBnSZgH0x9MTYBbB1MOYDwSvTJbynkiE5FGriiw/C

Rt8oPJO3mjaEx3wQ924phMGCGw66zYTmLLaPGDZRbhKHjeEiPQe9dIp72cI1RGhM1gxE4yJNRlacuDsFaPLYMkkXGU4D9iZ1PRPoD1ExcOYChDVcK3x4fTgIRd/I&amp;#43;4NF4&amp;#43;ArFwRDTEwVz1ScTavzCT8aaGMZd6/fGL/w38HGPApgkgKQiT4Q3iD5dJXaJMM94o5HDu02kIREI1ErH50QiyuOZIqlpwCxEs9&amp;#43;DKWlNCiMdyFVdgoe0Lml2KPlUFtY

0XYVUROVOFQuSOhekmQdm3e8wq5TifKF9okmbk12BZDbLnSQBKPJC5p1ITNPTkFCWJjVoZwRKyCDwrcpFj9otcQjbFM9Sw0Yw9RCdh0RIrIqP3dQE30PAT/Qk9wroiaOOPSClFZplIB1MB5CxhsALkCCJLTGAHgBugd0HUwDAbFIBkLiRKmEincUSKAD1vChM6C4Ze3wpTZIk6zKoFIzuLWju4qD17jCZVsOw9/fNlL4TNHARL0iw/BYKxSjIm7W

MdaMQBHsgQbZ7VQA09P70VBIVXDFs57IqBQdEM/Djw0TtLfMDS0/jBpQPi9EwT0xtT4gJzuDv4TWUGVfgxISZcLUnCH7Rl0e1JssdeMmMhwKYpAgfj6TEOieFiKSwKMQEoOUgxwZKY6Ao1IwY2kw1ClYxm9lF/LJhniK&amp;#43;LSmEJFWYJkVc24FjQYwgvUwOUYBCFQi1ZfzPrjAT0jEdJ387WERANML3CFLmAqgXAAGBnAIQH8pcATYCsAfSdoH0xQw

IYA&amp;#43;QPkMYEMiMw&amp;#43;a2zD&amp;#43;IqeiITzdaQT6N02WuH2J645xWoSBBVuOzJqU7xQfSG41hKbDGUjhLQDdoqYOHjuw7AN7CFg5QEniNwG/nJwgPdYIgYrjReMVAOdNinQk142nlUTHI&amp;#43;DMYCFUxGzAdoXfeLh9D4hH3VSgYzVLpc8bHDMRiLLRxMx9IYsvxLRkKQJIJdRXClw8s0fOv2Gz3JeQP09aM7m3oyg6LDH8RFTOaRM4CWOiksZRCFNxJwkMVLWw

M3RPYKaF7YtimUYJwKSyaEnDPmm45RQsaPdTeZTxmi4zVP/kZ1kkTzQWFNNGvjgNWKDTif4qDR4xZpFybnUf4Ohbkl/CsbYqMHSAU4dPKipfdl2kwwUuXyuRsg/QHaBSAGACgA8YbYCRgBgEEAGABgd906BlAU6JMVSRD/160APRIiIT//J3FISgAzYPEjs2W3y2dpI89MWi24xhNCzmEruMbCRgm9LTNtollK0j9o/hKVRP0oRIzgmjM6MMEKPJ

mX4NdgO4GejZLbLLo85E6mDaTEoU4GY8VEkFzlSjg/cmYD6ddyLQzasjDM3CT44BJwyUXPcJOUWnAJyA0wk5/GtTAaMoR5cyhLlzKEKbdEgxM4KdEmRMb9XxJKBbcqGj&amp;#43;COrBQMJ9YkzmyST6aYBkyQRSSnGmlnlPMESs7gDJCSlthY7HWgCua/jTpykRzTqkA5INNa5ykKSgyZB&amp;#43;FaDUIM83RkjAWkC/g&amp;#43;VzXcMD2zaVMyKJVscR/ktcNpfLkPN

GxdJSwI9Y5DLK5vZR2kr4LXTSBFo&amp;#43;OFpES9EoNihRV7XdJTTl2Ce2OgS1TVTKHT1M8HOjiSgTWnIjdMh2wgAfSfABbABgIwD6AoQYgHoc5gGax9IkgNgHaAWwCgFfkS4uoNmc3MpNSrjQZGuKACcrfzGPTyw09PpzA8RnOCzmc2MzCzvdelMiz3fJlP7iuE3nK7CsAwjzmCeUvY1wtf0xPR1ECWExm9cssv&amp;#43;QLCazRSX4oEMCuBlTLgjXIXCtcyr

JjdlUr0Tqy1U4&amp;#43;OXMRPDDgsSdU7DLfYTE0J0vjx0a&amp;#43;LtzmCgHG6zeGAAiFc&amp;#43;sq/FcT0YkQMsSiOIoTLQSMlXmJi0gwPOii6MxJMfCZXeJPpoNbCxhsZJOTK1iZfEcTjMRYIwKEjpjGY8iMY&amp;#43;oATKMQB&amp;#43;DLz6k5st&amp;#43;LJNLaajHyRgmFRk5JJLPWichLIH0zGkqcGNxww28c4meUzVEcWmRdIPsTvR0lag0KRf0JkPGELPWgj1pzEEIOxwV8JJmTSE

kXKGUMuxFUK4p&amp;#43;OX4V&amp;#43;SfQ0HMXygUiqIhghINfPjiIUyQAGAYAI4FpA7SFsCEBHwcop9ILSZoDGA7kBACMAsYA4xvyXM/BNQBRpRoP60ezUbTSIAzF/PIsZo2nKkjKwluOrDf8q9I7j2EtnKAKOc2YsfTuckmSO12U/D2D8P07lO7IFgmgQQKjjSNAGgqkFLzQKQMhb2uMrHd4ChV6uGDN&amp;#43;1SshgOxYKs74wncfovXIuCeeTDL8d6ChDif159TF2

1kMaSc2gReCwJ2xdhAobJCkJ0aTyF5p9dxLABfcrlk14cfeEqJsJCtCgmzUQmQriTqYskzdS8kLqFqVJVPxAzkVxVSgSI5sxqFlJlWE8wb59hPJ0eF5aN2OTTt&amp;#43;YhIwMepZky5Vpc01TToKpXVi2JhNd5KSk&amp;#43;xY2gYINA01V5krYh&amp;#43;1aQaAoJC5p7XNggkM06CLg0DIMWggqQCcVvEyL8IiOMG4NM4FLG4REQosnSuvE4H0VMc0gAoA5gJGHuQ4A

egH0BsAOoxqAHoPoGm8CcrMM/8cUtAFfMei1ax6MWiLzJ8x2g9/NmiKw8lO/ygslGT/zDnAArmNhgnuNZyli5lJWLcPNYqD9ZgpLN7IlwPYpLNlqf/kr4Zc84r2JxUwfBQxDxG4r7s1EzXOwYni5KVIK7qVVJaULJT4uNy0dEKIQ5wQ&amp;#43;vwtyQkzrLfZOXaxKIVqMwEkmyEkrEtDzNzEPMfDmoFAyjQJpdjXzAoIyxjbhJOFihKSmuJIop1JoIzjL

4UkjDCkQ7lLoQX4VMx8WyLI4iBLyKUdKERgTQwlwjtI7kLkHIAERboA4BaQZQDmBmgbAGIAkYFBLkBNAIwC3SxsHdMwkCUiaKJTIoElIbiyUmhLDLJiiMumKaU1aPCy70huLCyHrHnL2jICg6IFytimmQWD8AVLJNQvkwYXlzssu6PHU8lExAs5&amp;#43;EMspbM4M&amp;#43;4uZ4iCp4r05ayohg4CGy&amp;#43;vUMSsaRgvxtWCgENbKS0Xsq08mGIoTBoxC6DTKFoYq

JwAMheCJxdzvqB3PPhxK2/GBLkY4SEcsDw&amp;#43;y0JjKMjSoDz0SuJxb9pszEvHK6hY6EIJEoDwsrTJKdOlpxVVU2meEKMYfGYxEFa/iAy4VBN0&amp;#43;TgVbAjFLxaOgjUIJEVOnEQ5pWqCAxS&amp;#43;cBxGgUMAsEiDiND1N0LI3QwsnZOaLQOxw9GQfnpwnk2gks9TPOSjmyzIcZAsLKQ2KFqSCWaREpIN&amp;#43;bYHNoVEScUIJGdCYSyYQWD&amp;#43;JtjuEf2hDou83HGLk

58o8tKiwc3IohyUKd8CK0jSiFPwBWgfAD&amp;#43;BNABEQ&amp;#43;RmgC0h2B1MUgAGB8AH0gNBC49TCGAyPJzOmciczooaC8wpazJyBiolJ/lSwoMtGKm4wLOgr07OAIusosuYtOcGUkAuiy2wgeNZSbnBLOgL0yt0H6jRcgVL/STImlROEp2C4yRQiylzHIIRkHbKKzbRErJor5U&amp;#43;iu0tZWbRJqy3iwy0NyqC24PbKm9Bhn15oaWQK/AwkqINLRVK&amp;#43;dHCdUS2G

i&amp;#43;wBCoDlr9r1AcowpdK4POoUFC6ziGxiDCZEH4KKItPH4tIDihIoEjd1PTpNDDyHPFkoZKV845DPYVwJMpfVhVyzQ7LlGg70Fxk2JKvSegqRJklVlLhfEJkOM5Xs22g75yKe9Gyj48ixkX82kPaH&amp;#43;F6vEHI6qcioCz1LIRfIsvLD/FwjxhTMfTDxgr8zQA&amp;#43;QFieFKGAHkVoAaMEANgEwAh6dovdKoUHhNtwjGWkUmjKc23RGLSUgLIjNxHJaNgqW

c2lJYTEK1SPjKucxMqetVit9M5TNimAu2LeyCNgUFzo8XMXx&amp;#43;SY2JZJZJMDIVzuASxn1oZJPAtY87iqGqrKYa8UiYqIderMoL2KtGpCdyagKO71bU4J3vUBC3I0Cit9YEqf18fPy0UD4nWQrqENaCQwxxaKfOXfQU5QVUiZpwItLk5yKIKAnB6kHA3T4ki3YWNjJoIDP7FtEUKEHU2aQgjWh9hM0MhVnhfPX7TRfU2u1LHVLquXzKbHI3rkiijfI

GAxgZQCyB2gboCxh1MaFJgB6AZwARFlAVoDKCPkNgD/KtQfYhDrbQ3h1TUKc7zKPSJIo6pDLIKuhKd8E6//LTrAC66uALjnUAs4ScPTsOmDnqx7zzrsK3sgQasysS0Xw&amp;#43;SMwX2rfnEdQwKTi6FlnIUDFRjrcqK0F3ejKyl0S74FhF4vYD6yzNAayjc6gpR92C58H6UKXY1Ol531ImpLQYSwmrUrgooiD5dD7Xit4Z4Yugr/gcfaGKnNGWcbKb8MS

qbLnrJKIUm7EJac9A0DFKVRjGgNCEz1rEBa7Al00B&amp;#43;WVhSRYi9KVjyUpdoW4biSAfmyst3GoXqqQrOggv5ekHSgTYxpHqA&amp;#43;B7kq9DqgZpOtyuLo0YJhmklhQ/nNUFKLjPKQ9OcglQxSKCd1sCjoJco00OfYQkAyv&amp;#43;dxFS5zUBwwwJS4etzLhHaTUvDjnxKONa8UTY8GhzYEq5HiAFgLiM1w2AfTGAbaQeICgASAPGHUxsAJZsQbgAwbRQbmg0GQP

TvMlwoOrsG6Ort8v8/BqpTIy13yOcdtW9PZy4ypOr7jKGl9KeqoCuhteqM4d02Ya/rd5xXdwqt&amp;#43;ILL3gKyKAUakNQPyQhGggq3jEMrvlL5dcqRvILWK64OE9jE7irPxDGncLkCBC0EK7Le6rrPRa32IDQptn8ZE2xIsau/AJaZKrfSxqwklhhxqj8HGrJd8a/ss0rBKulufA3cy1KhMRKry1vwmWuiBRJz9CfwECihcm3ntybSKOnqg8gytprsS7

gi8ZLaDhDmF1ax4TUIpONVlJUwi2IvHdClSZDdjO&amp;#43;VkJ5LQkAWkyh9&amp;#43;IzSmQw&amp;#43;T4TLcz&amp;#43;ZSif4aoEBlHEHPFXKkoOKLszpLLsqwo8RypUqwKkQ&amp;#43;Czw80KSv6pw1tQQRAxUeM0Bgo0PYr&amp;#43;VmwVKDais0lGEqGC88oErnpopYnlSah83ZYVNVw6ISny59OaQxqsLDY22ak2kGfhAxWSZItmoQoaLlEJfODsVSa0pGgjiQ1OFmq0JW8IKEWhuOX42sh

dhXpBUIP0U42SL/slyGlCLPXSm6bX63ptPLuqhb2FcOrcFI3yDAU430xNAPoCqAoQCgB9JGjUzECI&amp;#43;gCcBWbiSiuLOL/TVb0DNAyvZvAqY6lO0jMGEwhqjLiGmMrFEFiy6oTKwCqhp4Ts6jYswr6G9HgWDTMPCu4BGoQbCFIq6iBljtZc0G2pgPU2kjwIgWzeI0tHirwTIIZLIhh0SVUqFpkau6m4N&amp;#43;KbElDmfxUXCdFuDz4nurQ6/8D9U8TMWr8

jsToSweqbLBCz4JGyX9aBA5bz4ZCkkqX9J/RRqXyWjsZaqOnDMFbBs&amp;#43;Ty8TS/fE2r9gSn/WXsf9CAx0qZ6vSrsbUmNsWiKFCJaGEIQBDW044FODWxXE3ICTWEpPNTLPdSdWsyNdpg03UW1dtQJ9CY1BVAtNS9BsLz0BsaQm5X1iAoAbGyczEPn3p0LXInFq98&amp;#43;UN3Tl7GITh0ZbAvV0r52uCcU2q8SjhGjBxCQ/kGhvPbmlEoqCEBQpw7K2n1T0J

hTerPEEWHg03rP40GpZoVcvxE5VO&amp;#43;EUpQd8KMBi1Vmkmfhxw0Cc1T4QbPC2O87ojOt1bgjNXSBoo5oVPVlYCKE4z4I5obRhAYeSDYV5VJSBQh0QVs5kxtUB0&amp;#43;fOPKdSpfP6bF0UerSDJ2sMLtJaQO5Cm8qgIQD9YhgPGDmAYADMAAlddZQDGBxqAOvWqPSnzMtQUGoCoAC9qyOsOr9munPGKGc8MrOrr0xYoQrLm&amp;#43;9LTqUKpMuob4sh5q5TX23Rx

/cPq3tUFTbuNkvrqeGgGswKHojTTT5YO5S2Kz1ciDo&amp;#43;NQW0jWydcUPS10TLgj4qRb5GrVMRaChXHqvjIxVGLCTXcgltZagwwSD7KRlQjsvBkSkoC0aYnUTpFbbGkcrkKPIeqAF9Mufknz5gm1WgWh6ScKoi945VyEagi05DFiZ24FaEK9SfNUsjoJCJIqkJ8kE1UYoccSLxkoZ4tbLUgk5d5UL59ND1Gp0qAvaG80/&amp;#43;RRG745&amp;#43;CnFQx9afmkHbRu

s2pPLdSs8uHRhcG2soiIASME0AhgKoHUxlACgENwDQLkAoBNAA0BuRTMUzGaZN2ylUW9htDZs8y9qg9ppzrusYtDKjmuSPPbTm6MpO9r2q5vgr3uzOuTKn2tMrHjeyWawB7DHL6okSAMfQuAyxwostlZqNbopei1cjeJEbCClutHdgkXP3hr0e94qRru6rH27K2y/vqHq7LDFrw68TAmtI6dGrFq0rLcnjrvjZ6lnvnrfW5NME5kpADsn90CbDGQ

ciKXmX35&amp;#43;Cbw3MjtCQaAo0n0ak39ppZJ5N80aKJTRz5Sq3KrUhoHFmUoDPiVBsoIPXNjAp4FpWRF9Togkbvaq36kXXt7uqomnUhnepRSSA7kMYC5AHkB5HKMxge0gGADQE4DcIlcZwDuR9HVar/dDuqFAwgFqEOtg6SLQYu8zfMqOqPaDm27qgrT2&amp;#43;OrRk4KznJIbPfLPs5yc&amp;#43;yYKzqOU59p2MdHNURd9&amp;#43;UwHrL6a6z/ntjAu75q4EIesGxfRhEP

zFh7wa&amp;#43;Hub6QWqDrb7MNdupYqkOxsqx7vg/HrEgsOgtFA0saCdDCTcMunqZdae8JMRKhCijLXsIYhguCS5&amp;#43;8ToX6FGSZEFiowZHo0I3NQ7H0hymytKH8&amp;#43;aTeq5UJ3ZNrv47k6g3jkNAlmvUQFCQlXk0l2MDDuU1bNWmg6NGSTiUZ3GN1FlaWaWRCq9qTLqGDSjbQ8v&amp;#43;Tbe8bo/r&amp;#43;mkRCGaryq5B9JaQPGCxg2AZgBOBiATAAGALSXXTYAERDgAxT

QwBBM3bHIRNimQbFLZoDKwK/zLIGk&amp;#43;ylJT7qBxOvgq6B2Mte7rmu9tubB4&amp;#43;5owr2B46N7JutV5redeAWqo9pRw27iLK2SHAblZwOmQcg7oa0dwyRUe&amp;#43;DrIKDc2RuRqzcjsopswooSsH6jG&amp;#43;4ZstsWqhCsTKagz3vCJOmmuuUwMc9Gv5U9cqT6LGxAOkjdjaXlWy59WpwxXwcBh0OQcf&amp;#43;UKCv47aApW74AqvYU3qRe8Nufr1/HporlmvAMPy1jamb

phy5uboDxguQVoHMy2AGACqAYATAA4A/gGoB4B6AfTCMBiANoowHCco3U6LJNakWItQZDayADiBq7tIGbuoYYvSz20YaIbph57vmKGBp7qYHYslgfWKC&amp;#43;jgb2N6AT9oFgAtfjSIr0Cqvp5ldaRJGlSwa2dQcjIa0RvgVjoZ9GqzXirvsRqrh3vtaz1BkiGdGeKojr4r4WyAlhjNlCweI6F9XRpp7yMwMaKEwEIwbHbQpKxpRDqa0Vt&amp;#43;G4DEBzshv

hDqAvFh&amp;#43;NOTJxjkpk1q5QGTzTlNVWXLjPQOpZkrZoxSF13LTtCfQ1MQjNEUlnEpKDN0PEwHBUyj5fWgqVaRorO9FrE6oWZOowR8PPOmE&amp;#43;SNZOXCvObAklpjIOt3Khrev/uHbABz&amp;#43;rHaf6/qo3yagAYDmAuQYgEkBaQIQBgAmtZoHaBNgVoAoA6RjMGaAseA7u5Gju4ii6Hpa/ovB701bzOmiRRgYbFG8G4YcvSpRi9plGJhzPqmHs&amp;#43;rDyu8HqiAp

obvu3Oqeb5iT024HS&amp;#43;xAthYekBaAHcwerUEBr8kNaWp4TR2VIR7wfOQdI1qkSRvllpGwIRUGNUr4tF4uWnH07Kn1f9VRjPc0iYEqf2bRtH77JbT2sGfhi&amp;#43;wYnZXRCMMZ5XePKpwlOSz3EIDWetyloCuZ5TihfaDn0liNevKH4MJVc4l8hSAoJBi1HXdxHjylNIZHHHch//tBELah3rp7pMUAa68DQco3My5gKAE0AkYD5DtI2AQ7gV9MAD5FIAHk

Is2PGhoh7hJzeis7qdxn8zBv6Gc1QYcfGJRqgcW1Xx8Yava87VOplHFR38bQr/xhYaOjHnBYPWBVhj&amp;#43;WNpu/HZs4a5costEI1pM4G7s4epvorKW&amp;#43;sRvQmaPNgKwnEOnCbYqUO0fU9HqXRRoRLaWkKThpiW/urBC57IMaazbEic0p6Sga3LUaQpKAlY62WswbBCqbSMfJibG4csMqKSCz235loc/nEJGVRK2EppcjQhCq1IQfg8g4mI&amp;#43;uCRGVJrjF

pLaCqDyS8kFRnzkR8HKXl61oWCL&amp;#43;FF2SKDbg5Y1mhi12Q2pFN18nQzoFotEIItTkHIEQlJLsrDtO4Iw6dVsI0qAjypq77jS13IIJDcNxZp7OzWNbho0WvOUnUjScYm6SI//HfBQKGqK68MwVoCRh1MTAFDAhAdoHoBVMPEX10EAJ5EIB6AUzHgLORt0qwH3ge6e9Kai30ukFw67ZuFHD2&amp;#43;8cT6vJn/JgqXxtPsvaM&amp;#43;wKcrI3u78Z2jQpuLJTKR4x

LML63QQ4Fin1iNOgSIxx/6tgmRBxXOopMmXacuJ14tPxQnnItCatHs&amp;#43;RQewnC/XCcaz8Jg/XKnheSqZRK&amp;#43;pjDnJomXBjoCd79MJPv0jB&amp;#43;/VvCXUr4dsHaFT2fydNCPbJV66kFmrmzq8r4XHAro8YTMjvhCg2MYqSVkIUp6dISlrEHWxCJ4oVSpK2FJ&amp;#43;Syk31paui/neV3hbEe9CtS&amp;#43;GYKHEZkRFShtJiFNDBSATQBgBVMdoFMwMwOYHaBMAO5H6s

sYJds2AuQDMF/K7JikTxxzxx/NTU92l/IcUSBtmeOrY6&amp;#43;hJ8nJjHmbfGAplSIFngpoWdQrRZ/PtHi1RhYO7mS&amp;#43;i6KZkv5axDengbIsv5IuSF2gOHsp2QeOHSNGfg77bRhDsuHkO2FsIzmplDhw6&amp;#43;&amp;#43;y2YARzZx4Kxrl7L3IdSDB0moZdFlA1MZsGe6xujHme0aa9mIF1L2QcYrATicYOxAJkJxu3XvjLTJ/DqVZiiwAKFDl8&amp;#43;QjXtcue1wzWTAHaX

McqVWbLkUoJhTnx0hkmdJGEJDsGpHakyuETlN7u3Jzr9aGoBlRlLIkAllcN4vNSlhnGrc2patP6ixvHbiR4ZoqAkgTBJgBWgINiEADQO0h4BCAfTGwA7kC0igb4gIYHTD8czMMGje5&amp;#43;yC6H8B0GUIGGRLBvj7RR9mZOrKBpnNT74A2gbnmNoxeafSfx8ArCmvuiKcET5gjVE0BtQTUfJ4zabwMKykp9At&amp;#43;bbjcDDLz&amp;#43;hJCfwLtZhDN1mToX1Lg7O

&amp;#43;2&amp;#43;Yx6e&amp;#43;0qdw7qp0T04K2Wa2a/J0xKTydnUTQ8JIgepl&amp;#43;BIhgSsfSOV&amp;#43;C9Rsn7ia6pc0b/R6yStSqEUmJAWoxsTqYm6ajmzFbRylHFbhAMCzmkRgvOTnjlsq6WUb5M21SCVNOOUaG6FrEW1xBGFhXREp4BCT/uMKl2CJgiZ3OGqQ/N4i0vk59w7IJErjlKP/mIob&amp;#43;F/piQmkOnBQMs5lP2AEyKN1DlZJ6bseOEFyA4XrSbNP4SHyE3LSHk4SCEI3

5oEFZJDdEwO4ASWgmxUxxWmwm4BOBybe1SZy0R26cbPdy5jfNpAuQeMI4BJAfTAGBHoTAARFcAf3tDA5gewGUBC60oBm9dFxa2FUruHdoFGiUxKcgA/MjyYfHLFuOusXuZ2xae73x/mYuZBZpxeFmXFledYHVRpYYqBvFo4F8WRSQQ3dFFZnzLgnZspigympBrKabqLRoHVI1GcTCYBNDZgGONm5GuFpayMOAjrCFtBuHWxjnyaBHf02OOCCMHUO

Sjg4r2WPJak8xXDRrNnaloMVCStBsjq/YJArGjClBpmjOGmcS/SqScJpBL1pVgoQHLlcNNfjhS5e&amp;#43;VxnCa6YpwrOF/ELNPdTsoVWNRV24XpA34yuEgi6gUDC6Yc1q8hsycMOVCjWqQlE3FVH5W4IfO/bHB8cTdoeY6Tlko&amp;#43;x7LgNi8kdgnM5dhQGT1b9GDwYpLQGHWm7a5yLVS7MTjfTrGkBBjEd4pGcOFS6SkmJnBj4RNbtZSaQu1Wj1p&amp;#43;FzB0E

XEgyTHBp3wWcdm64E9oDGBJAO0lwAo1BEQzABgQgHaBYLfTBnT9MZQFsnKZ8lfaMvG4D2RjLgIxdpWCJVmcZWLFieYIa2Vi6tuqrq&amp;#43;gc/HGBpeY&amp;#43;7H2wVbXnhViQG8WPQGWcXwlKFgnoJpLEJYHwJCRQh0RVczWboDol8rIvmLGDpDhqb5i4eSWHR1JdxsaJmMXRcuKscwHqGNkfvSWey9Gv8Tb8IwaicyelfPZaCW4ntdG2II/CRi38YpYvUR9G

yxfIp6qQpiSYxxidk3mJxQpUQxOPfgcDNOvJAEISCUIrLh9Z1L0a4fPFyF7c9RcTOsQq&amp;#43;BSmWE8x11yi4NAx0JmWJY5KT0oQofJFIxkiupBsZQRloWEJU9GaEwwZ&amp;#43;YDG2Ec1m83eJvAh5O8hJabRjihmFN5O5CHll5U442MBwUeEqcVqAvR5NVmWJVN63pCaRPUurxASYVoufUnR2&amp;#43;1n3WSRiQFUxOgaCAxEWwTAHZHNgDgDmB&amp;#43;6UMFaBqt&amp;#43;gGJF

n10uJN9TEQSI2ALsyABTYmZhkTj6WRBPvHmT2llamKgNt33Ibk6l7qQqeV5Ytz7PusWdoafuoCbRZikXxa4oRaFJmlWSKoDttQf0bRBGjIlxuvNGcpy0fVs94sjbrKipo2ZKmH5sqaY2aC1qYe2TBkxtOVq/blpJqWloabAWRprpdZ72pMvOoNLk1zyCZwqgpROgk5xQtlpAZMuEk0nIbnqLly16vMIoSxmJDlZM&amp;#43;Oikp9ehDdbUy7ehGfy0bbJF

bDDWgA0DGAjgZgFpAqgPoEkBSALoAREDQCZ00AOABEUwBa8HuYpWAOobU5gqnT9dTVjF2MnITf18AM8nmVyedZXfJmef8m&amp;#43;Z&amp;#43;ee5XHF&amp;#43;beYG8&amp;#43;mDYln15rxeihfFyQhNpjEY4qCXTijDesd1CILh/8lMV6OkGz5o4db7SNUquvnIWu&amp;#43;Z1Xrh/gNRbqGATf6y2IIV2hjmlvuviEgFijsX0eOhDmQpuN1hmdWv2OfSxpeslRuEDoY&amp;#43;3hJp6J&amp;#43;TY6W8

0&amp;#43;zj/4w&amp;#43;Sxj44uKG0P042kb/gbyExmPh3EmNRacGRY0agw7XBCR&amp;#43;IOF5xexCB9XCovlRVSNSKuUNsnWPIvFFEZzfhG3zCHds82mi5Ip0GMZihUJYItjGknEDFXNSrE99LgUYsVBKAOEV8RCfCaPlOWz3qIjXDHUKoJpdkBHY8w5L1j7Bc1TAcWQ/ObwjcRiX3hX&amp;#43;momhRn18sMJOBlAZwCMA6tngCqBNgboB2A7AJsH0ADAdSGvy2t2/P4i2SRNm

9a0G8nKJTTFobfMWRt3bysXxtyXfZXb22UdIab2kDZmGYskWeVHUy2Daim1d9rCQ2TUZhTNoi5dDaLLyoXvli5T55VbO3VV4yq/QDZm7e1W7toEL1WaNh8BfmcM5CknNvVyjv9ycMqAiD2bV4MbCF7ePQeUa7Vx7fL8GD13ap7ClgEKFcwk59T9XBygNbHL/tuoSoC03RRM8RVGOL1UlP&amp;#43;IpEpxs9nDUriExrv1T3js32f8g1W9fiDo2&amp;#43;XxAcQpK

XxBFtw6Rvh1rZkpUpzXmMKW2SrDbVB3woNCVRk&amp;#43;EeKZzbQJWSMUk&amp;#43;zHzHwXycFoAaAR3NCW/jcYn&amp;#43;PiiSZUMNJhTa7lckg9b4uA/bDih2vEb6bEZ0FOJ2XCLGAGAHkVTB9I&amp;#43;gLGFIBJAPAAeg7kZQCOANMC0gzAPkdAe0XnMwOo2Bx&amp;#43;Klb9NgKq3RfzLu4XaoTRdgDeOabF4Dam3QNyYdm35djOsV3Ft1eZV24N9AG8X2dreZLri4VWiyZnK6VZy

zwM3gE6TGMEg9O3z5y3eMr0pqg7t3aDrNubKRD4ft476pm48l56/MMeEKx6nGmj32OnT0AWbLflqoQvjj4aHLA174cpM9WESjWXJxVeOJJpSfWr/tqPCtrSGEdoQi78h/EKBZl8qkFj4oQ04&amp;#43;pR2Z/fQw7EsCDW3Tbv2mXPX65&amp;#43;WpRqEyuY3cUKPmpn3IoZ/MdrsR5OdhZ8YOoQk5NscRzI&amp;#43;P2px/prHaoSsRZKGKgXOK9qHoV6VDAKAegDgAPkU

zBbALSdoDtJ3eszJWbWYe/M5gUh3rZpXujm8fcmRdplcGORhqA5GPzm2A7A2Jjr8d5Xl5lA/FmXqyWfg38oXxb4oqFp&amp;#43;pgnqzHhp5lNoMzS&amp;#43;bJB00dgztJMg5OD69m6IKnNV6g/0TjLKjadG35kEqfm7eF3bE39V6hnR8&amp;#43;Wtje0rQFtpfj3xWhqui8NpQjHcQEt8Jt75QRoUpCQ5OpdgqsVWSVpFsyktJFJ9fXcZe4QPlcxFVmmSRI/SO/kuGayO

T9xGbHb/qVGYhTw2YNXelNAOAARE8YHYFRWrS/THwBA1KAB/Sv9joqO7vwZU&amp;#43;53nABKvGjU1f0tjIR5u8b/WwDqsIgOuZ3U8m39Tzldl3/dUY8QP7q/lbNPltwCctOFj0aF8XHXQKFi7pVv9r233nYL1003T03aVWDji3dymuMoZP9PPIs45ha6D1DoIyfV6fow4MaC1Y&amp;#43;OQpcmyRj8aeewgoCEOPfAXFD/wKli24HKR1VkiYZMHVDssaAJPv7da

EVdJCfHiiNuQ25RGQx/C2iH9UmiJAkNdRNKVWEBaMFcAyv43HYXz8d4ufy0REEAZDDbaq5H0weAImAaAHIZiKRgjgdTHiB6AD5CqA4AdUF4iOd9oyowOjmxX62JtanJAOx53BrF3ANvc7ObUzQ84cXjThXaVGldlUbQP9ItXf27lj97w3AUm0wLNVpLOeJfP9sVFX6TcNzKa1nDhxHtiX&amp;#43;aL4nOHrtoC4MSQzp7bDORF7HvMTMl63l9GeszqbBCY

LjjvtWsafhm4PAON2eFbpC1C9jHM522i4zrDa1RKSJayuN/RqDEJBM1bOFOilzBof2njcTGaShygJWcXrJUuhSxnIJgR4kmvR6k313KgziTVWNpakNzhAVaT7hEGg0kWQ2Og8GaUqBzf&amp;#43;lSfy2hF/psXPpMQ0oPWrkC02UAMwUgB2BCAMYE2BlAX5E9sjAHgA25NAOAflPc84DwvHlzp3CHntmoXbMXtLz/PIHk&amp;#43;58f0v0&amp;#43;2Rxm2gpky6mOzLmY&amp;#43;

V2LT1XZFW/gP&amp;#43;iwPu8CQky5vvTY4Xjtjl5fBbM9DWa8v8Nny9QmiNi10hvkFRJfI3u&amp;#43;yjfu20l9TwkOWNmpduO/R90bSEKJmyxfZvci/QJajBoDVeOwzidAUqOD6yQgokYryV&amp;#43;P5DzpZyvsruTfBORafEKEoMCL2ga5HDGLTCQUM5OdVUb0CVWAdq9xsSy5W0lORkpSy6nV5U8MQKvdl6&amp;#43;5JLwxX0DrhsDqdAJFnhqDbLguSq8gJmeFS4NUvRvLs

w/gNYTeqLWZOeloqRqgpW/gm2EL0WbFi49WRRLFZRKPVp4yiKIBJ/6X6vLdbOOT9s//hwSrs43z6oD5CGAxgO0h2A7kIwCRhBmTOKRgEALGH0A28H6yUuTfAJkTYaRS8bFh1Lq8bjsNzzU//XRt8XcgPp56A4QODT8Y6&amp;#43;uINk06g3X0/68ebrztbZ&amp;#43;ZbLqP3WJ1oQEYy7AOvXZ2GIBKRDU2EbxVe8vzd3y9RvRKG3cKngr4M9xvX54m5x7SbzE0J

ufRmM8ppybgfT&amp;#43;phNx4dBJ7eJ1Yr8bLeK8sHmbr8nt4g9y1aD2qc17e70y0KJMyuZNnm4U2jIYNNrEkkfhoMQ&amp;#43;OS6h84uFPHA7FQ5mfhwI0pLBf/uOKFhXloomfPjIp/&amp;#43;Qr0tUK6u1wKUr&amp;#43;ZJD1ZFpjpqWELPXUWBUOuvBnU5otRRNbyknVfG5Jg0iaWlJnlAQmjo8CVrm9kWFIjEVcQWXVnSqeoADA74JpCJZtv8WWjEcHwvaIxylwkBgm1ouQ0

&amp;#43;OhWJxsO4J3T3IobyOrkWkHwB4gB6Hoc&amp;#43;gI4CgBl2zoGglQwZoFIAeAUzEwBMD6c9aP4iCW4XOLIGxQF33gH9YevNznS&amp;#43;1PXruu71PDL&amp;#43;xZuqTz9Ovva7m7SP5zFh9A6Buh2UG7yynk1uFg6qzSFYLKyeARC2JLNBuohqvTw49/Opwhe4DOl7oTxAvHd6C&amp;#43;4ghXcGlRiwxym6Jid7oxqPxoYidFE3J0L7fMGxsipbYgjB8mzKfISowf4YpNxnqyu

/t7m7afeb5JOmF2MiYSAyOFq4Uq6EdkcJqg2fbkP4IY&amp;#43;ZhW1oLNlif0RtoS3pUIkmkEeWgHQxJgkIeFM/nM3s&amp;#43;TrbWTROG/nNRZ4LRJTTYi3eo9lVWHadnEAvJsTqgaKWcSFIIhxZb4IbzQt2l7p8x82gmeNXts3de2irjnKmzrIryH36grc/q7CYrfEWJAE4CYdGtV9x2AagJGD6AhgEYFMwBgeIFvLSAYuOMfqZ&amp;#43;IiASFz//ZVPpBQUe8ybHrS

7senr8Uc5mHumYpgOjLtx/1OQp88/MvUDuY78erTo8d7vCA4uCkl8VXUZAzdti4q1BHB7imUS8Ng4ORudZue8P5Tjijfvn0n/4Ld2XtqiEfm8HJlxxrPVuCmfvZDqmuTP37jpfkLUzucnyQDEcktQLuamjVX4Le6L3CK/7DLwlofPWhbsh0CdqRVziLji7G7AXha5Ln3wYoYEuKgWkHUg7SD5GUAjAO5FocLSLGB4BVcZwGUAdgMYCEApz5o7WqT

xiel&amp;#43;e6Zv&amp;#43;&amp;#43;LvQMolKJeE7Ybfsfq7vS6cf9zlx5l3jLlu9MvkDhl/NPO7wG6tOtF65mLq7LiRK0ov0LYbnplZ7vCUKMMd55N3G&amp;#43;6e9IOEn87YQxknwC6lf7dx0Ztmozi2aonZX1vQstoYv6g6n6WiEoTPJClp7fuOnj&amp;#43;65vOnmJFngwRjYV3Rsq6Koml5aXAnKrNVP2RaRjIacJOnmSTqAsC2MCLkUYwkJTnranaP58LnpH7i9soZkTs4v2XCOAC

gAxgPoGwAjgV8uUAHoDgD1wfSWADXh1MP4DjfSV10pfWTfOKCu4vla6/jwudmO3uviXyu63OJinc4peaBjldceyG2l8g2Ft6DYsumXqy6BuNRQJ9AzCCISiO3ddmuGxfcspSW8Q9oJcmO24nhdT7fyD51sEG0epJexvpXi48iuv2TipwzaC1e4jOlPWT9fUN7gmMKeWp5T/dzx3oZQELzGt/AEOL7gfqvu1eSpa92vxdy0BKjwgtHSuzVvCG4PIV

rEmfIT761Z5bN7MIUA5rV6BFqeClrqY8/vEsz45vft/4&amp;#43;9mUz7pYOFdhc2hHxtDKaF0KjOQsctcu3MJAH4SwPYVYo1oeL3x5MCHKG74cCmZLbF1DmqQ5NjGMWivMvplQyyYBOX5VsKHDSGcFVeZfJDBmZDLTSZ8V3Qg3U0pJ&amp;#43;wb0QjoNKzJwokLPioIl3MaQMRWxPh&amp;#43;QdAusPI6FVaUxysMi2jxgoNdhKjRfe/GM1W5I5qO5bzmlVHAui0mPdJXj

pTiPihkpHaQJcoI5&amp;#43;CJhs9zoXWgi4XDJB880MCas&amp;#43;K9TPVLh1uOG0rjhYXPKjA&amp;#43;UQjUxhv5UmpjHaPqdKgzlpFobWKK8i01vHJIWYpzijbTjNmm9SfzNqrmv33oF/6bNaAmn4uXex/celSAXwhgBiAIYGwBmAUzEkAfSV0n0AHoTYE3n43zAcTepmbYBQ&amp;#43;GZsbTVOAy4Yorv&amp;#43;jrU9zehjibYMvMZIt5pfUzOl4fb27yj4Bv5jtbZEk2X8RJHAOYz

refPTi8cO2OfaZkiY&amp;#43;u34V7nDRXmJdRv7EDVaHeRPkd9Curj3cMd3uOvRv4Cg9/GlUat9fcPrQkY9CFj33Z&amp;#43;&amp;#43;IBPSDbQjP72mjqDi8UDckpK8yKeB88KQu2RGtGbPxfnzBEmechRHQoQBzSkZy8ZAJxJKQinteJEEdav47GHVVYw5&amp;#43;Xtuh&amp;#43;Ta0O/ZOZH3fxyNz93&amp;#43;rDCoAUo7AaKd7qOUBiMfACRgkgfQDGAjAEU89MyV9rf4jUuFD48zssVyYZF

1zvo42YBjln51P839n&amp;#43;ztUPOUfA2FRsj&amp;#43;mOKPxl4F/mXm88mcRfoHuWo8r/g25ea4SX94bgO&amp;#43;pHVa6Vye49Pbi789nujjrxmtuLyQK&amp;#43;YqtVoM7SexPoTvHfdPN7b0GUaP/QqecMyEtRcT75C&amp;#43;t/5&amp;#43;qBfvNgHTC&amp;#43;37VVWYU6hZEXJOnFiQjlBDCqH9MIs8oLXIBgXGPa8BkJ4EClOPwb&amp;#43;vqwuCC68AXgAMM/mDBgBqcgf3lcg5gPEAEADsBiADJd4

gEUFVMPgBdcABIOAGwAeohPE87vX8SwltUMkOtYgDhqcmflXdwDmNtdzj393rv384DvKMYDjz8vHnzl30i&amp;#43;1Vtt4tP9kXUxcvW9cwLSoYHgv9thq28BYPOQHNp5cp7kjcZ7ijdd/t0IIWovdh3uccj8MvZjGoxs17lFdFPgT06NgE4BpqYMiMhYC19L58tXmu8dXsT5DkgZsEmJCoOKCIYknOq0yFsZpXDBk45aEKY&amp;#43;kIux45M2k&amp;#43;xKYEWCOMlWN

BWMCuDkhekPJwkAbCtK5G2dJMD9gVriVt0AOG8sYFjBMAHMBnTKQAsYHMBJLpsA&amp;#43;gPgAkgO0A8YM0BcKtQDOinfgM5nQC59ni9ssL0NYyL0dbHjh8c3qwCa7uwCM7M48Ofh9cB/kacS3j9cy3n9d&amp;#43;fpW9Bft4s3/NP9eBpJITjAV8xUnIDUAA21W4KQ8FfojcRXqoCxXkccXEDaNbdtoDgLmf8bhnjcVKvX5TUhBdndhTVz7qUspPMTYQ9ueF6li

RNsliWh3VlYDHUr/MIxjYCmenYDUzu2lDoNSdsDNz0MmA4dO2oZ1hbtlAeEL3xh1mv0ScGJRbWodkAVBGt1NmZxmKPKtXaNsIRwviVaKOko7&amp;#43;tohnGJgRe3DJwy&amp;#43;Eq5FYlKlaKFTg7GPHkoMDuUIMONB4/pYEFoBpBkthH10dqocsoLBFplmV0QWGRd1CHV0GQSycC5kftCIh&amp;#43;8x0nut5HhUA4AOpgyRgiIoAAMBMALaVVMC2B4gPUYYANgBTMHa

QQ&amp;#43;vKckilSs90mkQMGq38mAR39mfm0C83p0CC3t0CuAYadm7kP9W7uR8&amp;#43;fmP8RgRP81tt2oJgeBMXtKcRPOs5ca&amp;#43;rbQEkOv93TshNlfoRsNgcrdJXpr8dAebMIrk7ssMkuh6/PktjlNU9jPi8Ca/AGN9UhTcTgV/gj8BldpNq6kg1ntNmfDHxr0GdBvGlaNLAoRRukB2J92PF5YIsppfft5B45BjgDWPOQnlEaF7GBoEV8LIhUFovxJrpBhHKgNp

sznkgU5MeQKcHMISoNJotVFQEiQuzQlgcHdWTmn9&amp;#43;QfD92zouhkgWC90ABuNOgKzs2AKphmgPQBE7hmBiAPphWgH0BOgKpgwqC75a/t/tKgeqCuHFzU6gVqCiUreN2/o3FWgduc2AQR8xhnYtOfiR9ufsP9frqP8K3itsu7t4t0XmIDPqk6DyeGyROai5ceXoDVzoG9N7PNx8zdr28fzpaMv5A98Elldsj/oGdMenhNLjuvdRDjK9YLubN&amp;#43;KuxtC

eg8Msnm8DWnv583/tq9Uzs5pqTG10HGEnltIG8pdbDP4IuGEYBCKhhCvhFw8oChhNNB7EcMD1sJwbyC2TtOD3XvlpF0N&amp;#43;8c/i4RNgHr5lAH8AvbA9A7SFUAT1lyBz/D6QBgKEQkgPHoKgbOdcoIQkWYPt8&amp;#43;dk7hS7krNdms0DmAbh87uqdVJHJS8G7tS83wfdYPwYMCvwZechAb&amp;#43;C/gBpDHQfsUkUKPwKdFX1ZAU6dFJLQQzEIAJ9jvE94IeQchE

Mm9UMtsCgwbsDdAWDF8Ms8CwhGRkhDoZ9YQv7sS0Cwxb7kfhj7Cu8Mwbb8Pgd0sA5tRC6MLNR3EP/c0cDZ5EFOq0odiThjYulIXwnCxgIvMs8LqEgioPIYTNFvwmYseh1WrED5rtutbKMpU&amp;#43;qqtcKgHjBNAEIBugHAAjgAaAdgOishADUAfSDsB8AFAB9MM4AsYOuN5TnsJVLmm9X8jHZdQXeDSXhzN7upZDCPlS9iPvAd3HnwC5ht49BAb49qPl

acORgBCeBkBCFoOOxIIk&amp;#43;cUpskw8cFx8G&amp;#43;or8zRiFCd/r&amp;#43;cL0LodIoVoDooSFcV7ibkQwdJ8IYWGdJPm&amp;#43;xapm1M8atRNrjihd8oY&amp;#43;EeSPZxAfMJRlOkeYVoJlxxCNvtWwTZATEEDU1WLsJpnmHkKdJT5fWqp1MQQHIIkMEgzIsXkgkJnIykiRR60uExhuiHcpHun8BQShARcNVFMARUAHoPEBUBvphTMH0AHoD6Rj1psBMAHjBiAHAARqs0AMwDQ

ljwTOcAZBFDI&amp;#43;rMwP1v6ZVzqlRdoRBVdLqz83rrzMegdwDB/rwD7IfS8hgTaCfwVW8bzk&amp;#43;sHoWBMPITYIaSCeIZARnppftXVPSlkhplqh9voSsClfmsCVfhsCPXFsCQYfaNRPrFCfdvQd5PjjQP5ubNlKuJ8ChJ0oiIeP0dlLFdeGO2g8fEiUb1EYMwEGU9A9mCU7huJt6NqCUsaHU8C0Pwwynqb4vPmjoIKA58XyNat&amp;#43;GK58fPlUsy4RJta4dQw

MaGGN7Phq9Phjb8AvhRCgvoRow3FSQFaB1dsKGUl&amp;#43;EE4gomLTNSDDlw3HIUh1aL0kLPAusR8GLQHDCL1Y8thhPClEEDoNoxzOAl9K0gKQDlu0gThNZ5NNNyDuEBwgoumpRVJATgUVBSVUmvixwHiqEHDB8pMrLmdypOOC4cEWN01nrQqfkeZHaBkw9GDEYAmmehABBz5MVC4wFslWI1WF0Jn7JzRy&amp;#43;EYg3lEXxqKNoYQtqEZV/kDskpJpQFXERgV

KHsJFlock1Zu1IVSsCsWEAXwyuHdp0cGjsjIEKQEWOHliNBf0qxDNBzInRQ8rBZUTGKVZMvCowVvoJQFDCOFhhGOBM5KsIGzGaF2aPwYLwWSZzPHmkm9nUlZMtYgk5Il0WKOMschi2ceYTOD8tMAMJ0kNCJAD6QhAB8gERA9AkgMwBmhirpugDABugJnckgM4BiABaRpZhi8KfibpHJrMw/YZeD3gLSsmgdh9TIfeC8Po&amp;#43;Cjoc&amp;#43;CiPq&amp;#43;CzoaR9LQ

SP9rQd&amp;#43;CrznbC1tiJY6PncYaoORg3oXMD2SCtBB1BINPzj29t/moCAYbSpNASk8dgWDCcIaGdsIQM004RktowQcC4IAJ0z9HbMlKqeE&amp;#43;4X8cFDu08yIWhdbAgNgizsa0ePNToTjHoxvAt8I1Cqrd60oWB1AhEYU1ntMU5KQRHNKpRPNHYwy8p8JMVHKU1NvxDD9oJDAUloj&amp;#43;oTkZdESkCIABaQDQMUhcAA8h6AJVoWwN&amp;#43;AYAGwAA7JgBWIqQA4Pt

MAEPnX9KgTPwUPgPNADnT9YyDeCTIXqCWAQ&amp;#43;D2gU&amp;#43;DpRtLtTYWaCF5t9dPHpdCBATnVnITEjvFrnd3IdmVUAMwp9aKSp8DikiBtD0gOfMFDePqFCfTvF5&amp;#43;JgBc/ooUjl7sUiWyuFdQYuXDbgaLwH/uZ9ErhhxISmoNXVl&amp;#43;wwEFp8M4Vj1jgfSi8evp8jGk8cDAWxAPdiXDl3kmd3ga0iWkfQi1OCk51OINBJoLMIeoIMl85OFZk1I2JpEHYIROAL

Qb0KJxsME4V/aMEwgvJKQ3RKtIl&amp;#43;E&amp;#43;gAip4darNJpK4s8JEFPFYiDKkgQmlpxK0g7F8&amp;#43;EMIsNJZBn&amp;#43;PnxWkM0hJETohBwa4UpaPMJEtDcIgYcoQZ8k4ZSVOLR68jNcuYbD9NEcJDT3NJhs/nOMwwvoByjt0wm6CcByBHABGjCNU8YKpgAPpG91oVzskiFdcADmkQwPJtYGfreCDYQ49JRsbDZ5iEieAQ3cLoY9UroRCiboV&amp;#43;k1dnXY6PiOEeSDBh

booDVNIDeYddssDlAasC4If9CEIR0JkUEJ8sbhHCtfuDC7jvjdqNtcc9PoYCsehb8/iglcZlPX5wSg7M&amp;#43;UZfdoNDwV3dkK4rgSS0Magb8pKsyi4KK8FGkZzddXgVCHAdEYqAgFBsqulMG/qwiuMuapEIZzRa0kpwNxBg8WZM8p2NFVJ9EEkxzAkVIJDDFpXlBLdU3OlwJxO&amp;#43;crXJLY2ktvwiQmoEuhFyUvlh286cLt9c2vKQqAlhi2&amp;#43;BV8sui1Cc

uO4iYkEZwAEXnpdgMqYxpFQZFloAI6oCJQ5oJWteZMhkyFuPl&amp;#43;DApwjltzpRnhI9ZrhoihIX1CmnMjNhQRIB9AJ0AlYUMBaQKphQwAMAhmEMB9YOlBugO71NAHjl4PjosHkbOcJCJtC0Pl&amp;#43;09qizNPkXtDCiGekKBgEjawkEiToTWjzYXWjLYbz95hj49IprdCbzk0da3uIC&amp;#43;7t9UKxuBg21kIN88DsMvIXLQFVpv9yysOickQhCMmIO98UaDDCU

XsCfdoS1IsdDECbOcDykTuiUdI6spPODEzgYmdWloKjmkZu9f4UsI3Dl0IcuHyoP/jZ5yoHwi4vE55SfKrUN4al4r&amp;#43;CpRk9nvtnlNzQxOJVYedOoRPAhrYLOMmsGNN3wlTOlMhVBwp/aMIoYfjxj1kVGiK6LxdY0XojFwUZkbSjsB&amp;#43;nPUYKAK0AMwH8B4GnAAhgH0BaQP7UnEfZNhtK4jTfE39dqm8j3gFh8s3qAc/EeZD8PoEj/kS&amp;#43;DAUU3dgUf

0DQUQ2jwUWwNbMS2igbs85YUSw1i4IQj1aD5CIMoDUKFtRRprv7DB0YHCAsesCAYUSEQsehkCUaf8o4XFiF0QZ9shNk9D0cp424YliYwR4k4cXBwcfPhAyUUUsPVlU92Dm5YdBmlDZ9MmCgxHjEb1PfcILijChUVliN3uu970EQdUVJ5pK0m98PII&amp;#43;gCuFKVXZARQtIIhh92CGl5SGc94JqAwiNFUlJJnNQxbHeg2Jv7QomEkwLKuQRiCF&amp;#43;jLAml

YA5AvtSvJIiHDMVI5/PbQaoItN5CKEhYHsv1agejsReizFMmFXsacB7QJhDlwpCCFtOVNKiXOMmkr0CUlZSLRgPzHThtDL791EQIsuLhsjRsb1VBMYuDCwHfgyjAaAFiFAAkYFUB8ABNUERPQBK/haR5TtzRnkbSJAAts19Yce0DQUbCOASbDTQTdi5diCjZhg9j0KjZiPFrAUSPN4sVqo7Dt5ovhd&amp;#43;BagLwR5jeXsv9buOXA1OHCCN/j6Cg4X6D

wcUC48UVDiwsTDiQwQvYZPnOiSkfDjM4Ufc4KBFEEYZ2UacZliGcbej8KDPwcuBCdrDNnwblNrsgVlLdnIAWj21ngxD&amp;#43;LZ563GeMZSmnQedGEwyVMbieQasipwcNi&amp;#43;MagJDSLbZBYRIArkeUd9ABmB1un0BCYIuNAqGMBOgOphAUAE9NsahI5mJdd&amp;#43;Rqmpi0ZTlS0bpjy0V39HHkaDe/sd5rsR&amp;#43;M&amp;#43;gRaDS3lbDHIQBNIUaMC/gK953sW80bdH0iw

HMii/IQ9EGFiFBfMR3jQccHDwcQHJAwVOjgwSSiQwablbhublz9HDR6bs&amp;#43;Babs7lUYrjQmCr&amp;#43;BgSrVNkTHDQC4XvcAnMatPPpUjxCbuiSIau9acQziWxGjhTHPEhf0Xa55yBAJw1uSCIvFRig0myR2voKYdGF/IZ4odllkXDgiMLvwHEKHMZOIckccEyUiQocVUkK6iTembR0pnvDivqpJpcglAYdm50gMlpQ4doVIXUXNI4RlLQ4qP2jDAmoFsM

HqxcEYJlNCJ5poMCFxuwYYExVGq4JECKp8nCoRLGJjCOuD1C4fiNi&amp;#43;YdJgMAeJCrkJlBFoV3RmAG6QlqqqAjAKZhVMDwBVMCQB8AoASw7PKitqu5iWgowDNLsdjHrvpjDmk&amp;#43;NK0dnjq0YgSuVsecwkagSrMY2insaXj86kDcI/LgS1hqpR2CA2NNjvrtbgOZFPEAsIMUepYR0WFDHXJDj9ctDjwwUnCcxLDCEOFDDiUaUimDm&amp;#43;wonIhcJ8ZalCJq

nCt7rwwT7leEpDoIEXgXk9VXsy0LBrPj6cfYDcSvTQ4mIdg6VCY4iMfIgBoOlJK&amp;#43;BkNqzk1wYVBtRh8OOR2fIdl&amp;#43;EI3xOoN0gq8tXkCpHPwQnmclIuGJw9RNFZ2kjRQ2GlkwRlkV8J2BmtSviEwNVO8ksoHtBr6iQtWNJyp&amp;#43;QoXxQkCRsmumXkBaMKRFCLTD3vmEs5TPrZNKHwhkvBwgs&amp;#43;GjcsiZGjb8RDAREONidkXMB6APEAVfDwB9AEcA8YAN

Z1IPZlSAAiI1FjvlE8dOoU3q/l/TC38MqEdjNvNm99oYbDu/nATOAVIJegeaCLYeEjPwZEinIc2ihcjed6iVXiVjodjCwdBjvnI3jnTvUkquJ0NYnrBDskWDiEIREYdiQjUQXOhCTZphDycSGD3hmEINPm9sKbCTYyJgS1BCebMhNoq8/5qNleDsPifcrnDhAkYMJ0EHtISufoT7tIdO4SDFkrkatqyS/oWOpXDayVJ9GyWi10TN8dmydQxe4dIT

coYPDUYbzY2Sd4ZF/DHwn0AeJrzNlV2uCQQhYik5pZI5oaKPjwukA5s1AkL1tGG50pbOoYeCBEhKweKUOYa0J4HDVI8CJzRSqmV4qCEutp8vTooMVbtf4uoEBMoDJHBqxpZaGowwVnKYowBRgA6IXxc5kFxSpIbFn&amp;#43;CnIvGPl87&amp;#43;igYIVG7IaSDjgq8gLR1ygN1iERYcmfDuU5hPuw21oYEhapNA2&amp;#43;Hl5XGkmMn0TSR5yOQt&amp;#43;KOxo03NK0W2lrRW

CHvV8ru2NG9moEbGOAIQGFkg0uH1JUVLRQ5SBOA1UYPwNbEdBp&amp;#43;I&amp;#43;gZav3sIgXdpKfCgjtCOXB0smhtX3nyCb8QSN&amp;#43;oTojA8RAAzTC2AoAFaYkYHtwxgM0AEAJyAOAM6gYGkjBXScpiWjpi83EQBVnMGykSLAS8GREaTKEl8izIYZjfkRdi/Jldjc8UgSbSRZi7SQ5CHSRgSnSZ4sgbhti3SRICxYISULGEsCPMXfYInkAoRaKYVuwe3iolr6CHi

kRt3POGS7RpGSUljOiHguO9EOAlTcapOZcasCUeDtYCcyRlTuUQlDcIWfdKnqYDTifcTQ9tcSYOLFiX9GDQCTK/duyeRDt0JWkzaLgQQkJajGKIUgbGBXoCkGsSg6IQQoIYfxOHmBh3aBgRbToUgr4VMhlKPJxJ1EBhBQvrQCpDYw&amp;#43;CG4C9pgtJwdh7Rz0EYhkiCYEhVCu5U5Axo1GDNhNdg0lt0IwpfGuHRXOI3sawezV1EBO5&amp;#43;nqkNbBHVAMvL

8o6VisiMjtfjOqn7iwYMpUosRO0dkScAlqqZg3pMQBHkOpgPkKUSkYNrhSAM4B8AEYBSfhpSE3ltilTid1jgNUCPETYJrwYNsOiSS8uic9ceiVPMLSTnirSWbDkCbaSRifwDi8ddDnsc6S1tv2EZiZdE1GOrZm3jsdAaqnwZSDD1MkSoDKCV3iEIdehLtlFC6CTFCMyeO9UatlSIwc8dBNrCUIEOjioEMiYLwkHtGUQY0iIMITCXAjDIoFjUf4AU

960EpV&amp;#43;lEpUn9GU9wxrlAaWpfB&amp;#43;NrLThAoIhYSkbTj0aAgjBiwdmngKjSIXPiE9iPhtdr3w9XASwIuPpx3iKAxrdtVCbICdkNqFW0kkHJ1CuKMgXlDnN3bs&amp;#43;EQWHHxcDlxNQkGXl63A5wUnFENf0HoxAqnSQf4d5B63DUJNNEDt8KfIh&amp;#43;SNpDWLpnxVhJWtHNnTonDF0h6KdUgSHuiMBpPbQRODFpRoMOT8nFLkImFbdDxAlYakPkhtaAojXsnXx

SMCxpSuiXTEtKa8BaJTx6mg/xMMOzQfjPU1gvDzoQ6LbiivApx5xBwozzOEDJVMxhV&amp;#43;m4M9yZ2405GPCcDHPCoVtxifcfkMXqYM13wFGBxKeOdJCE6VNgBmAFScQAPkIBJNgFjBWIoPJ5Tp&amp;#43;TNYYhwXkUWi9qpm9jSSdjTSRWisaedVjQX39caUCj88XdjC8X&amp;#43;M3FiXjBci5SrTo5l3Kc5idRJEwhTPvsHTkwI2PkbsXOJaJ1iU5EqCQhDelrQSY

qTjciUTr9kWm9tiJgRMEqY8SsaBejqGe8SxIFARr/nQyq0PcDOUWyjLUtcDeAlyjmDtSiEOPwxJzFwcGyaui0SlbSZCTbTPgUIgJ3OoRPtIMI5oBMgsuDhhnhMAxjCr0IuaEclhvvQiROC&amp;#43;goMNCpyYRK1ScGkwjqS/w4DHtl5yCRR0CBBjQqkfwPUnSo4oM7S5slQQ7OGI9NKF795hEKoDaPwiDvuYVFyNk4IjCgzXXLu83YmJNPGCU0BkDyRJW

MxQk8hTxDxJaIRkPW5&amp;#43;rgIgCDCOC5vizRpQiEgoMiE0oMKKTeMSJSxuCLhtkQuCIAJsA8YLUc5gKZhrACUEkYJB8xztgAxgBUYxgLR8Gie0Z5fuY9xHojTeAESlICT4iTKadizKYaCAGfASUPMAy88UMT3wfZS0CY5T3FtAyy8WrslMY&amp;#43;k63ggzUqIfw24PXiqzNDcvYesM5bJUg28d6DQqZ3jwqRsDccAFdMbkFc9ieR0UaglSjiVhDcEMq9L0X

58xGUF8yvm3BBkNKiUMDACYSdMj1bGgRMGbBhzzNviJkoJS1kc9SciUaj2puJS0Xg0x&amp;#43;rFEAqQBQBaQBaR6AMwA7kBUMKACcASVnciVMSeDZzvv9zHlcZ/TNpj08Z39M8eaT&amp;#43;mZaSIsqEjRmYTSwUcTSm0aTSYGTecqAZTSmZCHJlGDqTmPr5DmPjzJFXKpQakNgyysvsyAYYNAoqcJ9uaUUiIsW9tJzFnDkocLTJWYalpWcJAHPu2SrmUcg0wTl

CPZjVSt3pJYNoABgQvGeIKdGzRdaIlpFEmKFG&amp;#43;DmDVCBgR4KfIhcvCEw3aK3sXUd2Z9EBwQNArV8taIFUb7ArEnDLPlU/tzDsmaOlXqctdxKUYB4gLfSLSFAAagJgAdgN0BPWEIA/gPNDlACk0jHmT8uRjDTvwIqdEODtUaZteDgDqjSWgb/SYCb0Tsaf0TrKYMSC7CgSBgeMzrMSTSJiQw0gbiIl5mey88eKhiNjg6d4lugyKSrXSgoYGSvzn9D

AsWFCcxgQyNwkQzRWfOjTZhJ8EqYattZCR0X9KSi4dDbxnyMhQG4RwyxIL6tZWeAhsnh1koIHLTfwO58WIGU88hGU8/qG3hhAnfgg9j&amp;#43;p2CWfgynhFFl7Bh0cWiITkhM9sCIfFividei0Ye34WFEbEFDIVEWENowHQqP46cNIijIAqZQ/kxQIgkud3Us1jYMHps5aOAj3UrOBPvrGtMkN7JIbPW5K&amp;#43;LvVhbJFoPCrvxmVPORw5l2YmQknI&amp;#43;EAz5P

CvJR&amp;#43;SNyQtbooVoZiL1TDsZoM8p7i1aGKowVBgZJEhl5DVPRCRbLYJD&amp;#43;IZ122ZSY4rJ1tCmqqEPhNapCuF1BlhKb0tUdtlewZdRZegawIkIb1BFP4TUESVc29vt9FCuO4QWFP43aLG15EJ4hBFG0hD3sqdJ/JEDtDJ2ismEpzIQTwjlcdyQK&amp;#43;Bl8&amp;#43;wfT5exm0ksmcJSfWceBNaDpkCiRUB84ncg4APEAbpM0BaQA8gr9qpg2drgAfSHaRIJOpS0W

ZpTnEfGoqVpHZU1G0TjIV0y9MTNpCWbATiWTjTSWbWjzoZZiiaeFMoGVhU32mrs&amp;#43;UjnBAIc7CuisxhnNiyUHTksSBYLt9DOuQTdmazS&amp;#43;WQhCBQn2zvItOjiGfsTyGeR0wwS6sUcUOzsyX1y4SrczbAbIT7AchkP&amp;#43;KYFtdv&amp;#43;duQmA8CkD555hCNcl8FYFNDMsJhepKR06JOxJELfYU/rlsvWQ5zNMikFokPkzeThIB6ALgBNuEr5ugJNUPkEcAHoA

MA8YG6QHAqQAXSuiy1YUt4dKW4i9sTXVU8T5hM2d/TOiUlyfkX0zHuqZiBiUedi2QTTS2aMTHsUKs7Qd4tbkWmZa2aL9JJL/w0mD9j4UQv8eZOeJoMNM8QqSdsu2SGSwoeNcWuUfE2uYOzR8XhkfdnoNGlvwEXZrp8HgUwyaeneyB9Jf8SYgnCmCfezY4eeVhDh6MT0Yu88qd59&amp;#43;eSzcz0Zal/9FQgWGMvZ7qeWg20FCZz9E6zEYYvYx2Q7NybG2

h6Om2gY9m2hGbm2ghGLAgWebCF2eWvZnhmvYzeLAhXhn0pNBn0p&amp;#43;GLAhngrAgf5u&amp;#43;of9H2gU4e&amp;#43;pzib9R4YfrxP5vrwxCWYDreV2TVWW0i4DB2824OxMDGCiCEML/YDNnrFzDluIquIxp2FlLZAEVcJImJACFetW4wAdlV0klNIuvrO55NNlx2YTgN4/uahhSWKpmFCJo9EI40cCLEyL8dfCrELX1BFANhojikzSVGQR/fvTgXGDzF42oVxh/Cst

qdKY4kMFIQmSG99D&amp;#43;LzJsrDhtZxJNAxOBa5B&amp;#43;K3gEtCnQtVKJQB&amp;#43;LrQHNLeZckouQ6pK41Y8shguhPVTAcXiUs&amp;#43;JXEZoHbF/yUpw90EGlQvPlNNEFxQqKI7Qszt/1IQWA40pMltzoHLd3Uj1ccMEpQhSKpRX&amp;#43;CEgmoHviL0Mf0AMilJZsKYEBatYZvKi7RG8nxw1GACNH0Mowr4c0hHBh0g60pUgQjGJR7Xk1w5KF54acL8opoAfVyxvHRTPBty4

&amp;#43;CAoi2rkkZsGgiuxCzVx&amp;#43;QEhlEORjFntzVu6a5AKoDY46Ed5BKrN0J6qUoZyLu6lHNJypgHMfDG2dBzKuDJQcoFzQLGSnSLxHQRP4cxgnWVnTO1kfyr0N4hnlFEw1krl5alC/S42nqIl&amp;#43;K4Y6dKcQ0og4EtVK3wXmRV8ycCr1rQh5B7OUCzxSbggRcA/jXOSQ4HkO0BNAKphlAGwAq/lJi6hvEB7/PgAhnPC8Vmn4zX6fHkbFAZS9SF/TjKYlyRH

GdijMSFlLscEjQecW8S2fdiIGUtsnKTSzpmUDcUsvEiakMsIbhNJZ5JNsd9DjF8FqDsy8eZijNidiinClzsJ0Scz&amp;#43;8fsSY4dO9wLgu9Wso&amp;#43;xLPsRDH9CVTz4PrycMpcT4oRjEyGSuiKevK8UYrjilGkNyMsd8TPgX&amp;#43;caMLvx4vnpoZOibQ6cMhkTOUtM3pgoSAVOEccTpEx/lFNTH&amp;#43;LOI54FQZkVMyY43HfxPpnrRMmONBnyXfwPXAvs60rpBw5o

nNJWLioP0ez59YgYh0pj7DGYryR1oFxkUnDuUGMHwiqDP/9BFOYKt1jkywYEJB3qTydvXidyDQBjM7SM0A8YDUA7SFyAfSJIBJALuN2gMoA8YB8h1MP&amp;#43;CoaeT8YaTw9/BYYsRIntV8WfqDAeVnj82QCjC2WDzbrAXikDmWyxiTDy7MWtsRcvAy62RnoNyVJxK6ofNc1gWMeWbRUdsNvEAoDZ42UpULUIak8ahTeoJeebNXeUmDjAXRBZRQPp3eTZ

Z4yWliftsNz7mWjDVKJThOaJNdZsNyZ&amp;#43;SKZAcBh/xR&amp;#43;VVwAkBwRXaOnl2fILisMME0sGd8p3lIAl4vpNdm0gHEGzNHx1EECLfccCzpzHeJH8egAuQPpg7AGf4YADyAxgPQAKAMoAhAPEAKAJsA7kEjAxgBTME2VTNIubQD/BZxi2mUwI2gqSLvkf4jzKcZjohSDzqRXEKIeQkLXFkkLJmXlyvrN4skxY5jiuXCiFOM&amp;#43;hMCGBDLjGszSKgPgHAs5s

4&amp;#43;PyLm6gDC/&amp;#43;GcNjmeKLTmaoMIQiwTD2efp8IXzzSkarzNPoYMcfEb8SccfdFxcnCF2aUtVxVjoL7o&amp;#43;yF8UPC0YX40UpAoQt&amp;#43;AFw&amp;#43;vgUpCuDMiFhN21zIK1x2mngxjCff1U9F2shbrWJhCLmDehEz59EJRVvlE0gODKrjedGZ1zEJvxjaNlYQHtOTF/ObiRrhBh45KvgnCQIQHNGJxovA7FlBWntzxJ/x&amp;#43;ulXw9NHlBeSMEx4Eckzd6eGihsRYKQ

RZLpY4uJS7SA8g8YEYBOgFABlAHSMKALUcTgFyBugLTtsAOilaxeFzoaRSJeZFdwJ7imxvubGQQhSel0aWS9DoQWLLKTELixVz87IWMyoeVSzxiVMzJiVaddigyzvquBgxyWjyP1mx9ZWHW4LPD2KVVmUL4qsTzO6qTzYcUZ8YyVksCqYujrmUMKpWTWTUsZwc3jghxSybf910d9t/VncyxhQVCj6iJQsmF55OKOV01WHKx9WOMjDAglMdWkvVBQ

htA2MBwgqFqIL2uHgQ5TDOJrDPiChORNBRCD&amp;#43;hFaiCyHqc2d96W69LBcBBgBh14dkQgAagDsAKAPEBPylrh4AAxK5ScpSjAA8goAKizoAPciMWUHVagS0znJvHgghYvR2iX9y0aQDy8xUDyrIe48bIWSzJJRSyi8TlyK2XJKq2VadMykpKhUgUpJCF9lh7tX0UkT&amp;#43;1SKAGSYIZ2yShd2y9JSg8MbihCO6hQUjJQnDx3jLyxxabTOeXg4meWYCGef

vZLAbwTvdi5K5Dm5Kn2XFFMwTEhTaOIh3WXmkuzDxSo6DUhcCB1SI3LQQovBKob&amp;#43;sLcJQr8pwMIokh7vTRwqr&amp;#43;geDJQ85bGtBiCNhhAZKKRdpplL/nnED8Ro5zBlAHjkfkooHkKZg0RJoBSABaQHkJQIsYKUFWgJSM8YPQBQiPDzVYSY8lJCmyUiZpi8sntUjKQJK&amp;#43;pREL8xVELRJUWKhmTZTbsfELwGeWLZjuP9mRd4tygXNLbuNRhAMj5Swnhj

ysCkRgxNBPcihTx8NiTtLIfDB0kIWKLDpdC0RWcZLyeaQy/dvKKoIJ7y0dG/g0qTy1rPuvYZeKmD8cY/ckroLyFGvFiSGby0qkfKzmbluLfifQj&amp;#43;3Ixpnbl7JzXOzjZEGdBJ2OcKrhKwLzOJw8LxD35MkBOwBGppojKm7SZKOLRWhF24m&amp;#43;FnxeSTETnabHlLIMKRMNHgxJSFVcq&amp;#43;EYw8QWKUZ/Ld9MuBNI5kavDFlvILnBtEYszte8FCIYwaDAm4

hMvM99bmGjJwbtyCJXjLpfFlTo7mGELSIQBkXupgvSA9APkEjA7SNgB6AHBIVuvEB3QPGzcRYmyKRBtKagTT948KBUDsWLAcxaZSXrnmzUuQWzhZUWzaRWAz6RdJKJpdSzK2flygbu9U2RUjz1hn8IrDLTSl/jzIcDMIi9IZrKgyfjzcGaqsyCIOoDJUdL6CaUiIrrUKzZalCwzukIihJby0xFQzF7BOz&amp;#43;Ueljrae5K5CkKZ/IM3lgvMnTMFpho5

epIgNbIa4AWl0INoCxhMknNJWkHqxouITCImECD8znThthOVxQhsogJkLlVvcZutvRblKAEFwRxKQMB1FDAA8YPoAERKGBMAHaRnAMDcjAN0AlSbgAxTg6DkxYh8APEFwuJaASXJntVOmVmzfETmzkuSfLgedZDToRlzhiZDzsuZAzJpVWKf6N4sGpaBNq8cXBvEHExIbN859RjnoNpBYw6ucULtZQTyfTmQQnlvtKuaYQzI4YwS2hbRsx8QbJgl

YJsb2dQwD7lQgTiSTdLwFGCUoWO8&amp;#43;OgMKkTNjjl7HCEJ&amp;#43;h7Keeb1zRCddLWNmwycIAIy7ibGCGWqAQYlXf9QolwzhGWgrRGRgq3pXlDDAlRc4WKFB7BAlpAMrq5onrqJhbm6JLqCW0l&amp;#43;JwLk5tFpdaGlICvpdTEIsAwycCcIBaKcYoid6kpkDJwCRYYF1hF3Kp6cPts3OlJYuNFwgarzYSNhRV9DB64FyIFxF3NxDu0uqoIuPIzgHJG5kmFKklSt

F5eSWJw7ktvytaL7NmKLwQ1&amp;#43;M2lD8aG4RkXQqbPHExx3NfwHAneg1aGXAvlusk&amp;#43;OPlEqkFeh7XJjKA5b9MFTLRQBTDKVflqRR1CGLQLGZwq8dgfSfRTiZpMAVKCmWwAHkAaA2AK&amp;#43;55uvoAkYJ0A14E4KPOR8hL8sL9FFapig6nGt/Bdi9cWfvLeAJoqepdmzBJQdCLISJKpdlZTz5TSLkKllzKWbfLZJRYrY9N4smGnLLPSuJxxkBVzWWUZD2WUA

ppqZ4hmmX/KtpZ4rAFd4qwwBrDkIf4r&amp;#43;2YEqwzo1NmCRuiXiQTcZWRarj9AeiElVRAX7umDfecKi6laEx6dJz5FyGQYEaZP5jyAEz60o64/2VWDuEWMiPaGr0xxPVJAhhhMVWKpwuxJ4wqxizCXNiPhLVExQbhMycMVZxcsVTwrwEKBZxKdrgEAGcAMwBQAHkLSBvFu0BaQM4AHoMZg7gN0AmZU1LXua&amp;#43;dk8Wm9brn0NupaELoCbor/6foqhpYYr

zMZlypJaYqKxblzfupYqhvBrs&amp;#43;SA4ylpR5i2xa5d2FhO47HB2yskQAq2aUArdINtBQFUbLwsSbLZ0dAroQjDDoriYC5Xk9LNXqMLXpXYNbzDhtIdiyyWJl5D/aCDp8qvaiJaJtBYMAVkb&amp;#43;amrXXigDeYa6otJoTKuvDAAfSHcgeAM7ZRAMtxwQEYBVMEYBjEc0A3kPSz6Vc1K2jv6iFztl59IftjrxgyIdMQlzW1eSKiWR2qDzl2r8aXZSxpYkLJ

ZbaDpZcr4NdlaNDeqx8slMAFAau1ILaBrLmaUOjgydqrdZUEFDJIf9DZcoNwFZdKKpkui1XpEq6loRDT0QJrmeQnDinlTcSydujr7m8c/Ze9L6EdlBn0BW5QRuScScLIZDsHPwtOYsLJEPcY20uAJFCN40j&amp;#43;oZ1srHYJ9&amp;#43;Hwh80jF8dhALV4oGQST&amp;#43;cQrwVQUgrbk8J2NOYxvNmoRhHrXSvRemrCJUEkIYF68XemMAxgPoBlFtGLyBC5gfSNjB2g

EcAfSEYAh5Ky9oNbWrOYAawZmGor0PtqCMqIfKemcfL21YNLsNWZjcNT2r8NRLKO7rbCsCf91n5TP95gbuUbUdyKUkZ&amp;#43;hrDjpLvTrrKRxqRsDVa1zONcOyyOJDDB8ebNneSmCE4ZOKwQhE4Rhegrj1ZAs/eY8IA7k2JY3BNy5OHbQO7FEhVVFBzEItO4vhK3sOuKGiTXt&amp;#43;0k5PzjKrKaoExjwYc&amp;#43;Mv4ToO5qcpZ5qlWffjxKUQJYXljBX3DGAWwP

1ZsAQaBH3B0gKAIpdGmR1sziiHVNQSGBaVnXFR5r1Lwhb0yKRafKqRYKqSxXhqTFaKqzFXfKppQ/KrTsX1StZMDUALWJ&amp;#43;ECrdUGbkL1mcZAxaKKY6tXx9vFV2IQOQf9BxexripjzTwrvzToYTxrDid6Nmsi7KklVITMqUcgdPnjifdjjjMcbZ8LpUchOCRcDqetOZBtbUrhte0tKIXYY0cPK0PYsnTwrIJoFGWIYFBlwgh6dKjbOPJpZ&amp;#43;apx45cm

sWqtFoo1V4M1CHOQH0CuVJrrQqV&amp;#43;F3KOxCOJekJyEdEIRo&amp;#43;OCnRdVTKQm&amp;#43;AtzO3MQZGNAXJzaJKRVNAq0OCIMJlMoNjspW&amp;#43;rD6VzyedV&amp;#43;qIUixFiYB8g4AIQB1MPph0oA&amp;#43;4jAPoBNALo8kYOrh5Toq4uhu1Ky7o8BNrG38oCRniMNSlysNYW9YhRJLz5CKrxpZDrxVYOrJVX8AuBkVzHoSVzZ4VoRDhagyVZQ9EWFHhgFVQOi/MdRUF1Y1ygFcwR

1fqFjhWeureaRbLR3qcCslawzcyWui6dSZLRFmPrrJQLT&amp;#43;XGLSJ6rdLyepZKO4W7Kv8GWgrflVTHVXTj&amp;#43;dW3kcxh7QC5eO5ZxF/E0cOoQBxBerJ/OKwmfB6iGKWCdxlYuxn&amp;#43;NeZABGKE8MPFNeaowpTeh7F1CJ2J7fr0lS&amp;#43;GaERxClJk1qkh9YhTx3PDdM8mi0hDGGkwBlmXwJkI/w9oHjhErJriK1kJwaBaKUAWU9TgRUPKyaAJi/dRvllAC2A/

gM4A5gB6xHAGtjaieVo&amp;#43;gM/sPkJIAbLrFqWZXOc4ac5gktWyyU9S/k0tTorM9XoqstTnrxJbZD89b2qIdf2rzFSXry8X8AVhjKr9sIHcMpNKsqubwAycF&amp;#43;gzINjqsUQ1rYuIKzJ0QErjpQwTSdebNYlfxrSkRh1eddVTRtUk42&amp;#43;CMhudJlUvaLZ5NWEa4sMNRhBTAZtgifixxWI3tdaAESPXLmCtbOgaB5Zgb9uT7q50aPKXCFGzQwE1pdJhmB&amp;#43;n

FUBWgDOlOgN6RMEvEBnuRFyk2e3tvSmmzlqESlvEVorumRwb&amp;#43;pYDrs9SaCQdXnqREvlqBVsMCitbDyn6XR8NAqZ5UmrMDiCQPgRwubdtmfRqQcYxrF1bjriFquqONSTqIFReFuhbj5l2Y8chGZJqClZgg8lXDFd1YUqdDUErwromTtZKLzw9lCFpNQ0qRoHEs9WAHJF3CCxzXE0g3lPzRX2ZklPNHFQV1vYg&amp;#43;ISThPsvyE6fGyQvSnK5xCMWtbOB

SUiri&amp;#43;ZmMNEwCcJqwOuiAoxSFUhABGsq8kM7qLIGdAn0fY1NCExgJhOao6MVWJypEdAFyAwRkiuqwm&amp;#43;EKo9oFYFfhRwolGC0hapANjPWRGjvWb4bgID9gbBXGiXCOG9FdMQABgAiIKAFUBEWSqDmgH8Bduh8hyYAnjNIZbgC7sB536SwaUUMPN2DdyqzSVnruDXkb0ud2rjFWWLijTbDokVgSQJhXqnYQ2LhVD55zItJZJ1Xy94URclMrO4qtZTg

zWjQ1qd3B0bidcbLOtQPrshOEqwxHqbUIKqKcMurz6hYkrvilUqLJSUqZ9VLTyUUYDh9WZL91QNzUXI7y1Ra5KNRc6qRtU6rSkOlMPGECsd6V6rz0KA5V&amp;#43;eEhLPKyRFWAEZgFQtrREAFD9hNZ5o1pHzkcEqY3lEtBGqgrQBaoFV&amp;#43;Qq3xsCGvhEqp9D&amp;#43;VPcloTXHxlwpyTRCBLFdQtMt7FQ4hOpJkwWCN24TGBpzuEL0ImxPYgiQrJR8ulxi8JZ7q

1JtiruNeIcIRS71mAEYAEAMoABmCT8qgKwAb1jwAsYJQI7kK6Y6Ta9rXMgtr4NTvK8eCBUUaZyrtFRya/6RLs&amp;#43;icDreTblr&amp;#43;TeLLBTVEjMCWUaYphIa61inQCRQ3jD5uEx4&amp;#43;Eqb/5dtKvFQ1q0BRqbbtl0auNeGdL4BvYZaa2T2dQAh59URBWCROYhWg6qB4Wqy8qmAx9xap1njXJxCsYIQ26YoaBhGaE6uP4t8VGBgh3ENgmKRXogDe2l7BmSV5

bF4aMTXtzLakfTXVLiaJsRAAIBs0A7SAgA/gAMAdINgBJzljltgPoATgHMBNruddpDPBqUjXJILuuybeZQDrMNdyagGfubbKXlrwdYXqhDVDqJVaIbHEfDqgIQrRO2oC1pVrQLlpc6cJWDeYhXgHDfoU&amp;#43;amNZ2ZG&amp;#43;NGg3zTQcPzW1qcxLobYydzzyOsmS8IQaapMC0L1Kg0Lb2ap9TeFTqHTX4knTQAsSIFjFlxX/gJWULSlXk8DBaenCj0c5YV9

bww2DpISsqQmCrTQLyBsj7zwLcYb21s5ssditykMIpRRbLicNOACoPaUDVtIS/ZzIAEhYmJYgpcrWJCNIPlles3SwkO8pe&amp;#43;Kb1iCEcUEMN/qHDFsQsMMtBEOU0T21vxQU6K0q9OHJ0l8NpANoJNBDOmBhaQa7j3GG8aq8irQ9GDLF5fn8SgMJLFXaMhhdGU&amp;#43;EykixRE6d3SQiY8l85C4YxwAoLgBMtBxKEONKsVxyMOXipZSDhg5oETgG6ausmNP

oxyFSxcDNcASz0P0q2knipIbHk1oHj1jMCEzD8KM8IDNfxRy&amp;#43;JgQjtV7qezTDEq6OJSkgDvk8AdKC7SKGAfSGUDCAM4AFuGpSKAEjBq1S9z6DYMtgPJ0dzumyqmBAysuVYJaMtTubKRQKqxLaLLSxUeaLzskL75dWK/gJDS5mU5j2ResMcDBeIEIr5T69Zhth8FLk5lkDjW9cI09mXRVLdo3wdNn4rw4RobWtaZKUOPoCKkaUiUyUFb5eVOLGDtP

jgSkBpVbUu8p&amp;#43;mGcTTWFb7pUrbYrc5aicQer&amp;#43;4a/8krejtMrEl4xMlhhU5CP5rAvQROWaExbCdkhF3MRQxQrHlqSJyy1YooL&amp;#43;aJnR6FV4VUvBxRdlq6FV8KJwNqOeLWuCFx/UZP4J3PYxnASbRK&amp;#43;SxQ3BrFUXNZ299OfmlnNq3h6kv&amp;#43;TDCrIQ2Lq4aAjgbjVWLyokHHwqPdVwqPNVga&amp;#43;GETtcDWGEkgDA1fbPEB5dArCERCcA9HAiJmAO7Zbyh&amp;#43;1

6TQ5h4brbhmDZYI8beuaW1RnrsjcJbjoQYqcteJbDzdfK&amp;#43;1YRrSjdLL1ICOqdbvbEWxbcA0de2LJwjZx2uNpbgcbpatVaqaDLTJw1LfqrxbYarNDd0bheWJA8ENatRClJ5L2euKIlSwzISNqkQpOLzD2Wb9QldLa7LTrIeha6bnpe6bt9Z1d6kMCdWYhsJiQt4gY&amp;#43;KCwNUaILDst5icwdLIGzYBl0viRRnhFXxjNVIiqCPv0POA3ki5LKwB1C0I&amp;#43;

OAoQqCDpR9bHgqFKNUgnDCbRMMELF&amp;#43;QlQs42dzRKwQrceKGqqDNv6bjbC&amp;#43;rkAd2aM1T/aBYbYL0ABwBq5k3NWgLCKHoDUBugMoBMAHUZ3elBI8YPOa6DVpTvwAhrp5LSJavqybmZgJb/tcTba7qTaxJfka&amp;#43;DYUbJLQRrCtcKbYefBBfFtNSaNPDcqzBRr1mWJp6kvzU51SzSWjR3rcdV5tjLSf9JRRk8QQhLSNbUMbnwEpUwaGU90SIBbhhQIVz/

qFbS4UvqZ9WElr7QjC3iRISwQrktilcJAwkp2TWdXBBuDv0pbgh7wUrqAZicQfYsyeAg9AXk6HpYVo2yUzqVRc2TFjT2TiMZYwQuJ4gGKQ99GlTHxH0HHw0&amp;#43;B1bodoipkiSfjPNpnJLXFeSekA2awGKpIBHp9N9ljiodpg4gvsbYx3khTpZktxNDRulLfrenJjILvNMnL0kccERRClEtJthNVU8dRbQZoNWM/hNhhbvihKLnuyQyFgXwkMCFs1kp

4UfGrlE0&amp;#43;KyE0HTu4YMBZFscJG5ukDyRk/kHdlNVxkm&amp;#43;I20E7YKEtlbM9XWjviw8rOAw6IzhcVDL1gBDZ5FWFNIQuhw9OSMkd4kCvzhrccIwukkU6VM/YxdeSVwjPpxKeBr0bzPDtqKKCwU9Fq1CkPYgKpOZxV6gsjkmDwZAMAEclcolAdGOVxOYf3LiLYPKsTSk6/WdXaXCPQB7IFGz1uJgBnAAiKHoHcA&amp;#43;gPoBL8qQBY9edc2UiHVPuRnpP6Ro

6DMVo6OgUDqybSnUKbWDqBTdTbKxSIavFncANdoMI3aIMh4/HMCAmK&amp;#43;gpVptL51XpaD7cvgyKDwkDZUoNNTX3rtDS5a5Gh/acqVuiEnQljmbMljDDZvqGcSSp0pItI5&amp;#43;Wpbz9enKBtNOJPkq/wMkJIhFljES5qZP5DxRbRLlpnkMvmWC0mH34G&amp;#43;MDauHSdr35hDAXOXiarkHjAEAJoBTkexb3ehaQkgBaQTgIilmAJrhPeujaEjahIykonqbFI2r

3kSq7uid5MSbRq7dHeTbQGWLKZ7YIa57SY6F7a1sFLSVzmHQEwHEEQTlVe3ZVWmqolDaUKGtekT3HVGTdVt472subkSnnxqybjqbyEG5bJ8babQSLfbmdbcEHZUmTpRaspMldPq4rY9LhNb67qnRBbGkLdlcYTW4RkFENpQgjshECoyEFvBN1VK3s7De86qTjSR9aOe8xxBC74VH2I4WGMqvVWThPnD8pvDJMkmHpoVmmq0yyTGagxaINbVEaxpn

AbUoEMA7Rekr2JG6QVJiDJxQmfEIor&amp;#43;MtSLDo/xoEYRjTaOa5DRYwp3aJAbZGUSU2ukF5KmkRb8JT4bSLY/an3QEarkIZMH9mwBgQB7Z4Xj04DQFcAMwJIAM4rLL5HZFy78GWkeLSnjaVj26MaX27tHQO6hZUO6RmaNLDHQVqSjRO6XsfBsZwBrs3Ikdhm9Tea5gTuUjsBKpV3TrLD7YqbN3bFT2uT1yiqe1qj3UCFOuee67LVPjudbr8jbU0iPT

QLqCoSodeYjuUGLhRoMvKf1WCCRQuKOMI80unIzVKqpPDRM6f0YlZKoQCo83XCtw7pJgv3hRadkZsBmAGEQfSBmA5QAUD84qQAPkC6RaZTAAy9WqC1PUkQcba8jkNRlQ09WhqR7XzKBpePbO1ZPbtXRJbdXeW9HSSkL5JQsd/EBrtm&amp;#43;fazaaX5T0GTPFQ3EzTu3k4729ULbcpmRRFoO56B2RurPZd1zN7iF6appjVgvahAgnY7kiWsCUMOkWSyhF

d6uCUjDsTVTc9Adp9daf1zUFeqKj1duK8Ss1inYsEg6QXnlFXOcRaSAxT8dWHkeKEThsMFpwwXZ/dDisPgppNKFrOiJRyNHSDfFYbFVCEQ7SkDkgTNFJNn0DwYjNU/zxlVpRImG9MlTItIUvS61IIQEwv7GfwUnAix2KKVUz9etlOfG2I05C&amp;#43;hGKmNIcNgs6NqKPx8vfEDCvf1DokKC9juegADQHUYqgGOcWwCetCAFUAHoMoB9AErCoABUExgA1

LmZQo6BEImwVzUjS8bT9rGfpkatzbmzMtQN7stbnr9HagEzzjfKi9UyLzPVN6ljtO6GxZ98BPh/LqNRAJlGD5SNVba797S46GtUbcdvUaqIFS6amyeFbSXHTy7TU&amp;#43;6Z&amp;#43;ne7n3brawQtTzQvVeivvSNy9XvH6ScBO4Kxq3gK3IkVVONlUgmkKSI0ofUNCPMq&amp;#43;ECKEFuQKTZKFUgBOUyqsZW&amp;#43;8xSQW64IIdzxKaZh1MFyAh5D4hdcCUFaQH8BxfXKg

7SPNU1QezbbcOza55CBUtPUJLeVQLL&amp;#43;VYO6tXcO7KbaO6pLeO7TzQvbFiBUaxKFMjWpRY56aWQY2&amp;#43;BkjVvQxr1vYKKkehNJoML77z7Z&amp;#43;bQwc6a7LRVTzcj46hNe963TZ97/ZQ1UFoNfxpbPTh4ifQinCuNzAMC5wYVff1GNEBK&amp;#43;KFGg9cYRg7OCzI5bJkhtuZI9OXQJ6NJsYM6hR9T8VaGAERB4L6LQtwoABaRUUs3acEqX94gG5T15SmKk2b24u

hsyaB7Z16vtc2qeZZo7Maf27cjaJbJ/YZ7&amp;#43;DUUa9XQOrhAacANdhKw06J29fKZ/K/mrIZPCu5j3fWt67XV77D7Y20BxQdKXXe&amp;#43;atTe67SkUPibpR66OCnIHEhHZaUFXDDRjUP1LGsuzq4chRq4f5aJ9Wuyclfkr9A1&amp;#43;QWGPBcz3eejNxS/8bBm&amp;#43;7AHTIZyKNvj5NOBgwGKXKbyeHxovLz53kiQ81ficZjXBxDg3LRgkORD8KvDgYKcHtBIurXqeN

IwsAcnEd92F8zXWnyRFhCpR9oEbZr4Y1SyVJ4VjxDfzGzQJpqfFwoSoAMqtaObRWochlfKvH8EXUXT1EGKQ7GLNgC&amp;#43;OaJE5V1jLaJRTxWPFArWn3KBIRgbuFTX7NaEdzIRegBBEDNUDQC2AOAB0BCACCA0QPgBugPpgKAEyNK8bgGlFaeD&amp;#43;0S0yVHYZD1hsP6eVedi&amp;#43;VfXdBvSb6RpfQHjPcebxvbTbLFS5hfFgkM6KLzsqzAjT/KbcYEmHRgTjo

46d/YIGNvfAplaHEwj/ZLaDiTfFfPZXbPg&amp;#43;A5FbQ7MoSB7s53tLzfHdrwL/UUIJKmLy&amp;#43;aW/awQ&amp;#43;MaD7KoHM4W/gPdi960xDbKIQ4Mav8KU9ynWabV9Raa4NBUrqGNvpMQ77qbLPwwnZi&amp;#43;QnZuUtF7Ek7F7FlCqEBiGihFoG3hqiVX3abbuCB29jKiMiTxc3r2OLvV9av/FPbRgYJhCrkpYqN9haOqxBVHJlk0sLQV6VsJZyYBk88pEhUmkUhOOHk

HP7lpBpUZV52CBPD2OHZwBqQnaWFLO4PUVaMicD7djhPSQRSqeIj3ooKO3N2IXzM55I6H7IqKIIYLaCEZCDr2Mo0G7EivIayVWGF87InAZS4HqovKlgRmIYzC1kkVBtRZUGskHMkNsswLd&amp;#43;HLNW9s4x1MXAZM5Ff1XDLyQ9qam5omGG7wBHbRSOfIgJxP6Gc6RNAy1lLEjNfnJovFh75ENp0v0DFoMmqvs&amp;#43;SLXlTAhRiEoiMrCMCb0JMkYhWaIZr

0nBTw&amp;#43;fBI0pbvjwUSbct9DHA9KfCvyHDLvUfZI24HAuAG96WXbjtRXbwHPODhfRABRfUcBCAHABQwGMBEUi1Fccmo8DcIo96APdCZgwyrGBGs142Co6uZSsHOTVwajfTwa9HdsGDHaN7rYSebnKakKLPSDcJDWqVpxOzLFVf/Idhuz1O/A&amp;#43;bNVSqahAw66rlpzTT7S1rTLVLboycCEjgTeoynkhcksQlaTbU6rVypG5goPUgZoBvw03L/YK9Kk0h

naVVkHCcLS3Nd97aHJoKDP8svphw6cZdkdJMLxc8VcuGHoJgB4gIuAPkBphuoMjl9ADwAagF7ZnSjwA20QubTwTviFznvKOZVRq8bR8ievQSzODYb6TMRPatg0YryWbsHGA8IbmAz3c7fR9i8eCc9DsmpKfSSqrCNCyRbPfwH7g577Hg53rl8a8HoI&amp;#43;8GXRhE6fXfEqhXFTjvLdX5zGuzcEyTwzReCfdH/mTjiqRyiv2ElCp3vmSHjicot2aPqVA

0IzmQ16bt8dA9i3KLQ/hrB6zWVxp1GRnxHChtQTEAm49Odqx48sPhHxX7bKTFQsKoIeIS9hCCazotI5teRiPYskgjbAxgkuLBFeZLGgzlnDg2zRtAvwthFJOiRgk6WVbM6Y0h92EDs5VFNqxpJGlE2pk5vAuYxEFEACo0PTgzxJA6BbHL181h6yduZAH2gxXafsF0GXeles8BD9TnIHABnAFKD&amp;#43;5EddNuvUy3Icp78A0hCkiEnr3nLH0rw9ubdPd

QGECbwaHw2b7n0mO7jHfP7rfWiwkwhtt6ox8o9I4DU8rtIhX8iZHmjbv7xZEKKQVb7QrI5IGIFTLbt1dOK&amp;#43;aWVT&amp;#43;pge7ISD&amp;#43;pCQ4MLSlWjHHLaE6OeSPiLiTCG/cvaaChJS0mliH7ISPnDylb7KLAxF65CukjKNBdM42a54sFU8zXkpIg70LMldXDPx9bIXseCFozvrUgZC3FlAtCoYcr4Twg5aOW0loGogRNPBNnGJoKQoMTgGMMGl2SL65pYzl

wBpOXB2COIL48ozoNuZqw63FAiQHhahdRGVcY2j3kgmmms&amp;#43;ZHPwN&amp;#43;Bkx&amp;#43;&amp;#43;PzRtsmeJc5rP5oMHPBLjbhKOXfx7lo9y7K6CPL/RZvlz/FAABmDaRj1h8g8YOj8y9aGooAHcgPwydG23Wb4pmIEKM3tdGDfVQGRLfdH7w0pGjPU&amp;#43;H0Cfq7mAzFq6xZXqGxcJx05EhaHTlwGyKpJwJLDvb&amp;#43;bcC1lDYfa&amp;#43;SpDG3XdDG8Ywi1eebLaonfZGwLve71A&amp;#43;jH

grWCFoEIG7ErV6ak/ff0K9DYUTAiparhPpxKNCb1d&amp;#43;BrCvVfsIADVOEHye&amp;#43;hbBMKRf7OEZNVJTDuxG4Nuurz7cZR7GJ/IxHugxAAL8pisOADVpOgOIqJxPQB6HJZl2gKFr1oXpCQ6jFz6gZp6yAx/l9fW2qk47eGeTbQHweTq6qbWN6abdDrqxYChjg6yRQWM0y1/Skj&amp;#43;&amp;#43;GIZVHUDG97SBHzI7jqB1HXGB8VIHvPbBH/PbxqFA/jLsE4yxuypFGt

9a5BGTF1A/nclHtIIlF5yJbRWkHnlqfOkhKkNKxTVOExjNKFZWajvG6I7ZQfsLw6S3ZBYPkIhZTMJdJFupZMKhh8hWgDXN9HqYB742eH&amp;#43;tIq7PMXjbuZW/GibZQHbo8nHBmQZ7f4yN7/48&amp;#43;H9g0AnDgw0zNI3gTSVF4JuWapbZEhvbliWkgeBRXGKCc47EEw1r0puOi2NeIGTLVDGT/TDHPZbe6ziTKL44VrbG43gmg/TcDhjTTYsQ6H79bUTdEw

Xra2vFTcyngEkEYTE7L7Qson7VgmadTkt6lgQn13uSCOhKuTFUWoErUUqG/NMJQfncV8ImOAJ9Yrpp6qsF9fTuZ5SNFHLUhsRR3GPk0H&amp;#43;U5wqsgpx7WmWH73uH9lnqMjkqqaoThDG4tCERhXILkmEdkq4FEG2JZGbF5QWGagj&amp;#43;StTKcOcRdaJfwhYhq4lOI1iZnW4wBkDA4QoIuwlNSoZQGCYU0mCzIMg4ZrfEHdorQprFUkLcpqDKSpnAyrFLdW

oQNbMtzTVPz5/xaVYyrXwZBhNFYPYrSQZw52a5wyDaM1SIghfYfHMVrSB0Zi2BlQSTAAacQApqvQBiAGwADQPUZ1oRH14NZ9qXtHtUdfWWjevUJauTV/GaA59dhvdPbzfbPbXo6&amp;#43;HJvR9G6VbnHxTVpGXtJ7jFyKvatfbUbm4EVVqPVv6foZ6cHg3v60JrDUcec67j/lu6HdlUiDveyjzJWoHTGgIVgSuK4BCk5Go/X66gowFa3veFGHI6d6&amp;#43;jYJ

rFU7H6XpYPG4fZ9k/NJVwnletkToPntp3CqxXZIRol&amp;#43;qypUHSuIFSoG4Agc7HFCsoUWkKslVnj2MVUYjKpaB4z2OBOIJEHXwVoG3zJYnRSAfPaiwzRXploPa5k3Y8lHRcSd4VAmNAuHtB7jPwQNpNIKaI71Ca/SLgfNUoojgFyAF0uDTJFe0BgiMtU0cjABlcAaBTMGvK2JXiKLFB1aFzk/G0iF26PMAnGP48omcUynG1E5fKR3YSmXo6Z63o2TT

NALUdjXYnLXoQ6d9I7cZ/FmIZ2bXAm2U2ZGOUxfNZWEALe8bsTqhWcyKXO/oZDj7s84Q/bj3WiGinqknKY4F85ChnIMI9FxfYUV9lQyCxAXFQEcLWfwvlhHxpUQhhMpC5x8quhi7OKJxwbsExO&amp;#43;HqxjCYmnsiRmrlKoCmBzeRLK5jG8jgEQJf8aja7SEjBtrkkAqgGKtu7Sbp3uWhJaRAaTDsXWnZI5/H5I5sGHo2nGdgxnGJmUwHfwZNC7zkogQ

rGpKWxWTwoVdFxChU0b4E7yzbE4fbyrSgnPHQKn9fqUiiY8uy&amp;#43;LolD7JZ5GrPs7KqIHSisTFZKscShHLAyyHraG11ZwNpDCKJtaxEFodQGGayXCVCTotHL1poI4Mq8rUp2ek6E03DKxa9uBF/wj/EGOZnw&amp;#43;SDP5uODQZXDiMg&amp;#43;k3vzshqXbMVfOGPY9jR&amp;#43;M3AHlw3aQkgJYjg3h8ghAGyMkgA6Y2AJIBMAI0wBgDUBpVVHHFrBAIruJr74UUSlUN

Rkawhaq6lE&amp;#43;q67o6omf4y2np/W2nZ/cSmJvdNKpveMD9E2sMeVFFwckHSnZEwynliU41&amp;#43;Bs57nzTRmBKWLaCkfOmRxSi1T7pO98qZ/a91WZaPg4YH6ef4n8OqYH2s5P00kz8SZNQ1VOOJehIiioUKMCbcOHr64UMAmaewfHTtCPCcTEIF4LkoUgpSMG1Xphaj74QgKEAaSCZaPtMspI1GP09X6K7UJAf00ooRqpaVQwJ71WgAeDQwDB84AEIByBP

BYtw&amp;#43;tCak6/Tj7SmwGgcsSkM6PbsU6hnjfehm&amp;#43;TcpGsM&amp;#43;WyZLQa6RVkcAFFRSnbFYsyBQs4wD5ikj8qkMJt&amp;#43;bjzlTVRnJ08Lbx4d3q&amp;#43;8b3rUE0xn4k3HC/I0kmylaTVxU&amp;#43;xmR9eEmp9ZARniWLToYlDE&amp;#43;XOvqwLahG6cZJpYzb5x2FhnICOcYwYuK7QV1iHwjXD&amp;#43;Tt8ZoZvCgwR4DUKYvxcPwoXPHSb&amp;#43;GoKjaPFBxSPYhvEMoT8KCJwApRkxReos

rQqpPQJpDwLlYsl0&amp;#43;kCs6zppaGDlpVHnEHwp&amp;#43;Qt8nXY12aCvagC9TMeApSQUyuQL0woADwANSXCyqgAH0BgPuDiABQAOAA9BDwNBmJ5Ov9&amp;#43;/e1748LrCxYN16Is&amp;#43;hqPszeGvs3eHm08KqBDclmO0ySm0sx9GcRYzb6xVSn88NfyzaN8517a5cyKGXB/mTa6BAxOnQY/v7jyAMqT7ZVmMc/RmBuZgnKdbgnezU1mCxATHOGYEnZzIhGfI0bx285Gc

W8471JDgraUsU3m5GnoMdA&amp;#43;TrorbTqSc2PnLVU6ajBoJ0b1NN0YFdRwN7MqyRGUYaB40fznGHFwMxql4OoPa9qk0GiOxAQYP&amp;#43;OEwNAplGIoO1wB8tFpEoN7I9Yhkh8WAYUYniCNn7AbQooK0kpcYyZWbbBhtQrpsRKA1wakFiCVqdQpGcBtB9bKiNXKha4i5K7Qt5ZQQOQ5NBDGPG1z&amp;#43;B4dEjMbZGzbf0IBGkhqQqyYQmJ4gM5OeIVc95AuzOGbw

ORtaOxMIgjlg4dAtnG7DCUvw6kCL1xerBF83NF5bPAh72HRZm01VZnBPSUs2IEuHD45HrfM8xGatHcgiTT0AqgBmBSMBwB1MFUB&amp;#43;yD7mailImJ5P3bU2HjaQ8xua9fYomdPTFmVE0MERZVP6/4zP6jHfHnUszDqpvcdGwc&amp;#43;6SORU4hyCPN7ZDSLRfGR&amp;#43;dt/cDH2U8XnOU58lRA81qSeW8HwnRTrPXWY0KXC3DfXQHscQ0GJHJY7K8Q1qlbZjLwzU

s59/C75H4rYFHfdqTmV8pTi&amp;#43;43Tn58ff7JNAWCHQnzQk/g5pnNlayRkNCSpUbZwIBPa5evpSZnWo4VyKJoy0CDyRYpb4ykkDCgMpTm0qxI9kizrcJ4&amp;#43;eCcseYAJtIIXLhCFPHW9sJMikDfriMQLFOaNExgCwvw2EwkDNkU5zxKWEaxgCGyxgAxFmAIncoAEtiqgCpD9MEUYVYTWr6DXqIqVpY89qooXh7TJHw83JHCxQpGfswea/s5onM4zhmoUU

cAjwynm842nmmHsoiceWE9s83Ka1KPyFBGncG7C0XmIXDHwcBhPceU2hCPPWTzCqX2bA/b3n6dbKm8ybEXYY&amp;#43;Pmwkz5IHvTCXH3YFaVU46bmNjjH9vV5a6szf7/7Xf7es9YHBi8n4P&amp;#43;N5L1nsDKwtrgw5sAT6EiVpy83O3BcXuv1rPIfjEkCwQ09vJx5aOLV24N0XNQzdNdILFxGYqcYh6RZAlEIz6eo56lOtpLRVkyzQTaJOw29qioa0h3t2SdK

ig0jSRmuHx6zc3z6Lc&amp;#43;9QztXy6rkDsBBzRQAA&amp;#43;lyBQwKZgkgH0B26G1pLpDsBcAAaAwuY1KMbQo7eRhXEq07mB9i&amp;#43;9m&amp;#43;vTkb1C3Sk8aVPbLizoWTPUKbO07SyPow7DjCx5TeAJ4gQVWpLPYWYmIMgWN9hCymdLeOmEE8jnNvYMgvmsCWJRQumOyp9tvgye7YI2lSL3WxnnJf8VIiyhwfggJmqY3UJOcZtBpoOZAQ4olVHXHns9RONHvZIZxI3FRh

nWhMhxhMeQpYmGAPjSqHvINPxZSLGtw6bO4J3J8IMcG0kfA5dQxKOwsiQh/yNS78n83RXbMOCchxKQxEYxUjAgxfgAsYGMA/gHLClYX8Bg1JoAkgC80hI2pjjdvBq5C51LPSh6WsUxHnTi2hnU479n041cXsM2pHcM3EiJDepww6Il7zXQVn&amp;#43;XihghxCVn9LQ66y2kcyxA7ynQS3t6EcViWRU1LyxacXDm4wqndUqU75U91nPgfm5VVKXwuOHwsf

XEIRfhNLICzsMkk6a3TEcKKH4XZ8XjKoyadzGnx6E5C7U3i0Gr8d4b3Y&amp;#43;wX2pkKC9SxUB5MRuGjS5Kc7kH5nfasSq6QBwBMAMSBE8fjrkUxp62VQ/dy7himji56Wx7ZHnv43imtCxomAy3sHAE7JbDXTCjMs3FMA6FKl3MW8XqNSF9UMORnbC5RmBRQ4Wp03JqoKy4XDJW4WiJoxmGs3J9YA/VnHvf&amp;#43;bqbl5XEOLCUQIH5WyyXCGVPmFG4lWH6Db

Q&amp;#43;7qlR96htYPG9EHTgnCfMm1teWkxOJ1GkMJAX2OC7ERSPFZB/LF9&amp;#43;NLIZvBpypmFfZsmQpypgGMwLukA6FzborKSCO&amp;#43;giqis65qGUlnYu1JxEDHSKzWOJ0ZfDL&amp;#43;NM1BWQjnT9OJ86kMOyoX4ixSJVMcbds5iaOK18Hp9SJ6KgKInKBKiIERMuNVMA9AmogaAjgNQ4TgA8gAiJJXcBt/5O3WimHy2q6/kYLKzi6&amp;#43;WLi&amp;#43;&amp;#43;XNK6pHAc8wHBI/pWmZJ

/wGSherfKc4rbjK2JmkEDK&amp;#43;bdYmQY/8WVCCTC6MzmW3tpk9VUzPrOdSFX0oQvrozi1nD3R4WwIEjGhU4jjl2YKna87ccsKzeiUi8XwkHLU0dVG5plKDxQpOmNSN&amp;#43;Gw853XuhUPQ3lWaHzR2wTG4bnYeJovFbGAKVg8X2Vc7iI1LlNVMvTUi1xkDNsSpguDrZvDPqwtDCKFsnBwo4kOazRqyRboAzw6D4y71mgPGE&amp;#43;gBQBiAJYQxrKr4vkOpgMwAa

APkC3RJC5eXLcI7quHDfrENcnq1HQyJ0jUoXIs727yXhZTx/fp74szHmGAwAms47hmHMQ8XKUwYme&amp;#43;GNy8s6/kW2fWYpJkoDK4wRtQI&amp;#43;hpV&amp;#43;M4XII64XrI1Arfg/CWjvbIGsYxEnQ61&amp;#43;QrZXakQa9ZbUXHBdQLpPm8S4eroq/f6FVMnQ6HdapI7ZSFYDdlVuFgrQy1lSReIYQKLXFZol8EVw7aMIhqxpvxqKB0Xqa6HL22ttmB2qyV9WPIQ4kElV

JSF4EvBJwZqE8uXLM38ma/euWeUeJSWwJ7YOAJMHqjIeGxK1jAhgJ0A/eqQBXIaIDjwzBrnMPDn&amp;#43;/Sin5CyQHiA/JX09YpXHyycWjqy&amp;#43;Xo83NsVIzbWbi6MCItTN7DRXZyobkWUSC7XT4bmOmt/p9WwY4D5WpVmXhxRhCbIzDoEa25XDgVarXgXKm4S3cDh6iA3N0W&amp;#43;xzVkIExaaunEk65bUK6FXvzSIVsc71MoS3/a063zqNU/8qS9gOGzVPvxr

&amp;#43;I21c8&amp;#43;QnXGiMlLECZ1ganxxaMD4Nq5VVGt8xxQXQVlsbluhgyXTNSBkzKYMDAuRV8cccnaVFYlOAU1qAl8ayTMbnN6i1GbOiLZgGPK4KSqKWS6fCoItkZwK6WNI3OIoQokELVqzk3s3lDSQ9yjnIB66wWh6wuH/4NbnlwxwAsVpoApYZj95cEYA7SJLBaQMQBVq81p7S6r6VPRNAruDImsxdboOVYcWyRccWUM8&amp;#43;XvsydW/S2dWks7oWgywnmDC

x9Hpgw7XwcxigYVGNBjK5Rr1JXkLxoPByky7vaUy0jmbK8LbfNk1rA645Xg64NkcfMjiFXsiW4IzZZbiS8NgQ0Y02CajHUIDTmVWf3Gt9RqnkmNzEtNE4huenbRQHPK5KkC5sipHctzUGrqZSoV1fXH8zQKwcslELgsePbSQYVeMX&amp;#43;fbv4wRUY3D44tDRHVyATy8Wm5QM3MJwK4BlAJ0ALAIni9VedHdq9r79q9FnDq&amp;#43;bXjq6fXJjv9nGRZZd3o9

2mcCTdWRyIuwABU765gWKRBsMaN3q/VybE2mWngw3T8kRr9K839XYS&amp;#43;Y1PdqbL3tqTVl7JWW5RdKmxjRTGN9Q030k04V5ONdEIrEI3rODNgpONHSpJifn5lVfZTiKAjlrZtMHaIv44&amp;#43;OLQWPb0I/jTeZ2epH9MIqV4pEnvDha1y7xq1EEuCy71cAEMAoAGwAhgLdBmou0AoAHVFLpGtx4gFjBRfXs2ZC&amp;#43;lTMxeATvMgcXyA1FnVC6c2Ng/42Lm3S

Lgm4GWXw/oXgE9MSHm8XAQ1noh5g5AmgKyXBv2iqiLK6ynX6/YWvq&amp;#43;lEK01/Wqsz/X3C65XbI7iWWyXDXsY&amp;#43;y4mpu5XU68bbBMwPGZOB/xl/TFxXPKoVPGG2IS6xeZKfHntTIPu93kkBlq8vCoOOSZzGW1AHR2qJDi3ZRaBgBmALSB3IIJDeVPKHcgV5bgAs0ZIBMRXDrV63FqXwPEt&amp;#43;/dH0DIXFy969JHvG0pXPs342o85bWz61c3oeTc2u00cB

7SzYqTC5/JMFpSQl/mvbAanLrGYUBGPfamXMm&amp;#43;mWQoAHWK8xLb8m/DXJzHTdBGZHXWsm4mtUtS0gi/A2NBmDWJ3vcd0nekqkqQlT5bWqmAHRqnB43dpecx6ECKMt47&amp;#43;CGsnGOKw4mMoZaCDuTcFnPxdUxFBOfRpA4AfXzW2pIhtIJByjGHCDJ/COJOfCzC0ikB2TjVxop4bXScCNz0tIGnJGqSrR46Dyo&amp;#43;3NxxlYkusv0ELnQkGLQdsywXX1auXr

M//BUglNWJABmB4bepgg2O70NSTZN9AGYj2gC7YXbCW3S0xvKw7GY88BjYpeJZ4jX48GUsjQ22ny8fWlWy23Lmx&amp;#43;WAc8XrmAzgGom722O3hzGlZZRrZDQkx1WsQ8wK/a6/a7pp7K7k2wFfO3927CVnvXzSBtdCH9VsjW5CqhgjyMNctnhQLSS/Qm&amp;#43;aB&amp;#43;gy1n35AZKerEw24wZy&amp;#43;FtvJR8tdG/h3zc&amp;#43;&amp;#43;q2IM04SvQUy2wDUAH/HcgYAJ6xJQTUB6Z

TUBcgSGyjAHAzS2/QbJVFdwA81pjJI8c35W2bXFW8221K3QHHwyJ3rm1R9bm0cAKadq3/rAxT0UTtsdhiKZBOMp3fawCS96uzabW4C3qs0mS4of0bscS5WU62HXiaIkXvW1vrCwYuQdpioxhbo/1hVObaTejKxI3P5L9DA5UgXZqwLqQkQdBUAiJaBNBHQkQKZm9qWxDv/hxKUtCfSDRE/gC2BsANuMA7F7UMwLSBWgAY98AKyLYuwo7d3O&amp;#43;s1Lj

W36Vr9rCbRQHUu&amp;#43;sGugbinrSfin/S6q2tK7bXbizF3JOxGXkiCpKshpsdObdY5wmJYgvax9WLW&amp;#43;/XziCWNy8wC252y4mG83/XZeZU2lxQ5bo/TDXLUorzrJL3GSm3oHW4x13lU9E7hAlS0d25at7VfU2kiz1mljWIh88paIEBcHNsfVi6UnLVbd&amp;#43;LEx9WY5w66k4V6NGaE9&amp;#43;uag3Bs4Fnmylt9xWKWsuNzoH&amp;#43;EVICWFoZ0nPL04fTC75c9yQXblR

gWqpkl7YtGg1VevydQvOQXaP1iWMkeZW9prH7BDZVVu152Y4oM1xKSxHPWIQBHBdgALSMIrldHch&amp;#43;g7SAGZd6RE8SJHbcIl2lXbJWUu6bWXu4Aym00J2VW89G486E2NW4cHZmQjymbS/Kixiem0eaD3/vN4YHEI0bLK&amp;#43;k3rK5a2x7mHDZ22fanK/DW8y1DWcc0jXt0zuL6lTU7/2UYFWoWXBXDCXb0TW7Hy7XvGLytxWJAOphHwOPWHTN0xmABQB

KiT&amp;#43;UyZROBH3OddxW18bda5DI8bb73hJWP70u6pX3u&amp;#43;pWCUyH2Qm&amp;#43;q2Dg5KqjgFBrwywszZVZMq05IBXF3QPg/WlypoIZ82PFRO2M&amp;#43;/rY1DVUKGu3a2jEhS5zmfmXPgzj246yxsjO6X233aeJOemxhNyjhKU3QRRtdulwE5iEZXAYJzplmEgQjNohpSFUbPvjanL8Y9S2K/X3xq2CLxa&amp;#43;04&amp;#43;gK0B6AO0AkgAaAfSKpgOAM0BVMHOlmgPEBL8icBT

MD&amp;#43;WAs6&amp;#43;sutrFReLao6Y7PxKFE092/exP3Xu4H3Mu&amp;#43;onZ&amp;#43;84sLfdJaxO7hma2dH2ytXyRSmhAnKNWJHt&amp;#43;83BiNOlM4SQXnTI0f2Ye2rRWNYTqnEx46gWyPmEK9TqHWyEqPWzKn38H5XkTEBpNB3ZbFRW3GKeVf9vCxS5rPp3mAG&amp;#43;C2IG7&amp;#43;aES61mXju5YfC/WgUasJ1Z2bUiZeIDgGXP/pmOgqygxBjQynnvowSsDWanl13qy3F5HYz5K03G8pw5

tnxtGFipSCCbG4WDCbjIGYhZxHFK3lDqLIBKl4Ry0DUjNJEOorE21u6aa5G9qZV1btPw5pOEDeKcMICeFqpzkwA9r6guJAVT7NUNlw3jYhVAorIZqRi&amp;#43;3hHbo7jxvkKR8FZPsmKGqxsqjTCxQhVBRbKHMrkt3zbnfjwJVDxRui&amp;#43;bR&amp;#43;OFFAh3GVXr0GqHmFPlVbxWBiaVClJ9YjOn0MFlwZEE4Us&amp;#43;BLmnwnKYlBXLZmkrs61SpQsx7r60vbWWNBCA

hjwJWcKk&amp;#43;DT4rRdyF8eJGmApfqiwMOW1BFAVw3YmL2qNBvzyKHcovmUvgGXZWdvbab3vdT3mOdeJS/qXaQ1Ht4AagM0AyhraXTAHaRMAA7UVfHK7E2PDcSLCBUZW9QO5W7QOTmpP23u76WPu0E25&amp;#43;2q3tEzpXgc4VzREo8WDEyV0bHC83DW0WN0RpD2vm2/WS8720Z2wj2c&amp;#43;1p2BuSlTfLTBxKyV57v4EKOt9MYP5aT7tIwAEOd03UJWxHv0dDGr

RHbuYhMw&amp;#43;ws9RI10z&amp;#43;K&amp;#43;3ZWJKo7OCl7/acxR8cAMWjIPToM5I1wVnd99F8dOH8w/KQpDOy7Wg9AO2C6LXokLKOm&amp;#43;&amp;#43;gAERGuNcAEcB65pit0ZswBsAIHYvM0jBfSC272JYFntq/1oQs0Hm&amp;#43;Ldx2cGrx3D6742BOxl3p&amp;#43;1l2noywOiU3oXF&amp;#43;&amp;#43;XjgPhrs1CDZ2J7mE9B07ORSSbRhWpS/X/Md83J2783wkA4mZBzBXdvdqaC&amp;#43;zqWrLSOyt25GITB9xB

yyzmIoLsnXIk3xmq/C12fdjUju80CEBjcEmAvaWW9B8AsPK6kqqy/KPJKBqnMVLlFzzAEDVXM&amp;#43;ZLXGm06SO7d4oLRrktmdBK&amp;#43;XD6Y5X61FGL0kFloIpSTiaPqo&amp;#43;8ldcbvwLxGBjX7NwprVCy7plglpErGpQZSHHwgpTVCeCF5KbNM&amp;#43;2h8jRqkPTQjvxw1VAYekhJaB/0IR6DbI7qm2dkUF2hgMWnTED6QOgI0xCAPuChFQMBmgHAAwy8x28AxYpY

MyyrQZClq9YXGOTSe/HkMw2mVK6SOQGWmOffOdWL61&amp;#43;Xbi&amp;#43;kLfy/a8XlJTwF3epbFJHKZBnqk3va2FTqMxBXphLyOe9Yj36464nD22gm0S5E6yc/wEyanEXqkTYP3LPUjklek6pU&amp;#43;hXZx17LjvW1mcIDEnkncA2MG163Ah7Iy8ME1ja6XEgXUf4YdDjSQu/CA9msfiwXlEXGczm7EhbCd9HzuhgeMookmfHpxYZcsbCkOIjyKBsrNKF863&amp;#43;sM2p4

YkGZJiRhzC/Q8Poaao7tOcQpk&amp;#43;nII3XYhbOE79O7FICKMNYgOajdMl8PY0AkFXxImO0ISo7RTQVMNdrxDlsIA3X3nR8m2uK3ZnD45IBugGMAkgLKSsfuiOGoLxH4QHAAEJAeWOhtiOiA/MCh/WROf6RROfG1ROm21P2yRzP3Pu5SPvu5fXTHRd3/u2v2fMue9D3rJJZTU3iM9G646Kwf3Ec&amp;#43;n2Yey6zfq413q8212t1SknWx3jn9B4ZOwvUSXTRz

TCvxyRdN9j99iQSAwaCOsmGMAVdhxAgjRKNBP/kzkZxKRQALSJWAYGqaYzu/QAjgEjAMwH4AHoKphJAGGOy0&amp;#43;PJwno/HDmzvXB8GP3R/cSP6B3FnGBwlntC192Lq&amp;#43;wPbi6xKo&amp;#43;6nmna9VbCcJxPLg2DYizoFUx24XmJByXnU2odOL&amp;#43;yxnF03bMhXAT3kGxhXmXArboYqGNq/DiWiQ06ataZxmFbQQ5oW953XvXBAl8zUqV81vqVhwAa9Om6JA5qA

wA2k4dNClA8EhtnxjQscaVrR65g7apJQjp&amp;#43;ynyf1ighh/3ljcPkDjfE16cHYw/ED4UPaOFVpBTZBr&amp;#43;CrkmYxC72VOXlJQ7cJcCzwRaunZ0b3h7Tnmad9qDDVUzZxnwTx2pxzoE4UeYiypKSHowMvUqU&amp;#43;YgMgAVFbjNrYm32K9AGogizr&amp;#43;zUopMAApC3SP2cBgDjB2gODQwaUIAKAEMA3CJH2nG/iKdsVzsSLEsHuLQTbNzSoWiR8McA&amp;#43;1jPUx0wP

ppxmP202H3sx4a7FJUV3lqCRpovIO2xYOtOyeP5ACLnQ2xB78X6Z44WDCUzPYI9h0OtXZHwSyiXN1Rk6b1IrT6/OS5&amp;#43;ArogwYtwcPyCC2GkSxmFxb4WS0BZbQSNU2lU/9RUS7/aGpiJqCy7pOd23SGuZ0HtybAe2I/fPmwq4/2LKi999EBVx4vEP4ULfThSqu8ttk&amp;#43;oQn7P2NouJbR1dSSR/3YMhm&amp;#43;LPD&amp;#43;m3NNQfetkOKP/xNWEkwmKCHwNlpYEJ

ue&amp;#43;256UYwS9vj7ulfFpLqGgK5SIa5MRgw9vNP1X4Sc4wFDHT7yKd/Z4rK1aESe26g6NOI5&amp;#43;JUkLkm99tOHNRrca0JnlOHy0BZtMGzBnkgjpvxcML9KjzJ/CVWJ2GUMLQtRGycsExiRQJYoFVr8xz5BQ/U1LqERG9GFN3RVJhcHLnCxX/cV8ZbHE2FaG&amp;#43;sCuggLJS3NI2&amp;#43;FyHIB1lKVy553IR6RFhPd7HlAH0BCAK0BB6A6QKAAdxVMH8AJYUMB4b

UkAxgP5nLu5FyV1RXE5C2cU8JOFmja2Hm&amp;#43;O0fWzmyfWg&amp;#43;1fK8Z4xPLq7hnZpUPPa4Pm44Hsa9lpf94UpgnTFlnxOoe38WYe3WCl59u6vHZFil06OzfE4abUG9iaOs1fbOl8wzAawpOr/Z4nb&amp;#43;zoOvE2vOY60FW1PjpPb4FYNi&amp;#43;72T7GulMJpiYh8x2BgJkCMg1ZYB2hlqrQ9zDHIekHJxMVFQnYkG61ItGqHVCKiiumgMI&amp;#43;SNHwkdmJoQ0kyFrEM

iCEBXf1mzXXjnNK3sYmm54Z/FJwK9GlXy&amp;#43;81WBoH0hPClENWe5pqVKLJng0uao1GERRBsN7J1bmzRRxiw9bnrgQHF9oYTQptSXzPJxcNJTDsopdRDCtQt70Y9nK/UJSmW9AGqmOJSiwCnc4U5otw1CuMrgKqAagEcA/FzW88J7MGjug9WPtbd22VTvS38gpX624mOxp8mOJp7ROu5xSOe56H2F&amp;#43;zoml&amp;#43;0p7V&amp;#43;8zafwi0k8s6o6W2fDKPzFV3BJ37

W5GfUv&amp;#43;U&amp;#43;bLmx/qa688HtPgyBBWl1&amp;#43;Btefk7el5Bcd2/oMtJ2C2fLZ8GoTBWT2hSwSUK9wxj2f&amp;#43;ptByxAg9hFEKbNi1l7EgqQrfHX0e9Km/554E6DPdpE3IUnQ4Y/mFOCRRbxVP4I0mJQPYv2nU1kqZkMhz52CJgtlWEq5/fpT4kvAz4RwuBinAqlFqdIwozngaxoV&amp;#43;W5p&amp;#43;LPA9An4M/GIiSsoE3zM&amp;#43;Zw35oPfVtNuYvpchiM5nt5S0WzZBkmCG2

rRonIivDwgmHsyyckK9MfFZSQhsGaE8mi1CvNqPluo5cKoZuFVWrsguSQvHw42Vbrw5jn5d0KlJ6OZog4qGxC5slzQZhbOBW&amp;#43;Kvxn1Xh3OHW4vQbUTRWW0opaQIgA98jBZxK38AOAIYpTMPoBdu0kAuQBIqVmkPdRI3IXXs5dGhp/9yaB&amp;#43;P2MZ&amp;#43;3ONCxfKra&amp;#43;fWtE9pWgcxZ6n5ZKuX5RZBC&amp;#43;NeI3QfZ7prcZVTW8mXzWzUv9/a3is&amp;#43;3yOoI0j2Y

IyKPPgwjG1BzXnSMlj2LeF1qd20hHmdRKPwG1dO4/ff7zxG25LlbbRkPoxQv5IhDnGvCpXGlRSRHi&amp;#43;hADf7bMNNO51llGbTR96iMNOKxN6uQsonpsRAXFqpx1/ogJCJ50nF42bFpEq1prUdga&amp;#43;4tGqp/o3rM/aw4JwUyzTOSqjERERUVjUAKkAiJmgIs0HkDAAHkHpXolzDSvoa/SOVyRYa0yXc0Z2sG6ByBufSwKucZxpXsl5Bufu1fXrFWKbom

/hIKoLZw28UWPh23Gab0Equfm0AqRaDrX6u2JPMcxJOpJ4A2ZJ/Kmh9aPX6/PbMie8/oFJ7sBZ8x4m2IITnnI2LSP52unNJhfPIa5YOjGrLxiY5VuT2wSXae1htlDgRQBfDc7P4RsrMFh1JQ095BalK1SCkBVX9WjmsRaEMPYMAgs7p9k4hDD&amp;#43;HSuFKkrRtGg0kv6qseZ1sKFzVAXbdePfrQHILIMJQHXNpLYXWWG453KwLXscJlVNKQxud1Cg6J

9MnGLSQVEFqHrOD7TWuH9au0Rz6DhIGaDrSa0WK1AOlozAOM57xdfO8uGeABQAeAImEpKUMAdgK9Ja5t&amp;#43;AhALSAowKpgjC4yuTw3llGDdCgt635SF5Oin969yuDq2l3MZ6BuhVa22cu&amp;#43;228u522ol4tPmbYYwD&amp;#43;m7WEmwn2xYNdMp/FUvOR9D3sN1YhT&amp;#43;0OLbW8vO&amp;#43;x7/WHwN7yIi6OOvwBlCnJePqFB4OOQG6k7n57RMd1VobhU26tpd6fpUK/6

vGKNtlcEb4hWnQLVpkBwir&amp;#43;HRhLPCKZcxol9NoJZ4pbNDLh3DowIOywKFDPl58eOr0q8pkwYvDZ1TPCZO6KH3xOCLgUvDlSRd4tzb4rMnTQ/pSQWNZV5lpAVHfaEWlekINuT0xoQLxDCTzF6HNNCvhH3EPsN3O6eutS2b3am8fTxKWMADJkkBaQCCAigQMAOAEjAULE8hvkLgAjABlnHNxxL5g33ave3ysY7Dju627mLUl0mP0l4J3sZ&amp;#43;Bu22zJK

rfZ22LywUuY2rIZbg5Vzyl5CNd0FYnWd1hvOU0ma0c3Onz&amp;#43;zzvMYky5vBxJrFWb9hCm8/94W9T3KIdExXUezQzUfrv7XA&amp;#43;gsmO6r7h53xRKFEwnm5LZDOkZGpoFWcHR6xX/t9VPhFtEgGOiR2TTN0A2wOOdGoHaRQiPQAPOeyMdFA9ATgBqMfc/F2K4lvWYx79yvG03ueV2oXG0x3PJp3ROKGgxOgt3NOF7V3aJDV0rU/XlnZDT/2B92PvD&amp;#43;xk3L

W1AvpB9BWQS42PpjSGC5jTZLkk6LwilYTjf59MuE/QVCHlptrlaHEM8uHugH3gNvofU&amp;#43;EXWoKojasF4y&amp;#43;AiTMMEZH5rdpvKp5qXd4&amp;#43;NWJW2YPs5114HoPr4xMRI6wM6ImfSC2B7uargVq5oBImw6XW3QjPrzex2toYNP4uaHnMU/jv/ewMyid6DqAtzNP8Z93uQy92mStXBuyteVIXoTrWqzAzv/5NnJIgQlvqx0lueVP83RJ/yOCN3zvhPALPLp

y3HOZwxv1UxnXxoHV1TXNjt8hzqo3aC1VQZgtHxD64vU9&amp;#43;4uLjoZumI3KDSADUB6mapgkgLZuTgEIA73KZhNAA/tQJJu0lnVtVns36UOmZ5vIhcBuLD75vhmYKvMM6Tuu9x237DxTtfFo3rdbEhCwnqYnXLoCWToP3XZ51ZXexU8GNkhBHs&amp;#43;/hvxJ8j2HwDMb7/mMucxJrz5jYg2KGedPm81jnjVWsfTByq8uswwfNRTWXoEX4hTAgNhcw0tNuaO

pnSfFsQMnEz4il9nxkkHLH6i6VHUZS07FrX7vfPAxSKeMk5/yTnzR&amp;#43;LRpFS14cyVOdAlQ9t91GWnOAd6O1ap7IeIUljAr9jsAfSJoB9APgAeANgAsYOgO7kLgA9u60AdgJoAS0zofwx3GoXG1w5XN6DIpWwNsmj/zKWjySzMl62mbDzkuCZ1fXy9fSPHa1lnHnrXsx58SlXm1UhNWJAWEc4&amp;#43;aJ91OmJKBmL4e4EeFj&amp;#43;luljx0vtV7utdV7HWaDyT

GUOF8Fed6xmBucLP2xy4lim9p2UlSEfUIEqegxIavWt&amp;#43;nXCS5EcskOV1rF97JmWVpwvhCk58MJu5w6FYYFO5XyFCFYbAbMPhMCFbRrCgiczVNF0fT60kOSZzX7ztmtGuD&amp;#43;h48gIgxS6XAFDEPzSNIbOZS4IQwjAmGwVpx6JLMI9g0o1HraIlZoVSHRAoWtyMEcyRlJB7Efp8PWRcDkfD4w8hCALVK7uYQA6wAmKXyrCkoAFX87kHoBN2iUuFzpSf

cbSjPVHU3PlC4Bv0Z23PWj9NtO5/5vmB3ytWB3P6wm8AnxDX3uFxHM8ckDUbBBx5g5CLW0fD4QfaumqvB9VWTMtwafM1WGdDeeH7&amp;#43;hTrbljyrbUYurbtV9rbvVxFW/HYLOjz/4P5xyX21e1lF&amp;#43;xRZx3lNmtU&amp;#43;GXkOYU06ScEQQupOoYpGeyp43dFpK0pdNVhOsbX0KoTvNEBfI3BIgrRg50g6Pwh/2/cvbGayF60oCX5tW/qxxHxQMkNEwNtTsKQ

rLowaKVBlV6j/njc5QEk5IKZz3uxo2koDIiRukfB6wR3xq2JT3RxJTpoephBK6M1ifqpgMgVjAg1IQA&amp;#43;gPQBJALBuUd2vXClymz4lr0ZLw/&amp;#43;u/tYSOgN0OeGT&amp;#43;3uSd0gfri0xOr60AeJDZJoFOKV3i4ylMK9PpQWd/ge9p9huP4VuftfjueIFUaaTVyMuOM9qeHwMWTl2w1uv2PwwROsvmg3Tq9F6saoFloaiFUV2Y6QSVAThAcOqKFbcSHexRhK

FGr6cClIPhbNTDdSvEdWuO5zlydMa6QuQhNAohb939vdN0xfRa3YR4B114dHh8B2gJjlyAWRKsYJKp8j2uMDwe2fxW/UfpBL&amp;#43;u/wzJfHu3JfBz2z9FL6OeO910exVXYe3w1N7RTRyfwt3W4nx&amp;#43;7DHTsueXtNdkFELTPxBwQf363cpry6lugj4sfCN43mMSxPnRUwYP6/GUsVT51madSruI3DRo5SL61VCEwXvIG6JCrZnaotqmtESYBgU9PpQDxM

kxPEI&amp;#43;h1OBAPr4bqK7R6Y5TiEwWYTw/v&amp;#43;mgdnxKUMATgH0A7SA&amp;#43;VRoEIBlFpUT&amp;#43;nGMAMwAFzYRZu1nYzeXaROAfaT/17qJwwO2r8pfAt6pfcl7cXzzQUvVQib1x1WE8J50ApMFhlHDL7tPpj0luJKJzuidRIGFr3uef7XTe8e9CXuZ0zfrVgFGz4qavBDjEX7W4oP3LadPEKzZaJl26MfVx3mIoycfwvX4w/EP8MBSbqKo&amp;#43;KMjf7PrY3A9yEThN0

Inkgs9uD8XwpWDZPA3B2HNlaVYRcY8K3GIqPjOkvx51mKxZuYuwd&amp;#43;iRgDxKpQQdDgRtp0F09RCD6SK&amp;#43;YgcIxzVOJnOvcC0g61Ry8plpji3q68JRuSmOWxSqaiFdXq111snvaIxMWK6EJA1o0oonoOuNMAHtw7SA&amp;#43;5MADciEAEjAoALY3IQMnmST/DOyTxWma9zJWUZx&amp;#43;s&amp;#43;z8bXtPa3OWr2lzGT4lnmT8ge1L6Y75LU4eEdTt9ltfN6Rj3KaClPFY

inOufpr4XxcN1Keg68EeV5/Kfjeaablrw5L2l4afNr10vcc7sfR87lvvXWoPWUeg3PW9dOmm2bRvaI4zXU7enXAcQQyKIuwoIoQQ9Ys5tCrhkGF6ZsONOMmkMxefr6kg417aO6rxhFoQVJPORDU0&amp;#43;nWxN5DOFARX5btogspFWdPsuCpJS9u4ah8lPPr3pvmWzga6py70/gPoABgC3aoADZMTgAeMHoB0gfSM7m5oRiAYb5GOJ5P1O5qfrXUtQ1fm

5wOevN/Seq70pfhOypfPy5jer6wzbiZwyO1hnoFJONIah93MDjyEBjoMj8Wpj7pLdZTxkhT3NfpT1Xnpx6U3rz&amp;#43;EeGlorvfRTZejGlbKdr&amp;#43;6lktu1xCVK&amp;#43;hCvFBE80vGaFxN/2dQiRgM5A5xzxGQm22TZoDnulwnt6A&amp;#43;sr6O00BOJT9ALGyvED6Qy1Q9Br13jB1QHLhIBoQB07ys1HO1tUnJ20y6ryXeHu4Q&amp;#43;mr8Q&amp;#43;FL6Q/Ub&amp;#43;Q/0b5Q/WT7DyMI

FZ67PNsQqtYa3FUeLRrzRWO29WzvJ93FRiDw5XNO0PfCnWRulr&amp;#43;HXSNwLf5d4d6ybOaqZ9dLOoq1g2M6yEc3plSZMMBJmhsK8PSrBgQ3UyTgsoC3BaoU7Ejr82bD05a5f&amp;#43;IKFloOtBZkrhhQ58n2vTy5PZOibnHR/fuwH9AGDSpuW5oQiysYHcgc08A0/gFyAw3vpgMwLgBJAA9AaH9XPe5hPDOz242lg7B1S7ykvoDwq3Cd20fNCwge7qrXeMb6

E/pZR8A8x5xxeVIWOEmyXGB8DnwVKJuudpyKf552KfAC2Ze4qcvukK70LsnqeyMY4/OMe0Lzr/aI&amp;#43;wzry4vK9PnOxyoP4i/X492TVu4Smi/E4VrTQW7j3zA&amp;#43;vvuuwzi2SGqUy8rqO6TBgYUFlNMKoLNaaoTeJKAp4xLREP5v8y19R&amp;#43;Mogwg4hE6dPTpvVUJRRarEUa6wHQhNN2LUvM61blEYTjYnZVSzU4EJGn8PbzD9MPoeM7XXBA6r&amp;#43;HSQTk4G

2y4MlUQmDS73nfWkcpKSp8sZ4N06MiN9EMRpCHVPHxUTMqXNiEVCXQ1xDssGGFDQ5s1CPr3fty4vGL2euv0//BY7115ugM4Bw49twEACH0UT9KCkgJoACT9aIu5i4/cH33awD0Yfa2yYeD62YfvN8Oexjpc&amp;#43;Oj9l2KH6J2ur6SnNAClBjXb/9P/dE&amp;#43;Rr4Uu2SN8q8D2TeuHwZaiQrB0&amp;#43;H4PfabyHX/69k&amp;#43;H5&amp;#43;vPo64hWsn/EqKNzLuV25rb239I/

y0ib1W4OFwbWfA8yvLnsgagUWSmpo/&amp;#43;ODlFKSjjDDOvyRZaGdBzWdwgDH5z3zJ3whzM7X2JD&amp;#43;wnBQSkEKzy70BzmXuagBaQ39iztmgKZhaQEDADQOu0G5rhPc7yx241NUaKT7xbtoYGYG9zG&amp;#43;8dyc2Cdz5uRz/Afk3&amp;#43;mOJz5mO&amp;#43;52Kvy8bsAbTrss1SvN73ixtO5JPT4XWj3fsNws8AX557g/Tf2nW2A2XW8I/DTaT0qbuW3MPzwTX7fd7XW95X8

P82/sjILehPe3Goj6e2M6zpQTzFYVnGK0Xy0nnI2EayQg0szWT&amp;#43;EIQNqSVH9QhWNI0uO4petyZ2PbGbymngrpoIAODEJPIOP5F4uxIx8lbhRpKrPIZ97083vZDlwikC8lpN4Jl1ZeA8FyEuWnOzgRbOPuVpkxHek0wuHF0KmmuvJgAi27M0/gK0VwgAw47SIQAjgLdIGhmMGw31g&amp;#43;78BdHt615gX8vImeOyNPm97yvW9ymOv32Ofu57&amp;#43;/e56KuaR

/BsN2vEjZ&amp;#43;bEM8s8WOhB2RQaETB/J91nt4P2CXjiZPfd27JP0nRqfMSxjjcP9/P3ji&amp;#43;6xbzdOUcOVBEkDN3AIgnx05BsJsCOZFUHY6fK0sLVy2pWkcTkuxwrAYw534Wd1VGpwkioSE0TTpv131He7WIuhBoTsidgAiJ9MGVsQl6u0EAPEA4WYNU7kAT8TMPc3K9xSs4NRzAfKSRZOO79iCH/2ffH80f/H2fLlW1kubnyE/034nnM38See2xGW9b1

nJZV4Te8lL&amp;#43;7tnhyOjL&amp;#43;TfvFR&amp;#43;g4NZW&amp;#43;8mxk/IsWf75TyiRGdf46KXGjEgG3fOO36ef9Jzk8UG5bLJZ1D/0Szk/7&amp;#43;5EewW9asoW9rJKUWPfQkxZf574hWwX1lv753ufE4fPYEQ5LOtaW/hsoW5eEWwnsIgZtAI8vdfG9sKKP&amp;#43;LqJwqlBN46NrFwkDp1TjPaHpQrbQMcLeZ/VXORYHQyYRehqVjhHBylP68t7UTqn2vnEcWmsAIQunF9QkHyQ7cQ6

EaoOwqgg3riQFKXncIwwstDLoxzxPnJ0CJVw4p8bEKdFG5WD6xo0&amp;#43;FhpomPW4laOFY3aEoSokGJvraORQjhwjs63BWGF3wCWZSJlZOCCXynxRdMLls&amp;#43;jbF6&amp;#43;iKzb/yZsNrYx/Lco8MORrAuKpQQugeKSF6ILn7PbcOhE/DQin11CL0VIFN&amp;#43;OSGMDypEQY7Q2ktRGT15HfZm3axokKN&amp;#43;Cma1E&amp;#43;gPYLYuJ0AWwJ0BZiyYA4ADsBJAGEAVfVsWFHZ1s

ZmPDmSLDGOvH7r6y7yP6/H5Xejv9XfcZ6d&amp;#43;03z0fur2iwMoDN6aoOkgvmmE9ZDe3BtYqy/hT8BGpr9hv5aAEf0c2luBH5vOTp8zfst8T2IjxvPLTci&amp;#43;Sy2LuMOGqfN21f&amp;#43;2yi&amp;#43;R7B8KOoIE/95xScpz2Wi&amp;#43;35&amp;#43;R&amp;#43;2t2X3raPQRQ3S61TaGQFKxhABDRRJOQTqSOgIRQvJ3pwCkhacC8YK5dsQk7lKOY5sgAHL5dr4TMQHidgqiKQWPdDsDp8KEkt

OGCgSotiKDoIN8ln&amp;#43;Ck6RRFwoVVUVvgpuRZoN20pEiJKYRFBSCCKPTh5DBwwCWI6zGXWEXomqXvMBUxqKBBHD51xw2E5CtxZS2/HIx8XXxr9GZBL1y68O5A&amp;#43;gCxmaRVFEHwAdoBb6XXBIwBQtVxWH/d49T79MbBeLUOfIe1ZWxNreS8R/z3NMf9rD2FXeftqR2g3BY4fIHMdHtI9KF5PeTt1OAwldDc0m0w3X59hbS0KdTt5jyrfGU9Fr24YfVcz

V0nMWJ0Bx1r9Xo14wUirW/0zT1p7JCkjyGfhCEYJMxFLRaB9L2vQM10kwwvEY50HjAc4VJAKowDoJ59fGVLPNct8HGB3Q&amp;#43;NKBHkhUgBugCtKaSknIG6AK6QsYA&amp;#43;kKZop/mIHDrYLgw5gcdUSLGpPWMhn32SXUw8333MPVq9Av3avVN9cuyllW5tUoHFWBB5vDiXPLidnq1zKQzhi3x&amp;#43;fTf9J91YFVL84Ky65VHttVzv7OK4JH2vnDL8MlWP/auEy

YyCAvYC0XwU8UntqczlHJ89mpBFiGFQccEliMvgqTHdFBVp1SnQiWvIczyf4Ul8vDmLaWcl0vVb2Mvg8rQ2EJ/1bAzF7ZIgv7is2GYDHbn8KEsoO3mjQDqRnDiUYFZc7q212Cr4FKE01Kr5OODWgRWMTliykOJBLrWCgKJBXIHGQDp1QqlH3FxgT0w1cPICPYzP2CG0qgC7kEV1xnHtMJGBSACMAHXQeABnSDgAW7Xj1cN88eEx3Oq9j7WOfLoDn

u3jfXoC/N36A4J9J/3J3ew9bICXtKUhKL3vrarU8CFb4Ca8553mAsU9HKiWA/vVkP0vnVt9GeSctIwMTvUI/XH9gXxn1Uz46ty/YDGg9Bi8HQbJqtwqdSP07zxhfawdHzxmXVpoTCl1xRxpMmRlKcqBF/DSGPxB3Hy3eC9AGYgHeM0I0CFUIUot6Lj0Qbg9vAk80bcdM8hCgQLgjoFxUIUgCrh&amp;#43;tHjRuunsDATQFywi4J0JLqDSYNKQD7z9DMW41

ZUIID8UlVAtodhZAC1ndFQI/sha6EBFGYkCqZBwzQ2nWewkqfXC0JHYU7WcXbGVDPz3je1gFmxd6dTAhAEkACgBmgCxgQk9aQD96GF4kgFMwGMIOAB9ILBJ2QNIHLoo3P1g6TD5Eby9LWA9LDwKNH99TThZPc79wm0zfSOMm7yAhIUgooFFSTY5wPzJ4KQhL4SQhBJ8BbQa5ZVcASVNxKm9ZBz5Tbc8uuS9dPm8uCkC9NHtxlyB/EptFziJaOSoO

CUw/blpMyRDGJ/85lCqVLt9GD13THKRziES0LP8irmvEAqQ6pHC6QbcG&amp;#43;FSDSaBr&amp;#43;XU0OJBNYkcKKs1URgafWSgWSBd/W4D6HhWJZHppOBKaITRTg2kQHstjhFiGZgClX31sYq1F6jNCQOliDGH4Q1R45nt&amp;#43;V/1RAMyPUG1941yvCFJ3MyVJWlcRvHaAOAAEEjqGXygG7VGAeoDVv2UufZsa6lr3BDUF5CSXSA8j5W6AgUCAnz6AtG8J/0GAojVh

gI0jPcCZ3UPzUEEnFWo1Ovo&amp;#43;ZCS/MU9fyVVA8K51gM8HFpddVxkDZ1tVBx1AyF98Q11AzGNUP1y/FdkV01F3Jy8UOEA4ScxAOHf0G/93I1nvMSB1XngjPvMqblNSbF9YziZDYr8NUxHTbfhlESTnEIx6SHRBElt9EGL9Ax8WSFZ7Bhcz0DpBV4CDDl84ejEmHnfOfqlykzmXHF0LGBNoff4taDJUAzZnCX3qFFRGEVVYAxgFpHqgo2heECIAsl1o

L2ZhNj1zJ2sqLmIdUV9mehcoF172ZmEoZV5/U2cYw0M4MQwGuCySRK9mYWf4X1w1biIMPtJdt0fMBJhZnkXcfEEqDB8qY511XFGg9LgLnW8CTTRTVEgwXccKOX23e95ZUTM0eL5OOEfhePJAZCE0Z08WEUdfNsDP0xr9CfxJAIhSG/Y&amp;#43;gFMRC0g&amp;#43;nGUAOUlsAA5bUMALkVolJwVzrnkgs0QQszkrVg1vMn7/LlcoDzjfEh9R/zIfYPtTAKpHKDdh

AR4AAAkClzUoXFQ411KXHb9WRzoIZKQ3fQozNPs3v24fPmR7wIbHP30Mt01XevNXwLbHfJ8v7S2PMUdQWSHHS/9sfwCLRF8HwBF3W/8BYOcvae90aFNXYn9ooMomXU9rQJEfcCDTj38CSyAlTEkIU4gdZ1Z8VZ4sI0h&amp;#43;aWgf7jnIFLQi5GSKMOQ9OF&amp;#43;HRDEJYjBWU9URhC2HFJkzIjWWVpBpbk0oaxc7PDygDNZ2MAOWTWppkCT7cKx0wKZid/kB

kEb4M75a9iaQAQ9iCAy&amp;#43;Z/U2rQ1HRs55c3HESC9JxD/4QQ9QWCpgszYh1DJA5lspujBZJrYDQBGcAmBQwFGqWkA/ah3GTAB9MAboI8EO/xU9SNUVrBfpYftUZ0HtJcDlK3GnGid2jyC/IVcQvxFXcwD8YJzjKnd4NxSkEAUhT2sdJ6tZyDioNzge8UmPWmDS3wddNhYcm08A779q332BGfUiPz8TdUDN02hfeKCV4K/waJUVaXQTFgodj3I3Ej8O

Cw0nH&amp;#43;dwNCVTW&amp;#43;4&amp;#43;Z3gVDL8mnR8gmyxISnJjTmCOGDEfKEckf3B/aSd7z2fgsID8SwiAn/8WkCKQUlRJ6RePccMyVClzO68YinlzJXNLEAnJTSUuSg2EOp00ijDoHVFPhCi4Qv1zEG74STRfdzGSHXpQJyNFVTpF2EnkEYQ3j3woQ8RiYTCsWLgo02ZhPECqcD3EcfgQC1rlMSY9kkdnJk4iE134eLwsoHMYPEE6kjpIaUJeFAS&amp;#43;Rh8UrDYwFrhC

vGuDYgDktmH4NqRqPF6/Vl9nWTM8Uwpv&amp;#43;Wc3Z5Un80P4U4RkukJdKhEccCluUIIQ5l6QVuAqXTGfO/dMrzEAiu0KQNYvNgAtn1pAbAAFmiGAC0h6InIlLGA4AGUAEFNUVhXrUS8y202IRLVXSyVVJGCGRA6A1SD0tXUgjGCjAKxgk78cYNmneu97nwZXWh9OTxSUenRBETODBJsTwInUXYRMHVJvOYDjL05TYDACwBsgiBVleU2PFe8MOHp6dm8C

v3P/UBtEK1RfIXdzARAbPoU920FHZrtTTzKfXrMDhCk4OnRxTzsCWRlRdVqtNWZNqSKqCIYl8VkoFBFSVAH4HSg7DG2EXTQ/EBOgcr9pEirEKzwGG2hGMYQDe3WgdkhpZCZ7S60eCBsKOqAhTE6kS6g1NBkoRQkusRHEVpBFyDnESvklh0iQoitEoBXfAz9voLXLbTIzH1XBBbFmgH0weatugAqgTphIQHa0GABdwMcQzG1sXg2/WvcP1nsUOuDG

2z5XRuCk32bgzo8BgLJ3IYCu0x4APRNDIIbFQG0ecV5PM4p0GXYDUchEkI3/ZJCp02oxRmDSD2Zg2U8&amp;#43;CnHvDUC7LyulY0CYrha3bSd6NwjrfHNUcSPgylCz/w2A41dRlz3gtrxye2OA&amp;#43;0CIIIVHKQgJpmPqbwZYmGv6F5IGPQNvTq4bhHkyaaBS2no0ML50VGjoWo9sKED&amp;#43;ZUMb0A00W&amp;#43;pQunuUJFQ6Py1oGUhdDEXYM2huoynLBcRGMWSPXydG

zXxAuXUJKD7EbKIskDOgXXtjlyU1VOCM50XQQ7M0ZiOAEU5GpwxPNvBT/CMAB6AtnxOAB6BQwBMwc64mgNLMNldi710Agkd9AOavKtE/EMCfbGDW4LMAvGDfwR4AclMu4OcPdKZcVAOXXS85gWWgKThnh2&amp;#43;fVFC6YIMtbkpp9wjJea9vALpvbrVBYJ3g9dkDj3PgU1YZeGvdRjpgiwP0TjoWUKVgz005Z0lUEZIGSn4IDnsDtg0gHHB/x3dnJRgP

Uw8BMhNO3BmSEBg4DWSnBd8V4jtoCkF0nCtQ7qoXwAKA8SlOgHdzKoBj3yqANdIkgFIARgAf9wolHfIKAE2LR0ty4PW/XMBa9zvLULNdv0H/VYMDv0MAzV1/EKZPQJDbDyn/DN8aiTvOWDB5QKwPFKY6CD5kI7dR4JcApUDhbS78Jc0vv3SfWeD6/GKdUtCdTxEfRH9Cnx5nM4CHQLgMMFYJkEwWLkh0w3pqb9pMCzwIGAUjEGUoXKDd0EQNYARu

qVDkSeheVH6/Bi89G2MfT&amp;#43;ofsC7ApRRVABKBOxE7SE2AWnYt8ghvb1RJAFD6cmBzrlUdDmAxlWrghcDrdENrLxCEx3Rgw78w0K0goJ8dILBQvSCIUIcQsJD&amp;#43;rygwZZZXa1iQ9uwxrRSaF78S33q1HNCqknSQk/1LmQV3MDCp9Ay/PVchd2kPQbkjVwPgg1Z9MKnZY/9aszxQt8DNgOJQh9lEoKY3TLYBtGToPNxXpggBVXFlGHZ6GnBOJlMCeC9F

hSoIaINBBXYXXAt5KFkoJKRCvF4WEvlxaHxYd2gqpDxXEaAlKHDAoW5DDjF7BxBUrylsPWhPnxE0bKpBFG6EeOkb0wFKcflaVDlYCKUfgNZLYLgv0F3MBNNi/3bA8asfsG3fJRRO&amp;#43;z&amp;#43;AdGBsAGVhSD5AEGwAPoBi0yEAXyh9MG0PHZ9FrC78RLUcHzaAyFgz0JOfQTCr0In9G9Ca7zvQzcCH0Iu/Y648x2ApQ25kN0NbRrhE6SN/Dh8x4LUwh11M

5E/rRxMmYOP9HFCvwDsgr1YEqQF3cdl9MKXZJm8Rx2yQs6cB8xPCZXcHMMJLEtxEvUeg2jBdChPEbSEEUTk6LaA8MEHUVs0sHiZCcLQKoAkIaUClVECvSTQeJkHDShEpnRc4GBx6wR3MKRJDhEXIWBC3zFKqHjcl8AEQH9t8V0BZJNtP6kuQ1i9ugBWrRbp6ACKOVoA/3htMPGAHkE0WGAABgCEAOR1ZIPzuRGdJAWRnDz9pWz&amp;#43;Q/jt/P35XJuDh

QLEw7o8xQOn/TN9Qc3jQ5u8po3VaWL8a&amp;#43;hQwYrCUUPHbX9DNvT7EXnZAMLXVQtDub3Zgn&amp;#43;sF4MLddt96UJ1w7EM14KMaOM5qkNlnZItCS2ykBI5ywVdxDRhzVCWyJShcCCAAxVheJlz4RzUZJjxwEUJhVFu&amp;#43;BNsasPOQveMiOwawrrwBvAfcBBJOgDgABO4JvB6iW/YG7QJWQmDmcNcyWDpOMPiXBG9xsL5Aiu9Q0OvQ8NCAkMjQ3GDgtzCfHO9r

vyWnYpNQVgerGLdU0KugpZDLIL/Qq49NMJOw&amp;#43;m8/vwhrLHpz9EyQ&amp;#43;H8fAI30PmkOhVtAreDJl10wh&amp;#43;CoMK5nfgkJYK1AmFtcQ3Cg9yRul2xcLdM8X2MnKfDDbzfReq1mcWjPT745xA4oSdxJyXlIU40qjVzrRkhpN2AwQ4Q7qRRlBU06CA9CWahiVGAYX1wAAVURG2cITXkMBJgVYPj&amp;#43;PzYEvgJYNUIW5VlCYZUyrjoQ8KpNkhCsVsQVY3ycf0MP

jT8aIP9EzzJUFI9ImE7cXhQNtUblB95nGWQpFTQP/l0YdK8nX1IwvRC94zrkcSlumAGAFjDZQRmaZv9aLWbPegA5gAqGQg0WvRkLWJdxIwSXTawqB28/FucDALTw6bCM8NvQrPCgkKofMJ9kd2kw3tsV3Dj3GeIyAhSRfLEaVAVAzh9dsPQ0HiE6xxIPbMsjp0hLTvCld1Zg78hHIPHeY9tcqVvg3eC6UKBfHL8MOEA4LT4TUhgw1lC0CCagBQhO

fC6gF/NBozqdVpUHLmQw9902PyagtXdo53bld5RSfHLDTDDqKAv4dvAFajsqEFgPXCjmESgzxGLGTaAbzHDoHkgPhASgIwkrshpLYZBjGDMrakxcAJnQx/d2vEowtGZ5MXpw9oALSAMRBRZOgFMwLGA/gBpGCG9ahha9VxF1ZiWcb7UucLSXEkcUbxEwiNCNwLrvZgj7n3uLNgiIy1bNO5Q3DwSbWQ13aEM4b9oK8MVwzMDq8Jbwq2YL7Tl3azDe

byEfclCISyfgroifcjstZ/B93Wf/c89UyReBQKsN03ECDyMRGFslN&amp;#43;DMGxNwmntP4JjcXSADNkVcQDFhswnYSnx8WHt&amp;#43;SP4yYRKgSGwlN3oxRkpCMF2gJi566Vb5XvwuD16SZ24HXA3pBs0HECYwV5VXUV00E6YqCHC4WbA9cz8MTQwwumC4SgJcrTJKU8wBNwU0XTYJ3DOydVoR4PCaKSYfCUD/GKURkQHuHYJDGAPKb3C9sw9jOwhYiIhSD5AY

AAegRCQxwL6iQN8HoC1QD/FMACxgW0wJO2vffCdFrFOXb0p5g30pPaoIDz0A8u8aCN3NdPDSiMzw8ojbny3A6sUeACvffPDmbWR6Zkg/BUerGvpdhlz0Noing10ofu9d/wLQ/f8CkK1wspEvIM3ncEVD4NqbNMl3Ww1wv/AaGXfnbHEAgKJzE0CpNRewyID2UL9kBINqrkqDfOQExl5UZLYSl3poHihsQllUSNNAvAeVJTISoFZxeclomSNFbjh7

qW4IKXN6kDtvDuUacCOKRPI6SH5Qg74O0SU6JJAcDDSsGNwcswIMCod3kiVcRSxcPQyiei9Zw2dfHiDuHXsoEz8IUk0Ad2BJgyqANF4MwBzTN5AuQDgALGAHkGdIBNFe/UVOcZFuMNGw1I1k8NjfHxChMM5IoUDtILmwioi7n2GAogdoULTzUpxycGc3XykHv3e0R2h&amp;#43;BjlwumcFcJlIyKVOiL3PE1VsvxvUCrc7/35vZe9yt346FyNq/DK3LL9N

JwvPZQj6t07jeWDMK1NIn/8Sv3sqMTQFDBB9UJhjl2MFGX8PfznIQHDZDATpV&amp;#43;wOFHgxFs1cGHo0EzwG3H8BTak&amp;#43;HndoXkht8WYVQfZ4EIvEFp05oDYIKDAelWqQGaQOd0&amp;#43;mLigppAliPWJD9yYWQEVUiT56DLwbzH3xR5MFhVqUMRDIhjOQzEi04PhPF/cVQDGATAAqJR2AdoBsADEVNAZXgB2APGBKoGYASDM1QQ5XBPCehkaPVsjX335A3xDO

yL5w7sjGCPvQoXDH0Ic3MXCgIUEIPcpbPSrMN59m4H40PVx&amp;#43;CJ2wnHVdZRY0OY88Ny8AxUisfxrwtdsbMKXg0EgonFNSAH8am1YYYyi4fy//D&amp;#43;CrAwBlEZJblHiQUSY&amp;#43;Dwc2SDB4C3EyaZBCpCi8a4iWEFNxJjQeEDv5fklpxDrSLQhcpyOvHAtNCCuiTKsrRiiIzk4wRVtQ/3Ug40xgVoAuQFL&amp;#43;TAAkwk5bUop7IDmAB5AoUPeQtX12KNzAELN3

GzZNbii0YPbIqbCLaxmw8f8eyN5IhbDtwIEjEdUWFCluPLNZKNu4K/pnGFmArNDx4KEIrQoFyOydU1dupj8gzH8lB2RIWEp5J1xjfJCetSK/SfCFxxRlV9AcORS&amp;#43;NlRnllxwWwMwA2cQzqlO&amp;#43;BmwKVQFiXlufW8nClcZdmt81ysNAAVA7kgo825nEB8GC/FuIMkPa1CCZUgfJRQ7kFNLDugo9QREPoArGyDFTABCAEwAboB/bEIARf0NaymYRsjm

gKrbJDUOcJ8wfEcqCKIfS9DaCNKo&amp;#43;gjZsKEo&amp;#43;bCRKMWw&amp;#43;2saiILw&amp;#43;X9Y0HVmKsw4vzeIQl9ry0vAquM13RzQ7DsuqOcrIiZVgL0o091tV0ThZUjcanVI5YijJ0mo6fDUhi04IDI&amp;#43;DxAwI2DmSHWgQK9EyzwFe0IUtAN/TqRi3Dv5SLhM6XOojd8y/0NIf3CIUhD1PmB4gGkhdTAAiAkdLrCacOA&amp;#43;H6kFpxpIplcJ6DOjPHh5wObIwpdCiJb3Yoi4

Dy7I0TCKqLO/Kqj&amp;#43;SLexApcRBRLcIa8tjnWZVVgV/zFI7GifaxvAiZ44kDUoge8Z4LVwueDT/3UHFFoOZ3rfREs8f2cgnLd4Kwv/DVcKULyQslDrL0NtcyiakNp7C8iKnC7Q5zoNqLR9MfJt8V1uB0j6EQ3KBswV3EhAzak5hG&amp;#43;WenR3&amp;#43;iLaLeFkORuyJtck0k4IEDEi0gJAhqp/Cn40GaCnPWZhY5dgqmNiRRhMyJ&amp;#43;TbMiLqNnQ&amp;#43;yhCgJd6DiIM

wHFhKoB0R3NKPGB/1THAhF44AC6AMSiVaNR3SkRX8g2/GRN3NxLgHWi/Pz1o1cDTfXonEUDdIPntYYDtDyFIl&amp;#43;VgoCe&amp;#43;eJsR1EaomwRO/BlvbbCf0LRQv9DLGA8A9Sj3aM0o58CpRXZnRyMN7BtXBfMxaQK3RWCbIGAwA605xAgwDK0av3doVmoWwW1cL3dAqg0gN4DLskqub35jWQqDRKo8z2YoF05WaF5oe855aH9&amp;#43;LNYiKLGraAN/4Gf3b2Mp

5XhyZQB1uGsAAuJZHTIAMoE7SGUAMmY1QXe1XKjOKLkTZeiYD2RvfWiBKMNomGjeyL5IyxUeABW/cSiSuTVWdQheTxPorooEfRlIRSjL6OzQvbD4tDzQ6KkFSPkHMK5FCK7HBlCVSI8tDUjCkIitbsc6IAf/ZrdElS/okr8pkAyiZaYzaGUYVkJSSRGRNY4NXx31cZAGHTz2KSgll1OMDrEqMDbac1wOMlgvXwEISM&amp;#43;gqv0sGNHaERAK/2XDDdIk

YFpAaxF0QDwEO0hVMH7AgYAeAANASiUzEXvjd7lSCMLRa3w2VUoI&amp;#43;McfP1Ofd98E3wuaKGjyqLYYyqi4aOqorVtByIMTVP1PsjR5QRjbWhcYQQxpSKAVRbsRCLSfVXCH6ONI8K5zeSZvZUioTH1AkH8orU8rZvDsai0IxtC6aMoIJdgEihn8KhVFhRK8O4wizwDaIrxVYM9&amp;#43;QjQUmkyAjLwaFmLlXtpu61gLAGx05HLrTBiRa26qfmF8yI3yPugA

Gk6AcvdugBQHD/FA&amp;#43;mVBUMAEAEkAC0g/gHvjZBo8eHiXReizil5AtsjeKI7IugiuSIYInkjjaNyY/kju2zC3dgjyoELydm1rHVjLUY9ppCWELGiaYLEY9qiASW7pdxFJT3lI/h9ZGPdlT81lgLCVBm5x3nRIOqZPzRYOAslmdTrw2TxSag5cWtDISBpDTeDlGMK/ag9FiMpYtFjhby2vNHFjcPcvT4FMNGTNSLoUmlvFDqAA6GsQfghxYn5JUghg

mEnQ5Nxu&amp;#43;HJwcs4Qmi/6fEFzWkqsYUNWkCc4btxw8nLWU5CvDgatY45YdjYdBd9wMAUoJ5IGYMZLVXNQQTdcFmRaSEOSWFj&amp;#43;nwS&amp;#43;OjBOPRYIL517GEYMOAxUDCliNpBEHBgNIOVr1Ta&amp;#43;QKobZyeiD9B2lUGTGUoaKTMNKGUb6gGg8G5GFHU4dcRV3wG/DI9O6M/qGO9xKSRgPGAFsQegfTBHMwzAZaEbuXIlFatkLGYAaoiBsPaMKihu/1vLd0tC

qLUgl5iSqPObYwDxz0&amp;#43;Y0UDwUPFA6ki96LK1STQsFm0hHIV6aT8vUDpKmO8VbN1b6LdooDCPaLknG5lDfg&amp;#43;2avwiXBJQr2jVCM9lcccyP0EfOJNFGKpzBtDxbypUeJAP&amp;#43;EaggQxhaFEoYRBAoCi4JxgTJwCMafhO3H8w2fx/LiVfahcKviEQKShgHDEMa497Omdok4c4GPwQ&amp;#43;145hC0QVmJY9wBUB5VcvDaxb0CEsLKsf88CpEAIyghaKADoSqpC

MzW3RJEt&amp;#43;AtRJVxm5XcYglcCcP6aCjDxKWhSZQABC2olSG9SikEvfQBVMDgAVoBsASxgKejM2JN8Ww4VrB7/FohPHy8/ZJjqCJDQjki3mINosoi27nLYiTDxQMK7Apiss1EIPepbzDWw/N8bfyIbHHkHaIEnRLdW2MbaV2iEWI0opFigX1rfJF9L4OP/E35aWNMHdSckS3MHMEpIW2pxM8i33Q6gO5UpEBUQFJwu3HmFOFgqLgdfKlQdoLC6JOcc

zTKkfrNotHysXepoqlpUUihRkBqgMisQg3opPVont1GuTqBKYMGdH&amp;#43;DpNEGdXnFrDD4oBAivoOIo6AMfsB8Yw&amp;#43;MDQFeo4gA8YEREUq9lAGoNF8AYAE2AGk1wgDjQ6eixL0fAKuCOYCxZKS9a4PzY7xDC2Iho4tiyqJMA7JivmIrY4XCzTFI1WrsA4IbYlh8aSURBFtiVKIcVAmjo4VHFMWkqaMgw7piFbTMo7yCwf39oxt9eGBWPNCtX4Pa4u70h

d10GHpiZ2MoICB024B33FOg0jjcYKecBumEQTZUrUQWozqB5OBKTBLg2&amp;#43;DVVe48TOOSaKpJZOQADZyj0MINYbyprvlVYWLh9XAp4XYQNGCb4WT9jaDz5DAxyzhjbJxgK6LgcJRBXKncQIa4Q2JIwjzscyPEAz14SJRaiJIA7SHK2fxic4mORO5AsYGIACkZhgBjwrKiVPTlDXDiAaJAOBeQWSKDQtkiSOJ0dSGj3mOhostit6LM9CFDI&amp;#43;2rYhHVs

oykZaJDj6Jr6bPhguGMjSFjKxy5HFJDrQhq4gVNLV2kI0TVe2LknAdjeMyqRJz5o6NWIxP1/fhEoJvlSmlfsfpAgfSi4QGUgVX6RS4iXf3fQYUIs6Cy4M3UcHVs8EBFiTggwcFRZqBsZYFVPhAioxGZ2vHdfCFJSAB/xI4BvbCxgFEVOsI0wZwAkcnGAO0gl2nWhHylOMIRglvhbPTwkEaAtIAYYs58P30TfMDdBKIx48TDt6IhQlfseGIbFD4D5

VlkkDw8UrXL4Fb0zWwp4pJ90UKBWGnjYS2v7JjMbeOKEOPjBuIvIvcpCklDSdyjXXFP6NWhBpD1iNXj6OBqEYqx&amp;#43;II3yA0AFPU0wZgByjGL&amp;#43;MUEuQBKKMmVmhgQADS8GgP4iABwVrBaAi3QX42MPToDnmNTw0jjUePI47kjKOMx44MsCuM4HEmcssw1aWsQhj0o1Dw9VqQvzLnYOOMFtLjiVKNdBWdN80MRY8QiG32VIpciJ9TX3WnN8XwT2W2hk

uFk/SvgwwNMcXURxuL2EBik26NNzMNjhaIhgP0U&amp;#43;HVcIFsAtulpABEQKGNZAt6R9MFO5SQAdgC7mQgdc0VnA9yAbFBJFNLiBMOKozLiMl2y40ti&amp;#43;&amp;#43;I94rHjxQLpHRHka2N34cVg8o1/DBTD5EhILTHDKuJzQgqRUnw07OpiBOJ5gg0CwWy34qnsd&amp;#43;KZY4E000KWgFRBtEIyvQb9S/wO5W/juE1I7eIBCYAYlfQBTMAxPGAAhgCVrTQABL1MwBwVs

b1jwyoEmOJWsTb9z6Dz4tlV7eNs9J5ieKM74lHisuMyYnLj3eMFw/LjH0Ph5XHigISS0OSY0eQHg5uBVqPdoC8DyeMSfUU8/0O2&amp;#43;KPjRPDj4g&amp;#43;AE&amp;#43;OnYm6chaKG/N8xVNxqEcSkuQHL3HcsjABu5SzIHM1O7KTEogBbAB5Be9wEE2c4QrG7/Nz9WmTwfL9pCOPInYjjh/1AEtvd5BIgEq0EqOM948UCWJz73cJg7lncfDzFXi22OINIp4WfrAwSr

wKrHS1sxyV44mfc9/zwEhlEQwWLQjmDPzTOwwmM7LXDGCmjdByhfevDSaPuw4OjjMJiLRfcR8KCTelio6wCdMfDW8KF3XGpok2JYloSbQPa4tnjBiJX3LysCt3a40WkO4wAQCcUnBy6YufNwq2/gP8DwDGECIrc1BwygRdNq4X/0az4f9Gs&amp;#43;e/R7ZRpcZ8gf9D2E9CBOhPrQep5LhOMosuZ6Q1uEqwSz23KfXYRlnjeUWBddnky4AEZmMGSPfMEZ

qRiMOzgan1moXxkeBWIeW1kY3ROTT4RSoP95FRBVJE0IZPI0CGQyILh2CAYpWIZx8iMjD6FiqwuueXNxoHtI&amp;#43;3VWAJ6TWNIMuDd1dOiGqgHEIWpGLgXETwIovgcaZRhkIPIjVVRErFM2fn8KSnZMLEFIMDoVFVEpOkXLAWM&amp;#43;fDbZcfh7Kk3wxnwhcxc4WNJp10dZaYEsFyaScFQUnBsYYVR/aFJEiyAPYirGetJdyitRJREDDjW4gI5XDCtxHDBv

8LvJJ75BDHEQHCJ8nCAwDnMquABUa48/y0p8HAg51w8YRzocxiW3NKRgBzUOKL5lhWYrGUte33teYTI2kHFMPdBH&amp;#43;SgxZpVluOmzOdj6&amp;#43;BqkYHZrVCKxfAV6mg9oIzgiDDk0Kl97&amp;#43;m&amp;#43;WPRi9VDYob&amp;#43;xczxcPVkhgSRRwaXIo/lWQgihxhCS0GDByEMWkW54ZtTaSNJh7YO6LUOY7jWmQDtYU2n5IacQGvgFPHPj&amp;#43;oRxNP6DdmPwAGoATgH0AFHJf

XmcAJGBK&amp;#43;IzuY64PqJXSRPFe7W0jC8M2VXZtKQSiqIy4rvi5BLR4rJjFBM6vE2jOGOVotQSSuQdCJVEhr0EY9Is7ODX/WfjrwPn4nNC5hVMEht8Y&amp;#43;IqQr2jb7lFHfoidhN3nOnjP4Eqpbfi&amp;#43;mIIpeqR3fnQIGRlGKFtDPBhh&amp;#43;R0YfzZfaDdRcIxVeMhI7p5zqT3QOhV&amp;#43;CGumGa80r2gI4E8vDDzSTrYL&amp;#43;PGfXRCPuIrtRdA3R2uorrwXBQFdIn4M

wEmQb9x9AFDAKbw7SDtIfTA4AAega5ipC2v4GZh9Fi2hLWi/KVnEgtiZBL09RcSe&amp;#43;I&amp;#43;YyASlBOo4griiZ03E33jA/g7PJf9h21k0ArIMBIddEBRx1RVwzo0fvzIZMI8RiKUY3vDYS1ZvdRjJYMHYszCiUMRrHoSwWzE4wnsHsLHYqBsB8LulfyCEGwjo8YS6mwp/DfcPJRC6KZYClEdcbZMeCCZ8d8xH&amp;#43;g9oLIsZOHqQaUMhywaxAwVsnBUbZa1k

RN2WTaBh8gj3f0T5XB1GZqBGfSSDYLheYzX4HjIOCFYyFwwqNHoIUCcgalF6b4Q9hHd&amp;#43;S2NM9kgNSqQivlpUKSYOo25LLzDrWJVUXSAqoSPAsDj8cPTnbqp7KBxIjfITgGYAFsAeAEDFHgAhAGXQv4BMAHHlSoJ1QEkASU5E8VZws0R&amp;#43;pz7/JJiIhLBouk9XmO74lhiKOPiE/vjpz04Ywec6OJSUHgxOVEcDY8C4Jj1YBxBcXnX/eXCr6M29cfhR

yKkk110u2Le2S8TH4IKQhF8pxyJ7YaiF7xSddyx8&amp;#43;zCra6T2hM0nKXdFGIG4p4SYjwzrCQxrEEsCDYRVEKDoVgVaSCmgcq44vEXwsQw0IJeNZqkI7T5fBmpb6mCeJUw2yyd/PNIoJQAeZKRxENZDWvkSK0wlHp9lKCigCqD6qju0FRAZ4jZIUpB0ImTkYQVqSQ&amp;#43;vDEjPGM/qGZAdmMv2VWtDw0xWKAAkRVYiAYAbH3wALa4xgAdMeU5YbyS4retu

QMd4tJjBQMmk3vjppKgEgfjH0PyXBaSmZHrSBbNgqVWZFKY0JRHwFTCkkPEY9DQ0uikYoVlShNX49L95TycgvSSebwCTGewdGP3YPM9bCMCgYEEW&amp;#43;RzWGaCOvj7EPwEnPB4MVsSK6DSPb2Mi&amp;#43;I4ANwh3ylIAFiIMwAegILjC9zt7BEViTyw4/iJ8yk4wzHcrHl3re7sB/wmwkASFxLAE2ITgvxXEy301xMlVHgAJVx94tPN4JUNFV2txyOA6cbs3

nW/QsPijBN2k82gamJwE6STgMJiLITiqpgR/KwdlBy81Emj3eHfAsM5Obwn1W2UhYOHlMOjBHyuk2lDO5JGotcjl4O0Y&amp;#43;TihM3ITMq0Tehso6M8g2KIjCcQaxLutNOgGYNowTLg5YlZ8dxgRDyV6eXN0GIIoKDEYgRlKJmpVGGX8G/DUkDViXGET2IS1OBExbkp8SsYvxPgweAtS&amp;#43;G12GTJbtyWga14gPW6LOlQcfSliSl9AvBJ9KQcbWh8vTLpM

cMsgbhZogOQknRCaBLW7RlCpi1YvVTAG5mJ&amp;#43;aBo5gBSgVrDXSCYiFF4xgEmDZ&amp;#43;lYmNcQ2McUZyH7JiT0uJYk2LM16MejDeiBcNXE75jOGJEvRGjmbRwGET98b0o1ZtkYbmkQAigyIIvowuTXAN2kstpzxIKQ5nibzzaEmYTEK1sgdmdbVUvgUdihFPE8DcjL4F3IgBB&amp;#43;lzy3alCDJxfggOikGx1IuiASN3cgsmir5wKERlEtGK0kiljuFKpY4yTK

NzUkxrjuTkmE4IC3pN6zILxkhiE4QmTmgxNeAWtF3CjnJ69wrASIVqMnQ1DnU8xH5LlsI8h60kjoCtIu0MwwfzpZGV1ffZ5tUKANNcQpERNuU3oQAXUCaLxQ4Vq4TTh3ZCC4DhCDexxwtZJCDlxwuHAdOSf4O1jRsxRlIpJi9l2tLM8kKXeyGeACVCOom&amp;#43;wpaAs4OzjTXWZfImtVrR0It5QDemC6Z0J5cz4IF9BcxgOtTyo5pF&amp;#43;mONs7cW1qWiku

eOZfOZEjAjUIbGsO3nsJReoT6g3vcMTcNASaSuJVshTaSp8IJIQwebsKpLaDWE8I2NxVCG1lAGELdoAWin0wH9VmAEwAYG4KxgPfMt0fUNok2HjOZSObIASUmMmw6ISAv3Yk9HjOJJIU5QTFsNC3Pq92CIUSeYV5vXRoiDIG1gJwZWS2qMEIgEkXaAOw&amp;#43;scsUOOw&amp;#43;STT/UyfROs/AJxYjH8g6NJxLoTGDjRfem87sKvEonsJFIIEgyTPgx6NLys&amp;#43;

uInHJT5B5Imo84DXxP/ZVgVkVHVYEjlwVTnIE51ixPRw9DAn0GwWX1oCuBWSazZFFxQ5LM8a6XxYMpIKoSi4HpD0lFF6dWMiFyy4YfxXVVsNWhZ0CB&amp;#43;HNPkzjGGSMjABGlrqP/sAqPx4QDBJphwjAtcFZQNqSNds5XAwBikpnjk6WsRcVHZoBWJ32zzSFXJguD&amp;#43;yCIpHZLvxCBSsJIhSfoBkOOV9cYB/oGqKPoAYADGAfTBMABbAdoA7kFnPfwSA

ZBkLZpkCBmvBTxtWSKH/cGjY5JiEpcSFBKeUpOTSFJTkyncKFJflHVMfoyGvOVcYbiSiFmR1VTyEnGiXPXEk2HYOFK0oxRSFGOkIkesT/VNkPqjFJO4ZAlD092rUzL9K1IbfR8SDZPYZGH9bhmEU98haeUjEYmjshC/nbhg8nwg4DQdYSn7w1Sc0Pw27UxTY6PLgKgINOCKxRc8aIOVcGnc3aFdA6bkHOEDSfQw81wGeSLoUg0tCTJJ8OX78Ii9P

VRONfCCH8M25J68sui/QEr4LkgDoJWoXSKSQeQ0blFcMWfY32xu3FhAEMDrSU/c6Lya6L9FmkC04U7jTRN9aKms29i3aNZM0SJbEeWgdGz8MIRFaCHvQWJpzAiuieNNvBCHLC9s9oPd/KL4cTkOtAOJJ6DmyAWpY10BleSh21xB9XZY4InmJL2gHjROdcyBoBXd1Nd8r&amp;#43;NsE&amp;#43;uTJ8zIo4gF6HBlhVTAIjVDAKV1MAAQAXa4DJn9eOvi/VJJ4XDiZ

E3X&amp;#43;HaFrlMiE8NTZBLjkqNS4hIiRBIToBIK4vwT05IMTUqwXWnhzGSiCDkcnQwpWqO2k1WTgVLNFAtSdMPkYpRp9VxftXJVbMJuJe&amp;#43;C5WQM06&amp;#43;Cx1J//ZDADrUSsfBsgr0bEx9AOhEGESsE3lGEQFsFZqWzEx2gQunZqWrwiNCZCajAIbm44fPgrDBgwBQFx7mIwrMikCLQkveMZkAL4sMJ2ZMMmIQAuQAtIXH43SANAWkAhgAzvMNlMgW&amp;#43;o&amp;#43;vjO

ikezbnYuz2ywcOT5gXCE4adhNLGkotixNIeU5cSY1LYHDhiU5LQPFISXYLKcSyIH61lIH1EnAP4nOfjfD28VCsYzigOkmm8jpMqQljM5JPAQRtSAEHPnUBBXLxlnRliUazNwrp8JfiaQBp1xeNEoMqpNmTkXdDAdpiYwRQhJWCtUjKUdaVYvfQAhgCdMfTAFugBpdoA1FEeogk8fSB3Gez8VmhwlQrS3GzqvKSMX3znEvBTvS0/fGrTo1NFkriTE

hIK4xw85NKyzHjdXAzR5eTtYsMfMCFjU&amp;#43;yhYoFScwVVLHTSqhJcgtoS2uL0NVUjV4L1wp4Yb2R0YjbD8FVUoNZZui0bDFzp&amp;#43;3BPUpI9B1zsMUcZTVCoISFUTxCU0eLCbBNoEnlFRaPEpVAYYHw60FE8exMwHcAYzJgf8fbhbfR40hdgsHziYtpl4lhjsFSDQ1IvQyrS7lN5woFD&amp;#43;cKNoqTTxZMWwpjtE1OcPcJYWKD0hc4MQWLlNeikcDlEYlhTZ

yKAVJaSd/xKEmRjtZO2PBuSZ7wx0xD9jz3ngtpiiWO1XAw1phJvUJlE5iK5gglTYI0k4kOjvIMaeQyTQaAxfHyw4wXOk&amp;#43;tB39H/0LT4bJBSpT/RmhXfowXco9PDozgspPFJ/DwdSYyqdIeSB4wzrbTYP&amp;#43;BwGEDtAVB0QJBDRkgLWI8wi6Uk0cUh1AnQXBqooTQKrVPRjyFToRsMQGAbSIhtJY3qDIThomG8Men9lhG34fNJ4ImmjUjRMhzAcFdwh

yygwTWI8NHyiTxA4VBIIfThxrRqtc5NmHjNDf0k1tyl6fkJBxHqpE6kg0nRUZLZA6VoWLIUGuDDoLagzkkxUa5Vxs2NbDroH8JIwVGVoAWiMYNwIpWAdQij5c0zNPYdXIFeHHbUPXAWeEellYIhsBEl2v21YomFRD3CYT8SRmN9cEWJ3XEqsMhNsWw0FbQxLk3ZUf2QafGZfRh1uvwBdKdwNaGjTYIF6g0ZrKgTECPe48NjOTkjuDsT40T6APGAW

wB5AV3Nu6A&amp;#43;kUzA8YEkdc0pemFFwuLi4tSRTDb9&amp;#43;p0XonWscFOAE&amp;#43;cTRNMjU77SJNPtJeXTZpJTk9k84BLx4vnthBV3EntE/EGUXLrTql1YUp4NFEiBLQ7DwVNz7SuT8WJ64wtToCFX3OpE7ZhvEoiAiBIskkgTulimQKo1x2FR5JqAo&amp;#43;FWopjAbaHp0VkIpBUT3Kkh/CIbySK82km&amp;#43;tEDjvFI4mTWJv5X70oTRwBHJBc2hdGXp0sBSvzSgQfIkG

BJUwE4A8YEMmBv1WgCRSbAAkYGEvB6BsflQfDgAmcMh4mGlg6i&amp;#43;5UDw8WSE00aSkbwbgkoi2DITkurSpz3D7FOTfVKB0y6IE1zc4NHlEYMpneL9gTgv4MSS1ZJLAhHSfPUt03BRv7UZvUOjjyNdlN3SxIF7HEzDBqK6Mmccq1PaMjsdDMI3bdJ07pNOkxCsO1OiLGfVIG31km6TkK0p7TQzSVLUgIaRINIs8GL5dnWoodVFnQxzAhVFPGBS4GFQc

rUEyRZZmcXpwEW1hCEXcQWwnASIMTBEyNUw0XklrcRfJXflFCGSsApTl7T0QBJhpe3bNbNo4p31iL4UlGGo9TalrPGLWfmhyCAdtQ4Rfh2VvGJpl&amp;#43;HjAi8dJcRlUF8wBWQFjAlhLyT5kehVtOR/PLwy09xgDGYzbVI3yLR5l2g4AarR9fB8QRbAERBDHR9cKAH4E&amp;#43;IyOJQlPeeiGATxtMXTEeLDUyXSI1PuU4WSOJN&amp;#43;055TuJMfQ7jTCjP7UETc3

BhlNP7FoSVA/aozgVK2TOoy57xrw7TDEdN5gmIsjFJWvRSdmdSuEuPS5JzRU7ozWeMP/NQzxOISTLUzuhPJYnRiYqxHCOilFWgsYZVCYfXNQZ/gwAOySXmhHnmj4ezZ1byO4gaBMQnS4H48SwzlLNP1zt0VYydhqkB4ydKxpNAkoARQIgXgIy&amp;#43;wOCAZJSmEMJXfhRy5B9PCqOP4QVhUQAQhQRmf4ewlVAgL4ObtAbEp0gk5/jzYaDhVKZM2Yz&amp;#43;o3

X3EpQgB81TA1HYBLJk2AMHcIaVL&amp;#43;UMAvWHiASijN2iH7Db9NaI0VAWSegM0grIyW4MTk&amp;#43;rTk5MA/Xq9eDIkozAw2N1K49bD/ZDK4XB8jxIKE9&amp;#43;tcPREnPjj76LKE13TJCKbjPTSFzP0k5FiqUKdNGLEjSNhrdrsUP36omlidFN9Xe6Tt7iHw3RS9yNXvRjdXsPbcJmIl2E4IO60zaCUMbXUT1LooWNI3BlV6ZIosMDVYNpslhHZ9bYcv5BP7cUoc

LirEDKMmuAZJLxhrOlUZVrgPlFFtdwwNNgxGTvhHsnOTbAhCKQS&amp;#43;K3oCCASIdY4KzikmUkS/CmpJXaCfaAi09uiotIwMxGYRcGwMlwhQwG6AcQsWNJuRVFICgQDkkgyLSD6AU/IajzxSM0QMFOPtNbxmzI0gzGD45PbMnIyUs37nEVYeAApM5XSEdUsUoLxMhK4aWQ0r0Hs6GwtQ&amp;#43;MME8QyDdPwA8UyiN399VedFzK1XR7D/HX6ExHQnZSrQ9uTg

KBvuZ8hP/1ayMPY4dDig2y8dTOrkmlCHiR900YjRb2JU2DDaaKc7NKQADWJAwrgyKzwYMKUImQnpKVQwWP1iQ8coMB3w8RB3yNL0&amp;#43;N1IqSuXULpZGSsQVHYrPAiYFakjoE6rVIMkXVV3daBVOiz2MNZRF2UQPXdWCFKhaBYIMAsYbM019MZUEwIPQgH4F7InO0evBN0N8xYxP0iQK0ysm2J0TKyPGZBNeI3yTmSzuRfKdKiMUnu5ZcF8ABOAbII6

tCV0oOTOimqQRLV5wJPQsozGDJuUmOSWDJZMmXS3eN4srMcAPy8WHgBG7x5MkyJlcnJnVS1NdIg/HAZqxAqY5hS5LP10vrSzOCUsut8sVJ1kktS9ZKbfd1c7LSicEwM3INBrA3CtgNl3DSyWxwss7oje5JXMrEzJjIPIgljxZyk41nkXdI&amp;#43;JY497LO0IsV8H0HV6aUIaC2AEcs5IHFDkU24yX3FqEKwzUF/HF8knDI&amp;#43;XN40Mvm6uMMAqIItQAI4r

7BygWahelXTArLx1kxEeVTpZMlN3CnBplk/QkTQzfzTkaRsgC1/id5RDXhooRxgVYnVacpw6xKqhFalo5G5IPTgF5PtDQbBzUHMQLV8XUREDYPjLTxdwpVR1oHRGLxgI5zc6bj00kFUYeETabNeERJgA6DVKUNMGrN4ggFMF0KUWYS4VHg8QIo4HkCG8Llt8AHUwemUc70Gso7ovFNw4&amp;#43;cClg0DQ0Gj9vyZM6azpdNd41hiOzNyM/iyIvxofPiSh

yIfOBj1aaR&amp;#43;UpSRQ3T6QdTSZyJ2kiQzKXROsv&amp;#43;tD/2VIw88&amp;#43;5Lrk5Eg6hJx7fUzHMM02OqihmI&amp;#43;gwSh4oF4ArSAsXWSKeaRN6lEbX9BAfgDbBk4bzGh9bWyv0zgHcSkTuwREdTBi0zmAHqy&amp;#43;gB8QC0gXpCEAJi0W&amp;#43;zeQqgyWZWGsyuC3G0Xox2yiOLSM5cCmGIIUjDMU303osWSuDPLxSKA8xxnKZjA30JhzJaA0mA5XMczKeKnTeggW2nhY43SV

&amp;#43;OZnY6TPaO64otTRKjJos6VLNIU4yUMRkAXECCTbgOL2Cgxx2Dhs/wJouEhdZkoieRvHD&amp;#43;IiMC2ZZhsOzUv4jujr&amp;#43;NAIXUtsTLDCbXigjJ9IOv9OgFRQQ5T1MEwSRQDsAGMRGG9XEQH9FvjZK08Q8XTrwyKI858vtNZMx5T2TNjUl5TtwNygEdVGPCOSLftJgL4aEBwcNhFMnMFCMA1k9Q0TdIPs2EsGuJUIplxVTLy/Idi25Kd4RPiNUw9xQ4od

qQ75Yxj5XHhUDh4b0CzPUXpYDXM5MeNOrkeedKZsnADAk1C//xCYewYKDgqnSLT0DIAcjuS5WQhtGg0AuL3BO0hkOIQAZwB6ACRgUMACYFwAO0gxgHiNUk9ZnFislawCtMJSPG0Q1IZMiXT0jIBQzIycHNq0vBzOzLjUuezENl/LR2hkUO7RGHNIuAU7ahzbKKvk4GFp4M7Y&amp;#43;pi5zKR0/ATlSIiuAGstFIKQ4diVCPf0Vm5CnW7k3TS9FOLUsWDn

5hss07CtLLMsZcy2hLfokpyQk1PIkGzemMcs5/kX73hUN/kYMEs8GyoWZAQ7LaAn01cGbSF71N/kxbdfxOmge1keVEgojYR4qj3TDhtRDEysZZ50iwMM95JrnhlaeLwefVPhJIpvQ2jkR/ghWKigetwcmm4RaWhBEXZIZ9BNYiLaYNo7BEK8d&amp;#43;SFGHNw3qRwrE/4YZJTAlXJHdwT8xBYJQkadAEQTjlf7JQk0BSMTP/gaKiN8mocAYBoHyqAD5Aw

iDYAOi1zu1u0j5Ba7SDeGG9ZwKXNJkj2Vw4sviiyOI8cn7TJNJmkvIy57KndKWTF8F8QIzhCwN/DUpiR8GyYEPiMNz10yOyDdPHYUuSonNwE03SBqL9oxQzmHOJzOJynrOt0iF8GXJxfe6zDcKx0lPTCEz30xkSHAksYwBwAEmmEZpBAhIc8JTg5tyrGIK9W6TH4m1EG6L8YWOCunQ25VWx0lHDoIIpKcE8MnMzCV1HaP3D&amp;#43;FWCIdTAmNMnOGoBO

gAxAKoB/KG7EmoAsRDhnG98bHL2pbnY6JLIIkrSrjAmsirTXHJ5wwFD3bKmkxFyZ7ORcrxZ&amp;#43;oDvOZNxTUWhzdbCh0ONbacjJryJcvrTdlhjs16z5zM0cqlzaXLdbZrimbiZc2FsGjMtSHSj9KPLQv9QhdznZYQISn3CAmOjzyI1TZ24jsCQg3lQe8kY0PLDrcRVsu/hDOCtGKgDQlNf4dL53NCj3OFgI5CEQZKt720VvLgV52MbDFKD7NCFcy48&amp;#43;

xEQUR8w/0X0zGEiC7VagkD0GSz74KJh9tJwTL2M7&amp;#43;My0maxQNRKlXpgyZj6ABkCMwC5AfQADQFD1cFzaJO&amp;#43;QgjiYXPGktiT4XPYMhylODI9ckVYLEH6PZ1wElPhQraySM0IxLRcwnMhUX5Rw3PesmuSY3O9o&amp;#43;YSOuOftPmkm8P3uNNzAHMBsjRiEoKqcobivVTlMFXJJNBi&amp;#43;KNU7cOYUINIC5SjVD4VABDsEKZBqzntoamzzIkriCqAqvw8uV7dD

FySRK4RzOLpwFig4&amp;#43;3HDNSgFaAGwTBZTTOrsn6DokBIsq5APWBbAPoATgG7ErkA&amp;#43;ok0AW8okgEIAFR4HkGIAOYAE1Ots7AZ1aOLCTHdtv21o1IznbMdc1eiLnxdckWS3XL&amp;#43;06TSM3yjAUjUj8w0KLPN6aQc4O2h17OzUx2iTxIddILZX3LaXR6yUOCXbLJDlbXhrXlFtQNR0zpj8vy/Av6zNSJeBKuThPHMaBkMejNUY87CNJIt05JygX0EU1a9S

UL6IwlSAvN1IgzSgIK7jWRSmhK0UtOyzcKeScvk5uWSiQsSe6UUJbW9EqnMiJHVKAhj4QbdK4iXwGrE2xDMiTJJg1Rz5Y0UUDELccTgPIEUXWNdUmAJJcLChVGmQTj185DMQM6BFpBViTCVXlTDoTahh&amp;#43;Ca8zu8c0klQ55UyVGsMSl9&amp;#43;ECc4WWMnEGnTTlRCYQCWK8QS3DDsi/FBxlU6eSi4mkL4MvgZbhIIRwYIHhNUvShN&amp;#43;kZ7B7RmFT4ePiZ9

DD4PYbMFly2dNIpq6IIQ4igJpGnceFQQiJo8hcNEVlYvPbhntT&amp;#43;ACiiNqyxgd0AQ&amp;#43;iMAKMIBCx18Fx8OMM5AlR0xPKOfbx89v2DQqITmTLds4ncPbPms/99wvwWOYxArPQSQe3EraODs1yBeBVgTHTzOON603WUlGFfyQbTnEwrkgbkTpPkUoF9ndLestmCZDz6Mj6zlT2HU1dsFiNJcaBs79BUk58BAOFRcVH8FJ1Sco8jPdMqVJFS4OBA8l8Sa

nIcspJxsvmxwrQVpTTjGJKJuYhmpLqCH/WmYxkxwzWcZFA1qPE1YKBDAuD82AnAHgPDoHbdvsg8YZ0yXzCk0JMMQT0nYZdgZENVDZwwDEGzyDj97XH36CtxfOFGcqlQKHjX0j&amp;#43;J53Riic3F3Yi5UM9iCuFDWFOgFfM84jxjczM5OC9dxKTmASQAtgA&amp;#43;QRphcViqAC0hcAHSgC0hGjnHlHNEfcybEGZgzHihclGcnHKdskHyRNNYk6rTj3OyMrxyv

bMWsi9z1awKXU1xoIjR5YOy51074LNTodMJczTTIHS/7QzzCnOM8nMR92RBCMJI4aD6EqzzGtw8g08zoj0JLLq5uxDuVUV94SSROelQqMAcdeW5HGgTGBZVXxw57PKw9ajdkIZ1PviTVO&amp;#43;puKQ2YtVzpxmiQdpiyKJA1H0g6tjt7fYwGJWcAExC7gGIAVoAOW0cbMuCYaUOyRLULlKUkPapXtPb46QT2SNds51yIfNdcjgykXO9s2HzaDTRc4uAu

KVXYqx1aFOIzfyFf&amp;#43;H5fJ9yAFNJcu&amp;#43;jonNnMiUzIVPbwpUiu1LpcuzC0dJ7kptSlCLlghSc2HPc8zcz2HMDokxSumMyhApzE4WhiE08FCPRU6YyT/yJ7NvM4Wz58klT&amp;#43;fPyDGghsLlBBTfsMQj0oen0gH3KTC4R7jHXEVAsf9V/4SeTxkE1Q7HlHXHLWOWgXiPjkIvhblE7cMghnGWgiKcoNNFNoE6lvh0pIQdQKDA16FE1uaD7curpG9mPvTvgP

QnAYjL4l8BNoFTQxUQCOIFQZyXiYJRhD5ITcPcQ7NE9icZC5tWDSKEl2hEjoRGV2SG0MWzRJyQfOaJgRB222eXMZYlZE9WDXDWncpBAnelYvW8zjuyaGSD4&amp;#43;gHFOGawLkRMwdyAXHyxZDmAh&amp;#43;z62e/yD3Kq01gyc/J4svPy&amp;#43;LIL8&amp;#43;DYdgB7sv2yDEyygeQx2aApnRFDum0gccAKcwwb80MF0nO/tKUz6jN0kxQztA0Z8pcz/XRYzEOs2gsMwyKC1

ryqRXzzwvIoCy2lZtMp/PV4eF0Z/VRl0vEIdZIZE6FcZIl1WoUIbeP8k8T&amp;#43;koQx2eFPqSw1hcQ1Y&amp;#43;2J3tz8McoV5mLVjCTkZSjatFShaKW6ueWMxDHvQQ3p4Jj72FgDJxCH5O7RJSFloE&amp;#43;9yHW8QVEYPkmaQLaAwcJqkdw5jsFsMjnMHDFZs6WRZDCvQMECVslBmbBcbNTX8iDiPXmDCYByXCEkAVTBIGgEvAeQMwDtIeEBKHFMmXXwdgFJ2Fx9J

UO52NvFB/XoYiTyM/JdsrPysgtmsyHzcgoWsmHy0WGjeXxZVNnUQOncR1BzkxuwrzI6bGoLtlyX46Rj97Ln3MKC1LKM81oTLLX7k6Uz8AvZ4ubS0YUCZfzwKcFZIPXELTIdxe5IMvE0oEpNZP2MYHkJuQRu86zMGI3EpD5AHc0HEjMAAiGxyPbtWZJ9IBu1sAEwHJIKdIUR1b5DbXOHskaTJPLHsjIzmGMpC9/zT3M/8/ILYfIh44SzFLUfMFq50

hIJvB&amp;#43;spTWMqXXSDrJDcrHzf&amp;#43;DqCsnUD/yZcMRSrLKx6I&amp;#43;cQIORU0aiS0P6MpnyUVMxfKlEgPOf/IgKCnOHzami173ekv1pYtAE0MlRxMj&amp;#43;EA/cJoBs0OhUL6huEL9lbaEOTYUghvmICftyvOHJKEvYEHDygCv0Gi0XxBNwvAxU4ncRMgO12BqMCcD/dFBEEWGGbb2D0KPQwf0MgMGraIThGYlrpAOgApWYofdSazl9maThTXSLkEQDVXJhC&amp;#43;iNS

KO9jFXAo9Tx&amp;#43;TRZSAD3AejCEREqPMwB002VowTyfmgbI2/zcHzwkYaTytNHs&amp;#43;uC3HOdC2Ty2TPk8jkz/tKU8zuDvQpnddzi52PhQ4AK8lDUOFr8QwvyEzezhbQkMPZ9cfLkHClyv2HBDMIskqV15a/9TNMb8l6z1uwGI4&amp;#43;ycItvPIYjZhO4cmI8LhFkQdBY00iryHkcFNPAEdtzk5mcaaTMkuiBtW7dBVHvOKK9VwqXwJ1xR9g9w5KThXK7yJnN2

pHjoMr4tKH1sPmRU6DabVVQwkHXcdEjKNP/s6jTF4MunMijvkFC1bRQMwF7E6zIypVDAbAAKACGYCjtYuNvC8edmLOtClR0SJ297Nvj&amp;#43;MMms5gzyQpmsz8LcHO/C/BzOTIu/HYBQkOKCtYYsMBEDFkcWOLilQAR68Q3s8PiYIq74BvyN&amp;#43;K9o5UjymxPIz9ylRTstRGCT7PAMW&amp;#43;J2XPnxb2h5&amp;#43;XzyLVxWSn68zCMhTHfCIOhp/AfQUKA52LVRBZ4J

ESNU4ul2fDZJe0jek1jpIBFcYRV1KQhLXBCC4/R6BMotfQAc4hKCDMBc4Ps3YYNyRhBc2kAGHGYAH/zKTPHkbpC7HNYssaz6TPT8pHjQfJf89xyXQrk8j/z3XK/8ukLMqIAihsU5iTiYF58R1DMeNj5S8yM4etj9rKgi3yLNvTdiESN4IsfA8y97IKb8xdkPwJ7Hc6K5GnaYuRSTKLJY1CAfrKQC5tSBQpkIrCLBQpaC7JyFDMpco/8vaKkU0Yy1

GOM0l&amp;#43;cAYq7woULdzJPMy6T1cLFCtnz7Vz3Mz8CYYuTcxMLzewmMxlzpFKjrCYTsVLsHRdNvI23sXJ1sYr4OJYTYSxWE2YS9AXNAooRISmzc9&amp;#43;Dc3KsDZpIAIhZ0YwzWTBvwpKQj6hoir1UogS50bQwNpEbGKVJvomRI04y5bAANVsQEp2ttKngk2jNoYNiCCEc0COVQ3G7pc5VAbFS2fAwhCG/9UqTR&amp;#43;G/MU3E5yRkmUnx/hUmuepMnrx33LvwJ

pACqbMT2mijmckIsq3XHCklV&amp;#43;FEeSsE96nE4bf9YKKRRWIoPPAwIah1MNMSqKeECVG&amp;#43;SVDB6sWICBORpe27aTYcAbGjpRJAXyVyzJOcUuG/9FdxQHCKxOvYiF2FfFeNyrjlzV1xCXW8CX1ok1XsaKpBNDCYxLu804rmJH8zKrAoRTq4KfEVcSKlkZSqxXtxxkjlVPY0SKyraboQNNVIoBgxjOUk4TckV/CRXcFYIkFcaeI94Ji50TBFl1LngUUjf

xy4mRvgnT3/CJ554SXrcLCV6TjYpVW4QzONcW2gJMwQcQNwDjQIgsQ81HJT3Qiz8tFi0&amp;#43;jyfXntQ0MAwaSxgYIgjgAPfXNVvSD7AyQAjgEB03uytKSVMJPy5C3ZtGOwQaJHsh0K3wqdciaLrIs8c2yLvHIIc6sUdgFi45yLKPCUSHpBeTwuDRb0IQPMgcAKkMGKE5fj&amp;#43;OMQi/Jz5Tw3gkF8fK3ImFlzISChMJSooTHidOzz/PMeim1JiN31Xe3kB

CnTJbmDU3MISgoQhjIH0DRT4zkGEinE7oshi1YTOuy8rJH5WeKLLVuFYSxw/NnznpLtAspsl90zhE&amp;#43;4JPECgoiK&amp;#43;/IiMAODTGG8QTfDeEEWgROlG9WQXNNxOCEY8d9lv/TTWXoQ4r25IW8jVClWY7pBI/l9oXTkLOB9NSCivdzaQuPh7JIOEOkggThOMVYd&amp;#43;kB2CtmMm3Ego&amp;#43;YQuVGG7e0UWEADka&amp;#43;pTGGeKPTR1SiUoajB28kGQqQgzC3RlfqKI

3EOyWulaPwCQP7DW8AnYKxBJrkNioJgiw2YCiGNBXwBkzrYlOBycGPItCEs6LllvZ1HDVW8o90T2WXpv4Ia4AT5ExJZ8LYgLUJykJtcFaBICMZJOsS6QCfkS61s8ZDz6TET5Jco2nJlYdnp9aHM4CCVxPxfHYTJaCDFLFhQedHMQTeMc5XNiYZCvhHtaA4cbpg6SIvg5shHEGqLwEER&amp;#43;MWiN8h9IamUOACOAB0gWHED6H2TccjxgNgATgFpAH9VE

8XSE7qhVHSDUvG0&amp;#43;MPQcm6NGGKdCiey3yxBQ6eyFPIV0whyZINWsnURBkFodCYDyjP&amp;#43;8PFRgsXAClRgpzL3sqBLGHNWPXVdSAs6FBGKp7yWI800udVZ4spzOgpAbagLqWNichFT/IwKchU9Uwr0w8ajaAoF8vaYBYwWkJ49avOOEGUK1nPKkBb4wAVwwOTIQrGfiVkw2vKmgbdifz0WMvu8adEbC/UNobOZJJOR9QlAYDbMgGMM5WQhVbGzpY3c6

CDgpR5Ne3C1UObl5NFuc6w1AbAOpTwj8QWvQYESI8l2Tc5VzUDKS0gg/hBTkGZKUUtXMsiiN0NsyTYBmJUZ2TAB/GLxgdGZw2BOAJGBfWHHE9HcPRLaZLWjsFKB889CMHN1orByXeLf8qaK3Qpmij0K6Qqkw3&amp;#43;KmZApwewZi8Mo1QRjQoBdoAvhwAqzOAKLz/TVAvJzYIzRiz2VlaSqRCxBxPGdSUDyLyPPbGwLE0OXCddiZdVoxLSAzhXgxR09J

EXLfPP8tazbyTUNvf2kQVIs0QNgiprFdGDVilZSnR0mfbqoMJOassMInTFJIpE8iRFdIdoBwdxOAH0gOBPiAPrDS4P3QpNlOShWsKRzMxUOfNPyH4tJCqTzHUoyY8TTc/Pfi/PzaQowsCvcnktzASNNcQJkSIsoNNi9&amp;#43;SCKc1NKzfTzFEjocs/stZIBSyOik7JrU83SqCic8jxdI3NsspNzAYoTch6yP2GnxX6KifPI6QH8DzOFCnJzfAIukh6Sd

2SKc8p5FGKvPG6L8VMjS7eC/V1iinV5CcFkIJS0C3G75WPIwBRSaeBZ6TGCgINiVOLE0FGUaBXsGQxgiK2atU3ELTwq6RESwgksYUzxfRLFKKs1Q5mYpILxqzRo0SkhOcQFsv0MY1idI8b5AvGMgAlQPp0xrFtxE5gs0IDFd9O&amp;#43;VKmyZbNy&amp;#43;XRg0&amp;#43;EXC4YRDkyR1BDtrNOO80uUzf0KsFxohWNAUbOVBAoTcas132U7sFbkx0OtcR3EhNFVYF9yZ

Jg&amp;#43;yMxcAFNGpGZKJAP&amp;#43;nZoBhLkgaUMB4XgHA2kBMT06AXABJvw85Gv5L/KAJfqSlJGjHWlZhosnS0aLM/PwUmTznUq/C6aK7ktnsz1zKDK9StLI&amp;#43;vKfIgUz7PVudFmQg3MVAsMKDLXD&amp;#43;SAKO2PJc09KEAuB/OjcUAo/clHTdKIh/Lmd/K0c89nz9zMR0Z1dfwDb8i70fK1neDL9OjK5nYaidGOrBZRFHt3LqEPhnzMW&amp;#43;eOZ5EoBY3mIiHgTi8ZU7

Ty03aa1ILNK4A/1MkAeVC61Gi3nLKdTIbFYggCyOEE9BSNIaykYoCVZUKIRw0SZIHFvzROhPngEmW8lp30cGdUtdryyk&amp;#43;5RkMg4/DGypbB/CSh5HkycBPPgX/XfTHcKqpPIw/UxNy1KCZgAPkCCodTBNACC4/TBvSFIAPZSDQFDAbcY&amp;#43;pJkLT1iyCIYktBznHPtSleiZ0sbuSaLAstdS4LLz3IKCvPC/mIjLRODNaitolATJwhOgaVdwAvFYTFCx

CPSys3SMArPS1ozicol3WEtNTM/S0GLEUuQCv6L6XKC89AK0Au1M29KfDIJ/GKKk0ueEwksBuk/iOMj7jEUFakwmwWqxMdDk1gDvUUgWlOjPHjIDjVpCFWhgtJmzAnAyCEPXZod1k1IIWpobdSfJfHhC3NVvbIdKYRNvRjQ2IPwMRVhHzDioV7iV4pL/bwziMO9jcHcHkAJIrtt1MBbAE4BmgEanIEAyJRYcTYApML0i7SkZmAW3auCyjJjsB/yz

Iodcx0L3wquS06sbkuIUuyLfwoci1gjwsobeFghGH1kkAQdyHMZTa95cMF3S3TzMfKSy/Nwj0q53WfcGl2aY9/Q4EpaM2Nz4EtB/X2imuK/clriDAyn0Q9lX0rwi0py5xWCjOfVhAgei6nLG5KzCwfDKctGEnczDZLGE/Ylo0sJypVkK1KlnTJzxjM3IpVNWEoi8hnVjKPHynRiuSG/iEQMnxTbGelRfsgj&amp;#43;BBYfh2UFWWgkvlu3E/iX0D6WX/ZW

EULi8qAXlw/ZTq4NOEfsODzd1wzyBLwSKBSHOoQLbmOwQggAkpnjOHBvNEOdTQwEmA9/T6ZFoA6kHPgE5gcMOaRO&amp;#43;Ua&amp;#43;F5RPAkF8eHZZwGv0oB0kmH&amp;#43;BNyT&amp;#43;IsYoQKAoinuPeLdGKCmdAfhxyXTme0MSNkZxauUwCIxdPLD&amp;#43;NHeXWHDBKH2VbeyE3WQyXQpfWiEydtI9ej2C&amp;#43;QwdGFeFLbKOfWagKQhvDhmVZDs5CH2SNxxgtOYebaDu0kX8SZJW

MCJk0Uh0konDbKRl1Xskg4iH&amp;#43;HjkKNpOSFKTUqx6YS4XWtKJnzIwyKiocnEpDIE2ACxgExtnACTiQsBfAD6cbAAmgEigbhiL4vLg25j2BAffErSENXtc18L/kOfij8KAspsioLKfwsU8hyLqiOjyvHhZMJmBExMa&amp;#43;kRwFK9wAunQ7kLNZIYcvkKmHIaC06LTrOvSutTzV3UkkUL0Og3M3gIYNGfICCgjhNvE6W0sxC4zf6y2jO88r6LOHKPMq3Tv

0ojcrczFDL7yr6Ks5zBbUoqG3zRi/UzEtGNUB8wuKEZiW9jFu0L9J/CE&amp;#43;X0MNpIDUXKY81w2v1Fi6rgNYI&amp;#43;IBKSHOEk0HbzppAl4ijz1NClSbaZHXWNoGqQ3pmyg42JakBGRBAtarBb4OagjoFN/L7wvGFj/WpAbQz78O5QhWN56UC8ZsAGjNxgZwrcGYBcobMKgv4RMMBnyZQoVAj&amp;#43;maty2aCEIWwINvOS2ffdCkxK&amp;#43;BCzpSBjnJUonXD6eZxL9

EDVS&amp;#43;1gm0pcIAJiSjmVwMo9KiRhTDEUjAFgsE7T4qLOUkdKmBFaA2lY/crOSxONIcud42dK2zNDyuXT3QqXSnYBBSORypacWSGwIL58yYJrg9bCwAL3k&amp;#43;LKBCOUopLKEyLDS7VdQQwYzJ3SEiw3RWMKh8vy3CGLCYpUIqUdINFa7HHwtT1yK7vKwYoUU8nzE7IyK/MKzzNjog0zRYpXwf346L2fFPwFPvEfMNi5OiuB&amp;#43;bL4ypJlYII5Sgrs8HjJz

XE1/CaBxSFtoTlS/72AcOwNsrFY5Wih3CPoFOeKnjX9JJbsxDGa86B4yxjcqRgDW8E74FqFs2NeyNRBlON1xMZLksMFoX2EK1xlLJ/hTAnZodVRBn2nLdfkAEW5iJ3UbjNAIj7IevNbA33z1/IR&amp;#43;PIlxKTgADgB4gAXlAtVO5jXBTFJaOwiNGAAPkBdqB7NPcpxZJ/I8RwyCqXTX/KsPE9yGRTdSvEqByNXSpBoUPJPmaVZUaJhuPZJmEVEM8fd5

LO8VYjR/&amp;#43;ICK&amp;#43;hzeQtzy6vMjQMfSxFSS1LhfaPSO8uv0EYScxBPuZpdf0qBfQUrTMIek9krxWX0wnYDMipFK0XgMaBZ8uIqvPLKdfU9eFK&amp;#43;is8qsemKK/ojQgIoCm0028owQIUqnosp86y0ciolnZdk5hMLy8BBzGn/0NKkb9Ac&amp;#43;Z2ZI9Kogf8rT5zoPb&amp;#43;A0qSf0HSTd7BOUErdphMQChYS7Zi3KrfQh8xAqz8r7hJiLfhTMYjvK&amp;#43;tBQoyAq6Cq4

G1VpfhLpSozrKShn0CgwBAT3GCryIEi3fLhYQVyFUQfhB2lHnlXwFL0f0F1ULEIp3NiKcWhO7BtI4kJ52KP4dVETeiHyXRhWSD37ERj1Cm9THm1PjU6kBIhI8gRYQKo3itcGQzMRYiSKR4L6i0U0ELR0AKK4VVK4MPDbQ1hjQ1fMwHsdcnoFed9b2KbGFp8i5BilD7RSFlooNnozkgXEKThCCHvqEklkjh2CiwkLaC84E&amp;#43;ogMhZfOqBu&amp;#43;AcYbkoo

nnEIVcLk4u8EGfhwbOtnB6YuP1SUEA1HyL5YtaQOy1/FLcRakA6aDfDrvjjgm/D0uFZ0YGT8KPzcG9B7RP95J2D6ki8YDYqCCCGpdW5v8JOMX4V7j2wxBBQ6EKLSZn03CWGEKWzak2L2X/0RSEGwKKwuSDs0eZMz&amp;#43;TlcHb5mFHXXHD19SuBA&amp;#43;pNxSggFe9tcmnX2Q2L2Iu6SF&amp;#43;IlOjwyvddlYhAYEIiF330Cfkh1yjQLEoNWaA3y3tJ38Ko86bcG

zBfsOxg7lh4QQ9LNDFy&amp;#43;RThbrQoMaADzkycGZljEFA4/R/MYKTQxGut5yQ/JIocAMH1HI8xcfUtuKWgzpkPQfQi6kOcKKXy7nN37IzhJxAiQH3zwOPuy/pocGI&amp;#43;csMJER3gsP2omADqiSbx1MANAAYBDfDm/Rb9zrnLKzHctaPGs21Lo5IsivzLsHJhyhwq4cqcK&amp;#43;5Kv4qnotwqBYHoquPxVLVAi/5xYzT&amp;#43;&amp;#43;cALIdIZK&amp;#43;9Kr0vZKimjcEoAy2vDD

yoJxWY1mEuNNLhKkUpXKr6KlTJJyh6TBgtXIsDKmcq7yxrM5xwgbCdi&amp;#43;Sovs4eSOctjowaAr7C1nWrlw5lpwaJktqEryWIo9WjEoNsQ0pPAdbfFpSFb4ZYULKlBYT7RtIGGEJaqFVHbBOnAdjLoQ0xxCvAKLe4wm3Ixw2fKj6mh6LDklSxi0dihC8ifQe942&amp;#43;GbXXsYEoE1Q7zQycDIMKA0hP1ScaVF/0WVoV&amp;#43;wigzmK9ngLHnxSmO05aEDuVTcI

4qy88gg&amp;#43;KS2WS/NCCEHUfWxcO2kigiyNHLJsFQrWLztINXBWgCv2VoAHkCMAaCwHcs2AZ4BvkFYjQOSXMr6iz3KENRS4ns87QpfCx&amp;#43;KbCuk8kmrX4oRcxwrw8ucKwhzrq1/83MATXXP4b5TAaj37CYQv1x8iouSngyFUbi1DotgrJsdz0oUksKKgoq5q3mdu/LwCivL2uOggbgl77XPgO3TfwDaYrJy6cuAgc2l1Pgy/EyyR1PJilYiJQqf7YeT8

qnx4cQhd&amp;#43;URMi7c&amp;#43;KCIvMSZ9RSenE11KrCJwMZKpSiWWXvSxYojcFql45HVUcjEhnV6LbRABQigwFwkM5B30oqADryX4IfIGYQ7BcswhcpwINvhImFUociMWPXxCZZ4ZqRSq0ekg5gWEc1MzOnyqR1wfAt/yqsRQZjpUbniX1NJBJvg9OE1DIl8ZkoD8wxDfbCNARwB/WHwAeX1GikaiI4AjrmBglx9Pcp1rfIi2VS8y&amp;#43;0Kp0sDy2wrg8sCbbErc

uLPc2aKMLARommrgAgKqiIk3kvQZafgOhCh02Sydoq3qoBUCBTqC5ozdyr88lxrKAoKQmWrF70a4iYjmhNby/Q0hl21XeAK2hNAwo2TIMsT9Jjd7khisWbBNWVn8u3VsovUCVkw/NDqjGd8RmI/&amp;#43;VKpT1R&amp;#43;wuFQrt3GuVeErOQ4mK3UhSCFMK1Ep&amp;#43;UloTPYew1uWaUJ6nwTDSpB4/niHWCLNDA/y63F/lGw2KHpNiqqhQO5njXRVO7K1lM5OOqKd

kXxgNgBdunYADdCKOwDYboB9ADgAQSsOLyokn6iBjARKmRM&amp;#43;/zBykaLGTOnSjErocsnq&amp;#43;srJzzyCvEqzaIXql7Q7lR0/P1z83xoINKptPOr80MLa/IoE9KKKsygCtLLgivF3U7DejWui0nLj6ppREMENjyoPcpyGmMPI0UKssoIitoSXwOoKL&amp;#43;i0ILp9Awj7GD6tG1oNEKaQVwwERlrxW0Nw2xAeZkhSrEC2bb5MkkAyFOZFuNuNY19q2krEzWp/

NgSQZkJpvhXcP2l&amp;#43;YmRNPbjdnT8ODHBKeBFU8fIjRyqkDbCK&amp;#43;GAU6gSqNIZ09bs/DMotbAB9dEeoxb96AGplaU4s7h&amp;#43;pdwgHkAxEOsz&amp;#43;6rcbLWiJ0o0anzKyQuJqp1K6yvnS6eqP4vsiwhzd6MJK5m1NuIiYLFkwnjvc7idVqT7vJ9zuzCzy6m88fOG0sFt1&amp;#43;M1Ah8rzPPLy/WkMEvx/Z5rRSoiKppjxQrGCgqFjzFsAmYdehEFCdsYe4LmEW8kr

NDZqKxA96gwY&amp;#43;W5jKlRREjBpQgW5G1FipF1oIppnAk0OdTNKLhsXHjRQFEtEdZDXYTSPE3LasOgDcANvYx9UmQDSAFF9BERoLCMAPbspvDMyI4B1RDTk4wqEjMVOFRUtoRPQwHyo5JTw5/zLIvB8&amp;#43;VqcgoXS7ZqLALpCowqTGtVRf09Xa20Ete1RHh8KA1qoMBSy6czoAugSvy1x3gLym6LcsvmIzvzF2o5qlt9u8M4rWtTXPJPPPcrWXNrUn4Nz

JNGCyyTdxTgvYTkl&amp;#43;EsUOX85yGVoaLxd6gOHHhB9iJxAzkl1GxnLB9AO9JZzZpCaCGwIPnp9ssNiKFRhwxCsOx02FzwwTBYMkEWgbpUxqX6VTCMiFz30yl83CTrLYbNjBRfUhaQhVBmS8BxapLDCcV1poXSo2xD7kCGABEVtMAgkIwBUBj3Q3Q841GaZQ5KH308fU5LwcvOSp3j0mPWa&amp;#43;wq34sVaxdLu2owsfJiWyvwkLsts&amp;#43;W&amp;#43;cHVr27DNUckpU

8ox8y1t7&amp;#43;DlIv5KZzOna48rIVMaE86zmcrayHysbWqry2WCX6sw/d/8l2ounKKK33PrUiFLHyvE6sUqCkKwqrIrl2q&amp;#43;a2oTFGOSpQirP4MzSRoM&amp;#43;CEvas8QYcLZ0UFgskHUbQqwKcBcaFClh&amp;#43;BnyBYUifWs65gDqW1ViJOjlCAE3CAtPa0SQH4DorE56dkgSYLwQ41F3j3XXORKPiDqkHwNUuE0MVDB3DWmK5nNeFxI2QCiUVHjEzpIflFi0FmNV

KuhCqGr2zldHcSlA2VpANSk/KA7oNgBwiBhTTugxqkx&amp;#43;YxR&amp;#43;dP/kVxEAhTTeJSCS0WrKsHzayrXAohScSsbK5jqk7nMdbK1Jh3jyxmrm4DdQDh5lqILki5roWJadYdZIwrkIsYiLWt90lTr4YsmIhTr7oumIiBsWSoEKHCrt2oM68ljqGGYzThKgYpeOOoT2/MZDddkLutta6yRJOvXggDycVXvKh7qtOvEKQYS4VIqbMM5Y2m/cgoRbrLbQJkru

9Bk6hliXWtZ6f2VNfM&amp;#43;M/LqCukzlGsRHY2PIEpxphHS&amp;#43;UCUbxEqLcJAQoFCUvzp1GVB6i45uwqWKtFR6mr3qZ2jKiwxwLOiwwylLR2CbNAKafyqBVMvsFbcsMLWNJnwMeqx6sHqFCtQkteLT3E38&amp;#43;ZKwwgQAf9UCVldQ/TB5fXwAXnr2gC0Ab0dmRgRo93KH427we5j&amp;#43;LRJC6VrVmto64aVJ7PXAqHywv366qti1Wvg3BWLP/VTU1kL3nBniJ&amp;#43;x&amp;#43;

Op60wTqRyzqCoJr4nLgq15qr6vvqq1qo6xpckrK1OpvS/5qP3L&amp;#43;ajTrFDJJ896L&amp;#43;iNLy4C0Tupo0iDDrPOd6zriCnOrQruTG8Np8zvLcAsO6jF8UQ1Vqp1U6kJMgJKQS1jL4K75v7kKLbvTMurjTVVQjNEq4LThirFNRDeSdyhcQCKdEC3p6ovrwesi6wvqS&amp;#43;sZ655yQFJZas3LBfXEpXODcAF9fAtU7SDBnMKguQF8oTYBIBjxgOAAbwt7qsk8P

eyXieDMpetMi1Er60wuSoPL/MvbavRrPbK7a4QEdgFo4tjqioFUIXFzossNbTWIUOXzKTer&amp;#43;yt1lBTThOsgS0TqCcsfo7tj951ZKoBsn6tU6hvxsvxUnDhKJ9TlMh6SKcoO6/FD4Uq7zJ/rwMsi8sJqHmR3QOPqRSEWKqAtk3DSjdbSzIlr4JnQb6NzcBThWwqE4cOVnhBfUwKqlhwS&amp;#43;fjhekU3qAvrS&amp;#43;ux6&amp;#43;Sh4Tg6EFnMClNOmVDzWvggpYqxr

NXtCE9NcFwK6nprEZias368jADgAKV0STJa2DEUkYHXGVTBxMVD8vAAajywfApRFgwKI6XqVmq0a8eq5Wu66xA9bkopqkLKL3L&amp;#43;7BaK083SQA8l1dP4Hdu8IPxtaZUpedk36w6zt&amp;#43;okobASyXPLk01q5GOZy0tSa8KNPcWDa1IMw0nzMIv06hFKhgraE9kqRjLfS0UKsYteii/RTV0itYWrPPNUkqOiKfMKKlMKHzxNWRPTpbUg4Z8hUrlw4JIrc

OC8Gjio/Bpl4QDhrPgrhWhkrQIkIgfK5JzXK6Eco&amp;#43;rpxDrSTIAa801xxww0oXwpGWsgk3VSYOUZouzi9025rRVxhOBPU/myP4XqQn0yNpnbaOtw53VoWDaAGCAtIiV4CCByQIa05KHJUGqQFYhBVIxLnbWL6xAsW&amp;#43;Gmy/2hl9k6&amp;#43;LQwtCEQcFjB9WTmRb8NxoC2oIdD0ImEQbLodkN6yrWgILI&amp;#43;fdIlsxPPEAbQIcWSHNpAf&amp;#43;sx62UxrgziQRQlh

fyANIEdI5n&amp;#43;&amp;#43;I2DHDjigVgh6kmS&amp;#43;FVh1Am/aMJgzqpcovfElEASIS&amp;#43;xomGYXVpSnAuNy/Cz1HNki3FCtHNYvAgQVqyNLegBsABbAJ6BCAAJg/TAqgHaALGBfXivfd3K7aHLK3i1PH3UakerNGqfingbMSuyCqfqlevbg38FCTw22VB1ZkIqCmG5FrStcAFSNNJm62TpT5Jua1LK1BpicjBMuFPBfNUjD/yd6x6SyirG0qYy0nIX3VhztuqAbGvLg

&amp;#43;snYz4l3&amp;#43;slC90qwRNZBZX9poHcQVQhsrPVvBJSs6As8BxkZpGysdVhEJI2gdljXhX6VYTKCwJtnTjh/GnOIJRglvMBGDQgtUQPApAbs2hb4Q8UQBEpwbzZvipzydzx/&amp;#43;AUMbKIaQj0E8lR1Ah&amp;#43;Am5V2pH2TOjAkypt4sAqwwB5ITYhEmBmSqDjWLwoAVv9gRuKlB5BTEKcfE0ojrh&amp;#43;QCoJctMa6wR5vSi9ykiwEMxbeYfqqOrRKsfrtGon6vgbr

n166&amp;#43;HLDGp2Ab3jRBrwJTOzWRLa015tY0HYocOzg3Muap2MrjD3qsg8IFS9XEFLFGLnQ5FLk3R06rVIHLziG9JMr7AHyZFqqFi84HAY9GGNQ&amp;#43;ZEAoHp6zUKpD2TdPziXejGQSo9OgEMRQYM55WYAceVXTD6ABEQ7kFhtGo8LUu4lFohF6ORGgDdR6u5w9Ea6Osn6qeyw8qVaiPLCHKH4uh84plKqMaAbHQgYeTs8fTzi2saEsvrGr3zfkr36qdqD

&amp;#43;v6IzFSrMM&amp;#43;igp9WRvRi0fNgWoHGjSAkhuHGsZsTnUko6hCOIW/JC/hnT0rrU0a8cNWUr68cjnfATeKJADYACowqgH81OyBj8nv8N2ScAR7oCQt56t6isk84e0OS75DjIq6KDrrxorsKi8bFeupC6Hz&amp;#43;utgErgc8eIAecuB8yhMrKsa7tAa8g1qKFmN6ioSKD30w16TPmq8ailFTVze6z8qWRvMGkTiVGNLy58TiBIWMkr9ZSEnpNSgOoHuPbvgD

EC/FeOQ5ESmcsvqTJuQGivqXYxec6vqMTKEgdnrSLIGACxBOLxbAfXAEREAzSWsEJHJw6iUd3IRKxsy2VUlalEaZeu4GqHL5euuSy8aCxsEGhHLYfNUEtXqE0KV8iY9fw2touMt4UUOc9/hhJo93SJzbmtpGmAL/yCW6&amp;#43;6KcppsG&amp;#43;U8nWvsG3xrtOsQq6wa8EqAbIpshiKi8yID2egcYL9AEBXIxHccPDMCCSIFgDPLgOZ4EURYWGaZM5BWyU9qD

uKAlIKy35QWkf2I1EAOgkjBecrwwhfScMFfZKRBgzMS&amp;#43;Qfh7t1mY4gbMJqgST9V4QquQIoxTQuIAKszLCC5AAYB65huQFsA9lOlBZzLB0o4lUjqkUH40krSUSszG0fqaOqFk0mqGOvJqmerKassVKowbTiefB2SyuxQ3EVIf7Jb1MQzFBoMtPSgpDLBU/HL7mo0G7Sj9Vz/c5GKTsM&amp;#43;6imifur7G22lWkvYIQytp4BlEoaNnTITpJPJKFhfsRVon

hpr2WWojnK4ydRt3COqxcQUF9OQ65pxbJquQfEzlmzmAYHjrENIk7GAGZQegMoDB6HD6IHKRIyJC4u974qlarga0RqCmnDVdGtCm/RrcSv66jcTopoR1dxBNiAR2PN9E8qRQHnx8XOcAmvyKRok4LFkmxuxQyFSahIui2BKLmXu64pyH&amp;#43;vwE4rLjBrlM6qbzyJmo2kIkKOogrdc5&amp;#43;CyaC/h3WSeKxDCM2liPCr4sQggiG8QEZN/QdjRhnTAcbYUA

So2U1i8GpP8oeIACRB9IMawDQDmAZgAu6Ei1V6ic03D6WtqiRSdwW0LGJtbarrr16P4Gq8amOtn63iTJZsUtMMMAqPhQ5HzfqggEDgMFBsSyh107zQgSnkL/kvBmz6zzev7yhzyBU2Vq/LLrerJaS6LgYuZy1sawJuAmn&amp;#43;tXysNm0UK21NAmxrjQMslqw8z9JOBa2bIT&amp;#43;lHnBnRMgPNM7DKmCpOyhTt1XACo8ksqVC5ZQ/NKAl&amp;#43;&amp;#43;F8kSCHs7S&amp;#43;8E

kGyHbxK3NMAyJQKtNUqQC2hndxTIg40zImS2C2JOhrMmrYblpvrS4F4vuNYvZF48YDL1EFMSAEmahEQlmmiAU0LOAEom6tqOJR3s7qhE5vjwMTzeZv8m/max6sFmob0ppw7axjqZ&amp;#43;txG&amp;#43;aS2OqkQNQJWiO&amp;#43;m9bD1bNbxMkaI7K/G3kJ5ut1Xc&amp;#43;yBUxrym3rQ&amp;#43;vrm/6LO3yFG3&amp;#43;ro&amp;#43;stoOVgR/GUQUQcWaEyGN5VOvn3mZmFMGrT5OVhnLI&amp;#43;Gv&amp;#43;yq

6u&amp;#43;G9F8t33&amp;#43;ndTAHoHtKA0BuokkueoY8YHmhI4APkAr&amp;#43;XfyOhiBy8J5VGp7PMrTjxtRGmBa1muCmkPKRZun6mkL&amp;#43;uslkhfrHOAD/FfqWOJ6kVhYDWuCYPHLv61rm6lz5DOjcrHoyFoVqx5rHPJHm4Chv5jEqbD9ONjKEc715KmnxV1c8pq7m9rjVJvmM&amp;#43;gLqnJoAxmo90wCDWlKnDBNCBGVtqLdqkq4jNC5UI0aPjJiQG38u9T04bKoEZOagazwv

atovDBCgiW48B9Bnki6QadVVRK5USgIDxGXqZFC7uMlsR9FEMFvMPSglSkGkBcg9&amp;#43;yN1RAFH5qUKxGZ6sLrs0oD66skAegBguxaKH0gjgFRSBqBtuBgABrqqJpsckBbLppUdRZqU5tlajEbHpqnq56brxtnqr&amp;#43;Kq2pMa49i1AhLPZJFDW2q/fyB9BPOauxqt&amp;#43;qBmh&amp;#43;w6guhml5rzGjZvNnyPFuTC890dLMXsU&amp;#43;DAesPamhat9QVNBA1fWma6TJIw

6CA5Z0NaTGbSCsYmQTAcP3dQSRV/Bz0dX14WyyaZItZayRTiJVYvOABluiyBDjyWinXQz0cdoFIASD4/8SrnXvrZnDQNb0oWiVVOYu8bpuWalxzApq0WoWbyRyxGtibletn62TTSxqyzBprpSH9C2hTpBt9JfV4OzzLm&amp;#43;saqWp/G6ub9&amp;#43;tsWk6KMkL8AwzS8AsWEtdr7LWeij5rNJ2rhJrcggLP68y0Q&amp;#43;qjSntTZatXal/q2ChBiswNa1J8SdbrJ

9VoS0dSt2roSt5atDInKLihKcFgxVKQZP2HcQGxDRg&amp;#43;qkEYj4RyjXMTJaCw0161qBVBCkIx0KW12XYJrg1YyExBnhWiBfTjmFotaYNJqK3i0Tkg&amp;#43;sXC0Mbyyq13hAhE4oFS9INw7FN1iRB41t1mQkuaKxmy6dTRoiUoaoTQSvkugpXNtUMxbbuleFGt1CJBlcSZrThsKFmGKmkEbavC4epAaxmB7JVRkMgJBHVoyrOYWu4Rk5xEqr5k4HgCWN8Ve

CBMymNFxKQWfeCQKRlq0IwB9u0yAbiI6VzEdBO4XHzY7EMA8qJjHI8bZLw0W08bYFsUjEKbWJs7a/RbZ&amp;#43;qa0vZquiiAYosLTFvlmgWAeOUtcD8aaSurjB113firmwIrRyvVXB5qQ63sWqIq65vAqlFTeqJQi7nzgKBj9bWQ9J35CwzrYI2qyoDKMvxlWnvyKP1ewjOsWqL4UWukAErSsY1szWhOIqgrMuiPIWnAGKWnyCuDTJr86iwjJ0OUQeLDG

kHPQeVZmWXrEmiDHsmj/LAsMrV7cCi8MCtqHacK5SqAiHZC6EKDtHDsJrmGEaNNlkI2gmbBdU2nG7NqIHwRPDfIZFlYAXsC/1RxmCoo4LD1csYBG7OQ4udbmuqQhf0x6JqQhKwqTxswcqla4FqufG5pQUMLG91KMLHPinZbJ6C/FI&amp;#43;j/2iHanMpm6XY49HyDevfrExgE8t3s38a7mrHKyIa7epeiw&amp;#43;qAeswSovLbPOyypPSwitPsuGNFGIlTU/r9

QIYSgGz24XCigWr&amp;#43;tQXKuiBexs&amp;#43;OJlCMIp0G8haysrd68hb92tKfDnjXWt6LUT9y3wH4EWxUGokisilkpOj5VfpQ5EjDbECVSwDcz6Sek0jSRukyrWoA3KxsnFNCTJhV8Ai6qAsDzALrJtZ3xxa4Wj9JYlEoAaBOiuc01JQMdXE/TPqZQolUT4ikCti2eprAR09DWkhx2FTDHW5DqrYaNIMsMGtgmQx0mHQxMAMXOGS&amp;#43;ZXj9&amp;#43;VljTaldRX8ac4dP

UTPQKQcBNFs4Sbs5YiwwcpJO3AuSELCrrQMzHkhhwSTK7jagBl42siiERBbAYiSHoCsADCx5sUlBZaF1CrCINsAXH2tcvMJy4GSM1LiMxvJWiHLsxrPG7RbhZq3WxBad1txGpXSdlvAwRB5NpJLw9bD&amp;#43;CAtqvgMzNuPE9PLr1oWgpxrKGQSpGLb1j15qiLayyzFqywbAWr066SaKnO&amp;#43;ijFTCaP1PYe9ipoGM6wazV0S2nNzktuB6wks&amp;#43;oOc0/yVu

kRw0XqtVhRg6EqNauyFzRF0O7Hy8tZ4NoAOmDLxVhCzkLVkUFj93HjcEgyYTdKzBm2xOXHAgC0BcPrpYkAI279An1Jtgo2ICeFp/fId3Eq/svpBrdwS4NQ4Uvg/6ENcXDxxwOIoo0B1imjR6fCOgH9BAxrfMTjcWxnbcc/gIasqkkgad1kMbOvq8YCXG3sT6bQXSeCBvSD&amp;#43;QYpAsYBG8AHbOZviXQ581FpXWgKaBZpU2jdadFth29Zas5txGngyu

JrzmtnRongsamX413Bqa7aK90vArdDQMzQnakTq/xqFW/oiWmIii/VdyEpAbXbqycuMUx1cv1sEWgwbE4RxqZdNItt3ax4ETVvUm1oQEgINUqLdqxLfM5CVf2SI0bSgNqGAwLlCz&amp;#43;CV46eTwGL8k1sM4gyTkOeBPNlk5E4xxBSSNUgxch0UmSdgMCB0IoRylUKPvRp9GSFeEFWc1X0YdYn1hAO2tffthuOEqnfo2mlDmQLghCFYeS3yHcWQ6oSBa

ZJcIfltQJE2AeABBwPaAdcNeojuQVCxaQCSAazcAdve5A9h6JOVdTgaKVrT2uXrqVvgW2lbt1vYm2fqCjKZW27RMHXBWEpj30LfCTWyn3JZIMx4NZohUotDxJsaYjCL9BvXKmSaKdoCgo8qK0JNI9nKM6zL2XuLa&amp;#43;TeCxQUXhvmJNsMiXSVuJC92&amp;#43;GqtVepEhjt1cr8hYgy8pxg&amp;#43;f2xXGFaq&amp;#43;rhW7wzEqW81aYtRXVpAS0o10juQRCwvpGYAPSBT

MBGAWi149v7q2/yG2uT2xq9V1uU2tA7VNu/fHrrRZr662fruTLwO/tR5z3n&amp;#43;Mhz3kuTAQw4axrIO63V2auZy1FicArp27cy4wpFvGIqTJIirY2SfzKADWDa7OOYyYtysuFOGSEkFxGDTdKR4ihPUi3dSM2hUJhTF8RjXXep5WgN/P3aMJqfmyDj0ytYvduyOAHjCNRRiVVIAFXwm6GaABiUHMwYGlx8CfW52BA6yCIeYsw6fHwsOh1L09vOLGHbb

Dr0W7A7cRp7M/PaZ3XC0SGwudiEklJEBRJzq/XqcdstbJ41b1pHKmua7NohmiTq/AMoPNH8UVPR/PGKmDqVWrvaIrjMGoVxVVod6qnLAjtQClvL9FOe69NyiVIxS0GyR9stEzeT45BTofzZzaCSKCWzppi3zcKTgjDj4DDLgBDmee1NiEPsSnjRknHHEOp0O3jSW&amp;#43;3i&amp;#43;e2kbCakrDIK6U3drOXlIN&amp;#43;wgDV4QDqbVUT8k6FdJQ11sdnsfvlCBeMCL

R0VExjAIRl9ofg9Hk3EIGL4v&amp;#43;zTErpbkCOYvK6i&amp;#43;NrDCL1Rc53HAqoBQdywAa9xuxJmqciULSCts/FbicncxDthMdxPQvyb1FtT2zRarDoz2vo6M5rCml6ahBoKCoSydlsTGH1ajmpPW9PNZkkH3TNDyRth0xjQ3yTqClGNwhsnK0lxAovQiyVatBu7jBtToKuECWTiiFr8An4pEZr1eJ5s6Fv8qX3aLNVFIIyNR9gZId9qUelH2P1p3To&amp;#43;hV49q

FilyToRXkjj6tjAiL0fvR29DxBi4PVoRrRataihwdgnEc2IhbG8GKmCm12ZUa4N1CDlsbVi1UqEgHuilFE6AC0gzeJ2AA0BNgCGYJIAPkA4AGoB/eh2AVphkBzxWs6a&amp;#43;ota9bvAHwrTGvlZFNq6O9EqxTt6OmlbdFuxG6NCoUQjUfo8WkCbeVHbKNWR8oQhDWBsaglzpus1OsddlcOkMsGaVjoek4475JId047rpCK7GiIquxo0Mg9rTVt5sJ2Mp

WjgWGdTHhAqhJWJfKixAhzxlh1jlDVoHFPBuNIZ0kGJkgghEtETaMP5kgKZ615ysjy1s1i942IC5OwAeIn3Ld2wkgFnSSQA5oUPLXZqZluJyXnZQFu&amp;#43;Q5s67XIJq5trkeNTml&amp;#43;L6OrWWhsrNNrxK32zc5pndEDBHGnm9IzbIGAgNYJAL1qUoq9aq9ueEI3SbNsymsTrHW2qEjFj4Yz5pMVbRSvYStVbvev7HLpjb&amp;#43;q/wXJCwQgnQRNLbjvCWzFKY

kHkFQ0Yv4hcaYlQLTLHAHrFrDEBC9oQ5tV4mWRBAQvKkNhZtIBNDQ28IgjU7MWhuqr2mLwYn0B2EcUh/NiPIbulQ5BdoWVhirXlcYGavhHteH4Lvkkc0KQL7aGQ6sgbWL3xgem04AD8zegAzPwegHELLShbAJgAaQHIU93KJpqJW57SmzOQOiHb7ptbMzEbuzrpWnEaoUV0QDXZEkQCWIJysFpmSEcJqSqIu3Gjr1sdMq5a8pvpvBdrhSvQ/b8CO

/Ou63XCrepUYiIqIrgnKowa9jtRS0I8LBwlK0UqE9Me67A0u9stWL&amp;#43;qaaLoC1q7kkmlYQelwatngURdomh9Rfq1P5OrXDqrR&amp;#43;F3QPnx2SBZIaeSHaGMKMZib0EnpW8iXAkYUUWJdcsQvNPh4vEUuzYgEtHtod1At&amp;#43;EAFcYQjhyooTf0zBELEp2llwgMQSCkcNBN/V9FZsFgRBVFKAl5KHEFV/MeECQgaxI98k&amp;#43;FKTDWEKvhssyZatAzV4urqnqow

gvWmioBsAEPLeT0fSDREZQBcAGjYpAZDHOVJTAAIMxWaM8FkxupWaQRsXkXAoK7qOsFk0K7Vls2av996Vt/BNvB8RqPIXTRSjIxyvHhCp2obMg66KHbYydrbNofWpkbV2WnxU1JAQwM7fU61XkNOruEMIoYZE/rBaup8tQihareayFKnTVLy42a74Pqu2v1yez6CwLbyrs5aPSzPY2fKyEhybFNSU0DTOssojg7plkcZBDCWsUSqLKKE2mcaIxjr

RRwLVfoWfWMqqgtiWxkCkJBNVCFoeCV5SGHpLr4iALX4Gst3EFJdJqCxkm8KdXNSpMlU6&amp;#43;8TjV8CYtzbGRnnS7IAmC2gAUtpUUPHcJBgKNRVfWxJbGKhA15FlgOq0&amp;#43;FP&amp;#43;DibD2Iz&amp;#43;Mik45JXAg7eETdD0H6SOjA5srEoYAUnm2wIAO6CPK4FUdZpcmsk22gQ&amp;#43;Ci4X1o99gQFcfIR8DywgFpylOQ6vMjxKTwETYAkYHwM91Su5AxEaT0hAFdMTIBz

4t8uplUWjoHqg8bW&amp;#43;OjfR/z3tJba5ZbzxrzG9TaBBulOiKa0WD8gBkKEjnEG2SQSboXYDlRJ5F7K179VZorE6xbudwXO/m9zTttO&amp;#43;bSljQe2vMy/p1YvEEA6BoREIQAkgEg&amp;#43;WG1sAHwAEV16AA4APa4ytnj1F/pzHm4tNzcOBrB27zLoFrXWno7hZWRQCU78xrsO1C7u2twAGZq&amp;#43;9w&amp;#43;XciguOq3Sh3c4rsDJYEAhAE/Gikbe2lwxYcrj0qCKw&amp;#43;6v

0prwqy94qVoOr3qX6plu&amp;#43;g6XBvKEgp1MYmqu34av3JvK33qh5trkn3qsptOs1FwW9s/Km&amp;#43;1cXx4usDzTR26uSrDEvUlRJoRPQQ5JAKSekuuKrM51hFA4xM07jUgdPLz5NFU4NQIRkmYocOqnfyaQZNZs&amp;#43;DVgwXtVOCDSQ/NPSMDNKNVNWNLNXAxXFLooBUTdBI5fTY1Q0mmojUMVkijyDbUmxCJwGXKZy0kIIH5J5H9iCCzdfKvvR8im2M&amp;#43;mDzxq

HgFDAFRPCjK4OFhvRtYeSFQcpELlJjQKNNDYxQ6MTJ/tIEqrkDYAW8pDXJlouv85FtsbEKhLtPsRKv5zrjmW9esuQNpWYerhTsAeyw6HptAers6s9pQu8KbZou9HPMc8HnCQWml1/nQZBJh7EFkulB7SADQey9bUrsPIGukVBoymw6S6RuUs&amp;#43;nKelyJyz2VBgs726/qbovKKwq7v4GvZXGKo6wvKmnLaHrICih6QjvyKuSLVzKM0yq6eNkau3zb/

3MauwuET7swVKXIy1tcNBgxnaFU6XMTFQ0&amp;#43;w9nx&amp;#43;KHZITB01ek6EKgwMkF2TMMBd&amp;#43;jaxXaArGqxc5OYwOtM8GXELnNF/LfSaKE&amp;#43;hVH06vlYwVIsVpEyjSKTxe1aU9QICsgNGlJSdVBS&amp;#43;OYqmumH5dqDcMAEqmiC3OGrcC6Ygs2&amp;#43;UIqBI2hs8ZEFZenCJVKxjHs6kF5RiGytktbJz7s5OXzjxKR9IPGBCADgkTABY3hRSQoLPLoYlIZx3VJQWoBa&amp;#43;

ooOSkMAmzuvBJZbPtN4G9ObwHoGO3G6&amp;#43;zvIUkxq9&amp;#43;1z2ECLh236VaOhgXFQe9B7pzruq3fqBVrr2vB7vmvc2kzymjKb2&amp;#43;3S8pvJo01J/g1h/dnaKYs52j5b0k1Iq6&amp;#43;xfaEZayKTXNjVoI/kARgj3NBFBDFXwbKzQntMOE67WbJTkTLrVjRABX/NQ2gKOutLulvy0TfzUOuBKnrD9Hm6AE8sFoQ1wQgBvbBqJfQAWom5Ous7b3z&amp;#43;ohdaVHQYk58Li

npQO0U6Hpo2ahVrs9qQWvs63lN7M3hi7lQv1b5xRuu7wEzs7bhVejp61XtpKiubS&amp;#43;Cng/p6htMGep7DL0vVWpzblFN3ub4NnGoNWyzyNVqkIucrt2wMU0XhP53rymRT53i1Wy1IGeLC8nGo9nsSdMLbCxGpRYFrDuM0gL/rCGvL6h&amp;#43;bMNoPe&amp;#43;&amp;#43;aGeqPe8yb0JrDe6k6M5wM3S3s0QGUWaUE/gGYAVaF6jHJ2FsBHACanU6biOoJWwe7QFpCzKzaF

5A6O4HyRTqAejs6Amwqe/o6ezpzw6WVn9hiu79pG602sxV6lTD0QJt7OnpSu3NT0NGT0TV671uWO2m665pDrJJzR5vI6WwcJ3rLQ3Y6YOCpoOz5QUvLQIyy0dA4utHRXlt/W5FKnEhOUYEo/1slu/ub1FK4etSawlp4e62h0ALN8tTRllOYWhYQqCCU0cLgEZO/uKBw8L270kTRyzgPMadxJOAa2097MeuvhVla/Wiz2BRJf4iVcCnhalAiOQZ8t

hBOdLKpMVCc1QigOFEloTxTD0H9exj4JCE205ha2pD0QQpr83DGLKk7otOZbfMyFFHAAACBNUDgALqcogGrAbgB4YGgAJ4BMgAqAAcBSAElkhgAnHz7oNV0YQDmAWL64vuRACABsABEAOlADQGrAfQB6QHMOysJEvuS&amp;#43;o2BUvoyABzIprLd0bL6owly&amp;#43;tL6PkEdS4r6UvrS&amp;#43;jL7FI0q&amp;#43;0r6MgBq&amp;#43;mw7CgDq&amp;#43;7IA8vt7Ej8EWvqgANr6BgGy5Tr62

vvgabIBXan&amp;#43;gLwVVzWa&amp;#43;pL6Svta&amp;#43;sr7OAEzvas8V/lWAPr60vp9ILAAloSIAYlYKgGCAAyYEvvG&amp;#43;qr6GvqiAU/w71hBAUMaQgDzqBb6MgAGDbcEowj18J4BcACuQUkBDvq2&amp;#43;nL7JvoyAA769fB7SzMJNYAS&amp;#43;gMc893wAb6QF2GtuNkBxnAhAfAAh6Az0QHbXCDYATdI0AGlwU7lfAGbgGphTvva&amp;#43;95SytBzgBL7MQBIAROIhzUbseb60fuIAekAE

AHdMM0RsftIAEgAERDYANOABg1wATQBggBeMdlISAFiwaXBIlym8CoBSAFxyXAAAAAo0xJLgWMAufuoAVogAAEpWQDLdKMUvoAKIFn7UQA5&amp;#43;0CpR1ABAKX7efudgAX74fu2&amp;#43;o2BGvoQAHr65mk4AJngP0jLdF0Bifslgfz7lQCyASn7qfu4AVV6LgCfu9cNjfubei4BwPmC&amp;#43;tAATfvFQHu6FwGpgVV74frsAIYAEACYtSnZwPgHOMn7m5HA&amp;#43;Kn6C

/E1QJi1SZgQAbbsIQD1&amp;#43;vLTsvqBAAwA3vupgTt6CvWUWOZpGAFD&amp;#43;3CoQ0BhgcABJcFd8UsRgAGhgEABoYCAAA===&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/drawings/drawing-2025-01-05-05.12.23.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/drawings/drawing-2025-01-05-05.12.23.excalidraw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p>
&lt;h1 id="excalidraw-data">Excalidraw Data&lt;/h1>
&lt;h2 id="text-elements">Text Elements&lt;/h2>
&lt;p>%%&lt;/p>
&lt;h2 id="drawing">Drawing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQAWGjoghH0EDihmbgBtcDBQMBKIEm4IIQArAEVMAAkATiqAOX0ATQApABF6gBUORoBmACFGRtSSyFhECoAzQIRPKn5S%0a%0azG5nHgBWADZVyBgN&amp;#43;KH9iAoSdW4eE8LISQRCZWluAEYbqYhrZWDuAAZT5hQUhsADWCAAwmx8GxSBUAMQvBCIxGTUqaXDYEHKYFCDjESHQ2ESIHWZhwXCBbKoyBzQj4fAAZVgPwkgg81IggOBYIA6hdJFcAUDQQgmTAWeg2eVTjinhxwrk0C9Tmxydg1Iclb9/rcINjhHAAJLERWoPIAXVOC1wmWN3A4Qnpp0IeKwFVwvw5OLx8uYpodTt1YSW3CG%0a%0axx2SSGvxeyt1jBY7C4aAAHKd46xOC1OGJXsNGjsXo0eL93qVCMxuukoCG0HMCGFTpphHiAKLBTLZU0W05CODEXDV4ivcO/HgvLYTielyBEDgg&amp;#43;2O/CnaGYmuoOv4Bu6uBsF05fK3MAFKYlHUnsC/Q&amp;#43;Ww/Hk98Q9gZwvK/7I8Pt6vx9DF839&amp;#43;NT/OMmP4nreUzXABLw8MBUygSU4EPk&amp;#43;34nteIEPjw97nohV63ChpRwIEfoiOEB4nr82gvNqlHai8%0a%0aSSNNGLwFhhUxkUMLzJo0RZhjsQw8PEWw0TsWyvixOyNMmbyNEkybJqJ8S/FsTGntoQxDFsyaqUkvG/EkanoTRwnaNc&amp;#43;aqTsjFJJGRZJAZvzJjwolqdpWxDNxmk7IpF44QChD6I6A4IAACgRzBEdwG5bh8&amp;#43;ChFAkL6PoaiDv5u5UmgAb4IUAC&amp;#43;qzFGWQ4SDsACq3SSNgjQABoALKYAA&amp;#43;oFbBbAAjlAHCkFULZsByMziOgCwIEs5ArLq6xoJsTmnJq%0a%0aqDOPE/66ucxCXGgPGnPcjzPGg5mnF8EpnqUXIigSMLwsiSJII2GJYt6&amp;#43;JQgdxLkBwZIUlkUAcrS9JihKnJQtKQbCry/KCt93KisyXUfeyMrCHKCqvCqaoaq82qnPqvbGl2uE0uQtq5agqXOq6Q3oLgLxes2xC&amp;#43;v6i4Ar1WM8EkbE8MmtHTgwTAZkmqD6XGLOJlmHA5mggmNC88TxLTzoVlWa5hQgjYk22GSPajPZ9n5WNC85o7jhO6lCbqs7zilF%0a%0aO62wq5Y1Lpw7nuXa/ue23MdBJSwV&amp;#43;n5JPbb6YdOJSNK7jtPp&amp;#43;Qve&amp;#43;&amp;#43;n52QH55WQ&amp;#43;qkhyeewPppkdTBRzsu8hr6Ox&amp;#43;MdIVMaNuyebHO5eyfW3eYfnhHBeoee9OfjxcdwdNJfPshnnbkFRFW6R5FUZRNF0TGjEGRJClhjw&amp;#43;biSP8QGdchYlvEBZuQp7FFhPDPxLx/Fhj3UbR&amp;#43;3w/DCLHEz&amp;#43;O4maRPHFbCvgtSUMyZTb8dfMcpvwz1s&amp;#43;Z2dqcnJtGJ9%0a%0aj4JYZTWJqlLxFscK&amp;#43;8lBIRhUhPbUjQJyQS0kWEWHsyI0W2AxHiYkGYKUFv3aMdkP46R2NpdC7Fx6HnziUNGnJvK&amp;#43;WrIFBUIVaz1mlrrKKMU4oyCWIlPcC56QZSyrqcoEh6g1HqsoOYnRfj1HoJgfQvx7idBcJILY7R9AdXgCDHqfVKAcnxpsJIJCPjjWcFsW2Zw/poHQktB4TwnpKh1h8TaXUTG7TBPtIk6AETHRRKdTESM8SuIqCSO65JKRPStH%0a%0aSRkwMKhSiHEKQGfI5oCnMbEkUb0QbROJn4SQZNoa6lVBiOGWoTFIyNCafIFDrSY24UufheN3Q8AyT6KGBtAwfGDKremMkGanzTFzTg3B9GlHTNzbMXVxz5hoipY4YtKzBEHKFRhMtcTEDlh2fcaBuy6l7P2OZSoRxjgnAQmey4XT62xobCKxswSmwWduJKayzSF2Yp&amp;#43;Mh5CU4IVjJhKCZcYLhwAknTObzzx3ymIBGuYBCwQX&amp;#43;a8x5cEPknifFsbC%0a%0aALm50IIiRe&amp;#43;FFO7RlovRPupCO6WQ4pJQ&amp;#43;IspJwqUmxbSDMoyNCmigmS7kkHq1&amp;#43;NxCc9NdjmVGvi2&amp;#43;MZWKqWGFfGeJZUykKbq0qhkUaEt0CPMzcTCIosIMGwhKdyqm8MKNlSAAj0BXwAPJCH8hQGAWTlD1CSEIOwWRkwADF6jrFOJ1eYixljaI2GOAZBwNimVOLNeavBFJSCsatXgwLPgcG&amp;#43;I45JLirpuIgB4o6HJ0Q&amp;#43;Iuv4m6pJgmPWeuE1JUTPo%0a%0axIBiKeJfqA3OKBuKNJeaMmQz9Dkj4eT1SwHhkUnEJTFa6gqQgO0zTqkfBdMQN0EhcBDAaaTJpZyWk7SplcNiFEaIeuZgmPp5iTFDMzCMq4Ml&amp;#43;KaRjNMiW1y5WLNbO2BWZSlbbLXGrAh&amp;#43;zdhqTsaUPWVTlyXMljcj4FtOzoodg&amp;#43;W2p4wW&amp;#43;2/X&amp;#43;9y4K/3kpKA3ZF5c7zPLBVveFXyIM/PPAnBCiLvlfqQ0B0FaHs7xw9o&amp;#43;CiYKd3vPg9CyD8cf34ah%0a%0aWALOjsRWYXHGCuj8KGKEdA/h8DpHEM5zvSCjOnH0M5yY1MVDCGBPx2BWBl51HAV3go28QjEnwUkeo2KvC0riLrPxZizu3dcWQX7s/IYSQ3K/3iDJbiEYJ7jhsnPbuK8didInipIYdFtRGc0jPTSQmLyGXMupNydkKK7Ak2RYsklVLoR0ipGyQX&amp;#43;4r2FtAnSbEprGLTu3XudF8xv3C&amp;#43;OIz1lnLiVQQyozQrEHWQooJGmq8CxqV5Txnzo5iUFlpYLW%0a%0a&amp;#43;VKGbWXfkkaezkItFnkhPPRClb1qXQWffT&amp;#43;KVKBaJVJMzM92IGQizTbU2x94MWS4trz1mYzHFpVGdSBnnIIOGOxIhtlhKqYEBKvytDCIyoYQe5hgJWHxQ4aq7t6qSiarKFjCA19GgAC0KCYDmJoPocwkj&amp;#43;UIPUfQmAV4ACUABqsIHVqKdVTfqrrhqFiExAQx&amp;#43;YfVmN4OSwNK0bGoAUhtcNW0o0QhjYdTxJ1dRJvOiTVN6BAn3RCVm16kTWSVtp0W%0a%0axJvBac5v52DXUsosljpJ/Wgp7MEa6mKSjU97aMadqxjjGp/b8afBSODJZ2Tu2UzXGZhmkY3KhtXWzZDHxrc8z5uzCMCkV7Dd3bMl9j2PhNiWSsk96yKFbJVsOdW16HMQt1icx9RsTayvCnhO5bcuNPIA9hx2FHlM0cDg&amp;#43;HYYLi7cbBYp&amp;#43;mhH89TFpoR7zYA9FguLJ&amp;#43;fiNe2MKSRfxiA&amp;#43;FUUaYeelrF2Ke7rcZR3LFune4Te3mxcb0kIzFhphxUvP%0a%0amVJOR0lRemBZRyIOUt17FGC3j014kcybt995ySFU5Zrs/Qslm3Xo1SJYYyV25UZlfItbKtfHHPC7onKE&amp;#43;UlQFdTcf5X3sVVile2IE4WSnHTShKEyg1X4V&amp;#43;ygCGD6ER0aENBaF1UeEIHKiqnoA4DmDmB5EkBqBaFUVmAkA0RdVOB0QYlg09WxxZUJwSVeFx2WmsQ3SpwjT&amp;#43;Fp3ZzjSOi8WZzOl8UukJACVui50zTCV53LVzQl1aR&amp;#43;gQCF3&amp;#43;mkMBjF%0a%0a0lAF0lwhmlxrSVBhnyUbUKURhbRVwDytHVy7XANxh13dC2BHSN1MKDCnTQBXk0jPnkit16Rt3nXt3XSVG600gvwG34XFg933Xj0gB9yPXlg/UMM2WVh2XZj2U1mOCmmOTnGjwuVjwe2CNb0T0/Rw1PGgzTwQjwykyz3dirj/Twy9nyJKPfCAkqPhXqzAGDlqJBXqOLyaJKCMSDhE34xyKdjQg42kxhQvD9i6IGLIxKDwwIzaLACoJKHiEIwozmKm%0a%0aJHxPAqNEx6LSxzkzxk1wz9io3NEu1b3UyTwpW7yHz72wUHxxWH37zsn/n3nQjPgLFpjP0MnEj4nYgjBZTVjkhmNC2fhpmc2GGogOReMLHphc20jeAUl4mLDX0flYgFWGAjBniP3qzIhWychFivQ4mLGvgITK1IWEnywkkjAomHi1jpk6y8y2EjFuJchpg9Qa3zD4jPmMT0WOA5nbhZWkhFkgnEjchkhskZJeQoVYC/xu1/3SP/xnEAOVTey4Q&amp;#43;0g%0a%0aL4V7V&amp;#43;3iD6CSAoFKmcE6HoAAGlNBnB8pGAhB4hDQRgagRhQldRHUSDnVMdyCNhKCxovUSdfVhc7JLEydXgScHF2CC1o1BCJB41jpE0&amp;#43;CU16c00gkHoqQxCIkJDxcvoFDC0icS0ZClDQZEzSgpdrDZdYYdCFdm0DQDCzRyljDNdzkyxalB0dgrCx0tdWk7CCzHi5IiM7dXDuBccPDeZRlh5RIaZwF3cEAYizZmdZZj0IiSyz1g9dlQ94jn5S8IAH1%0a%0ajcY8rk/9zYsjNMxihjU81j08/YwUM8YN9yli8NNga96isNdy0IZjHxVjyEDi287sO9YIkFTirjzitM3ze88Vt4bIct2VkxasaS19ezRxjFH5jJKUaSJ4gF6YRZoSwshZ&amp;#43;5TIhZjEuJIt&amp;#43;IzN38W8xTqEf9281yntoolVgDQDydUpPsigYCKhIRwRSB5JfgWhOghAQQhBDQAcGRSZlEhyiD1E7StEHTscwxnSaDcc3TQwTEmDg1hLdRfS0AnEZDOD%0a%0agyeDvcwy2cIyOdhCM0Yz21s0&amp;#43;dlCpCdoZC5Ckl/Sy13p0kDdq1TRcztDxpMU9CizSlIiPgO0TD6zKzzDB14hayNCbCGyL0iwHMeIHMeMF1WYrgV1XCHdRkV5bI0FRZ/CZkhzPcMjQjllxz7kNkPgg8YjL0NYtYWVQ0lz/L71n0gjpTMjLZsi9ydzuifZMN&amp;#43;jijmMAItjBjZ9Hw9jtjJMAIairykMLzIJCNGTKNCNBqurBjWzmMmruqwARqjE88g4%0a%0awUJiZr2qg4ijZrK9rhCM8N0IFM/ZFj&amp;#43;q7x6ihqpi79zw&amp;#43;r6q0JK9Dr7yP9Hzgo0VNyMUvy9N&amp;#43;9QEATb4JxjMssDtuV4he50IV8HNbIvr&amp;#43;5Iw9ESxRxIsxkaY4sZ49sowAaeIV5QMkFdhtZALusF89s0btAvr0IxIAbxsWUXjRwpo9FpJsad42IdhhTrJ0Ir4aJtQHNJJbJRJrJLIVITN8xoEaSQtDIGJssgrthrhBJFsKJaU&amp;#43;Ix9b1obNttg5IWb%0a%0al4mbfj19GJtgSx6YWUXNxbJtnNpJdhZIbJRbIEhZe4aTTJ9t5zOtRw556Y&amp;#43;akTIxsLRidprspUCKpTlxZTSL3twDKLvttUIAQQeR0JwR6h/J9BcAeB8B2LkxugAAZeqeIAAQX0Hjt4vR00QGg&amp;#43;AoIAV1HxyoNMXoPMQXKkvJymsgDktQAUsBiUu4KZ1UuTXUsDM0vTWjKtNcr0vjIMszIEGMpTNF30ozPzQ&amp;#43;GzJly0IbXssVw&amp;#43;GV2csnLVxtA1xS%0a%0aM8oHQJmTF8vJgnQEEbLnkArHG4h6UXTZk7Ois8NQEEj3mgXgl7QCJSoqsPQyvCKysD2iIvTiK1l4lxxKo8pnHKsIrfQ3M72T1yLqpdrE3aKA1Wq3M2DyKOrAlasYwAlzzOrYyfA2sGIsXeSKIfKOOyNfMuO/OWJOIIbeonlEhZS3QYmFkAudwltpWfnzFok0mGDHBArM34goY4mizon70gmcOMXnivh4gnGdtFLdvwqfP/oAOexIvYRAN9ooqVOg%0a%0aJVIqGIH0C2GIF1XEUwDEh4AQCMHaBaBGGUFvmYHnFR2IO6n4uzrWEdN4hEomgLDoL9W609OYKVELqrprr2g0q4MZ1DKbqWU4M520o7tKBejjIspUKTN&amp;#43;mLpFzMvTMstUMyRzInvlwcqV30LnuyvCbLOXq1SrIJgmAN0aT8p/s5EbIslQSciZmtw7MPtZhitzAnwZnEiZnLGSuHNfTRDHKfrbRytftVnftloDW/orN/rSPXG6cgHfSysGIo3Qa3Io%0a%0ayfDBXmpGOavEwgjaq3KjAgnWdmpcwgmQbgZKFcfeWObupbwetbjwYHx03fJ/PvmuHMijC7kAvzF1vbkjBnmcgohXm1vMlVsjFshjHAojGM3Ug60m3Mk0h3gIXMkPkkji2jD4nZOK1q1Ea8nFPdskc9qIpezkbIrVSUa&amp;#43;2ookHoFIH8iqh2Hqh4DgGTvjt1IQE6GUCeCqiGHygxAzttIxwEsGg2FogDXGnJOcfdIDTLu4E8ep0jTMrrv8e8VZyCd8%0a%0aZCfbp50iYrUMr7riSJxJ1LUSeiazLUNSdyTzKnsLORmydLMXvcvGbKEKc&amp;#43;H8g3vyYqbXFS1UiPncPbLQBcKPqaZnP4m4h20HK6a9x6d90yv6dKFyrftnJ7kCySNOXKZXFXLxYAequevAe3JtgPIghzYQm2eAYaIQamMrzPKWIvImq3LHCQZr0wwuZU3utwYzZ820yojOMeYpXs2swodMm0hRMWz/I/mX0gjeAcxeNpi1jDHYiM0FOvvvmMxCr4nk%0a%0agYnYhom8zIgnbePnmMj/LizplxOfhngIQocxaDHEdu0eq6hHIVRkaAMJYUcXH9rJfQGcF&amp;#43;HjuIBqF1TmCgGcCGAAHF/J6oahdS4BMAWxKp2oLG&amp;#43;LeWbHIAdEcUHHWIA1xLzEwqJWFp50vGODfHlKG60Q1KlWW7oAtLVXYz9XNXOR&amp;#43;64ndW0yh6knR6jXx6TW7Km1HKLXI30ZrXyyt67WvKCYagnXlyArVZYX3UxwfWIrUOGnhluzIqgrxtaVg3Ur%0a%0aKr0q/cJycnIBo2hnY2UX&amp;#43;IE3nXk3lP1z02gHM2FmQNYGrqkNc2S2AI&amp;#43;MwH1j5rbqHPHZMHMI7yXO0JTzJiTmGjlnLrPOBq/lVnSipi5NK3C3/0K4IuzOg5nONmSgWj62EulMg4oHC3c53wYv1jFN4vZqkL3xWMbPfP6j7OUu2MfOrOWr3xkvZqYG/xAN1rm8wHDj29jiW3Xrri4saYP4VtHJA2Xjh4pI4WF3hZdg8725WJhZaIpaYwZ1LN8U7Jnj%0a%0axxh4ppALH5hTBaGJtgEW6JpJetVaKJr4wxGsoT0IV58tTt95Kth4HiGJrIoseI/m&amp;#43;zoE&amp;#43;zQSWUL6JwAb2JjMdJNvCwOGh23Je2xJRwB26bIacUWHfvVb146JaIDltgF9aD8VuszMhTjEZIzMLc180f2UXMiELIIFJshUPMF8HJrhH4T4lvBUpJ/NMKQKp4GZ5JNJWJwEHN&amp;#43;49vgWP4hZBJzJeHQfzJtI6bn4CFoKtMZIosd91IaVd5&amp;#43;4r58Tow6a%0a%0ajNIIeI4TAKP5Dl&amp;#43;sDabNT3xVsWJHL2pGZTb25T5GFS/aSWqKVGJB/JEchBSpooRhdTMAw7dVugYAk7mBSoGQcwoPM6yD&amp;#43;XhpaJ51xpVJ50UPUAzmPh0PYjWCadZWcP66AnFW/FlWSPucyO6ODWtXkzqPB7u7h6q11CbK0n8yMmZ6smOOIA3LuOe0V7ddcB4dBPSrt61wTMF4RHOYj74ZpO11ZOPGGHr4zalP77Rzw2&amp;#43;nVcBnz1tOr0p5iwbJ9OhO%0a%0ayrJnr2E8TPYJars2pjf3jzfP6ukMa9LPAuVi7OK8a2zrS2YxlqbyEVlr5qWNG5G22vbnW2u4HmiGW2iw7IwwELiwCx7ui3ImhbX6zCwLMm3brLZH4hI8l2YCDYkpB0hSQN82kGFrAlx6iRJI8FDkqpC4gGRaY3EDWHOhQSQQBaj8NrLSmCrMNvuevV2gbwvb0IpmobE3sRTvYqoLeijMAFAVJY290AyYeHPHWYCYB4cmgP9lUHoCNB6o/kOYAgA0%0a%0aCBR4ccwbllYxg5Y4Jo5kUNGHz8IfBI&amp;#43;tuUoLH0AH2JpWfpGJnTiI64cU&amp;#43;/BYJhn1EK6VxCUTCjqWhMrswC&amp;#43;dg3uhADHp&amp;#43;VbKk9VjpkycrV9a&amp;#43;zrPtKvU&amp;#43;AMgW&amp;#43;5TNpKGF2DDwh2EnRMK8Fqan0B&amp;#43;7MTdi8znZapb6IbNKr01WTV8tOIeOfjw3nhL9W&amp;#43;i5P&amp;#43;qm3X7qd5mx/FLrvwKJlFi2&amp;#43;/XanUIfABdqhFXAtpm0gZldZqJ1RZoWxGr7NBiI1dL%0a%0ah0OK5Vd44VQnBi/2bb4N7mhDXhqTQUh6JT4gFIzHDUW4hVhgUJY4OpDipLwdIwwYzEN26xI1Ye2oKSKzX7JCwUSa&amp;#43;KbEZDUGjgfCKAiWjZE15IcbItMMSBPDPg4lVutMW&amp;#43;BGEU5aZwsWWWbAzCR6fCtMvEBzGOCYZklKaRJUVB/lwrf56B92RgRkUiim8fa7Ax9lbwDq/Z2g9UOADwBgDx0kgdITtLqhDqI4WwwiZMLqhGCKCa&amp;#43;1jFQc4B0i44w&amp;#43;%0a%0a9jGaCmULqx9Q0WHRPqYOT4KsLB6fNupnxsHqtJCrghwTq2cEatXB7g0vsxy8G6EfB7HKfrky44BD7WuAPoKENtbhClQgvcEsTzbI99vWffDgH63PpC86Ic2UfsbwgCqcI2mozToMzyEaweGruIoUm1KHojKqszdrlv1IiEYqhs1DqmW186KZf2Y1ACAMKrankWhs1D0ghA84pdtgvVZrhQmuZPVTOHXEhl10W7aQeUdkb4QfAEYnwdIWtMMDSgjD%0a%0aepoWBCSSKfASKPw1IeA5dr/x5RtjiEm2aBMLDHDP5niMldLOpGniPwqsOCB4TQKux0DJSAYr2liPvY4ieEeI59p8ABwcAeAmAHkEkDgDlQkgfQeICaX8gtg5g&amp;#43;gKqPgHqBMjSC9pIPqoKkiIdWIorUMG42DTjh4&amp;#43;MrYwXKwTQijwyRHFVhKM7q2CFRI9Iytq3z4JNs&amp;#43;FHJUbWlKBy5y&amp;#43;09UoLPT8F5Nl&amp;#43;BTPjp8HygGieORo9mJJDgFvB4hFo1AC%0a%0afV9Zn1wS6kAiaGg6Z7onRLoyfi5SjYeiZy&amp;#43;Q07iTjGY8dDOY/NNhUKWbhjBiUXHOBZ3DgiTzwtXSoQ&amp;#43;HTEpjhiR/d8Os0mFPl2uMwtth/xuI453mUYWmB8XOyLdTIEYbWDCKeLXwJaANMeLVhZSTxNu7KaiKZCciYk&amp;#43;Ig2P8rfBm7O5rgi0REThXPbzi1&amp;#43;zAglmwLAIcCuB1vHKBUHKjYB8Au4uYCCCqhsBkw&amp;#43;UeHP5E6D6B8ANQfyJIB943iWRg%0a%0alB8aH1DAjjSg2g0NHoMw6GD5K2HIUfK14KBM0&amp;#43;AEqwTpWAlSiEyYE3PrEz9Q0dFC0ExUYxw8Fl8zWbHVtG6OZHaj0JvHIIbgERw4T6&amp;#43;bfVWMgmcjXAAaVohglaJtF0wNuXDGiekKM7j8wi2QoabkNYlejNaTjSPMkVGncSnRQYmqt&amp;#43;gEnQNUG7Qnossy6GDFTyCYwtjGIklbl4B7RT6Rl0jEPTU4bGZ6VuRGrJiXpfsYYesT9i9DM2bGaSeDIfB5%0a%0adBhn4X6bDLYyozHOdec/g&amp;#43;AUnP8lJr/Trh&amp;#43;W3imR&amp;#43;yhNP4WbTRLKRKCeiGbn/DiovFVIrJcCm8AoYqR12ykd4mGCGxfF8BsPAhBJGWFETZIlM3iCr1JRRgTuKkPGnyU1hm1h&amp;#43;Y&amp;#43;OEk5HdTGY&amp;#43;yPMtYVyW6y3c9EDEPRHZAVqdZBIYJCGoWCFjCp&amp;#43;4GvIWGJDpp2QhUMkE&amp;#43;KpHHDCxtuIsQLJTNYi0xV4VKcEcWEG5PwxugsD4vJGRoGyTuxtFLM1%0a%0agJyeSWuyIiUh7QXH4tZGAU8iriM4HKlQpEgF4P5DgCEAhAUAeoHASgDtB8o8dIwOCEaCSBDQ5UYEFlOUE5S2RH4/OvlKZjaC3x5OANAKO/FJ8qpjdVPgIWuit0oyQE8Jl3RcEtTKOEE9qfKOlFjzYJmhFUekyQmQAUJQ0/waNMCGN8eQU0k3KrG5LuzgES0tAGFS7KO5aUbmeiGFVomBF6JWQ/3PPWn7TlYiOnB/BxKjznT/RvkqqnxMLbmcd&amp;#43;FX%0a%0aMSXeH/lgRsx5sJtvmJUnv85hMFUSNfjm5ICXch3AHtAJUiYDd8VPKOWIznFxyP5mIlgWbyJaKlU5yjdOQTHyj1R2gSQGoO0BeBsBnAPIXAJ0EkTJ0eA&amp;#43;UfQPUDw7TA0cPLLOqyO8JPjm5co3ULHxMQdzwJPjSqb&amp;#43;Oqm9zLB4o6wY1PI4yiqOk8qCYX3o6GsUmTHOtKa28GV9fBK8tCcUPXnuhSoW82wheiFiRY5I1bbvpJ1QDETGmZ9NiEWB5I7x%0a%0aHRZQkIjfPU4v0Z&amp;#43;no8TiWEny&amp;#43;jbWF0txZ/Lmb8TQG5XCYXjMvbKS7mqkyBegqxZ4VURV7aZouW9rLjApKc4KfiIqDtB4cLwPoDyDYDKBk69QfADwBbBGBEcMAZwJICvjw5OgNc7hXXIJ6IdzqhUgeoIqDTl1PxRg0RQGX7l&amp;#43;MJFPc0UXVJkUNTh5IE6eRyFlGQTjB8imeT1OVGaKWOaonRRqKYmcdKka83Ue0BMXCc4hmwh4lMmsWxDD5K0hxQxT%0a%0apo/ML5W0niWG12m3yNOlQFiY/LYlM150nE6aSUNX6pKrpzbEMXbDC6jCT&amp;#43;4w95HJPozAKUU&amp;#43;M6YbEogWkNIR3/DiAKQVrS1KZFEDfM8224fwsSaJA4jHJxZG9glOC/yfKUyWrjCF3A4hRAHXg7BSoQwKqJIBGDghyoyda1M4DrC4Bk68OZMOnX95cLA&amp;#43;OdDYGzIca8QFykfedLHyZgiLWpJgwZWYL/HN1BlgE2RZMqak90x5sypRfMq6mLL1FvU&amp;#43;%0a%0aeYhPNaDTNlw07ZQYt1EA59lk6C9NfD/hboYhS6VAJ63ImJCas7EGyHpySp0TglDEvaaaoOlvKjpfmQul8qfS/KmBIS4MTdPCV1dUGkMwFe0QTW/JY1gxG8smvElLUn&amp;#43;VzUBS&amp;#43;ThXUQ1JyFS3E92O5sQh2MFPEisMkhwVJag3JyIQjog3cl2gFeXpln5K8lwszkGcZ/iSU&amp;#43;TUlJKxOWSuTkUrsl64kYPEB5Ccs2AVUa1LqSqjYA4APIEYPHXBBDBc%0a%0aA3QeqMU2tKcKlBzS&amp;#43;8b&amp;#43;yviiqFs3I6jowW6VXAFyMq8eWIvlXCjJFoy5VfVLCY0gR5oEmZYouFwdSUkuq4vsaxWWqiCyA04ss8tXkWrMJuAXANapmmvBjEYWOiFynNE2L9BgyBISfIIk0kz47TO5dfIn7&amp;#43;q75zE7xYdN8VkpPlr84oUEvjm8TQl3826ZF0gZhjU1W5eojDJ6IjUWNjsEasDMLb1EwZX03YoArgjsb3kQcLjbDKDjZdHYLRCTe&amp;#43;DY%0a%0axjg4xDXJYumpaGKTolBMwsUTKebah5yFAmksCzB7FjTIV&amp;#43;ZyJfGojWSwKncUXsLx0ic8AezNdiLZChGLwtMmCQVlTWvgQ1QSNMLzNGFOx8ReSh3D2RLJ&amp;#43;7vEMKnPBzMcHkgQl1IUkRfotydk9c9ILmEWItiQ70w3gLZS3At0m7bB14CkChsZjMx5ZFuY4IOWLULDGYKs1kCzM/EMyHDJIxw7tQSsN4MDsF6SpOcS0pUhStUv2cqFsH8jEAdgcwIY%0a%0aAyCqi6oTAPAZgIWH8jMBlALwK1fyt3WCrbGw0d2aKugQvjbErc7gLRF6XlTBRt67ufhxql9zY0KqiZS&amp;#43;qmXNT31E8z9VPKu1WUS&amp;#43;cEyAAhP6nqiTV&amp;#43;GrZUvR2XgbNAUGl1tTChpjcR&amp;#43;pyp1VyMQ0ydHcP8BmHTUBE31Om2073B4ufpTk8qcReDRFgCVcT35fywBpvxjXb99&amp;#43;bGITfRj35jCQG54JGVWwOpgoWivG7jVXDemZtSudOpnVXEp2FsOq%0a%0aKkZakHAxmpw/YvO4TTjIE2PhGdUMrBotXeQZqTwV/KXfHFQbwyvpkY6TUhg6rE6c4eGZXTnAoyi7HYN5HXTHGdjc7RJUxRodmpa65jnyn5dTR2wLGzCEV6WJ7t1jcjjhmGm8RbLxCLCtYBUTDM&amp;#43;ItkeLPx21HwyMF2uhZGYvurETpMdhgoix1p/EPbnN1VphZCtwsPiJJENoTdNNbMsSErIhLzl0VwwVLIwzHACQXMIFW&amp;#43;ADR&amp;#43;LGJoEPcEWQxGMR%0a%0auRXcwFehuzOLD2TItSHahlfkgR4JEBCvZ5uCSsyYokSY47SOvEZ7Q6HVmsgsFC1HyeYpsoCRyErIniE0K9vNH7t1ic3pYeGHelYdfBLCb6MUlWBij5tYgs9/uP8GksvD26jgVs5s91AKiuGYCOI7MoWObh&amp;#43;LCxf&amp;#43;U0DPRSgUiiQN9fDY2oBUpkxYqBIfGErRAbmhikR3krBf2ra1DqOto6ngc6PoiYBdUmQS0qQGUAjB8AnQP9ojnyWlRPQC25kb%0a%0aXP3XL4j1YVSPlYpj7nrdku26uhVIO3DKjtUisUYPNVUXb1VRfQXAIp1UqKc&amp;#43;bgpZU9ogAvbtFyEqvnopGlgbxp2AP7XhNYbHBdgTsg&amp;#43;bwCiqurHcfJHYWSk2nw77l7i3DU8q8UPz8qvi1kiYjDUrkEd5Q6jbF0Y2RdmNf6SvGrpBQV1xiIGcoiBg6o0QQMFXAXZhCGGiaeibIz8CzuCNAZNdrh2jZmyEmuHGu4KnfkBgBn5ssZwKxGUbqBQ07oZI%0a%0aXd8NgyiU3NYVb/AtfEvSzIkJkMI4lA8Jb3oRxOF8QsHSlQonxD213PnvJFFng9vmgrE7mLz0QpacU4kY7tO22ES0xeT8RmmhV5R7CAatMYRlfnYagkAamtf4nzyIS8NVszzGkhWM7H9w0t2sW9OpFWztjnNVs6ETTILAIlIEbMwmtrBLBiynMss4Fk4WhpHHt4UkYxBFuaNxVrJxshzAQgwE/wD6i3Egew03QYaYSL&amp;#43;1BOyOPafFVujWmA7i0o3S%0a%0aNcF2I8lRAU605KJAVCuAC8GcDlRugRgAHCMCqj6B8ojQZQPoABxVRyoM2ppUtrg5uo5IR6/hdR0lV0Go&amp;#43;uOK9aWh/EhlFVhHR9eMufU19X10y3g3Mv6XmU31D2v9fBK0VrKJDui01aBvKaGLB0eq0ppvW&amp;#43;V4SKIpewFjQZQ0kS3O&amp;#43;p&amp;#43;xYkIYgcQwK26VxYiYMOPLPFKOmNmxILDCxMd3yijR/P&amp;#43;X5jE1HkHfoUT/TpqnDhunfopjCM&amp;#43;xFMlXUFT9%0a%0aL9jJGqiSGWXeTul0QqTwQRx2JGKTMG7iMebT5JEYgZ2cszj4TDM5HiOfIFdNG/Ni4bggQQyzVeeoWTrmoozEG6Rs3TmNzVW67dRYrvNbs/5/F4sK3WyELxlqbYP4Q/f/m8Bkh40owZYrHosbqyZjJsJWlzPAotrwjZzRCbSMZDUjD9jMewv5riRQTQJnxxWqLIJHrWi18E/3ScMyW4YhVzF2CRtVNBXYtkzapAvntxDDCOzQRHNe/F/pHYkCxVBW%0a%0aB7gVmHNbCQaAtbU5ELZKRbQWM&amp;#43;jFAOJtkDHF88CayQKXXiUFIItmCWjSQeLLtjhjkTbqftEjhbtQBtAcWZvCzkN/MzDUXnCcwUInWtS49rQQqQPUrug5AdoOWErlVA&amp;#43;gygdQBoDYB4FHQRMEg7eL5ZCrho/ZUVY5JPXtTxWbJ5DZXTKmMH9tsaBVfev/H8mOD52oU5do1XXa8&amp;#43;2q8Uwst/UaKZTqywDW9uA1WtzVyp3UQKBKajoymhoxsjQ1Sw8p%0a%0aVDmXcHf30dxhYP4L&amp;#43;EnJfLvo4abTyOqIoRqDXidD4BCZ0&amp;#43;GpTZWmo110m2NEcenVnwzeZ4LjvxTN/pHDO/PXb6eyNpXIzGZzYhkZPDs7WdaEI8rUKmJK6GN7sAq0CsJ1ZrfOh5RsyAqmFgL81Pee3RikLAQ90E5AwWLDoxRvFXcK2J&amp;#43;EeZFlaSuk3/C&amp;#43;tGBArgshYM3ILVcJFkHCAsnmNSDHtSE&amp;#43;ZVuJ&amp;#43;PlDUzMy9kyGMvU8xbXNy16owM6CA1zN%0a%0a5rordNH8I&amp;#43;AKjAF2zuUYkSMIe12C35b4Jk560ZmbH89SUSPbBOVo&amp;#43;KNqniWk/uCQL/Iuz7NxKTmu60WPhyN91m7lI7Om4OEPuCtR8QkrPbUWiVMVgdawIQMMW053WioDyC0bggAcVQTQIxQQDx0WgjQfsI0H8jx1NA8dWDtAB3WkG91IliaNcA5FXBktklz9UzBKkMHvGAypS3epGWqXTtT6tVgZdFN6XZVCt5JtZRENiG5TS8yQ4qf0VWXwNhAe%0a%0aQ42RW7RgTjjqm3IXWPmjIXN4LW5XoYCuP08NzywNaYZNnO6LDZGv0RGoyLum8d8V&amp;#43;w2Jv9s9FvOWR/Njkcwi5nS2/h0/ghGDNSSAIxZzNh9MLxn8licmIrkLpPKhGdqdZzOxnczgqaCjbVoox1bbNPNzaQNFzGJGz0gVUtUCFyLSm27d67aqvHbOZH&amp;#43;5kp&amp;#43;SkNEzErzJqWQeUyCubjxHEhVaPiTNGyNGHr3aQR7AqX/pbJRInSt97w2yEKinjGRr%0a%0aJQ8IRkNglmfMnm0&amp;#43;mHd4W2DXx2lSkPm6LV3hf6OS5&amp;#43;&amp;#43;bB91lrcQDhCIqA15Jxsta4DdFwm5b3RPriQQppSQN0EaAEn9AIwEYH0DtQthdUSQfAKQA4DlRaTd4nm5sHVmlBhWEVoW9wDQ5smZzBgtgnts7niKeTKlpVbLYFPy2f1it27cotHmGWDV/6hecavMtGFpDet8aVUENuBUn8w&amp;#43;M2/UxB3WiHFh9grXmEtMfy/VRhu07Py9GoIOIkVqw/odi%0a%0asAr8dj9msxRlTMVxPwCdoO/zol0VwozJ4KTSHYri4yc1rVvNcXfbadnBaVdvEjfmvjvWvh0&amp;#43;YeO5laN/Vt4hNGHYsPs2YJzZSWx&amp;#43;IzH2uj7gDqNA/I/FBNVYQs&amp;#43;K&amp;#43;E7jdovImMlw6tE4xZJsZzuIQgRoGA6SClREQUAEYC8AoAjBBI&amp;#43;ga1EYFgfCXltvNzQUg6uC&amp;#43;7UHWoLbfQdkryXxbcqyW4dpCIEdapalkQhpYiYq3jBjgr9WCC6dqK1bc8mh%0a%0a0aqA2WsGHll21iqYJjmNkm6p51lqZpmYkr4nDmp&amp;#43;5Z4eJCeuS7FkoI9SXCPbTwVkw2jpXa3wpHqRaK26dx2SSCdNZ2I2BiaGhw/0HVWO5hHTXKP4UQwkq8EfTW5mOiuR&amp;#43;51HGF366/b54IFznCztLF8rZ1WSVC5q5FX44Bj83c2fbOtmNNFKCFjxBVmQRL9tkF/fORi2OEYwSLLTAFhy3utjNQWXhn8IX6Atzcs6QG0rISwvnn9X10iA/ZTxck7r%0a%0aMAn6n8dBKCNYSWLznpgi4h92x9jPc47RA/g8Rb4E1znkAie4nDn4kB&amp;#43;&amp;#43;BOP&amp;#43;FyRgKdNfLVRd7WwHI1&amp;#43;NvBQ&amp;#43;xHXE2fs7obAJIDYDx0oA2T5MAyGTqI4Wg9AFOvoHiDKB6AhoQp&amp;#43;zYoKSPG55iQE1oJ1a8iMHl6up0wcacsHmnx26RepcFOdPSHZlHp3du0tSmjLz22U6ZfWXvaQNutyZ7qPwCsPVY65xmc2NcsLlLb3AVzCvC0i&amp;#43;XsNvqpHTkNeU%0a%0au3BYANVMRFA9uBLsdkan21c4UfJXbnXpxqwldc4DucZSVlLrf1zNOcw78KNR7RizFTEYx2j&amp;#43;OEBlBfwv&amp;#43;N5baF/nfyN5jjHhMm3UgjpSnxhuwVGdNUbS3Ir4NkrjnkCMKxfd3Jzmdc&amp;#43;DRRKwaEtR98G2CNHaerbjtMf7kjz7bNZVheCbrjGA1jDd6tUkAWkDTHG9ZRZbkFHsTMK1iQTZTimSN/q2vP49sp8UKmfEFsO6Ei&amp;#43;9RVzccNO/poDz9tEZ%0a%0aE9JXm9UTT7ZA1sABz1R4pvwXABIOICkxyoNQZOp0CqDtAQQ&amp;#43;geqO654UnPvXUfUp5AGoPSWvSa0YRcG8UsM4w3zolpydqELEOs&amp;#43;Ah&amp;#43;wR&amp;#43;pEN6tY3DHfVcsuMsAaK&amp;#43;8pjZR9rNVfaZDjfFRLZesJhCjbOJX&amp;#43;M4VUOIPIApb71gAPNpVu7bNbww/s/vmo7Y2lsty/elbdY6vbgYy52Euuc9vTyC79oheTefNFUr&amp;#43;/C8su4jMIRPnPsUtql6wYAQMv9%0a%0aGInSBjkxReRd4mhM2BGefFWivqdjR0sTYzZetdIK0d/HeK9JqCvvby8jc&amp;#43;DuJHUjvnNjKV/gbNCoVb6JFy9Q7PvU&amp;#43;Xs2U&amp;#43;c/Ds&amp;#43;ElkbC&amp;#43;Onivk4jDwSw&amp;#43;Wa7mCJbKvWBPHL2ErvnDA8MFp4NDDQpBjAb5s9F3A8zfv7EESU9RW7eDPA1pnD5sr52HiOwnCEW2eJYqe3rVf3T5gSjWAWmrx5IFar4weqCyfacJtMohDxBrcWLZp16jzo7I7shS81Y%0a%0avnIbtk7Dsdf1Ts2UOORKl3jBFUouIa3X1xikw1gIFrGvSZJzxSFLt3MUIp2gZtGzGZp4Ws3FwLH4jnnle&amp;#43;5rkrej/0LWRzfKLVyiL7W6v4DFHmJ1R&amp;#43;pUvBdSfQQgBQHKie8kgZCigJoBgB9AKALQF4NgBAd8eWlwwRDrpL9fUdipbJkPVg4T64PmD&amp;#43;D6W4Q8U9RuSHKnhRTdvU&amp;#43;0c7feqwZ04MNWvb039DhehM545TOw0eb&amp;#43;GADXIamQVnvAOxRD%0a%0atGRjtds&amp;#43;wnZ5Gr2dBXvP9p8R8z2KqBeXT7b726F5LPhfqh9G706F3qsNnfOExcd&amp;#43;V&amp;#43;jFVxYvnsKuFHamCKZq4c7uLvMSDgFe3D4Kad&amp;#43;&amp;#43;AmI9ewMLRSs7JbghJfwUN5YeCXiri5mdBUwAs1MU40D/SuuZm8qxEncT&amp;#43;8jhjmFUXZ3dmPwrSC3iOVphGCvwwZM&amp;#43;o8bXGsslp8Y9n&amp;#43;NZJW/UQZegscbAOwRIzdeaw3Y&amp;#43;PvgntEognsAvGo5pp/7xhuIF%0a%0acCo28FgVuRLE/8XhIbk&amp;#43;9Fnfz07YMfOmjGRUKY7nBplsbUyyxGfDnwxQYRb6lB4ktSLFBIdZaBFNMMBMEmE8W2U2VppkVfYXGQdjf/QrdH4HbFi10sErVXMdhZe2hF0VQVjXYp4cMGFhYPQ/VyxXuZsUWNodcG0p5l7WBCCom3crFhZqJaiHsdKSLG315tXGi1fsoneiw/s4nY1wkAjAFoHaB6QXVGTAQQdoHpVeIboG4hwQEuSPEtffdXVhEOSO%0a%0aX192pAN3E92YMKk5NFKLuVk8WcB9SIcbfZT0ocyHR306lnfKhx08U3Ey308tbBUyM8lTbN3A1IOWZzssNTbeX6R&amp;#43;aeeCRs1nZaW4dVpT4lXsKnOHR9UYrePzrcQrBt2SwGxFtzOlyNDPxC8N&amp;#43;LtzqsbnVXT/QhhXwwL8bnb6TAAB/J8CAwa/dokrxOg3ogecIXGODhdEuQYLAB2/EnSy4creSTy9V3QnRWoPDcF0J0gMeLgLst3FsziVOrJSG8da%0a%0aYVXjPgwDXLGshmA6BFAQpoQ5EOYtMeaRWwIDQ4PQQX9bWV/5aUTb02NwaO&amp;#43;3v8KaPnhbViXSCGJo99GiBxw18SCA309zD/Q1hRIdmS&amp;#43;Im3buHrUARMfGshvqMdnEhfCbwn8c09YsBd0atX/nl4MVaBUVd5yfCziwj7QsCawhaNSD&amp;#43;CsPNV3sdp2I&amp;#43;FfcZuOmB1kQ/d7y5I&amp;#43;UQXjppHTfiEaM5A2gQUCInJQPI98FVQKNdA6BkDYBBQ&amp;#43;IBaAWwBkF%0a%0a1QagIYABwskRoGTodgDi1KhLCQS2ylLA7ILKcMOQukj5S6I3zFsQ3GTwt9WDDwOt92naN2FN7tONz4N9LTTwGdHtIZ109aHUZ1QlGHKIPGk4AAP1Q4qGaBRJw6mewguUTTJyGXtjgTBzLBq3PINrd9petyOd2IL1VKDE2Nt2C9jOL&amp;#43;TsMc/OriAxKzGoRTDBJDqma88MSv16DEzfrzUwjHVYPhVS7YhhRdd3ciH5oCsAEVRoaIXYGQpSaMySAN2G%0a%0aAqQ2CIWVdlHtvHMdn59Y5RQKF837EX0QN&amp;#43;Q37BbBmAHgHqghgWpUNAGQC0n0BlkBkHaBnAfAEkBdUX7WVCyDeBxwFdfMSiJx7A9xnZhpVKTzN9Q3A0PDc2DMZS8DJRfp1lV43Ch0lNVbW0Ld9hnD3wM8M3CyxM8mHRvl48LPOsgcsL0cEhgDqUVQxdVjTR3AfxNhINm9Ur5Dz0CsCgw5188vdU5xX5znHHSqCwvbtxS4KMXMwowu/Itj&amp;#43;cpiE6gK%0a%0a9XnQsJmZBvcsLWCywltknAIWbYQgoaAwbGBNL4GFlYYWXJ5mIFIhNV331aUUEIfxQaUBGBZAWekJqCMFTkJfsBw5QPfsgpEcIqAqoXABaBsAHgHoAeAOYHqBkEZQCEAdgIwGTAUpGACqgLArcLNF1Q2xSJdbAz9XQcHAmMNKBnA2ulcCzwuTwjd2DE0Nt8fAi0LFNlba0MgBZ5Z8PtCRnMyzGdvfT8JdDG&amp;#43;FHFiDLPf8JE4r4Yfmsd7PEt1Q0uod%0a%0ayXoZFpaCP8tYIh2xEcDnHz3yEAeJxwC8ygz21QiO3LP2TDMIurh9MsrId0wgtqP9EUw2gxTFGD4USvFOp9&amp;#43;dNRzDVHYXRwi6vWamWYwzXP1apYzQrwKI8w5wFv4XMCYPdg8I353dgBojMLgxho&amp;#43;NVzNMMAf28M9HAsKmJ5/UiNa5V/bd2G8LiCsI39BINsQh4f4SLWPstrQcUWEX4S2kOiRZPRBXxurbWRhEQKadlqwrZDzCRoT4adhI13ZOdHW1%0a%0aFuXrgetaaNpg0gnMYbCQC7IQSGQ94aT&amp;#43;m4gzceFnDBX3VrBfNyaKcAbDuUVdlnQcVRmWkg0FLkn/hg/crV&amp;#43;Nj1HH17IR4QhHW4breiG39otWsRplIENLShEKsaLQ9kvhK4hoY2IDfB2CT4XLGOE77L/R1oB2K4SBoSZVlElcyGFhmOjRuPiEJ8KUFCg30lDGHWB5gDLSWnxHFCmm1o1QojyfsxI0j25DB1IcKJsiFeJ3QARgcqCGBOgIYHwA1wig%0a%0aDNc&amp;#43;gBAG6AZEYgHjoiTRkQ3DubYp1/ZUhPHFDBL3MyNfEulBwKPDsHBSxPD9QlSkNCZbY0NCYXIh8O6dLQjyICCk3ah18jXwsIMM9M3Z0N99dRXIF/D7LXCSNtr8a/BD8QIv0M0NgWXsjFiUojIRU5wwgNUjDEIm&amp;#43;GQiJmQqMz90I7P1KjBJNMP&amp;#43;cagiL1J0e3WTWF0yuZYMt1kXSiNRcW2AyVmwQ1eb0gDzo&amp;#43;yARINIBfCVcT7EsExIlhUfRZpS%0a%0aBS/XBY1sFLGNpewwlXEiMRYX15DpIo2PUDeBKoFwBMAPoBbBVwgHHqAjAM1BxN8AQDjmAKASaTdi6TCAB0QI9XX1dIicbUIcDZLMNGDj6nbk3Djzwo0MjJnI7wNjjxTO8P4NXIrT1d9PBB0P8inQn32&amp;#43;U/fAcHdCkhccxtkjIxzy9ZSJUuK6h8EbfDMw3PXIKEda4oz2dsjnFsSbiflFuMqCkwxK0DtPTAfzkxe/aYJrNIGHoImIeg7wwRcmzYsN%0a%0aHjSw8eKZQiwbbhkD&amp;#43;xGmBFksVfsh4Zq1C&amp;#43;kGw7zHrmQQzJMHXYiX4YRkKwFeeH2etIeLx3O4aYZeL7do5cJyPjKqPVxRNRfNcWQNLxHkHaBGgTAB2B6gXAHKgdgEECNBcAM13aBcAdoBYcv4uBw9jzrXX2Q4dWQ32ASpWMBL1CgyKWwjirfGBOji4EkUzcilba9T6dPIoQ2091bVN1CC9QbWwiCs3LOPA0hAPBNnQcEUe3s9vQ&amp;#43;KI7J3ifrHgEyg%0a%0aUMNoTPPBPwI0EI/IVhIdtU6TjCgvVhMTDbDDhMzDoGdrxaiuowSTr9Ggvr1/lIGZr3H8wMYaKGEZovDEmi2MTqM4T5HEFEWSU7Qv0hVf5JoOStqvYYIajhMdqPWjPwGrymARqZLmHiYlEx0LUtMMlFS1csHfCdIofUmnoYQEYhEpw4tSgjBZrHDiFnjQseDW8dEsTWns0mjI&amp;#43;AZgccJwmDCT7KmnQgqUHlGkhgfLa0jAvqNXheYPZLCgl59uBGhh%0a%0aF3kkC13oUaEmXq0KaAzCtkHCeo0l4l9IET/J7HJYX6sIaJzFT1v&amp;#43;K&amp;#43;AO9HiJeGO8jzH5mB4xzU0QIR7NJhn&amp;#43;Y3ZIeyfgL8EXgD17jczGz0JwAiRQ8kEM2gywEsV5g/MuSKEQZJS9ZBSPtjfESMSUBfHV2PjBw0&amp;#43;KyUZIkgmTp6oHkAZA&amp;#43;gcEHoBwQa1DgAdgZOkNAWAXVGCToHAyI9j7HRDidNKnQ8OqckhXUOk9EkppwciLwtpzSTrw3JK1VyHJ%0a%0aBPgSvI4QztDggvT0Xlik8IIzisEswnGl6AKpNl4ABLvlSClQMiTAiuocZFu5BUWP0yEOk&amp;#43;CKyivRf/mw88ogZPT8Ew25DbiSonuNaEpku6UqjWXQrn6C&amp;#43;g3ziAw8IyBgGjZgyq3mCazUrnKtPkRf3aI8w0tgK9FMXvyUdCMJdw3TOvS5kRdxEob32jeGBXlXNs9A2jchzZatSJQqJfa2JonMaLB65TsJGjS0YKU2WZlljX5iXgiYzWAxJTI3e0IE%0a%0aUsDGhVkbiFlDO8jJY7jpjnNOPT7NeScmlyi0Xe/3Gx0tLzDOj0aI7GSxFU&amp;#43;FloYgRMdmZD2aSiF391hWlS5pf9dkWskdrGrE1gUUxb3WFaAu1SPhbuUgRj0owGplpIssKyK1irEkjxSUJInkINdYnS1PQAQQIwAnDugGoCZUKAa1CqAXEzAHKhNABkHydSodelCSinek1EsF7YyKsDA0s9WATJPeJLDT3EJJKgTI41JNI5Y0xOMySE0q0LMyUEp8%0a%0aLQS/Iz3wCjXKMpOwTdRdmwuhwo/OLXBASXBGHhXLcPw8tRkBHlBFafHIJgiwwutIjDCgtHWL1cYltIM4Kg4ZOjVgXDuPGT9km5wrZxo&amp;#43;FGGjb&amp;#43;GaI2id&amp;#43;eojaC8MHoOwjGvYDBhcxkwti7jmraFVU1Cjdf3mFjgylCOwfqM3HNl7JVsK4DtgeFi/hCwFzGSxGAkoPvh58c7jA9tZV62LTBs7AUPwdINeEFg&amp;#43;ZYyCJRt/Anj19BsllHiwESPmigFq%0a%0ajc4Wd0fg4PSD95eSrFyw&amp;#43;UMZHCwGaGmWUSTZGBD1N2M0SONT&amp;#43;w01MkiDYvkPPjA6DdXBBmAAHFKg6QSHGcB46HgG6BnAAbTYB3Ux1iUyPXN1E1T1MxIkDSHPUnAPCOTY8PFMIE9hUjToEgeVgTTM5BIQT447JIlMMk6zOlM009BPszMEoKPKTxpe1DCi/wjzPzc0KeHhSCjTM5VQAzbG0QDkfZAHhrSa48LLrjIs2NlYZuAmcDT8orawxmZio0ZO%0a%0aSz24&amp;#43;OBKyBo7LJH8EIRaOWYeghz3aIbkuCEjElgzdxHj90seMrDhAzlDFVn8elPd1dNMkIr1cSJ60m47JMVUViteXCzzBseU00P8oBd3XWwniKIVBpaIBBU&amp;#43;CG7W/DipCXA&amp;#43;Oa1dY7jP1jzUw1xezfsZgAoBfgEEGtRNAewCMAwEKoFxBoca1B5AHXH1JUzebXo0E8MdGHP3DpKduURzZVZHPMEjM9HJjS5FONLU9U03HJvC8k1BL6lxDNOPfDxn%0a%0aMnOczwNQ4Fzj4g0xVml3MadkRTwqJnINTiEjQx7J3MPeE5yH6NTk6T3RXnJ6SfZMKksMznEXNkcPTHZPYye3SrP35GqWqwgZhg2MVs55cpvyPyKvUOyn8&amp;#43;4lLg11qrAFzKydHTRxPA5/AM185K8Mf2KyqvbdJOT0ZZOzmTn8iGXrMkMPMNb95MXOxV15NJDB6CLEvzi3S0IUvzQhVc8FCDhJopIyQLG/NIwrh4CpLnTtouWtia4zqbMOX9d07aJL%0a%0aDijdYJbZBzbhlPwbZHRKUgkOLHnW4KGSeBuEXmHYPR0&amp;#43;aOgMGysUyyTHE/MazET1ndBayogmM3hgrdN0Z/VJRGGVWgoZV4zWWm54Q6HIHSFC5V1u5TNVvVf0EiRPUiwVvYLHMxQUwyHsgF4OiF/hXICxNCx14wWGXwBYZbGskxVZb3S1NhZbJXiRUycypQj3f7kSxrgYCil469dFRBCUaaBDJ91IXQr7wS1ZmNM0zzbGlH1q9R0xqx4aA4TPgGA5%0a%0a4MG4daesMYgC1CPG3gtYF63ZFAWWDUQtOUFdk6zU9cFkGxQqAkK1hjgEbMGwVZd41HYQWIBGX15sMzD55XuN4g0KdgzzCuJqsNhnohq1ZD1&amp;#43;5GZd3TtVvhKWRcweeRbGljytQ71Cp5IC3MGzmXSIo3jF8BmWax96K&amp;#43;A1pr8P6NKM/hMEUxJ/serQDzklJ0TsTonYcPDyaKQgBaB4cTABcAdgfADgBYAQgDFC/2LYCAd6AebW3VLGLm2/iKCOmkQ5%0a%0an/P2Kk4A4g8MxsTfL8SRy7IyBNRyy84jiU9McpNNxzEEyzKxzk0/JJryNbNNzfCvfRzMzj288aQKcu8&amp;#43;Z2s9ksW4nkLGcp1Q8k1nG0R5JDggWEnydpdKK88ukhtPE4keArljC4s9tKo1EsxQu7S6uQan9Ntk&amp;#43;jHqJ4Cp8FaiQMdNR6DEIanUDM&amp;#43;Entx6FCzO/LQLhJJUriMjkwUp5KhgodPV1hg7ainTw4Ar1zC8I7CJ&amp;#43;d6iavF/lNkyUr78q8Zr%0a%0a1rxw4H52uy4IDZKLxFkk6hFLQzYaIWTpcvMJL9hg4Ao3cV/GrLX9dol5Max&amp;#43;yDGhh1h7LTDNxeuYDL3gWeKossU6eNiCS1oSMhim4b/KVx1pWeMhmAzbuf4KfxNrUwrwQ9IaV2fMiEra2sxR4J/E&amp;#43;JgMhY1GLYUp4xOD5eSV0bdTTJwk4gdjT4gKwTsISIZyKUJ7gZIaA8mhZJ27e0QL1AsezEPVGUt/Vq0BGBdmX0CQ7iAGMzcZIKqLu4TiAxc1%0a%0aIT3MGxiEMCmGxgsWbMGwtaJwjbsYWQ8uozIWYLEcgPuWDK2tHdQmmJQCsbU0GwSsCcSvTnIVHz0l3hWSDDLWfTkieYYES3AUSGYjnMW4n3WrHE5leR2UGx4EcLR3itymwKeY1i4yGjCpoAcU2L2InbEHFf&amp;#43;VvRnxzZFCgXhJeZXhiKzgzY1aY69VeJ64qtP5kFQESYsDMkTCsJ04yjik&amp;#43;N4yxfY2IgBSoVlj/YN1FlBGAeAHOX0ZrUUwMNAOAIdA%0a%0azyf4x0h3tqCWxWuyi6YtGDTSpXTNDjw0twPk9I3DHMryrM7HPcja83JO8jbM1OMzT04j8JtZyc3XGptiDKnLzjNTI209z&amp;#43;aIqhLj0giiQeFLcFyyriV8/IIizukxtPbLmE10zQj2Ez03TCd8jrzPzt83tMi5Nk3fNaDNoi3UeS6s8GjawCLZyC3Qd8TrBdkC9D4WNp/FSESvMKaNu3s1ZijYOWwtae0X5kYwSMoUdbsvsK5Dg8gmyeyz4qlQ4rug%0a%0aTQCgB46UgFpB6oEEF1J4gZgDLkXXBkEkFDQdcI&amp;#43;LoOd2MzyEUdQVDBsfDpTiYxPA8JaSbIm9VPDIS9wOhKztU0K0seDczL8Dv1bSpRKG893ybzjKlvMCizK3EosrowPBLxIL4H61UMy0iPw7I7VHbGJiQw9zzCy4I7yuZKwSUbHdt8o&amp;#43;MKGSO0oKvXzLE/uIatmgj/J7SpJGKuaiazCrkALIXf0sILAynaIPS9onXLMd/hOmHxddNPzHA83MG9Dt%0a%0aVmQz&amp;#43;Al4CBYkreAfCRzGRtmSVdjpoQWNHgpLDU7Gx1iuMh7J4yVxPjLOKJADgCGA4APoCFDJAeIG6AhgfQAZFGgIB2IA&amp;#43;gRoGYBnACSooJNY72IWh0iuar9QtMg8Ku9rIovNxyS83k1adPAzSrVU68&amp;#43;NL2qckg6vrybMxvM1tTqrEq1Ec07XCCFqbepAJLRpPCQvgUKW/24cy3MhNeAp8VKung6SxHW5z6E&amp;#43;uJ6TGIJmCXyUIlfM7cMI3kuqC982%0a%0a/In978uXQXSoCw/Irg8IyvHr9fOTjUzwHktTXRriCkuykTDIZFUrtFaCMFQR&amp;#43;8KWX/h4KT60O9uY8vUywxwYvWVzz8UspCcQEL9wZpT5EPlV5dyvzQOLBfdmpDy2KxxOpV46ZwBBB8AIwHBwdgRRF1J6AP9nwByoP9lEgYAFsD5UxqgPjCTJq9bCfFdw&amp;#43;aoWrg0BHOUrwSvBzWr1KpyIryjaqvId8a8jT3NqDKq2oxLm822s&amp;#43;0Lq3NKurh0F2uKE%0a%0atTJyB2x8wNjMHynVFnLPpw&amp;#43;TRJOUQs1KM&amp;#43;qGSmfJeU58xtJch/q1tOFyZHGOslyN86GvKyYjLfPhrIqzNlGjs7BCAgKYxMdP844q8iNt1MagXlcxgSLGj2NDrE2SS0p4FyU2wD8J/Ai0BYN4z90SsDFQnFQfKzAYYEWI9m2FTsBmn&amp;#43;YxuSuv/88VYj1ZqWKs1LHrP7ZAwXUXgfKD6B8oNgHqgQgedT/YRgRHHBA4AfQCMBNgeWsdJ1oHPPH95Kz9%0a%0aVZMHA4LK1qz64vIhKUc9apSTy8kzK0rkShEpxzH6rxufrjq62uXkdbHEq/qKgam31xrK7vIOUlQS2Sm5WII&amp;#43;RITbSykocVuIAEmrV50Py2rip810R5yfKlkvpqFySOubjo6sXOCqFS3ZPKak1GKoH8BE5OtrhVoifzwjTSgaOZ050xMzzCh/PCJGoaYb/IrhACjPAgKgZAaM/4wASfy69OdPCMgKr4MAsTNlNTXISrgy9LH&amp;#43;J5rRt32E6ecWNV5g%0a%0aEUfQ1dpKufF&amp;#43;5nvdaXHATZCATPlp8Pc1uJEKmgqJpl8F636xUsXCzeCFZN4z&amp;#43;YGZL6lhZBUFu3YKV4tVxPw34aSHNpwaeBF7g/FCdmllRwZ/AZJkaF4S9cu8Hfwc1JkazE1iW2Pm3uDy9VlFuJeGHSW0SheTWkua7yyuw&amp;#43;Y&amp;#43;aDmLl4JeHYPMxKsOnnfhYbbF0JdUaPFOshH4afQD077IBqDkh6k1NsTWKzmvYqL4zkBYAOATQB4BEcQmD&amp;#43;zI89oE%0a%0a0BSoSQBeA4ADgB8owc1kVQsnxcVR1ZbGxaqDdHGnWucbS8txphKrwzxvhKTah&amp;#43;qd8/GlNJ8iicuzMxKHMu2rbzQmiQGpslQyJsJK1waSES0P9ez3UNy0xpP5ks9QOoeU4G&amp;#43;tKT8WSivVDUhc6R0ulSm0GsrMeomKt4SyrE3RztfODqnOTEuXK184byeAu6b/8uDCzaQUXMxjE82ghvWI07JYgiNiG8SRmbbk4aihr8uEaj2J862rMWbNNWFmpRPr%0a%0aT4n54cyjDQnt58GyDYZrZGbm0lD7UyFwtJaK62OE9zcbJoLxzGMsMwx8Rwmj0ZE2lGMxRsXtkT03jJYSbdzhG2QMw2y4RlPlaw3hhnQdZJWUIrDaZCkFR3JEc3eEWY9YWaz7o0YohZG684XWx34A4wlposaawgsWacHiHs3IaeOuAbiM&amp;#43;D2MQ/ehifTjjerTwCF8bfzbr8aY5uhIN8FkO6R2Q2cXkbiVLlso9x6jir6B46BkGTBNAUgE0Bk6TQDx%0a%0aBSAIQBaAbQToHygtgE0jMbscEBI0FlWg32DTZquSw1auTLVr1qFPYzKHkuDY2uryzWvSqfrTWwypOqgm0pJCaHaq6prJf6qzzXBMsRVJvSva8xD8z1nMuMHNr4EFl9brTf1u&amp;#43;rA2sEk8xRmUNuXz0GiNqSy46vtJPyDkuohiqD8kdKfyZ0yr1/zrqXpsTMB/VvzGb4aoGTH8kjZNtS4YCsttkw5cpDEmah/Xv26bACrangLZ40Zt79OdQAqGac2x%0a%0a0oS6GiOZoDLC7NGpoa79LDwWlzhKiRAo9sTrLm56wk2wlTYEKiF0Z6YabMWx2aLpHeI54KGkpktgl1rj1UaF62KqfMUkk15eyID3eSOxUHh6yfNQWBRoqumlB&amp;#43;CuGaEmKK9aSnlZ54EJGm&amp;#43;lTC3uB8J4KLpDUy0XSDuuVAi2sNBCD3EPkgpy3UgX8xLICsUmQh4TmmmzT7aruXZpZCA1RZ5IWDQXjQSSfHJoCQ3BBV5uuJ2Qmt2RA/EG5LJDzFAt%0a%0aytJLWQpjg3tlZ5P6by2wRAi6mhhp/iM/CYqUOvGzQ6HE5RupVdSOYE&amp;#43;zmANKS2BCAToDYBfgAHEwB/IEYGcBSAeIHhxugGjomgsEHPKoyAShXGDSnA7WrY6L6lxqvrLww2p46763SwsyE4k1tRL&amp;#43;O9EqKTRO7NJtaJOsJsfgqk9axvRs8ktNp7nKk015iISCulaSPq9pK&amp;#43;rcmn6vgQ2afyvizgakZLKb8/cKpud8zaztzNXpNpuaJU6mzprMH&amp;#43;M3%0a%0aqwb62oMsLrSjc&amp;#43;FpohsRzSl7BsoD2nhfo9BDHMGfcwqd0YWfmlh4XmU2XYZDCoElIzZsWosgF&amp;#43;XTmg25&amp;#43;IalGcwvNOEneF1zGD0KxFaBwssSaqw&amp;#43;KDyR6hqtDyua5qt5bmAa1AChLSS0jYAi5cqFVAqoBkCMBlAbABeA/2cnucAD9GSv2wNtfCWDT/yljtN9z6830vrHI1npvr2e82sNb&amp;#43;O3xvhL/Gl8JE6SkoXs/qReu1psg8EosEPYQEBJpIkV%0a%0aakfM9atQFupD5UAtIWV7dnOhKdtQ6xtN7Mv6QzqjrjOztPFyzOqKohre443Us6k6xOrudCI/tNuTC2mdwSMc6z/tOZH&amp;#43;jMWrbJqS5Ns73wYiL9h&amp;#43;mv/JALirCtvcNFNQAbt70uyRMrDPrd/13w9IGHXbtNjSiCgFsaMxwBIeIBkgh4l23QoApNCnlFkhoFI8oixV8SRvpaJeMPUHEdJSGL7LqI7ZoGMGGRWh18zgiWRq0qEkKiG5kKDmNVll4XzU%0a%0aT1R2FzCixItGmXsaT7a9Mms4U8hgFy58GtQwRjNJwjPTQ9UcwOagqBu0G4mGHWmUMHHI805pR2V3BfhtuHzXKxsUfbFax&amp;#43;SMcvZb7szlsUbuWjDt5bSAJIHw7EcTADYA9SHwfygQQNgDm05gOAH1JP47eoFVd6ySuGg98AxCuAMKkTx1Zj68ulPq&amp;#43;&amp;#43;pxqZ7tWvkwNqR&amp;#43;zS24NVFW8J8bjWqfqE6X6gXrn7TKuvltb0Aamy3UtPOZ1dqjbVpl1kAe%0a%0axTvZhHq/zPhgKBXrj7KlemhOP7g60/sQaWSsny17OSmw25L2XCXJiNcvNUsP45htaP7cf8/hMgG6m8FHgLvDPCKETfSxaOgGwBzIzf65qNYYzaE2jzuuSsC&amp;#43;MyqyBvPdIoiUBjf33L9&amp;#43;6vW/4W9OlpbaSsfnlh55pP&amp;#43;Bdb0UqlMmx3raxxhpKaibsm4EeACjax4OvFpYgVCqGlX6tnGu2uU/NNYqWzbylVPZo/yqWichG1HY3uCh24GOjBdeD4KM%0a%0awgtY2lgRqjeyVf0GCy9JeGXuibxuity6yTvN8EdTrHwYSKzH&amp;#43;FbaYhCxT/i5V1Mge9IyB3wRUpwbqq8&amp;#43;/VzcGkejioZAMgbAE6BrUP9lIBdSUgBgB4gfRiMB4gFsHaAcgGB3la65CS3iGFoAfO0ERbGSyDj0hzVsyGOOjStyGY3Mfr47enPHPNCCc5N1ENCkjNMF7KhnUUwlqbZOjwTLrSGkV6fQxwJ9qvCA4196sNI/rj8T&amp;#43;4w3V6OkGFtiy35c%0a%0aYdFzb&amp;#43;vXoaE7OzfPOGVSkoDwinnG3umIkupdP/7piVLOStTehYdzbHnEdz5LCxqaMwikBoutMcgMsdmrENIMct&amp;#43;8RzeaybcL6JxRFkDjTHi5SLragq2soaI5uO7AKK4UO5GMrdGCp&amp;#43;yc4ziwKtecx/4gIvUegs5sP&amp;#43;CMhwrP4JA6/MNCoeIr6SBE8x34ePoQ977YsVF4h7UzDFof0ztnNwtaY9k2NSSjYOODvuTQrHEUsYUZsTFxR7IL6eWwOigB%0a%0ayocqEqVfEwgEaBNSFoC2AQQZOniBNAAHB4AoAZQBb6D&amp;#43;pWpDQAE6jhSHp0UNJUr9MiNNcbshqOI8bb620fvqJ&amp;#43;4ofxybQwnJdGQgt0YqHW8hft7R7Wam1djHWxodNw1YLRNcsLbBpJTB1aBaWoTQslXu061e3Ts91dNMYaBquSuKw1Kwa6oSH8BSi6lkmc4SUpC7u42FGvzxMX0uWjU2mszwxuEi/Lq46gnfk415JqYEmjK8dMTrGJEkgqojQsV2%0a%0aSsdQefeghFJuCrAf9QLCrQZl/iQ7u299sN3oQFtaJt3dYaZDknHZpXalBBDUsdaxdzILfZCJR8SfcbhTuabs1Z4/g4Cs7HnvEgZwCx2mfDAEeuHgfSxXdda3oqKaLfuoj3mH5gxdX4cQOc00K3DzR5Bu96gJ4ySEsWvxvmPvxFIjU2qo/GE5fPqUa1AwOmwMEAEDgBwkga1HiAGQVJynrWLa1A/YOAA2x1HyDPKXMQrx6xu9qgS4NHVazRxnoH7m%0a%0aeofujT8J0fq8bx&amp;#43;&amp;#43;0brzp&amp;#43;lONn6s0j0e&amp;#43;1Ha34HBA8E1vRAQmM5Tq4dkmxIWsdD2Qmk07nRKMdEcfFMElPlL&amp;#43;gGsGSSm5McjbVJqpvjaKrErni8azUtgLaLOqGeLH9ieZoLqMuyqa4C/m2bB1oAOphmO5B4cEMT1nvVFU0hvCT8t/IcBYKmfwkaA5HywfmMccrK5INXnfHc&amp;#43;lwa/Hup/jNbw&amp;#43;gfyAjpCAHkB2A5IhAFKhOgXUkNAdgCaXoAWwH&amp;#43;s%0a%0aiHFtaIZ0QB8jQRQm7A4NMQnlqiWzDitpqNJyHdpvId46iJw6f0rShgJtfqbaq1o/qqhxfpqHfgMnuk6Io14E5QV8D6LaHIAkBpU6Eo2&amp;#43;AhjSi96a8rBJsR3E5XmEEvjHygxMdXzfbSSajbv&amp;#43;tCErG01SGZOSKGktoghhmxqlc7lmYsCS7dEC3p6bz8/NgGiYxR/i6941Xv1PJAC2dIQGc8QjHTbKGm4eoa7h3hmXbqQ4LDj1hI&amp;#43;Qb1lPgyuwD6W9%0a%0aRwjB9P6fq0I8v&amp;#43;XLDAR8tGEx2NGZD8oSowY4AwFhULCGJ2Esah4jCwL8FrGJGz8Mwer1VhdWHsreGaBTD19sILXLLQsec0R54bGD2g7qsfmmJoWxCfDIYlZRfAj1uaWbHNlkaPLQK00tVYSq0hXUfTHG96HkZuy2pnPrZqmZjmvQ6JR3lpaB/IUqCA4XgRgGYA1I&amp;#43;gB2BnARgHaAYAaSGtQW&amp;#43;mWdDAe&amp;#43;paeXRu&amp;#43;wvNY6XAi0YIdcJrjs4NNZjnra%0a%0akuegTp56jqmfsCbqJ86pNm6Jr0d&amp;#43;AWwPBJpJISeC1UMwG56aGx/02236HIxwYejGhJqdpfl/pttLEmJhiSamH7&amp;#43;3BuAG&amp;#43;NAiIhnwB4/JjM4Bo4aWJa27GQrgy5ogosni6ysKllmQrzSUMK9dmWBZJIPx2RJGGBrr65XbP/UrqxzRWgxcruKWm7q9JfSTHmqGNQUSHqIuwbnNWsXUwZmf5z8b/nEenqd&amp;#43;xdUBkE2AZ1GoGYBGgHj2To/2BABngAOE%0a%0aEHoUW&amp;#43;/m3MRpITvpATY&amp;#43;OSqVmGnFWayH9avCe47CFwic57Tah0cTdHw8if56qJs6ZomaFhvlF7EFy2ZpzXgJsWe9&amp;#43;xXzODHeAVyGm5FezJs8rPpzKP4WZiwRdQaw24JQwau0rBrKjw56BiN6wZzCAH81maAvDt/OqXPfyi/K3qRqtJhzvwbYXLUvhd1F1GvrHnk0o1Zoh4SySPciAv4lP08A24LgplUwyCD8jMFVwv1NakHzT6DFynnZRE9Q/B2E%0a%0afZB/V&amp;#43;KgBOdGnhkPbAQxSuzQUl4DKalrGX0C9DF3tEp2tGId0LadbBwF1zDFRhCHNHFUf0cEX2OZr5Au7JFHf50evFGglioEIBJAQgE8HNAp&amp;#43;JaBwQPQEaBKOrwYZAGQbUYlmviqWclYj1CPh1ZJKNkzWmwSjIc2m8lzjvcbClm0f2m7RhNx2qnR5OPNajK90dqXPRy6eb6ml2yovQH8G/B&amp;#43;onKp6cdwEieey36&amp;#43;hviYGHVekOuGH&amp;#43;uszFT8hFtB%0a%0avDagZ0zqmXBJWYeL8ZlwtiIb06zLOc7yxq4aLCNF7XMrnDsCt0Xx0tXn1Iy8wNufKnbiP4PEhOIvRMx4osWG2cImu/ensdEEWHsJWOpm9mZnSV1maMB8APJR5BiATQENBDQeqBeBDQRHCNAdgXUhaBDQRevJ7pqhaaiTqOCyIPDm3BxvWnsF4VctHr6jWYlWDWqVfvDSJw6str9Z8oZqXqF5VaurrxNVYSCMON4khZ6kzftAinq8xGArHIXiZgb&amp;#43;%0a%0aJ6fIDavZnrMO8/p0ZaM7bVkGvtWpJuNULH41ffI6aL&amp;#43;RzvoxKzK/kWXWqSs1v45NK5PeQThyXU9XovC4dVKuvXMMC6H8gDeExDltLuOWSjJ5hHh/C2eEKKe&amp;#43;ra2Rpk1pLFJQvmsgr4Y1eJ73ZIdjYLXs14KE/C26GGscftEctQcfRJDNVbJQEsaHWTxoPuEzHOM&amp;#43;bFSBVlsEe5d/hC9Z3EZGFEwrTU7tZXCzA8ARTsJqZhGKrtSb94PfX1y3ZdFP%0a%0ac1Do4EjbWKUZsWxR96OWIZS8Y8mhetthH6xv9fFhRqzX/5slcHRBZ9oGwBEcUHC2ByoZwHEyWwQgDpUQQToBeBKk2aZ5srGjQWZNi0IBMWr6erBdsicFy3zwWxVghb7Wh17xt0rJ&amp;#43;/zeOn5V06ZMqlVi6auq3XGdZ7y0HGrGJQB8wMYdmnPKPiPYiaIhKNXN1k1YEmzVvJr3X69UScBmT14OeF0Qqwseja9Smq3dXze9ZZedllqztPz506rbghU6%0a%0agfxvIum0AfhqKMHztg2lFkdKBkcCwdORqxE31duHLJkuqeTwNmgsBYmaCEhclB6/4dSqTMDwssVWfd3S8m7JphlXMUtILE6RZ0Ql0Q7Juajb66r8FkNr1DNRmghSWZRFKHGFvY9KCwosW6LW4aXJEmaTcLGgKYyosS7zm7lISuvsGOGFFnnMquyvUhpBxVgbdkmxPSCw9wWGdjv9DkOvTaZey8G0yKNXA7oBskOntXTXGZ/xZJXtN1mdtT4gfyF1%0a%0aR6AeoFJNdSOTJgAeAXADScrkRTPZWhLcHPMR5p3gGSiaeohjhzpKDCf77Vq1WbRzdWtnqKXJV7WelWChi2sqXXRuhyNnjPWifqWl&amp;#43;xpRi3ompIUxHOGB6s6XX8OMtHh3ZgZcT9d1zYX3l&amp;#43;kjkpEWkx4rfEWHVlLN/7Del1czZIvXMct7krGMTzCHdkDZWDNFhsYp8IWIDzpkfuPLssgASEGmJCuZL4SijbZggRV2zggWEtoJXbrB1l3qIyBpSl51%0a%0avWrENN1DtcG8d7mvQB4gGoD/YhAFdXqghAHgFIBS11Oj/YoAZOiEy&amp;#43;gWzfp2VQnm2oKkJrWnSX881Ia52hVnnZFWrR3tbNDyluOMC2SJx0bInnRqpcl3ScmXYwlLp3UiqTGXPlCgayStmEI9HZ1aUcIGXNkveruF2tNNWhhvLZYZX8QrZv6TduMwkXgjJ1cUdQ50OHhnNqeMXkX4UQZpvWazJ3bfX5h2RZBc1h3qNmohhFv3y9Vlz2CA2SgCAsLm%0a%0a/1wAfy4mrW9cA3058tvv2b84bZatRtiufG3KwybdIKd55nn54d4MEWi0Dsg7dNkHZcFs81/2umeJpIhTPqZRX9BfEHNpuSHIpQeJjWnMSZ8DXnl53JOuoQ9maWDaQQEeffxmMndE7uLEaIZ4hLLL4Cdq2tgePeFLVzjFqdeJmGdbgL1JD5tJB9kVdHwNoNswfT7ZV8BfFRsX9Qjcx5CsGkvBXyIDMo&amp;#43;F0taiDNkr3MPXrFG5kGhf19rFrCAa4NFb%0a%0apbYN9HnmZ59rbwoe4v3ex3j6qEkmWT34e1PcCXWZxHGUi4AIQCMBJARHD6AqgfoHCAnUowD/ZpWzvKr3Nw4p19mZK1eE771a98UwWO1jza7XcF/JfwWOnTvZlWdKrJKC2&amp;#43;94dfF3KJofakN7a2hcumt6&amp;#43;obiCnW9pEdpYWZdadVl4&amp;#43;fZcqRs2lq13eFr6aI0es6fFI1rVsZZisJlu/rN3MG0rKWGS4EGbzHDhnzsnTnVuRfmWViNYeES0xlLj/2a%0a%0azXLOAPX&amp;#43;nY9OZndrXLG2tFggaZin8QIqfwX4QBCxTzCzrOWxtD87l5pEfTC3&amp;#43;TnHeeCIRUEBioDTnHEFObJr9YyFNo0Kd&amp;#43;Cg3D7eXg25/mIlAr0KppZvnN0U340pRQWQVxCmUUqmnpmwK8MEZkqEycF55sEGdktXS9HuGdzuULYNhiH/CrtJRPDsj1x2fD9PYgA&amp;#43;gOUNuLlAGdUIBSRReoZAri0tZ5Byocfbs2EjhcmFZFp7QVSPy6H0gZ7O11ve%0a%0a7Xh&amp;#43;jve2rRdg6ZF3BDELYon00io&amp;#43;Caqj2XbNm2Vuo/cz1V/N0CKSUDfpsU2Fx3B&amp;#43;oxkS3G6P19vhd12UaEBKKaWEord17gZ/XrAPUxmGv2XJMXMev5GtlY6WIOqX/fWPzJv1dgON/RKsmxLZbQ0qwGUfg5EgBxGjdqwh2NsLnw6wi48eJkFd7d2BKIBGl59h8ltgj1maH7wnEIYik71iup7NZpO5gAbWeLnAXAC2BGVGAHaA4AToAagS1v9hZRye%0a%0arQf1HeAQFbZ20Jjxmb3zRrI682cjnzbyPpTwQ1lPB1ko7F2B9iXcdDKj4XuqOrqwggV2bVHU9D3/j&amp;#43;2YDQUtqwptkuF41Z4XzT3o9Cses86xDahjo9fGWTOkrbLHQZqY&amp;#43;zbljipua38MH9fgGc56dOSsmogr28MTe2UsvzVh71bIjy58BUDOq5vhgZib4PfU7PNNb8wViviLKuQpN0KAROiD4E73oCwPQDs&amp;#43;DRzVfHNlQacwaAMVXAXnpr2xiQu1%0a%0ago15MqgFWsHlFBIkBdBClkKaMRvywNuW43tFUKUmkLP6qsUbT2i&amp;#43;wOmToLABAHhx4gKqBbB9AfE26BdSGAHhx2gKQV1QoARpbiOJqmIedUwqYVkZNA0to70F&amp;#43;RUU8yPxT7I9FX&amp;#43;d60fyOZTgdcTTgtvWYoWDZxVYnXIt0Xt1RxezeCEYqqmfZaW1duPVx8cplfd3O19nLY331e5zAGzBc08&amp;#43;v7j1&amp;#43;09PWQ5obZWHQr5K35LQDj1aiuQUHoPmofOh%0a%0a/krN4ri3p6Dl0y/aAUY54ue9POtk5PqIzJxGYbaHejFH5QukPfX&amp;#43;X0d14zIui4nYIIF17FuujOgnT9xFkHIRHZF4wKK8bvLxIQ&amp;#43;wJHJeBWhb1ULefh5j&amp;#43;raQ/Oj6jHbj650mshhd1x7W43HM7Zo7dHhsqn/nYdcLVGmH5UWpA/F5JuaNbR5X8erWSOgBVbywqN9IOUO4p8frtZ8j2bg9YvRR&amp;#43;xNOLOL37ASl8ABTIl9sAbJxbB/IQmD1J6gFoFCG%0a%0aGFnk8zz8U9s9A62doU975andzZWrcliU52nxV/S9HPDLpEpKHee4TsoXx17EtVPR9q6tBymJv&amp;#43;sbJG3CruHhF1mxQ6GnZyVnJJUsbycy2sm&amp;#43;ku3WdOy0/D4Tzw9YCvzzu1cvOIquNo5un9107AAmmzSZOSOqSLpvJ7kgq/t7kZ0EYgpf&amp;#43;ZDzbFOsvAUMxheKBCYWtYPAVhjtsMdjLVtDiFnCxUbWyUSO58BPX/bV4F&amp;#43;FRG019qex3Op9i&amp;#43;pOHrio%0a%0aD/ZFQ8CcnDfgQ0AZZ46ToE0B9AP9goAFIGABkuPgG0klnlM&amp;#43;S/rkUlqPjxWkh6jkb3rZ3s42mtLgc50vNqmOP82xzoy4nOFTwfZnOVTuc7VOUDATiXPoNXZAgocVPpOl6WklLdVTps04OgaaboOv3PBly05tmd9wK8mH998Y5iMWiSpoaIZjgaP0m/&amp;#43;9Utr8T9nOCP3P845PK5uvdK&amp;#43;WSx78FCHjRb5AaAuMa/1ehZ0PZ/W&amp;#43;EwKYjY5kLCmEiCpo%0a%0asJFo3Z99Hq3y6G7aupdk301BQDCbhEBC0hj2CPT25UzuAWvwHNNQS&amp;#43;Fx7X9pqMWSOQeojUmjGh3guAgYvvxT9SyV6wEEfaxuviV4s44uutXlqMA7UigB4BDQabXNjGWbACGAWwYB3yhSAKACsrfbzmwZ3&amp;#43;PJmHGhfuTvpiSDw9S8hvlZ1SvsicJwc90upT/IYRvhd8c673&amp;#43;9uVcVPicy1uH26lrG9F7m&amp;#43;XO/&amp;#43;1DlH4M15ibpnIDHOJ9mDJJdIV6z%0a%0aNPPLi0&amp;#43;&amp;#43;mVrAaz8vmb4pt32gr9m8hre77M1Uf8MQsdCrH95jFTqBolRZivZiXMZS6Ua0Ddd2Tlwa3goNaIlHgQXjp5jmxEsHFTS0mGGCglczj7PS&amp;#43;Jdm0LECL1rRmA&amp;#43;FkSKBSmsiJeKiB29JdzHeMJYzLQe612MPXMVqaN&amp;#43;/RJAWJ8eIQL9ddlNvv5zTYCX7r8B8Doqd&amp;#43;IHjoeQFsHhwqgB&amp;#43;NKhMAQ0Ad5DQa1HCkagTeQBvA7zWQcYlzGnp8yVp%0a%0atuR0yMjqG7IfB&amp;#43;tWYKXfN&amp;#43;G9U86H5O4YfSjqc/KP07sTsxuxpK6pCFuHhZ2L01BZjsdncwNXepL6jKm76WZHD2dy3vLtkkGP5H208Uem7rNmmHD96sb/krz0ZpmOICnK4iUljrm4Un6gv2B86pStCHTCrSpOd/kTqZ56WT1h5SfBQam3872PwUOOf5vyuTwz/Otoo5bMeptsgutlVrKfT30L/IPw&amp;#43;4lhaETb7VB8LE2dZsfd242heXSDNN6xLM5Y%0a%0agCu//laLbiBDTsfSaMZGgFnLol8MhLJCrDS0jx&amp;#43;aU8d2aaY1RZMQz/0oJ99HHFhjCLRkbkhjTifAJPIz5SFSr4ignmMWDvcYr5RUqpEg91YTf4eRVp9eVJ9lrJIlC4hnzU/3A8FEsgUcUFpHEIyqdaGpNcgYEVJ7kasdvxYtu7rw2OtuJAeqCJF6AKkWkB8AGABqBGgOABGBNAFsEoBsAZMBzvZL74uFViqpCe1XA0lzffElKjp9IesJtSu2n1Zu%0a%0aG5HOBnkpaNb/AshZHXTLsdfC2LL0z1F79RWZ6Nsr/QUlcvt&amp;#43;pnMNOuoZ3RfMYpjys2ftdpkv4Xf9Jm8N27To55/kbz39bCuH97ZbzsazJNuf28wkRN9KRb1Lpd2Az44/mFG2mgruEEtUbJXbBYhDeazBG/6Myx8zv&amp;#43;HOsTC8x3ort/AVEnBJCimJv0FvEQ5GvWplmsteMnqk6yeMTdABeBlARHG0awOOABgB6gKoD/ZOgUtbnV9AUqGIAMH0oD9u%0a%0aOVgO9/j7LmSqWF0lvlYcDa97Jd1rtL9vcTeaH5N&amp;#43;IXSlo6ZMuTptG&amp;#43;zeMbzO44el&amp;#43;7CQLezFGQb4gMtpLY4nR8yVgh6YscMdX2ucmu513pH7GJGXm3w57EXm7s9cdX&amp;#43;7qIwN7krJ6RmO2RErJGiePl/YwZIUPj/gLGqAd5v3krP0wfP4C0M0rNpPg44Wairk4jU2rZRgovv7jODvZi1ioQbi1NZbKaaK12GLPkGp4FGwBogPeyWeFvhDGjnQBYPL%0a%0ao&amp;#43;E7zEEOmygP1D2lp6u8BBiwILk&amp;#43;yyKKXC3BxcgWE2xmL0mzXtR54d0mWujKxIL8TWjFqhL3G9aIMNp4PCnrqBFLV8FqoYHCGw5PeCVs26tfM1zJ9tfsn37A/YNfX4Hhx5Q8yHhx2AZQAQAhgGAD9fwQRc8DfOVlbWAa8HidrQWgx1p99qo7sU&amp;#43;hvoPntdg&amp;#43;tZlN&amp;#43;Im035G/IWUPsy6oX0PkfamfReiIc1Pqc7U47IXZ62W/0lnpUGU7VpU&amp;#43;UYYY%0a%0abGt/ts6bz2Zo&amp;#43;V8RfKv6FHxu8Y/jng/Yapqx8qPufzv0GpWZKt6K6BfuPz069WuvTDBb8kjJ8762zh5YYbYR3w45gPx32IocJNeTYzr0cy3bC3frlcOoHYAGveB/Nx2v3XrUy6iu2TK&amp;#43;ZV4VK7nl8&amp;#43;D91RaOx0gE&amp;#43;ILzQHZpjD1XVgDjfDOu8sSQVmfucXeM73c0tG/BFSgKeJ/xpLxlFOgzNhcKYx2mtQ4pT2tNq27y&amp;#43;KgFoAQB6AboGToOLboF%0a%0a1QhgaKGIBv2VlYZB46OYGMU6n3&amp;#43;MSPQ3ts9Vr3SFtffE4k6N5yWun3nY2q5bdJInOk7pG&amp;#43;MuUbsoeqW0P61sm&amp;#43;/fam1qfcbmTqGYMBY7hliVvtr91WAs9sc&amp;#43;tdDCj&amp;#43;ybGJbZ/4XncK1f2eAqoqLZvTd5j/M61FzMcufDhsdL2Hj9jvwyt13G51DM2gkZuznU/lP7lLAXzt6116tqYAgLtJuT6Rn57rYo9ko93kmL1wbIXnDqkRkzGsLkERtXOFer%0a%0aUO62tuUz3SxIG9Rz9ML&amp;#43;AsgT25FzRRO5JO7LFXONW5/0bwCXZcxUPnleNo2rDnddmnGKxaLGghoZrI7D91DZHHEax4&amp;#43;n7ZCoEKHBGVeEY4xJdxxByFgllgHnHdAe&amp;#43;fq99bwjAGACfi2AboH8hMAeOi0iX/qoCMB6AKABz2Ucv9&amp;#43;weWlN5ahvCl5h3eWbtfQEqglPpQt7br6x3GD59PJN72&amp;#43;Ab46zQTrm/UdaW/M6oTfdh5TfJfqK/B35WzXZAcMB%0a%0ahgGfN37Sbdo6JCDfDhgS&amp;#43;ASPXb4B/S04YCFBr0fE75yOYK7WdAaJtvPP5l4YYLZjLZbJWT879vZ/aVmPDDwFQrLDBDSYDBD/rP9TZac3W/aFjO/bl&amp;#43;EhrJzDrbyAhvwW7Ie5iA8ZqgvfLgSlEubSlSA7VZUx5jvN3ZAmUiwyQAoRTdAdge6M9yABVkg3CaVxqbbmhVYZkJfwZ3As0MBD1iafbyDVLD/BCZDHsfB5YZGiIXuT6x63dEgwifkhDtAe%0a%0aDnWddgMtCw4N2AAS0yNroJPbv43KX9p4/eXjrmf4QohD4SojQyAR6RvSaSZcbyDQjaMwPeTcjGH6EzdBC3EQcy/eMgSrccxIlaXeA9jOro/8asSYIHV6osUSAu6QlwQGQ7gz4RYSvMQIFgkc&amp;#43;bX4GowS9LGhuyB6KvwFM4flBmTB9MKyK3fZBLwG2QrwKbAmyAHzUVQcxHNTWSHBFp7VVL&amp;#43;aB5LL5ImHL7PZO17oATAC/AbAAKRSp5XFaRBwAZQD%0a%0a5QHYDEAeHD6AZMAtAVVb1fAD7CqQAF4PfIGtfOSp8iTr6aXaAHJJbzZUPPr5ELWQhFDIb5m/Eb6hbVD7oA636YA236/APZQ4fLGCuYaMIawVhadLS&amp;#43;DO6LEZUAnJo0Amj7ipBu6s3PfZnfFu7hGYe7nrLK6LHOSYPnHrbgvLrxZ1fahSA374mPUd5HHQwHOOVGi70ZwGPEdmQzsC&amp;#43;h08BzQktSbgvWFgpKGUn7MHZIDl6UgJfLOmbxA5SDgUeEg7%0a%0acI7jMMcGgqyM0z1qfoz5ArPq7A7n5eHXn6XvdcRzAJ966kQgBbAB2KI4IwAggTAD4AGKQtgEkQzqWo6/vLB7V7cJJ0dbbRyDVr6qtTnYQ3HX5QfGAG9fOAFwfBAEIfVN77VdN5lHJU7jPefoIg&amp;#43;ia49RhZL3XVI6rGfY2iH6hjYdZ5tJbLbUAry78LfzTEgkY4XnCP5lbdR4teAaJvfBpqLpSsFfgEv6FXcW7FXefBYuNdi9kEyBfCeELl2AiS6y%0a%0aMLTcDfH7XBPYJEnEFJ/JcPA32NGhpPPYHnvK/5Gg5AziCOhS6oLYCYAHSDzqKmx9AEYClQDgCSAa1CUrBCaoLZr4mIagxgfVtbtPQVZ9nGO5Agyh7x3I37DPALZFHXvZXg1O7TnDBKznG37xgyDQog70isjAFptDOfYpbFkgb2WR7U3fpY9HWu6Eg4CIG7BMZG7QObx1SP50aAA5QQ8sFW7HohjuZOYD&amp;#43;WQGSA6P77DS4bXfce6OnAvA4Q3DAxVH%0a%0azodUR9Ysg8rjFtF84kQ/LjCA7K4unLrxilZRbcAhGZ/feT71gmTao0LF74eMVSMRaSDP6FXhpnYzSQIS&amp;#43;A/&amp;#43;Sup/wEt7URG&amp;#43;DVqViB8kPsgBacvTICf4RPcaWQ4CY4SPWBw4gWJdrkkSxS&amp;#43;KNhoS8M3DTZVyAvcGWKYpZkgzZbHhdXUSFePSezVqNWBnCDd4otc6wlaSuqjmTnj/NQ4IR6YGLQdTFDDg3bAWYbdDvUFw5wVBijuSbQ6quFAR/cL/%0a%0aQeFFvS3dDbjKQnYS6MGCgwib5hLAsZAPjAQ7xEEELT4BwZVaY9gr3Swb/BVNYWvTL4Tgy25Tg6lSSAfAB9AF4CYAJ/5/saI6SAJIAtAUgDWoTAD0wToB9AOWpK/N1D/gvB5eg7QTdndob/Azp6xvch4s9WG7Bg/r5hgwb4Rg4b4ZvUb5ZvOEHGzSdai9UaqzfGyqzrfCRjjGE4tHG3D6nFdakSeawEJDdZV3P1o5gqR59HE7DYnMCH&amp;#43;zCCGjHFMY%0a%0aqPLt7g1CQEnJU4YljDQEIyAai&amp;#43;lLYbZ/FLjeGSszClXMawFaY7PffY61bEA66A64bQHQC6A/C8pSyFbgL8EELgeIAwwIJhZjjQzAwUbFCqbfnK0kGCpLlVzBC0S1aKJTQ4ACGPS34KNY1Aq4TIeEdjU9NAK/cJHhUSNSC70RjYTeOSA4kZrJpLT8jdWOdDvMf4Qu4HEag0GuqSQ5BAGYcgHypJopS8WPqHmDGaHRFxSc/axLm3bL4XvXL43/OAjF%0a%0agfyDYgZQAQLboCnAuYBQTX4DOAMWoWzN4GM7CaDn/QTwPtFS4RvcuimjY8HR3QEGGZHVoXguEqJ3RG7c9aaFRglh5v1KXaRBcyqi9OQxvgmJoy0XswPTFMBq7BEiLGV8x4g/365gy06QsA9YMAkkFKPYsF/PEUoVcAQEMQ2agkRIGHgoXvxwyWsFi3Mv5PMTbKi0CZDvMKGL/DYBDMyL5ajFE5p4/NeChUIGgWNI7YfMUmiAkR2SKQrSTI&amp;#43;M2jMo%0a%0aFqZjg/UGUnScGKw9cSSAeqAtAEECaAZQA1AYgAcUYgCsqY1D6oSdSNQpBaJDVX6ahXlZ09AaExvIZTDQ&amp;#43;N69PYc4hgzVTOw0hauw0Z7Rgx8EZ3Z8F0LNUz1HZiYicHbhYDTEGy9TQw1GfASUA7b5pRE6EHnBtxcpf8E2nUP6txUkFsAp/o4NCkHqPROb75NrYX7Ax4i6C3qiJKA5QvAwHmPWWIG3TDQH4Udh1qK/AKJHiKMyZjp3lSmo3eKlCo0P%0a%0anxRlILCMXXeAMBF/TLsT3Q0BDDTHsUgQUVCwGAZQeDEbHuHD1EB7FQgeHIGeqD0AQKDEAZMDRAcqG6kboDLqa1D0ACJb5QXAiLw3B7baUO6tfVBZ/Av0HWwrr56/NvZBg3eHjQ8EE97SEEp3ZD4wgsb7o3eEGLQpfoo5NzJzfNaFbvZbBfcOpKdLGEhyxb4EbPHb74gqOE0fBeAGdfy7HfeOGtvM566TOCElZX6GsfWYh&amp;#43;I3m6wQrci1RL9Zffe3%0a%0aavnEe4RI/LgdBT/ax/f/bhXUiGFjZwy5jArymlXMbEQ4dI7pEbZwIjkEII9gYI0LhgkyaLTL7H/SLlbSQy8IMKSFK&amp;#43;iawQzTjcS2T7BNzBliP4QoUWSD7BXniV2aGiY/HUHokXeDvtEzQSyIqavkfrBneZCzjIf7gzWYa7sxdTprGG2YwwtmSEzf7jRrNTY3lCuKf&amp;#43;CxTJYcKGX6Wx4n2RcbqdHFBt2Z/TL6K3LT4aBR76La4QbXTQoHDfRQdcdg%0a%0aohVCw60Xub8Q1HhICDhp/cNkir3B/CQ0IOSMMeFajzHzQzFYkLM0WsQX/a14nFdhHUqCgD5QZMA8gGoDWoXYDBAUqD5QX4D4AIYCEASCD5QQ0CvAzB6fFf/5zTEnB4PCu7q/fpDBpbX4KIgEFKImG4JvMaFggxEouwqEEzQnRFzQ9&amp;#43;rS7OMF0LBQR&amp;#43;w51R7/U/QCPVo48osm4&amp;#43;uZNbbOV&amp;#43;GwNd&amp;#43;HAQs6EE8VnZ&amp;#43;zAqItvU74AI6SbVjGSYGTdY51%0a%0acYW7J/akFteZ6F9RdVEPQ7m7tvTUpgwn1Y5IgH6cgsuydZX4xAIbxyfBE&amp;#43;BWae4g3&amp;#43;AEQMyUYp2LXWSKGNgYbsZmhuOP7aIjXHi0FPeBxUKfCEHdfBaaTFyrxByQYhCrBw/BGg3wX4ggo&amp;#43;WH9wo4H8/CQBCAGACsKYgAUAP9gA4cDgvAKABzAXVD28eUYwAU2JILID5AAqgw6sY0Z2NdeG6/IaHdPPnYOw/VpOwwZ6m/LREoAzN5oA5lFewy6qi9%0a%0aeCYcouvTRTO1Qpg0t6dDH1z8yUQoRwx2ynQw85hrKcrslcCEyopgHKPZKxaPezoqAlLjzuWJFPfeJErLCF7xVUv6z3IAShUOeDB6GRKUhf6K9ZH7gghCZBaaKzAsMOlCW0HYJdzV8jtA3khVqRYTIbdL4chM948/Q4FNVBNEvsAHBvsQ0DtAJqFPgMuTggeHA8AdoA/XRqE/vDhQ4ot0GTVKESNPFboyIiO6WieRGQAk8G2wqEr2ww36Ow434Hw4%0a%0ao53g7RHMPC1oewth4GIs2Y2WXAHNLVb77cJHhF3By7Bwh&amp;#43;GjIAkI3eDDbCordYOIidGfw1jIFgi5zh/Jj4lgzJEcfTVEHMKJHIyGiHw1RYLf7WY4Go/84Qw9qwmok&amp;#43;xPEDLBDtNJqw8CoqrwMkg1YEyAMyf7A/wfZCQCATaTYM0ye5eyCQkMBDjWfAQ/HCPRgeAz66g096FQr9EKw&amp;#43;NE3/InoggZwDKAf7LMAKoAcAfKCI4KAAA4cqD5QIYC&amp;#43;DIY%0a%0aAhJQ2GsiIhCNPEgFGjYNKw5SD7sdHr6SnUEHFLCaFIAyMHHw92GGzcjGWXJfozTajHzfZdCEzd5gtfQMYkAlLZjifmhE0MdEZRaj5nQsdoR1I74HPRgFr5ZgFhVe6HVCCYjt3ArxAHbt5AI5MwIQyTRn7QYjpZcQFNbRNqUgkAaSY9MaTBPKzVECsavPYXSZ/J6F3PfrGYQ3t5SLenQ9vcT4ZjHu5IYe9ZpwwYhNRR3a5/VkHZI/QG5ImF6QwpTG%0a%0ajXKWSAVRYxOPFx548X&amp;#43;Dh4IMJWYJbBOTNrBxUcw6UjU0wEjbbgPLEdhi8Jv4cMXuCHcQhA/MCZAp6ZWidlPMAHNbdCLCYQZx6XVI9cbZEVlFELMtfng3odF5ePASAAhKmi3GaupndC/AKxY4LSbOfB/GdcxeaYFhm0ZYrU&amp;#43;RfBIXQ4IPdEWJYuHYJzcDq4kbVKpQkN4SSuVEZsuDYLjYeireEUdgX0duwjsQ&amp;#43;yH2UeAvGDFDMuZkiU0VeBRrfYQr%0a%0aCFoHrvfxwauKBBw&amp;#43;IlBsZBzEZfdJ7OYuNE/om/6SAIwA8gFUamAIwDWg0gB/se1IA4boCBY/KDWoRibYo8apBvUSyGrAlFyzT9Qk4TJYinEh5VozeE1og36wletH4YxtF0o5tHQgkjEKrcb76IvLFmzCLErQqJrLnMtzz4V7r2zHaFDo0iTkkDbhtHOxFvwrjEfwtHS7XQprNY3&amp;#43;FsJBOGCY0raw1aXJrDZ9ZDYnPAQItNqzubR6uGevEoYVOorp%0a%0acTHBI16FfSOTBNUf05XYhA46HPnjo8YHikxWR4CHMPRLzU66blDtoskBvSawMGyLcQSE60VGwg0TcbOApGhWHJop/BJdp8jTBAwkCCjoqUWT7ISFYVdcmic0U9LmI2tS3dPEKs8HFQPCPmjdI8iBfmZEgB6BBANwonz4WDg7gsf/SghJtzjIeBCgIJDi/EZhEctS/5sI1zHriQLHJ0MxjOxfKBVAb4B9ANerC/cOh2QfEqRYuuQopRp6bmFS5g3L%0a%0awiVogMFnguO64Y0PFXgk34R4ojEto2aFtoz2FOZaoYoGGZxJ4ho5luCAxaQYAFu/ct6RUN4B8kZb754kVGF4sVGTo//SHfVxEtY9xGyo6sZAYD0p7Y9gFgYGXLfnfLgVcMfx5XbQEbLc7GwIy7HGovJE3Y3QnkQdmgCkNdiTgBfHjFW2gOychhVpWHiPELLBliHyFf4pFKECQ9jDg8u5xYOPTJlZkZS0Il7gE5waQEm17QE6cEHia1A1AfKCdAEY%0a%0aCmAcqBCAPoBBJbACYAegD4AeIAFYl3E71d4GiWYTyhvOfZxYsAEU4IglJYwMEpY6lFpY9RE3gzRHUEqPFp3U&amp;#43;ETPDD5YAs2a5uDlEL8BDI0oVXbMY32rOyIMI7nLLZ7nSR5F42NhbBRZ4/w7XriTedGJwjrEnPT0xRiZdFbouQELLT7527RJHsfRiFsg/756E67GvEc7jE1FdjxUQ&amp;#43;aABbexSDQlwU40LCWyIXg/EEeAUzeXj4fCfB5aCM6ghNDI%0a%0aMkHEiskFdhgEgqH64g0Hfoi1I0ncEAMgfyB6BFoBVQeoDtABkBbAcHAggOYDdAY4BQ4Gb4uguDHxHBDH6ads5ztfAnd9KN5kowaGB4/X44YkPEETIXaIAuU4wSYjEVEknJPg1lGXTczyFYtaG3opb6uWLaE2iViLPEJyEcY7MFCE&amp;#43;rEiE4uF8YwKqV4skHQQyZaTHO6HKlLrxeIrcjd3NCE6PZQETYrrYBI0My5jNY4yaZ/YR2L6HRIo7FfSdrZV%0a%0atDQmLEi7HsgnQmrEoWhYuFbBLcHTTL6V8xIHBGhcjVdouQJdjJYLxxUwkHwJYEQaaglYROYRiD6vShFOyRRIIIe2jmKAESA&amp;#43;bvQSQqKJVYbkH0xLDwRYQeCSuMzQgsWdBrmBonoWX6zIqMgQMoRbC/GIYGCkIqgHXL5jdsc&amp;#43;BEDYPTeTdrpHYOCj4IKuwdIJKb&amp;#43;6fqyhUAB7CkHwlErPwlgogInUqfADPA&amp;#43;Oj&amp;#43;QQ0CPAF4A1ADgAjACgAWAY0CEA%0a%0aXUjggfN5YE/dTQhU2Hs7SPiEPYNBexRLGebEgmwA1RE0oiEFTQ&amp;#43;lFuw0jE5YokkUYlAxcAHtEL6DpFbQ8G4e/a2ZB&amp;#43;UGjANAQmcYyOHcY4vGUEJt6zohj7DEqvGjEm75jBAbHZ4dCHrY4ybP7HoJD&amp;#43;CAZecTvFT3JiG7oqGGvGDGhcyRAT0MPkgS0IdhhkwzAN6cyEcyKPwAoh/A1GPATamS2ijmNFQcoKrrEIVYoL8KdiDcHDL2OCgTJ6YAw88E%0a%0a/B6JBeB4EnYGOYl4l9wqAlG49cTx0JoA8gXhHVAXVBsAOKSFgEzYtAXUi/AfyAwYjmzQkuS4UEYtF4PQ0Y6sTX7k4NIYokjeHKWfImjQ6clFE2lGHw&amp;#43;clZYxcnmXDAErk6mwxBFgnXwyVhqwT3K9DQMbcE5dDRYKmgHkrMFdE0VHMkhtzaSfoll4wYmiLK8mckoTG3nZ05VbF/rtEXYYd48A4goSLqoMSZqYYYx7qk5YmKY/QnwHKybkQaBTA/PH%0a%0a71aK0lz4BtTgUFXgTsbGgpaTYS/tbiG1iIG4rZDzDtA55aAsLMlIIQmioxPAJ70Nbgxog4EuYqinIGRoC6of8ayAKRCI4fKC6keoBlnP9iEAfmblQftAt9eawxYptZq1bvq5Eicl2w4EF1orEn9rcPFyUyPEMo6PFhbeaEsolSm/AN0Ico9srghIOHOqNXYGSUFjA6Su6AQqj71vXXY&amp;#43;ENo4DEgOY3Qh07OUrkli6e8mn7dR43kJK4X5QfGak4fG%0a%0a4kBIjskXth&amp;#43;eQbgHGRtSXCFYSRUvdwsyUlB/cLzTwBZGxAIVWTCoCrShUIql&amp;#43;SEqnvE44F6gGoB9AHyA8AcEDS/P9j1QT26EAOYCFgOABVAaX5tUkN7dQzqmfqVDFO4Hqn9nSckqIrap7wnSzpY3EndSGgmMougm5Y3N5L9H8Jkk2LZKgQopdIRZ5JbPlE2iMdjPyB8YAQ2t5AQsynF4h45sksP7/wzxHqPS9buUlymzE1zr/SRRaqEm575cE6jD%0a%0aNbwwD46e5gbW6k9sRxQZkoPzV1bxbgUD2TGLByaDZMWhDtNeDK0HXEsQdGZA0Crqg8abh4CKVzXpErSuQbebJAHfBMZfzDXKGBDy0VKozGeHisNPgpm0FA5HNBLCMocskZrYqmG4iGm/o6ADtAMvbWoF4Dw4cDj0AZNGlQOYDx0UqA8gLYCdARoDMEqEmu4hr4TQNdiNPRXraCC2EwaQmmngvqnngsgmDUhtE4k&amp;#43;h4FHEZ5MPAkmsPZcnx4lAyhR%0a%0adSl43NcCkvWGI9wYtxq7MyTPeKbi1Yxkqz5TfYeYWDKLkKyn7UosHXk/fiRiGaJy0vCFVgmP5zEsTEro7oQCk11bKo0bHd4iY4enBLyKkyLirJIyZunbdFUNFYm3UnAbMuUMYJEMYGAdFBBmSAKZtjX4RV2Hg5HNe2RYrafD80czBkMemruqJex/6ZfS20aPbvEHrKT4pBBkXJQzY0fIpzjUbAgIZ3Qv4J4I&amp;#43;aZ&amp;#43;lpbN3BW6Y4IQsc8zgmcrBoUM%0a%0asQflYKhskUcHPE8cEG4yinR0m/7tAIQD9oZOhsAcEDtAeOiSAWCY9AY4BQAfKCWkPOmwYgumpEoumEo9vpxjEAHmReLFWwjDE2wilHJYqSmk0tRGyUwjFN0yc4t0h8GEks&amp;#43;HEkq6o5xJmmK7B7a1YVlDsTTpZkWfmSu/Q8mMk48k9E/ISkkadFSowGpzotrELooAZqAzbFrY3bELYyBGvrZvEfk8bF3gPMI9&amp;#43;asErYjY5nY&amp;#43;rwykh878fPvG94v6%0a%0aQJ/XK4RMtUlaEjUnX04KlEDS1ZiDcJ6vcd3Q3eHPEMXYLDzven6cwwhB4zEwGRaK9Bg7EkIt2doG1A8BBk0Fv7P6EFKdHeuYNYEzTD8ODoQxK5b40UKjnwLXhYBOEloBKuwzoLWhw&amp;#43;N9E6HJLB6QeKh9kIgZHI96yPEPkhaaY2krxLcq5lTCjAU56xgCSXqzGPej5Q7WKfo14ng0sPKQ0moAggGoBbAa1BJARHCdAcECaAfUjWoa1AtAM1w1AHYA%0a%0a1ALh59k&amp;#43;ByCw02HH2GREEE4nCV0rDEUPUgmYkvaZDUhulDPBRn3gsZ6VE2MHTUwUzGI1aHM0zlEe6CfB8o5Z4tE8xBYuWTa17YxkmUpklbU6R6vWL0F7U66Hz0uyk9YmKofnCUmRzMF5ZedQlVRRRaTQAv4/SZObeMgJGltHm7zHE&amp;#43;mENAJmAHZlnrEP6FFzJ05ZImJn&amp;#43;UoKkTbYM7fHEC4Yabl7b7Jxae5TWh3RAlzWSbuBNZD1g9XbdqrwVnwH%0a%0aIefCuo/Gj/YAPbrWesRICAXFkgn9DokYkbL3HYn3mUQ4/BJcpgUSuoIsB5YLSGXiBhZBRwrJeB8kOH5PccbjvbGbjqdYbDAIdxbQjQHQMFJAQ/cTmg8RV5IgseJpfHfFYfopzGbMqOnbMmOmQTP8alQPoClQUpRPAtXyI4IYDWoUgCI4AHCGgUknJEqIZ8MxCANrKPhM1YRkV07InEPf0F5E4mkFE6SnYkimmN00XZAsk&amp;#43;EqMqonnwy6aV7bumO/%0a%0aFpaRCAZFbkpjE7klMBJkyFpj0&amp;#43;BoMJXom1iWOEXk1rFBzEYlHUt5470gOynUqOAjYr6SYYSLqRiXym8s5iH5wk&amp;#43;w1hMNah006ILA8ThoVIeADGdbbLYHopaSNRL74Pni00AkbqwZC5oBPmFVqAySgIUGlpKbw4lQjiqlQEECSAPoDfvJ24IAZQAtAeqD/sowC4AUUDWoUqC&amp;#43;wh5kexXuCNPTpmlsxFnxY0lHiMxRHVo9En9U2um/M&amp;#43;un1sgFmNs/%0a%0aEnKMtumqM6an5pHtGABIBqq8d1pOXPeRbOEdk7rTFmEzJrHiE8vEJZKQmlgq761BBdnBGTjkiYrelrUcGbCkmraPfcBFuUjCG8Ydu7pheoiKTVlmCSE6goFJbGHDNxlCcsDA9bXgFruJP6X0gC4BU1YnmJCioS4gAxIrOYoOyXeAdjPdoO0wCiX0fsTflIzk0FaNZ82D/QOabHgGDSVzPeGki5nSnq5TXeB/6E7hd/H7Y9tf7w88Lhg0/Fpm4Ve4%0a%0aKvWDwrTMhrBLM15gKcDmJsw0cRNiJoq3GAgQhcoga4IVnxQCbfxAsJx6waAAyUoZpmR9ax6TFJPb4oHGjICCGjWOBjFKQTCh9tO8y/6P4aTcCoo4xUKiddck6QiHrIskQcyCsaPbvs44oqBUqnUqWiCaAHkD4AHYAtAEsB/sK4owABADJ0XVDjgTQBhgNqmk1ds4CxQNIjktuRiMnBzc7T5kjQqlG1sv5l4cptFlEsamt0sjHt0&amp;#43;mlmzVzIkwLU5%0a%0arQjuHjcFbmMY/qEIsp3BInaVz0c&amp;#43;m6Mcw9gi0v&amp;#43;EckuVGphaQnccz0xfnTTmTYhTSt4uCCpIkTTVg5TkRXP2B83cYL3fFOpI8r/Yo83m7VgxQEHDfbH5/LTkKY/lm65LHijsZwk&amp;#43;Xaupi4iVzmFQrDIZZSD8kSyQA7KEiVxba5bsEsTMROVzxkwGhRYbiHQ6fkG20Bn42yD7gpM9YSs0YV5QiYXgv4nWRcRQML4CQspVhErAfEANhq8dbwAVTYIj%0a%0awSrCu4auoOAtuYCQCgwmYpbikbLEammXHiuVEPr/EAkZuyErQqHShjDYVe6cw3fCGYMcZ/kWRrrMyNkUU/wmDcjipJAFsBTc/QBcIkjqNAd14UAYgDGgbADx0JPIwcvNn&amp;#43;3I2GTQYO6OLGnrlo1tYfMyRmSU/bkyMmckaIucmjUhckx4vRELQjunU2SnKdsvAEiPNmSwUvtk5El7kohJtKRaD7l7fBrF3RZjkh/aynG7P7mXfIJEwQiiEsfBJHXU%0a%0auJkl1e5ZlVQmYb4V2mMtTHjvwcHza0NZkcZOHou8qslu83lru8X4D0AIQC6kDgCGoCgDiQcUJNQelT7M3/6ugmEn1PFBztnLrIw5DbmhgUSloc8lEYc5RE1slPkyU2clm1TLFKM4Fkts0Fm5834CxHAvk0YhXDmFIiRtHcrEetXaGkHQ2RsRQ/q&amp;#43;/Wm7osienq9SIR0QH7kV4jxGlgvBqAIgBRS0uJFSYoHl/gElkpiDdk14bLKVmZXK3kZkF1ba%0a%0aiFOU8Un8c0JkJI5QlbY2GSdCWJEfPTdHHUagWTNXaibsvQGxMnTnD4/HkEDdKkUMdmj4CJXgGQONbVqb4S3EDfR8Ck4wP&amp;#43;QixqFPgXopTQrR7RyGUyTHjgUANjPESfA3CSXEXwCFrucm6wc46bL2QWGEAE1ngP&amp;#43;XWkDGUgRGae4hHcK9BI47lBGE6VyY8LTRPM3Kau4BXnEpRxSJ6CjY/BJ/BeYMPSoU6mj0kXrJQM5ICHwSZBNuOCiGFcYqwsIU%0a%0agrlTgbg9fejEwttTpVGWHMVChmu8qhnribADEABkCSAF4H6oLYCSAUgCvsfKCYAF4CZOUgCdAJIn50lImR8l5gOMAAQEPURkJ8i/mUoneHX8utnFEkhbyMgjnU08amwg9tEME02YoGTAnv8orHM5Rm6wie&amp;#43;EDsw8I7XeBkMktFmmM4QkNuDlBLwnFk2MmdkL03ZZLs3ryPkl6Hao&amp;#43;xkYYZbGTRbMI5ZaHm48o1Hd81AYnEu4kr4GYFCwscZJYANg%0a%0abAkCg9ctlC1/YPSf&amp;#43;D4h0yUkgskD7h7CO2kQ/NC43bJlDkuaVy80GJ59chHpfs2fmyZIYAUAeHBDACr6sqXUj5QInp/sGADL8mADso2DmTVP7hVC6PhEo5Wrd9AVZn81EkSU6tnSMhO5h4/5nHcwFmEcx/nEc1tlqMsJoUQCfZNuIJxwstDFjC7rpW5Q1aosjy6mUjFlnQw2icExYWXk2xmzsrjkgIgJHpWTOELUDTkUss6iDUAryDjUahHC7Qkn%0a%0aCoM6TvOfCXXdbiA&amp;#43;IIX94CIqu4OESkyUQ6JQgKatMDhjHvZIA7BH6yg0Mf5pfMV6bwFtqs8cMBPEp3nkUos6UMmNk3/GoCI4XVA8AEYD&amp;#43;QAWpVABTJVAQgDJgIQAIAOYD0AVGm9k8Pn/vCoW17caCzjc2HxYv3GVs3qnYYrDk/MwXaHcloWIfXWYdCs7lLkkjm58mMAT7bqzA8cg5u/EpGkAzQyXpK4SITLkWUfbomzCtHROENsIz0ljmN8yCGx1%0a%0ackF86QTk8ApvEqcx8BSfMlmSivCIxiBK6xzW3Zw1Zxk5eC3rwFNK6ZwrzoH02GR9vQgVenOTGQvZUWsC4KndwcPDLYKVyt6Rv7GQi/AVdRVzfGNQqMwIhDmFa1kRYDW6dZCcSHI4rR/Gd&amp;#43;AjtM3AbvcrQQ0MAQ8MDSQCQxpFfRMEjXs5xwUVfbg0RKjkr4nGLcQ4ZYsyKLksQQV7c0YkKg2Zx6o8LDyEoFVwXHFW7dwY7jlw1QodiQuI/cSoH7xK%0a%0aMrlIrEZcpcOQgiz9ngojio/sIwBbAPwZDTJqGkABkCL8kbTx0egA8gIQBUY6MW4o&amp;#43;BzCCwTwTeGoXZEgRmgJFMVE06unfMvVp10skVHcqgmUivMVEc87mFiy7nOiSCBVJeiqGYfeCuWP/lZ4udARYf5rkfdy4NinkXgCoSbxFAUWz03FkCY/Fkx/GaLRVRlnP7eApD&amp;#43;OK6j&amp;#43;fMaZ1KuD5Xb8l1gndkTxZkXT4Mdr2SHsa2AgySy8i2hVdARiA&amp;#43;Xd%0a%0aqFYcdiK0czQopKIT9sVHjdMuMppNVuwq3TWSOKKEgwINVlj4EcZi0A&amp;#43;DSuUhnOi8hlRst0WF9GOmGgbOTShES4zqeoBAkoQCYADzG4AFsCcMiJqcS&amp;#43;DGB3VpS8SoRkyIuPmjko8EEi8SkGZNMU10jMV&amp;#43;bSSXZi8MF38o&amp;#43;EP85tk0i5/mKSzQBvAG6qrcT1RU3Qj6dLGE7GQL2L1iv37josxleiZsh0fKdmSE2yn/cuTl706Bg8aP55&amp;#43;lRP5IYIQH%0a%0aw8904D&amp;#43;UyZJdR/LqPG3br0maIffVemyYjVGqkrvlbigVlqijdhTcYCh4IZ3Cn3EQWe5BrKSQ55Zr4PmLHRNCrvWTx7aAALDB6D7hPlD6nJAFsjZYW2g1GaXk4ym8UI0UXlZA5BBY0MbBCHEpHItfdwKpQ25RROcbybKgQOQR9kg&amp;#43;ZBDR7ZkZD2BUF5lLxyd8UeDSyF3AU0c6xV6Szlh0shm9w10VJC90XrifyBALXUhsATAAuuMSp0qJOj0AKqB9%0a%0aAKqDx0SOgITBwpITPiUqXH3FG&amp;#43;U/nbcqAGJ84kXJ80kUUEgjG3gmSXlEuSUFi2kUqUmiAFpabhICZDGBjUm5pgiGL8ivSWdE7kVgChBqb7QDrKXGdFXQpYVQQ2NqAwsHm0g9xk3SpLq8QCe5hgT77TNJUUsC9gUTvBT6U4qvSs0EGgsBWzntdexxjcV&amp;#43;B&amp;#43;YfBBy3IE5mmIwquyBAKr4XuAwKXbCO8ifkbMqfkDc5IXIGXUjMAUHAq&amp;#43;Q0D5QMbRPA%0a%0a0qBCARB5CACgBsAEYBcUv/6tS3&amp;#43;LuArWVACn4F9QiD4aXQkUDSr5lTkpoVZiuRkWy9oVWy6kXyS22VFih1oDCtaGYxddb2eIj479cYVPwPmjV8gkF8i2lzQCtjnHSwHnt883bCY254Py9OFTY0gVrC5ZIrs8JlKA9QEpeddGudSWnTExUrY8xdy&amp;#43;MjApPPd04uSubEAK5HnkQinTUs2Kqriytpcswqz0QvZZdeIvC9&amp;#43;dBW5wme6/k&amp;#43;BG6ctsSkkd%0a%0arAZ9dz7tdEXEW4JGK3cXCyIwjmIuAttSmST3LWYIMLM8/callNM61Xf&amp;#43;Dg2ebDIqfA74Ic5EUoGipVc8AxNid7jCTHwgCgj4bIsbkiwaYwpnGEYw8MfkjkkDvh4CQcRTxCdhJaEEbzsOa7mk95iGaAWi0kMoHzePMov4iPT20CwFGFZ4hCwy6LfwIPwIKBdie5aLS73BLkvUasQjsT3INEtX6dsfshWc5GjEIXCz2OSeAkCQl6PchATrvThr2iDf%0a%0aTEKne7HpPMAByePr2Y9EiCkdzSHBIizxYMiWGgiiW8tEBC6wv9jx0AHD4AbslXiQJJJASmzKAfrQITFr7jQTDTpLculrQdI5iUgPFEi0SULy02UKMygkjUk7mZ8iandC8TrznekVSdTRkp4haDfUSEhjyl2VrSxoGr9M&amp;#43;WOIi&amp;#43;WYZQOXSooUXLCyyXhy2AbBMv&amp;#43;WdEWJFGYGTHdYTZV51dWnQvW6kklX9ocoU2Q7CdhpbsIDwODSmao8IbiRYBxY%0a%0asMBUEK9RiC1dYzRYkXhonCafGt6QyHvo5Dp1y0WXT8xuXUqLYDJ0fiDYAUqAwAcEAZCqoCGgboCMUdiVhimADcM7im8MyPnEjBxjxFTvoD5TJa9Sg2WYYo2WNKkmnNKgy7DUtoXynKkXTSjeWzSr8L0iuVr9KvO5R8C0lNiUPzbA1MG8OV3LUQT2VHQrTqGS32UQCjXpXynXqwCt&amp;#43;UaPdR5Lo6cUPfYgUzEzK5EC1QGCql/LVgpXKK06bEKLHm5T%0a%0ai/xkyLb77csk5LbHeGpF4VRaAK&amp;#43;GpqEzOEqq1/ZKEiTHvQlZVwKnwxIK4BVnUbrY14dZI14HMZnUBkE8s5gV8swVm4K4fHqwYzR7YTtqkoPmS0RO7pwpWg7/RITar9XMoVuItQwsHzSXwdbCQUxrADGXLCEWAYzA8XVn6smDrboMgSfWW6oANemIFqeuH3ctnmMtVdiicCvToCR45R7abJmCuW7eWSm7YpFi5ISxKk5aEmS1qJRV76TiB4kG7wCM%0a%0aray6MShI/tRa7dAvh6v4YconYF/Sf6BLSrGO8x0HObAxaVyGTgP4JLlEyCWPLFI&amp;#43;iIAQ6mUXFE3YXh4CIbCYaYhC/MV&amp;#43;54CCtwJEV8wyJYiUO0vT5gUZzCIhV5pDtCLDMhXrIQ43/QYWcV5V6b1nh0uWGR04qU/jX7DJgAHC6kHkB/sXmCIE/KDEAdCAIALYBwEdSClQHG4tS3fm/xYfJayy5qvM4NIVsupXEEvFVX8glW0PckXSS1eWnc62VKUu%0a%0aPFzStiC&amp;#43;jeTqawUYXMqxITeQxYRMq4AX6S7aV1Y3kWTonEKl49sVz0iyUnSqP6IC8Tnv9IBUJ1V779izVXDirrwTuFBUEC9cU7ojyV7o0oxAkFkYd8Y4Q3CahXwSq0XTiVHh2LThr7ucLQNdfXKwCan4xYJf7L4QRhgec7h/&amp;#43;BuyLGcPA3&amp;#43;AfTxCyfm/KhuXiylRo7AIQD1AeIAA4NQD1QYwKGgF4BwoscKUAPuUITXZiCeY9jpLH0FN7dDHYqiR%0a%0an1CqRkmyy8EtK82WlEy2V4a9eU2yilXBRekV1DNRQNDHumqwN4Tb4Q1arSl7mWyB4izwdlUbUxsWC02NjOElxEN8tjVi0iWmFjCZJbHBvFAodAWTUZZgJzD&amp;#43;WZsZJFIC0QFY8yYnIKoF5XSk5ITEXvylzUTUQHF1Xgw44V/SuA7mGYDL0MQCrNMmWjDWWmQ5aD&amp;#43;YeLW7gn4JQwL4CJXkQabJBOVnir4SLDCDKhjaYMyRkCUEhDsfBAPlFBCXK7eC%0a%0aS8SWQM&amp;#43;deYaY8mgr3c7iFaHUWKuTFBRTSqqIym9Dy3QhATzEin3wecj7YL/Qm5agbxS1&amp;#43;AwXfdzIjcYqjsa4zxYENGpKt4l2a6lQ8gOYB/sZwD5OToAupeoCr1H67hSBoAjTRPFlC/NmR8lBCoqrLQ4i2xTdS8nC8KoSWoaqtnoakkXRawlXYatpXxajpVdC&amp;#43;gndKrO7zSn0YcosPQxlHSmJNDc7CPKfAW4EYVTC72UzCsrX5CeFiOKuR5xwwsHs%0a%0aa6sZVWebEBGYXRYQQ4ZPgPCIvrQ7HvICBV3rasGI1d8AilTppeGCvwgYOvz2lIGTzROvxvPFohulMvzfSvpo6lKAYeM/jUe68bWGozcXJyoQJQkQ4R1aG/TWFO1TdXGjZbtEM4K0Kx4MUD8oHEjmQU0BQVDGeEhKK37g8Qv/FAGJRUuyWmSliGewDsMcSgyx0mL/FfE3i6i4ByNJlWYKNVipPzSo0AJ7s0NmiT4CLR25O6Kf0QmY/8PASGFAlovM%0a%0aFng6io&amp;#43;wGFBHj16OCgHqjGIipN5E/wOW4&amp;#43;PTez96mFhKKwwoSvMLBM0MczHcUWS0kHbiTq/6K7axhgHGJjIgWaLLdDAsrX&amp;#43;JHVbMkqU3/YeAA4X9VihbNFCAFigUASFU4ueIDDTJBafAuLalo6ji6y8D7JihnWpi&amp;#43;eX4qlnVYaqSXs63DWc63RFW/HPlEa53Hpaq&amp;#43;GZa32rk0VwGl8ku7CPXyGHwd4LrU/mmbUoyW67EVJWktsVVa8yU1awVUH8E%0a%0aUlHUiYmbCqVWBMqYnSAhYmzUSUkPnV8nsswbGoKp8lgYW6Wm6rBUa04KkG5JDJjjMKz8g8xRXWWGL4kOIYrZPEii0W7orsWyF/wf4zrrAa5LwKQbFktmQX6U4Tc&amp;#43;ZeAVYAVB8yWoxvmfTqYUeWjobbtg8oUV6U8RtSGFQB4WQU7o4qRzk2Sfx5Wan5VsXMWXH69cS4GaeojAYIkJSXUj6ATQDxAXUhCAJICGgOSAMgbtHoiwO5wU3iXIYyPjCUtI%0a%0aIQAsLXoctEmX85nV4Ys2VEqleUkq2SWJagjWgGylV2tF4DXTHtExaXja17XSlWIvwrVaSZUnk2Ngr4LA2Ci6dkhylgEzHVOE7Y76FRMiMQ7LPsUsGzxnxwDXLuSvOFSajFABTALBNiEczVc/W4BhThp9EoRlz4T/QSuQUj8oQZEPwV5gO5IDy5U9lJw2ObAjjdf5EnLGil6LTSvmbSGkUvXGFS&amp;#43;uVSRf5UcVX4DSCeIB5KoYAmAOYCY6vSJVnMp6%0a%0aaAEYDRbAI3SzD0GHycsXaCA8GjktzbCSqumDSsSUC7EaXxGtnXEqvEnJGslVJa86ZEag2E7yqFkKyRHjPwVyyZ4/lG2KevTTGdIlbS0AUy6xjUNuR5X18pXX8YvA1jE2755hZZiuUiVU0g95xrDVvoUmo&amp;#43;mMGxUVkm1wzda5jB0sn&amp;#43;WQImT4Kq1&amp;#43;U488TVX0qbUb&amp;#43;FmTVYkFgbwB0pIIZ/SeK08WHo&amp;#43;4U4xC47rXObAuCwViUQOgG0kM0XQyh4nj%0a%0aGaRrxknYJdwFEKRPcYrGLaxGwnU9pXKrFzww5bCEvIFi9saeB/cC9IpqsrkPEYGJSCmbYHqhRWr9AgTBYQHU7Iyqru0w9qDwGHrCylhGVk2zV2G5AzCtKFHJ0JIDoGHPYuAX4BsAZJx/qy3BILdIkVK4xDoq/GmWM3vqf6kSU/GppW/6&amp;#43;D5jSyaETS&amp;#43;SlTS7LGpGqalFi/640qnh4pgM2g2Yb4GBjFM1VihKIVYQiwvwlA32IjE3oG6R4weEtnYG%0a%0a3E3skgVUEmu8kOU&amp;#43;QlQIh85UsmAYgoHrYXkSZqRiCAoVg4JlrDMfwUCsY5fSkg2gwig2dYpWmNanODzUQArW9BBXAwmBVrigcVGqiOag8w83u6nYWjmhQnksvrXw1E7H4Ch55LEJqJqcw4VQKuCCCJRAqEswiHvmyVV0Ch83N&amp;#43;O1W4FEdJfPVg17K9g0fMJhYOfGdCCG4JWarQHwnBXgoHq7fCCpd4h4IXHjRaS3DTsccyNuBro2SaPb7wQ2iM0O%0a%0ahiLtZzB9sczDmHF1qWrGAIZq/ClJRWDT0RTFBUbL7gOEJpLojYKH01RdpWAtVwDGvdzMZIEgfCY9H8gycCwkcey1iuJX&amp;#43;CiPRKgvx5UMJRXzkMtSIbEPwnNUWTL2d2RcQLIGrCSmqgBahgrsL4QYqIEjIqPCV0veLltMQzCCofEijq/SQavTmJHq7doePImikWRmCQIZhan3aLRUSL4T/GQ9x/MMCgS0Y5wK0KVzeEZpkzsVWJcyCex3WRbD9YJj%0a%0aIh&amp;#43;JGjMwjsSY42JqvcaWIaY9kQ8kfCwQxdql60bxaBFQcTD0mCpQIbkbvCGHEwUNXh3cbGgnzBmTTcA2kPpHrlr4VhVoUbbLEWvGjEhCuV2DXzlVW3Th&amp;#43;7dbCQkP/yTlZMqGYbpFvq/YFg06NkBm6lQ1QDXy/q8EB57CRCaAThG9VJJxsAOYAcSknUR8hVrLfCpU0an4HvGtuSocyI3n86I0NC3I6Ly3Dk5mjLGTSoIKdC4A2TUjtGME&amp;#43;aU&amp;#43;3CA2%0a%0a3cqFlS8YdiuWPSkh3ZFR6yDJrGU6XU7SpsWlGm2TB/bs2i05vmlgzKyL0zR4bmvu6wzAW5Ca/VUt4&amp;#43;GqYC783Cc8VV9m6XSiY/elOM7YX3m/kkuMzG3gFXxkFeEag&amp;#43;dXLjAWj1Xbi91UrxU2layI9hK3TbA2zejH8oC3CpMp&amp;#43;HI&amp;#43;QzSXE54R0wL4Zs0A&amp;#43;BLwHRk4oQ6JXCBYFQCd&amp;#43;DLOHfA3EHiK/tVbwavX7wVaaPy4ka/T8g6WjrwZeCPqtCjx%0a%0akrKo9cYXgxREM5i8QAI7cH4af&amp;#43;Wl7GLb1pgeItSjYIEgX6f5ighR7UVFcEIOc1NV9WoqG2Gr9UVAUgA7ARHDJgdjyEASX7yQKqCyIT3lGAeqAmADRkwa3il2MSRGHyNa3DkxSp1C3a2RaxoWYa7M3LyuLWAGhSlZ8kA3FmojVYo260mIqFkL8D/Rute2aaSxE2SQt8phs2jVeygyU&amp;#43;ysdly66Xh8qoYnCilYV8cw5JEG6yUXrVvnW7M6XbY3VEDi%0a%0a1K6ao36V&amp;#43;6tg0TbLHjQkaQKGaN8b/RCCga0QCm20ZazMwpdgzGc9HAA7tVcDA2kcw7bVlqMC07qnATuA7M6arF7r7WLDw1y7Pp7GmzUHGlHUcVfADRHbAA1QkoVBYy&amp;#43;2GMJeojAUeF8CNqmVi1a2409CbZEh2bjk9M3f6jDVZm0MFHWymku&amp;#43;BLWgmos2XW3oXzS6dZlmvCRRRBFJeg8rGHy3aFTwACmbCYo27SyCq3CGu02Uuu2LK3klrLI6nyi1%0a%0aAUU6AJGt&amp;#43;DdGw2gTXlcRLwyYqUW0ChG0nJTDCLiyg2DEag2RysbWLoho1wQk3XnmiHlhI1dEvyjLi8cih3EOhoK/mhxknJQm02qiJG920m03U9g0q8NsQuzIZWWQJeCFYRJU0MNmjIGiDbmJIYHs/NmjNXQClDcKcyowohFUudtVEK/7iS0IdVI&amp;#43;KvTo49EgRaXU5dtNq6ghTpDfMfZCtc6fXEuezAMjYRjGY7eCNuemRbnOwkb/U&amp;#43;BK8a&amp;#43;Z/CBm%0a%0aTw8WnnYpCHiG8g8rP6IFEOyUK1BPGPV88IIGKglEgoy3WQEScmVePWfVH4cEIVFRPRuQyexDtEFKU62WJHwNSV5OtM4PdZ4gLI7&amp;#43;4uScaytMlFL1qF9XNXLZHI0HQw34AzAACQcwawG7ytMQ/WDWx232vYWreG7ABgYmoAMgfi4wACblQq7oCPAsjmPGx0iK8mSo1MTvrLfNS5R2hpUZmn/VxGmLUJGxO1JGteUgO2PFpGlLUZGh41QmxXaf0O44%0a%0al2isXUklyo6DOeA&amp;#43;/OjXomr62y6r0QWYRDUVGo6XYOjjWH0nUrVgmfxLi9RxBMkG2QK5oIVcZOFDCJApyYb55KaKYIMG2bEAFJLohM/h1smjLgXSxOVuqgGUdwaBSQ4ojYLsaWTfcXLTjYFGiCmvQrgtZYHIIUsWJ6dhhA0SxTkMf4K3RYyAOOefB0oXhVDjK2TzkVbDbCb/gGYNf4RWn5j67beA5nI8Yt2TEibYH5ivcIqgESGjXtdDBA0yfwqZ%0a%0aAofUvNfk04oQrm6YKdjN6aER/CvQqU/HGIB6bkgeQuFhQpZ5ZagwZ2fq9waB0FoB9AWIkvvNRgA4bIUu2&amp;#43;qClQUqCGgGUb4ARmlB2t3EU9ZnaDwBvbd9FDV9S&amp;#43;pVzyvbmx2v&amp;#43;37wg53p89pXJ2zpXc6yZ62/F4Dy7KB1G2AEiQCLb7F3UXXEfBaBYzM4QdEjlUfTAWmYmtHR32D&amp;#43;CYOpvm9m28lwYMG1gYdrWIQ8h3kCsTlkOxh2rs9u2J2MJmlW%0a%0aFF2tGsDC5mdTmcm7Tl920cQ36CGhQ/QiynCCWR6QI2mqJWHWEbFlrbocg6U49kRiqagJcMWpksQUXgqHO7YQkawkjwaHQ5VQYyI/SIR0kPEi/6a1FgeX/iKuT&amp;#43;hUbZFRboJATL4TeaWuh23Wu37DCIXVC4AWs7Ny3UhJAaQAHiXVC3M3oDMqZJaKXNByGrUI3xY2pUhutDU7O3&amp;#43;17O1nX/6oE1U0452Fm051p29I01DCXw3TH4JECdz5cEkOFh6D%0a%0aCwaO0u2FurZ5TKydGOQ88lBy&amp;#43;ZVVGt6U1G4YKifGbH1GpF1MeiuC&amp;#43;IvohE2ofEk23F0/RX9o2PVSXE4omHaU&amp;#43;HjsMeMkQ8S4STIyrrr6zmH0w7qzEUhpGBsRYzrmFhjruu22JCv5Wn23lrOARHAIAZcL1AZQDgcZgCGgIRDDwXUhGAGoD4AfJTJLExAVK/zVs7Da2hgSD3bW2eXYTcN37WuO3/2hO0xujnVxurnV009D1KS50EolDLVdslMCl6YB%0a%0aC80vLVsihyD44zqVom6u6lakt2lGtQR7Pf62/cqt3diwXSkGqkGkm66Xkm9ek9bCcU83J8Dzm99ZcfGgWDmu/h3nLoLVgy6mqkqg3sOnvFo2qR24u7FLNiIXmb/aXlB03SBH4CIohCiXgHuOPTUxARg6vQ4IB6N6xliHsbgkSlpskaHYOosASEuB2SCoFTWW5LTR8vCGUzccYq/tIbIeqbFCIylfX01UlDQ6wxYE3NozQZd4z94ARjUMfGFT4WGK%0a%0ahC1RJCFYxYhcgSA3eHGhCoW7oH2vUG&amp;#43;m0FH&amp;#43;m4Z3oAToC5K/ADqgX4D6AGoCGgEvr1QEzbx0DgCdASQBzAKMWLWmMWsiAOXGRLdDpLGnXDgLZ1hu7eFueyN3k0gB0Nso53AOlD3Z8tD3nOjD0anTO2QsxXaWYgCih&amp;#43;eA05u8&amp;#43;gLeq22oO761y6kzQVuzsUTHEK5ikth29i1VXkGt87Na9k20O8rj0O2JF5zBc2pwZ1WDahr3oupr27K4m0TbGAIY%0a%0akFVxS0VKkefZ2leaf9pXCLe0sQbfU9cIewy26XmavAETjIbWRfcIFg&amp;#43;ERfA34JEaivecZdia5RHcJ&amp;#43;Aq3ImiHwYDLwkIj3tdVnyNqCV56HX7yZaNPTwhdMqQUuaQTiI7A&amp;#43;&amp;#43;wV5Pu9T1DWjipiVfyD5QUwKYAbRoMgO6DJ0ZOg8gNJzMATQAShFvplOrWWw5agxv6xapbckOI7c3FUwe2I3kE/Z2AmxI3Am5D2KU1D1gOnpUZGur5XOgZV0qlBCOE%0a%0aRamVilLbvGfVITyuL3HQiu1n9SCq3Cjn0HU9rFzsuj1o8lpp8Olll1Gzek9anVHXmnP4nmntyBGDLLWqrCHAvX0r66iOUoCur2TUH04cemR0TbR45cyJ&amp;#43;BH2U&amp;#43;X74aIUu9DwoeyU4STFYfiufQzTmAhxau4ZqYDkWcw2YerQOQbyVjAtYr8RTGIWC67yQxWYzHdIxK&amp;#43;Oy1kbcU9xx6cYpHwafFawFv7jsQNidZCrQTIHxx8C71WwaHEifK7QCKpI%0a%0a5qG3Nuarajdg96bYRaUgZ3FaP&amp;#43;7AUaGhpQqP0/el92k2RHBbAXAC6oZgBqjM/W6oPoA7AIS6W45QAAkwL2Iq8oUKtQuhfA0NCR8ct3ZEqC306qD2M6iv1RauD1/6/H34cwn1AGplEJu6olJu6y4co4AKf40PyLTUu6ICNoGomj63l21s3cqoSYQ8GXGK6w6XK6/E3Vutj5ZexVWEGxxn7&amp;#43;5KzdNPG15wdJFQ8nGQI8kFzjinGQ9BRTC0QOBVbK6U%0a%0aUudFUklwMfx1&amp;#43;YT7YRcsERGJXLaTcsFEQxaL5ZRaI3kEIOX8ROA14Ovw&amp;#43;deV2jNAfy2exMwm9TzrLUGQmFBiZrLUU0oGlDIOFB2tpCA4IPCJTZIfnQ0p54XMLLRXMJ9uznRdB6vx54efzZjWtqVmPW7WlGnTYRVJEa6Fpr9BmnTW6mDBKOX6FF4HoLZyhogz&amp;#43;bMIz&amp;#43;bzo06IGSpI0oOERcoM06Wfw06LOrERDPA&amp;#43;dGw4NEeyVJGeyW7UE4Oc6NrY%0a%0aZBjpqV4GkgwYboIdNYW666xYKpIkajHAGnSLBIYN3JZaL5ZQiEpBvoN14FprYRJpodUHSCzB52DERU0pJXJRxdNXYNT&amp;#43;XMJ423MJJXJIxxXJIx5hSVFgQOK5KOGXJ1&amp;#43;RZZKODNq5hOK651VZhF4LppbUcdxvk1ZjZhFENrKpEM86E/0qim4gncLhVBhCizru14i1qOJ0t1WeDu6SeABYA4SxUs&amp;#43;7OKn/hMBCZBMFZQz3pFuq3oNVnGaeyAOVEmF9%0a%0asYHYrCVvQ&amp;#43;yIJXtdTeIV6TYkF3FQVdjPeBblHHAU&amp;#43;GrCpNBRWeqd6gz4U30m2Ucx6QMwaJK0HxLtHlJaYdKUwKOyT/EYQqxjBFjP0zYymk6VxkhSjm5VW7WCkL9wveaKbPRT4iOcvuxliGCgB7DzCNqEFrsjVYxMDZsQgB5VznNdzQOaWeBYeVNU2DbHjlAu1FC0Mmjx9bmiS0N4jgtBbX4eWnj2YckjZU7IEBhQ/BYhLDzPUmnG11Aqac49fBVY%0a%0aNHEOyMCxVdWTYvedzlAC9UV70OK3fcARj3KrzQ8Rdhhbobx5tg9HTeWBvW44&amp;#43;l4TsTTW2zVnwSDJcquKu5EcxCPo5RUsoddT31gpQHxX0QrRblGrR9GAxJRCfATpabjbawJb7zGM4R0MWwFUMA4TaSVy2iBJ&amp;#43;CgtRtyNhMo1oVH&amp;#43;A44d6j7WMXiNgorBlOhrAuSV32bBY2hOKVNX40MV00xCGj60fYLwsE7C4bXswvla/wQShHg3CSznzwYwa7ZQ%0a%0axYBYY9K74fdYQCKV7gUChXo8Dd5V6OdDqQhbzuYA9WKuLhh8hqpnwB&amp;#43;Kir2T2T6G&amp;#43;DQ5SzXijumuwlh7C4VdSASrtSWh6WtlD0&amp;#43;G4gAiW4WVYG9ChWy&amp;#43;wL8BeBeAhrpMLdnIbcMf648erRqdTXFSsl4gcMCcox6QNgYrMrlC0eTarsNAY6iq2TxNIhnAZXQoFaPzA9s&amp;#43;nhqwLdUH4VkhpaCZDTG8pGLlUvSwkJQwz67ki8eoMIN2LdUKJcCVhCs&amp;#43;%0a%0aZISkwGnYO8OmyPb05dD/RTu/CxchrYJfELE5cbMczk0LuqSK8/xxYCjkiDbfAt6q/HwIEPigreeL5YAWBAIQbpLCQcz4M5HwOQ6GgOcuEhTtNngg9R47BQoEjQCHoHXutv60/O&amp;#43;w1MO1RDwM0U2yQlwkkNBAMREzHnZIUEr4TW7gUyiB8NLmRyCz4I9WIeC/&amp;#43;PgUs0aeCjejQ2tq4DIOYSyT7WeV0sQXBEQ8Xgk6mRngUAw/6ehMCOHEyGKqxDaS%0a%0aQkKa4/cV9GLtVyADsTLBsyWrTP4RZGUSCgRCMMLCFlVT1FS590ALQOj&amp;#43;QGAAtyrhGNkisDlQEEDx0OACNUowBO4zoDaBpZ32EED1rQYHytfQAFSqEv3gJOQM/2yv0SSgE0Ie2v1Ieon0N&amp;#43;kn1N&amp;#43;3nWZyRaWVVD/GqGWs2bnNbiS8WL2mB&amp;#43;jXj0iwMYGuFJiEnA3ByrsXHUn2D/y3L0dvZc33nXjWdUUJHUOuGZ8&amp;#43;xo1kC5wMcAm8k/7JOHt3IrKS%0a%0a&amp;#43;sOaiOlj2LDBrWPQsg0rm4WOGPKyXvSk1WzLJo1YRY2OL&amp;#43;nOAAw7Uqiky2Mvm/566PLgGKc7G13gNqJoQOqKoFBYJfmyZJwFGY5pzLrwZ4eUUZ4HAWQMNyVLE7dldGk&amp;#43;zumvKGUETiA2O6nndWObB82SmHoCYCwOLGBD3qjsSuLfzDuaQiw6iw7xzXZkiZVAT2ABpCnqWjsO5YObj2YfrgWhtpF4HCxT2QDsr/UKSEOcneChoyETKGRFpOKffSiv%0a%0acrRgnFbhgCb7if&amp;#43;VGi6QTf5CMNlqzmF3C6cAVCxQlLSpNQKYqW0/Rm8yWQu4RfDjMkCkosVnhABMWju6Mo1p6XWSlq&amp;#43;Wig0diOr9RhjLFY2jc0TeAKcBK0F6aiCU1I&amp;#43;wOEufBjjVlBu&amp;#43;5rA9/annjiK5ThaHWQ3CPFyE855bVqE&amp;#43;N7XDwp2LSiwk8P4yGY40mLtDTFO9ZmEiDBjaTYEWL5xu1TGFM3njcNPSGyFngpm7tWXzICqMtObheWnd66yY%0a%0akIqGGL7uyVkitYT&amp;#43;66RhW0/&amp;#43;cRyGil8z1qKdgq8EXjwB7LCCQrmEgBTMqFxd70rqnY0Rsl0U2G6P2/eiAC/AUqBzqKoD1QdAgjAAoWGkTqqkAVdRsASQCB2hH1cSj2K&amp;#43;Ag/noxwU4KzLFWl&amp;#43;w2URapPkRuxQPx22/llLbz0FmsmOp2imOYfDD0BvNv20q3Mm/mUvkVY4R5HtL4hvVYj0larlWV2r0SK0WHI/OuwOA2/A3dY9XV8kl3VBJ5f14Omk%0a%0a13fR74MOjXW7mvAUxJkc2e6pwONetc2o22BXKqtoJJGednse5VUbDOg2N4n74pcB4MT3VzrSYi81ZwmTEDa8rjeGL8khxn8m3YplDR7dczwyvsgv41vSEWcjbLOdvQLAn7zIeJZGMtFLTLsU/ytMXri&amp;#43;XPZoXan5H6JUeOOTex7IkJXhW874z16FC2Q0NYrt2FiJzakrSnuzmidZNnh0tUvTuKhrAgsTWixc92oK66LlNFIe1/GFGgqDFVIIILq4%0a%0a/8S9lrzOTXfcSzGgkGvQp6ObgyDVe2ZYXRgmfRlrhgG6wLeSjmjFSGIv494QNTUsUvepn6e9SWiNFYbhoHblBpnZ/DwKXKWivQdioWavS9cf5hVzM5Ygy05GIcisol6bYIMMTCighKNV1IgJxrPD71kUo&amp;#43;18JhgNAx79WK&amp;#43;CEDYAFsl4gBOlzAKoAvvUgDtyqoB1E5GMPiUQOSsXy6tfN5mLPL&amp;#43;3fGvGMKBqv3we5QMUipO0mJlO0XWnoXN&amp;#43;jD33%0a%0aM6xPlm6nXQiFkgIm5aZsimVLsMFZ180ls3vOxL35CSxTwanxN4mvxNI2iP4t&amp;#43;OQnNG0AquMgrxZ1Pf0P5Z1Nl4NWkdG7BV1J7k2NjCOQJYDhgSuEor0FdLRoIWdB4zePrHcQEg0odez4zKtSByBursw3EhExYdhD2egMn2mP28tWkBjaeHB1QlsAvAfQAtgJWWTqORAZs0oU8M4QN1yJLAOMRYxBaiD2Y&amp;#43;lz3Y&amp;#43;oc4HW0aWeevM0Z8nz3nWrpWJu%0a%0a&amp;#43;iYvAGZ6pujVb80MrR0&amp;#43;tb4OKObDRaHLQs&amp;#43;j53Hs1cyUeuZWVG3mP2UhwNqPHn2PyhrbcO1rxRzBrxxJ304S0wW7lJlvxVJvdPMh71M7GFFheAw4SU8bqPkQX6otDE2SBYfaPkQVKrGK/&amp;#43;D3tDBPWTd9rdwJPp5WwBBQ0D3QWYEeOfDQHQRSt6L1GXhptM1XkjqwbhKpIfkXwb8PFiduEzWQrCwKUeZbJ5zn/LW2ippxqqHG3lqpo1241AUgD02H%0a%0aJzdAOFEUAIQDKICtbGbFvrZlALWSBtnbVK3gCfGtM1ip1z2Np9z1Rumv2HOuv2kx&amp;#43;VOdpzQPdp&amp;#43;H1BeyA0he/CS/6biFLw8rEImmknbnQDovOsu2sx0dkj&amp;#43;&amp;#43;owYqFL22Bi1PpevmMFEW&amp;#43;WCq0BHa6vt2NulJOrp3rUvfVwMuB1bFPyzuKdur5ymxwSRbUdMKhmZ55DCSUonUH5wLHXB0X0x2O1&amp;#43;aXJDB2TlMaeUn6Z&amp;#43;OCLBnQHe6&amp;#43;TGTaod3phlF%0a%0aK4WjzDNxug4sjeurQeVgKGFA2gDXEcxLh&amp;#43;sKqFZ7zrlC6G5TSqrEXPoEESbBAWYUTMbzFrDq44Ei7x2SCcHTnyd8F2R33KhiKyN4g5aZBA1aIm6YbPFzgkQiyskF5OYkO&amp;#43;yOmfqz8usCqCHbUkDiR91gVDhhTcIUhaUvd4XopsGp6TBBo0WCMrYadjMhdwU4kBBAM0XTSH&amp;#43;ZkLJlTbiBQ&amp;#43;dYZlBAOiHKhHaYC7z8ydX1MkMyAgpMq0TeA9pliLQx%0a%0aV6bsoYZ78aMBiQDS/CpRCAFskv/eoCGgEaL36ngBCAZsl5OSjMv2kj7iBnVhF&amp;#43;0clbWrRM4qnRPGyvROSppQMtpoxOyp0635i0B2KpymPYfPtP5uZrnVpe2YIOrSVfuMcT1IqXVmBo1Ntms6HeKrmOpemAXscrTO1uhApSxgTk5e0VUeUi3poujrUQQLEN7MScW0G95AFjZk02xiJOI2uWP7mjzMgw8jBHp0LMbBA4yo2SQZ41ALTi89q7eaAEgG%0a%0akwu5USValeYNMp/x3ri969GUmKlurZcwwrhaanjJQ35gcoCzDixV6x3BDpAtZMe1Sbd5Nba9V7Z6eawbahijZOsV43wQ7wHeOyb3KvzD08Fni8mzl1gpdFL88cKwlyiHFxOyiD6C1bRWG53nH2zDMaewOi6kDQDw4CqB0qAHA8gRJbMAeqBvsegDWoZOib1QHOox51SIc1r50Z4N1Oe/qX1pnp44&amp;#43;/RMeewxNIfEE3E&amp;#43;sxNo5ixNKSyEkCZu62K7%0a%0aB9l6yTgmBjB52JCQqgN6At1uJ4f3mrBuyjYcf14s/53ckm1NaxmSQL&amp;#43;t6EbYu1MHmzQmuq0OM4KuDJ8h2IEmfTm1AiflD7WNmRzSb1mGQQBPEjd0PCmkkJvW5mjgkLcpOi2uWx5mlNppgRPqQZgDrgwTKSAeoAU2ZgA0UzWAtgBs5qUxRMjygVgC5JCa4hFS7o&amp;#43;40R1puN7V5ljO4&amp;#43;3wLjSxHOqB9tPqBvz1k&amp;#43;pSX2/VVNamP/T5larkViiTNn0O%0a%0a3lOKfgksxt50MasnOTo77gLCsyU8xrn3ex4YI5JtG1mxto3LY557eGezOBZ9f2Gxhwy5Jz5AWZnsVuB9WOIKlh2F/CXPSO0LBcBbKHm5C2gtJuyQosBkgL8HBBOYNowW4XlDh8ESbFib7gsZAUigeVBnmDJkV3Usmh&amp;#43;yUXha3VfVVI0eC0J2or&amp;#43;08GgkCJrI9ez4KYtOPRskArBCFK5PZA1rBHsKiQIefpkK0Htp7/KhJT6c2RUMHzTE/O6x35w&amp;#43;%0a%0a0iyx/Px59NOB0EEDE7bAAzO8naYARHAjAeqBzAV/nYAfKAcAeoD1QcA1lp0nWsiDTIH8kI0pkOjO9DUVO7chtMggwonNChHMN5&amp;#43;v3cZjQNtsiyovAHAGYFxsjrJ4AlyVX/lq7MLDEhb7nE5uTMMc8nMwCSfMq60sGoMe0p6Z6BhL0x55bCuNSQMdP4tEF0rPmrP4Ox4JNqTQ4aFgGHm6Z8OCZJkuBtBefzfPCENvPOvwbJTjTzRUrjupmpOSajfP%0a%0aItXnjOEZ3r7GF/SHRY2S9YRtTsyqLDf8Nm2GYw8Ol1LgL9tApp7YEYw4zCmZvGXGX2FSW44zQynmAk2Sqgw2SYCJQtHKD3Jh6OmaYbemoFMjsYuyG8xtLAi45aaNb&amp;#43;6iU2zoE5HH5vhgGSc7ipNHCwn4oUhD5lbCvcLtXSJemGDwVChGQbOVIIDs37YB7aaaotQkuOQrNjEP3LSm7wcu3vUPZlmY0nOOkA4UH13xfyB5PXNEA4dP34AWULMWZ2q8%0a%0ap39jbI0AvFo/cHxY/WWQ58LXR23RM15uHMGJtPmtp2N1yp&amp;#43;N2oF72EZG5EGY598GWE2kr2zZ60Uubx0uJg1MF48wMeJ49m3cSdlUeudO0Fi56z5sOWaxjYW8OkgUZcVBjX7T9ZWx1wwWx&amp;#43;k1Umkr3ucSTl/Pb57eZvoSy&amp;#43;2GRUQ2iGt2zGThKZr2pylg7E0A30Lse5a16VBDMhGHSU1ELlhWFFJDwCzWXp8LNhYL9xKZil31GU3PW59zAGW/IrS0%0a%0aW/C7weBD7Beb2rCYbDDcXQo0BMDy6MTeDyJd7hfce0TdhezSIyqeAr4BfiUETSGMjR3RrNX6r&amp;#43;Wr0szcb4TMMK02W5QzA&amp;#43;S3C1TcR7yUSOmb4nX5jdAzGXuaAsooHfLPd/P6zeEXhQx53hO3XfhNPZ9AD/qhACI0/KDKAcECI4NgCQiqqCEAeqDwAD67MAMeTDy2DUfAovOv&amp;#43;lS5hGns6hanUtRG7Z3ip2HMEx6v1ExjjMkxtQO00i7n&amp;#43;e&amp;#43;aXvFN%0a%0aou2qXCpAILVPwVsYXGaKASTeZs1ul0nPsx6R4chmdPWM6j3zpmvE83HYsCF7emMF48042mf3yqxHl6ospMXPVzqEOnRwyAi9YCO/LgrRbF3r5r1OM0GRJGQLiDckAgbBO53S0pOCjG&amp;#43;&amp;#43;9X9kMyPuoFQUF3QJx2HS2mPLK7gxCq5SyuT4jZ6Ce0RaQ9KHeWoz76fYTS8mLDAkT4K7R&amp;#43;hiHYEeDouK9onJ6Bmnx39rqW2GJrzBDxktT3QOLA9p2SEr%0a%0aBrmYmipOqe2E0YcrJlN9lPl6lMvl2lM6bdADBi5wAtAZgCSAPJQlKKACNAeaU1AAGghLJIApun12F039ge4gVNv2lmnxYhjOyBr/XMZqosHcw621F3MX1F80u4VtAvzS18E2l40RNg74LwmzpY/YqwMyZkj11vcgsNuCUH0AlTM9mmnNWppNTlbESvrCjWPL558kz&amp;#43;pk1mq4Qu9upLqRdbTMi59og9bXOazEnatifaJlr52pOBUqGhqCcBAckLCp%0a%0akMabJP4GLBbvIxWeOmKXm4ZrAv4w4QHlBNXEjfpkFaQUFHsUWLH533OAjEEL2aeJrxkkNPLJj4iVVZR2zcVyZ7bS6P0vNFSgmcpl4Bpv47islpNFONXvU4U0oHYXikCKrB2LHLSClh9H/R/Y1RFgROZ7eOj5QF4Ax0SQC6kRHDyQQ0DKAXAAsrHgCXFcWalVgtkRJALUfzH4EKzKAtbwmAuNVptOEx6VM4apAtml3z0dVy0sYe5aGU&amp;#43;5PG0qqCiV%0a%0aRoj1u/PHOImgkJV6xWqD&amp;#43;zlWj5zfYJEVWvmpmas3y8YuaZuaspWO&amp;#43;Vt8wMur5ibW&amp;#43;6sQvHp0lonmU907xh5YpcoS2QmZUFhFz70QE771P5t8sQAP9jMefJRgVrjzRSXAAWoHYBwAZMDYgQ0CCmCCvB2lbQZpeMWcEyPgQFrvoIVnGP1VyosDUnDnNp&amp;#43;vOtVrjPtVhSV4V9XxVJEsnXR0vmuy8BrTwLEabSkgvxe9xMKZ9Dxwmy6Gzp350LK6fOnP%0a%0aBfO8xvIMplkYTMe&amp;#43;fNIYXuvg8oLMbipOX21yWj7IBigF6JdXdgjcwbmChj6GtrAoCBEiZaPsj0xYKsCyKVJvikEhp6Z5av4ScAilks6Q0owBQAPAjMANSBSCQgD5PFsAtgUM1mMIQCdAZqWAFyCuiWRabxi/flU63oax8RWrlF8v0oVg0toVqVMtV5AFtV6WvF1zqsvAS&amp;#43;Gd59v1QkXaMoUVQwq/Uu7AIalBrOgYukFtmMeltZ6FYUYv2BjL39ms%0a%0aJMN25asrp4DZx/M5JrDXXXtunohZzX&amp;#43;VXmlnNLEJOxnUMX14Fet2ucF9Y14ecXF&amp;#43;VrXLUeXQ8NrZgcNjnMOq/htMNmG2Lo1Bg1NGc2AW&amp;#43;llrok3RLRZahw24vyDUAQHZZCdKJXZaj5tPPBf5SqwTEDYbZhDYa5hAd5KOeY4QhvMIKi8yCDbUOAYKquDDNIvCmNgONCNlo1cNngsudEF2OweM48O3MssQ0/265dWKbwVbIqyI/6gjIBoURxmRMyWH%0a%0ajWOOzCS8JYH/8RJ2Q2a2TtIm0Vq8ZQU3x6eCMyzFJ1dBhirWJbjna/CzIkF1oVaS/Ty8M7oLsbiGwIaGKUwnals8LIGbeSngFVVbgpQw4mvcesKlTe4Ju5jwoHeJIHxNBMUZFZfBCkML1/GFvQBsTBBpnP8iD2I5HbJg2nV6SrRcHVfqfYx4iLu6BkbQ&amp;#43;i26yK/BrIlrCww22iWSE&amp;#43;BNuWKHuYHU3jFG5OI7JYTQkCARTcM5prxVxwQCfXknIw2g%0a%0aDiV00kKxmSBYfRK/MfkG8bY06Xo/lCxh24w1MTDS8FECisMLWhoVM4QYCNwpvVxS2e9bY2aaCfAoUZUPrcG4gyFJmg7CArD0QQi1aVm1mcKmV40xulLjmB2lqCAK234aEtXKhyBWyaGjNiB9HSgrQzF6Yw72YPsT0bZuPs8UQ5&amp;#43;NuBTsoFcM9jWbLN6D&amp;#43;giulbL44uipE3OPUCwvSA3wKfb0VQWI3oDWA0&amp;#43;RU3fEYmUmvBpvKQdlDXbBv6giCtT2%0a%0aHF1rW5XfDIUGT26fNzCpW7hPfKh/NJVv2t0pioD6oOYC6kKoCYAdoC/AIQA8gLDqdAIVqGgKqClQfiqtFl&amp;#43;sJ13mw7gyVhFBpDnu/XQRsmcvOIVna3IVhqs51zMXNV/OugNwuvgNzeVEaoxE3crO1aMxmiO0wSV955akT2HGWHQkfPulpuv4/Na1G1gG1qZqTkt81t0c6E6v1emOwT3Sk3SV86tak/Jl3BSeaXehooeYQ9yMBFUMr4yhJLCMlBG0%0a%0aZnwbcIdg9Mkw0JViIsGtimv&amp;#43;1zoBGAfQBStSDG6oP9j5Qd16EAAHDggbSLYAGkgqp11u&amp;#43;uzYBtHeMWAA7QTJmxz0Bt5z3QF2tHYc0Nt5140uIFzjPYV5U7RtkutoiwitO/F7iITcrHZuo&amp;#43;UFciGgos&amp;#43;utD&amp;#43;rNtj56WKumrs3TV/NuzVxdMW15JPSLYDslt9R6cN1c1iq8JHFt&amp;#43;f3W19G3QKwWOCab2OgKtCA9bDPCRdXaiAFTYYWqh6V91nognUb%0a%0a0pcFtu0QulatgYYd7XFzo23F2x0K8etuHCbDL&amp;#43;6pwgYWIwOgVPGJsFNfRE0N&amp;#43;BUbffyG5jDT4fKKtYke2goCPeyfCl0Mu9ffSyvapgI&amp;#43;fzCM0Bw5QkZfTHCckIxaX&amp;#43;DV1VeKq8AK0k/NyZOPcLkuAhe0bu5gJ3Exw6OQBYGwIOrTqdB8Wj4DlAPmU&amp;#43;DxNLuNTgHpOE5rpBPe8kgjmaMKshBvRrzCcQ/4uYwAkNwoho46S9mMtSYtNcbNqwbqec5V%0a%0awutcBB7cPWSi0c14FSwdusIwGMpVwRNLtngAcWO&amp;#43;LogdoDdAKqDTTfyAStGABCALI0ql40MBajLbaCMHNtPQWtB4jEniS3Oti1kBv385HP4axv0t5molKS/w23tlpYS6ymgsigmn5ahLAgiNa061ot1oGuivk50Xh/Wv9tpegDv4NySaC50jsd3SBFziojs9EJqIfrIevgK907PSpVWbVnh3Gq7uvvSFWMxmQ7sD3Hu0K&amp;#43;zj1K&amp;#43;/egSuc4xqFu&amp;#43;P%0a%0aXLFQ6hQmHRx638zhaBCyE0A/qoeYRjLbbYRMMKoFi0VnwyFCDMyGk7jL4G2k0tr8qA7UBCGm7BFCm0mKmvT4KyBJZqzZB5HTcKV5FN4lNMuHfCjGlVLHusi6t6AYzvUOFKvwQlBKQlZ0NYIIuuOmbL2OCJVk1uPOPZo1sSASQDRHdWFMMqEXA4c0gtAExpXiUQAlV1dtlVjmJVCzIk6sOjNWNP&amp;#43;vQ5pnUSpoBvw58NsNdgpIpG5rs861vPzSha0d%0a%0a5&amp;#43;Nvt&amp;#43;14Lf8PI0kJdnYpbeDR8MbWATp41OeJrb24Ny1OAd3twLpnjWW7S2szDKhv8F1h2CF1Hk7dtnPUNjF1oyW1Oi&amp;#43;qGqeNzyUshmzQzsbSS1aG8rxQtCpLtDFzR7e5XOJwQrLsd4jU2ve2gE7g7Q937bjh0mgM&amp;#43;VFgOomTWn4HEiauKHyLGPmjPxjfwbGKWhH2beNCyuLtfe2NFWu&amp;#43;nsmxP9Uh0ZhmSAT664AG1K/AD9hsnLDppavItLWuuT89%0a%0a3mt7glVokoyruYcoaU1d49t1d6XsnW2XsnO8mMtdpN2lpvJLBewvkwiaYzKGSutq7QAJd&amp;#43;7Wvvt3Wuft/WvgIb0tt13xMFtxMsXPLu6LVqvyhl2GRjYrryUOqts3Fr1NoZINaRhj5h0uynnayBCnQiD9L2QYtT4vUQ4eFTCzGQBZ5UJA2SR5zlD6019M09yIt09pLs8AVqHggJED&amp;#43;QNiDiITNkcADgCv8hkAtAUqBd03nsFs1/RYihjqgA2gzAJD%0a%0a/V1V7&amp;#43;3Bto9v/G9Cvi1gA2S1xrty9yfsK91rvzS4nUq9qn3t&amp;#43;1hg9stsTkawdEa19/xqwAfJDd0j0lGk1Ms&amp;#43;E3sH9z6XDRDMuuZkYK&amp;#43;lPR5pl9YglJmh36o0esSayju39kVJIcLDxQIFEInwa2RBUQzQRYGPkTZEgYKpHvRspVHh&amp;#43;KSis4IJLRHsWHXC8K9AWDNl7spTIL3Ii2lH1sB43/KkT4APzHKAMFWaAUuRGAdljOxQoUcAcEACWIruCS&amp;#43;M%0a%0aVge3vvZEhLEzyyvMHt4PFD9sgfAN0fv5m6gcT95vN0DpN0IqiFmK1tVOIZW2RYGpLZPtxB0hVlmjvWiMafWsgujdigt0zCbs&amp;#43;l9us0e9zPXnVYUDm3WM8kuHn7dzNiq02GoycrJOE6WTSLJSBgbJKF2iF3F2S5ltjY8Ek6sMRUNPd&amp;#43;DT5TRVKbGQmaOs11nrmf/xWDvSQtinnxB&amp;#43;JcORYHbg1MSeKZYZyHH4NJot1UdV4WVspeYHaNk0ACO3N4mW%0a%0aXDkvv3558sJd18uV9iAD1QbIANKVSD9oYeGI4YI4SJgI5DASWVtUjLbxir2K9Q2tMZ1hJJi9&amp;#43;QOoV2rvkD&amp;#43;rtj9tEpNd2gddpr0a0130a76RLB0&amp;#43;/vOQ6U/AvVA3vjVtHSOc3ftMV30vck9MISVjvmgd/utUj/DsBIt1aix3j5ICyttrp53vDYtMTVg0h3M5y3vuB93t7drh2Qdrf0Cjy83X95QeBUl1pANCdhB&amp;#43;TuEjGcHwlN5Hy4WT7YrXfH6Q%0a%0asbZurxY15mmbEZxacPiuQdlCAPH7Y7cbAIA8c6FGR14yi0BvSWrRdqsML4T0yOXEpUlvT8kfJk&amp;#43;yDs1B9YxaviiVzc0fkF713BCXdGRWqahT3e5tPT1x7LR9sQintA1pggptAYSFV&amp;#43;7BYNupgDodsQD1mZQx5PKYAELE1AdmstgY8TtAbmZiIZOhx1nflut9oKh28&amp;#43;j6prUIKzZElEDpjPZ10gf9POvOntuouRtjtONFukUZG3NkK11gks09pFt2%0a%0aZfsvcnkhxTXgcb94bsJegkexsKRqVaqnPXyv50LVmWMgdpfPwdpDtVe0ZpEs8ODSkkuDtGijuepwKn4HN4QosKPuAIYlrRaAOQUCVClX0JXjcFXFIHN9GyaJZ&amp;#43;Rfx/MqDek6ycoFwfX/dcT1QtIUNQJFGGgLYCu25qDsUBqU1KZ&amp;#43;vt9xH11yfimSsEseg5pMX99mI0S92EdJDuscF1i9sxg8E0l1tck9Vp3DAWMjX2zOKIM&amp;#43;oLDA8Zo74jqocTVs%0a%0aw3CD6bvqZ8Ox05msYScz6USxohuxXffJ&amp;#43;Bqdy27E4OsN4dxqx6WMHY5/ZLj/kc21n3Xj10YdcMHSSldFnh4BqITfJBGibwZMqDFH/wa9eqNu5jSAweOuyHIXEjxkkwHsbEXiTx6YHO/BfvRCvwUCwwvSrlsH6rq8gKs/F3Df9ifBHlumbSDRGsAkWcvCNKLBM/UNOCMHto3&amp;#43;bEO64nhOJVp4fJV1mZ9AFzBVAEEBDAAwBVQMRPJ0EYDw4X7Ktk5Q%0a%0aDQxlvqMy0AsZpMrtIkiCd7W2Au15tjMYVrz1I58ftN5hVMZD7tMAFpgc5DvCSnixALd&amp;#43;zCfPtvkZHse6roNhut619XqFacsV5tqbsm1/A0Cx6id8air0MegX3axozM8jmDsrdsStz5lrXHd8jCuN5oTONr/pr&amp;#43;06u21nid5lh9PRAzKoncLysGE0z4jWJwoKdUV2E97lyr6nFvafLq7kBU8xDh4l6TwEPhrWdzSbYZaPLCP8rba8fJOy/5j2Qbcq%0a%0azmUi5lGbfxrbYvX2YJe4i8FR1PBLiC/VcrMR6hkLDXBdgYWGozQSuMfuTw1tJd4BxQAH3i6kGoD1AIUK1KIQC4da1C/ACgDFC1v2YDyPnI&amp;#43;mSodsH4FvMto6i9vUsw5wBvQTqXuwTiNvwTkFmITyBuzUlCe8EoWJEJ4u5V1k0zPp1OMjVzNu0VrBtThqxp1T6nMNT82sEGwDud1wdx9TqnRzFuCHphA9MylfivNBQd6/yIYSLF3zN3SFQmb&amp;#43;7CEC%0a%0aV6k1cjwSu&amp;#43;xoadHdn6Vnd7xuqiqae3EZwgnpW2RvLODYmYSDpgUaWL3HN45O&amp;#43;v5ZGyKoplA1mjL3T/wo0ESEPa0zWDcXOWnEwKNG5FfFrh7THDLbSd7aneC80KCrb3ZSDAieirxNM8r3Njdgst0kiPTi10mYszUQsL2mqS93SbfIyDUMNw4at0zW&amp;#43;5BrK6&amp;#43;/GiXwA&amp;#43;D/8DFpBh8Nl6tx4d&amp;#43;m0Gf47ZwAA4eOjKAS3G6kCgBwAJIBX2uhQy1FqmXO%0a%0atGesiRWrxi&amp;#43;ual58EcRGvduxDoWuHt4aU1j5KcUDxD1AOsmdP8imey1pSXeutscaUrUDLObfAlvCsUF2m0SUMO6LD51A1Dj/CeEj07BjjybvczycdwCgJGzRM3sDbGP6TNZbt29jYuNDhojDNAC2KDrk1jDn3shqnsMq119m4WJUGz2ixQDiAcwMqqiTm89KP0bCoqzZAixcvTwGi8RWIa2jWR9FfEjNYJmSPjsEWB0PPbYGKdv4AfKDJ0ZQDw4U%0a%0awJVQK/XA5OsCQm7ud1yWzmgFysUSBhWb4iivOhuqvNjzhIcTzvH3wjlIfpT0xOZTlEeO1F4AYD3Kftj/CTIkD3M9dnv2OJvE4P4jNv7zxutftmRJTVuof794ifc&amp;#43;locmxhnO8xqicqLsTXNDsc1cfI83Cz&amp;#43;jDCffqI8fcr28&amp;#43;&amp;#43;jAg8pnP8&amp;#43;4ht8jlfMFJkadZjAJle9sOO6zgXgW4J/D6JHVL9XBZECy18wNt0J7JYCFgUIk0crZXMoI8DVwR6R7%0a%0axBUXaM34EKgKalsj7cYirlli8MQ2R2i2LJRXdhG2Yf0FMlA65xNjsIm5USVWiHsQNZH4fEiSe9uBFIrYGafZzlbquuEMoA8fL4xyabBf5qW4cLCHh4GdVz4dsvD&amp;#43;4E0MkzaytQgATqbABCAIYCkAWepzAfKA8AfjNCB/Iud9otn0w9JbH89BYQjvTL4z8Xswj4ftwj5IdtpqWuNji0udojI0KJ/hcrz2IjFlEJ2xRZamosCivFaqRdVToSZvCoic%0a%0a8zs3vzUZrxbm9u4b0xnMGZwX3859VX0TqMv7V2cUcjsxchJkht6xo6mqzrVHbdrRdAr4zMZXBkfDNYk0VtuLoXrGyUJJjk0H&amp;#43;sFdcT4LN213F3uoKhishXSDzR74xRN&amp;#43;hWEIA&amp;#43;xplI2TuC&amp;#43;ir9g14yCvRWiC2qKPqSYPSH40kKW5u/QOHNyRI8PV1lqGAIfWHowg0A0knD&amp;#43;tQx6YYxttwiz2iA5B9Rg0myT9Cimidlfo8Ycrm&amp;#43;1njWB7e0WQC3AY%0a%0aBDHjg2NzCTIXri5FEu37Jhwg52pHjfUd6jk1PHx9dM3BwkJ/zwaL5Fw&amp;#43;X4tSFHSUmQTHweQwlytGUCgp6KnkFcuPR7YXe6r3WUPFBG7ho8XTvkQZuMxcyAQMUSlO7G&amp;#43;LttLhMc0nNqHQ&amp;#43;uKBqymTJbASuQJsplTYADgAOxNqlF54BPNPNOv&amp;#43;tzOvEDqsfjz&amp;#43;AGTzthcbL1IcZTnjNNF&amp;#43;kXgsuNvMD2lUHdeyGkV3rtsihbLUuPeeGpyofszyVzs7%0a%0aLmcTjjutTjmkcPz7kdzj5AUmLnWMaL&amp;#43;3tVjfJN1ceqKzJJf3VCR6WfS5g2d295dwdhUnW92QdXUnWefz9LCmmC3BG3Cbzdwc2QIsTFD&amp;#43;95kJhz4vSF6QLA7CVb1HIxmjXKNfGrZuDPUMXsjMw7aNnmZeB/GPgLrWduyyQlATfDVtujiO0Q/BJW7L6yBB7mXLTTGehOFO4EjMw160bGZfTVWmlC/uLHuv47iF4eWFgWQBVckbDCg9wCHia0QU2tL3%0a%0a2vtLpLv5QBUuI4eID0AUqA8AeoAcAQ0ClQRoD0Af71MUQ0AnMtqn8p/mCgT8O6Dz9taMZiovC1kNuJD4mclE1KdUDjhcNF7ZdXWmzY3TQFtrz&amp;#43;zzDpk0xCkbngbzvgdjVw&amp;#43;exsHFR067tf8qxReLY/tcaZ6ccZcQsYxecWNta5t3LrkzMO9qvCd3JRcHLTYsodnis2xipOrrtidi5iFfQdpdcdThQfzdxdezj1ifWLziuzrhxdUdjuBfIynn3iwF%0a%0ah7sCzXUMJb2tIkMr96hOPCofSTNlH3S9sRFO3dq9PHsUWSiPQcRQjDuAeqI31q&amp;#43;&amp;#43;sInpmdBrz&amp;#43;tR&amp;#43;KNSF3rzVNoUDBBAZIazN1fGYp6T6KsDN&amp;#43;Ax6DEGTdd4T/wfKaIyrSRKyBQuYBbVfiFrwkeqVpvzRwVyzwf/E62mOPG2NTEoIDChBFdmh3HZXg/MTJc7IpJWX6di1c8LiH4IYiqJaH7afeY8ydtteCuF1cz5Rtnhvdkwe6tzHb6tkGdEb1mb%0a%0aRHEnZSCboCdAToD4ATYC02NgBGAHJU7Aaabk9BzZoONRNgT8tnxTmO2Ez1ZcwToTcml4xOlrzhflr5scYexZ0ddjsfK&amp;#43;scauWIodaSz6z7Yc7h4TjtezoZTPyL1TPabyifNeC8jNeaqISz9zd1cG6g6b8deUjyxeyxmbtLVoWNDrubvjT7ic4uqad8kemH/tEmQL8SCn70D4iyQdTo7CFuugjchiNJtFNA0eMkvI3AYFNXrChWmd5fRLAS/eH5iH%0a%0aCJjLckPwUdID4Tc0cewwIN8VCMbwHINfysM0ZHxcKqemHTtBfpKwOjxAELGNAHlTtABAC/ZqI6w4bgMea&amp;#43;IB/sCn0ATpRN71VFWdS7QRwV8&amp;#43;hA7/UuJTw0u1j8HdntrCvIFnCsQNhefzS67mG4VXtK1/Cxp6fmjNE8isddd7kVTj9tszpuuaHSnOnzntcNDiQfEGn84Q2mxembj3tfylt2aLyG0V7tFdj1tndeNz6lZ68hhLAj4Q3EO6wzsE/CXW%0a%0aDsO9kC2ga0WrC8kV2lS4/7oVYQ2Ru6CXjapdpkzzKC0uTiuduTiNeilyGlo6nUjfsUwC/sGGnw4OblVnTzHdAcZfx1313WekCcv69qRzL5nIB7gmdB7yXtGl0Pf1j2eczS&amp;#43;ec7LjD3585edQG1b7zYaBQrSrXtybvVba00/xY77PfcHXPd4742vnzwVX3SDkdnm&amp;#43;FBj&amp;#43;U8hQHpicAFYh15&amp;#43;JFfC5&amp;#43;GrF/UbVIHsR3D3QLe39rX18gvehBQtSEPsw%0a%0aNjCMVGhmi5yuQxaEjm4d2QIKRbL28z5FWos4KS0X4ynyeGyB5kKlzoQV7ob3bCiWu9nxUYbieyF2Y2aVpj0ZD3ZdxziACyIYwDN/YJliLbzB6ecz0lgjfl9xLuszeOjdAAvb6AGAD&amp;#43;Qe3ctAeIBQAGiXCIy0iIohFV77wumLPCpU0ZqnXs7PQTal3NeVjvjfVjwtesL9ZemlqHdibmWsP7pSVv85/dCZ4AST4YXdPc7XvCPd6wQywSXKb4t3Dj/I%0a%0aQDGfueab2u29r2rVn9nogr0hkfv7OnM/PWr0aq4vecT7BoY2q3sbViQeWqgd148iesT1mb3mkvomvp&amp;#43;l6rZMle7YClzXosyQgpIUiDdJ7bBURSuqbXYRxaWQqtNsbh34uLQCMSlBGQa5RM/B4iYUbdC/Uea7KuK914&amp;#43;H/EKT702l9n2sKH54dJdj926oQDgvAeqAtgdB5QALMCdoX4C6kFsB9AegDby8hf3iJr5/bqqsy9fAetrQgf0L6D0ANi/d%0a%0aEzq/etC4mMzziPeXt5LXR7l4D9Czw&amp;#43;F8m&amp;#43;DQCey32zbEcJRO6yQ0WxEDj/gdoOgCMTIW5cgH3mciqzI&amp;#43;M7wevmb3zcUTtdPAu8ts9u9jBUmtqfMYDidfL5E&amp;#43;p1V1N7myWOpJoF5MCiaf1773sO10fCnyZmXmJThi/YmoEauUHXOYM9oqycwVLlByBl6dHhVHlyFk8UBl6QbfBvePmwLlNW2Oyc4xnL&amp;#43;2cEhC1k0oQytlVdvQqY&amp;#43;mEqCky1rcDeN0%0a%0avGJ6KZ07aoRu/zF6IqMkkUfTL6bgqAPPEYFaZCPk8/YRTjInMXbrn5l9j9WKHmk4pSICtJADgDsppB7yIKoCGNMBadAYtac1w4882ShcVKgU4A7849pHM/fLLkHcCb&amp;#43;485i0mfPHhCcRbOaXFgFSUTeJJsNrn/nCPT3SBFHBsZ7zftZ7sfOBw4kcAzZit&amp;#43;l4&amp;#43;n6b1u629khqaz95wyDtLy2Lx8BNRdMKqoz6V7JMUWxH4MtMFhWMLjtcd&amp;#43;UmSv6E%0a%0asMqZW3/RA0J4QfeaHqCvbxzaK0yRLcKmhhw/3LFaZM72FuPqH8pZqrYd5pMteEhbxW/CPbZyzHSNEjzZiGJi0MEbbn1BA1/WYe&amp;#43;TBRLYDwXnDYdTqn6WEhdxu0sB6ejZIcW7vyH60/zH1mbWoEKf0LZcJAqp1LEAbwAp0wno/u3IsTLjvv3iTqUVKz&amp;#43;vetqxqZLOhfDzhhdxD6rt/GlhfwF3M1h7p4&amp;#43;bLlAuuHq61jgG6bViWdh0&amp;#43;4qf/8oBpnIi%0a%0a5dtrzBvZ7mQKQnmI/4GhI83OekfrF6Wnr0/5dwn15e7HSFeO9xDu2xwJOPzqi&amp;#43;vzntxaAvLJfQzA8XVzFdaiqhIjsOx1chvlCiFYwvvCx7zkFBRJ41bmgu5J4i1OtvSWG7LTgCb5h0wp&amp;#43;6E/BSdDZFfUiyahizXVFZMLRGXRZS&amp;#43;7SCvwWoIyZB495x39M2EZRKhbNN/cfnhFq08DWivvEbzoAQ4QgA1PLT3x0bNOSAcED4CKoDWuXtNc1o2F/MVF%0a%0aWUL7dtxThZeYTJZfQj0M/wX3aoIFm/dRn8mcxnvCvoQG6a7e8zVPWtaXy2r6hlDkAWVTrfvq9A4ygX39tAH/9t3L&amp;#43;nfzVuI8Xfbqd1Xxu3grhbt0m1zcWb3RdgdnI/tDzq8ebpTC5jRiciznzMsTvzMtbWc3w2wdeSVrMupwTnQjD9ncT1yzkYCNEFjWVJ0e6LmS/MYVCKTtre82/EioWM93QsCVzv8BHjLdZ4Q60dbgWOtzBYUvQ6iFErSt6E0P%0a%0ao8IRj0w4CUYhccx5aGeOCRcWH5Ujg6r997h9XGwqgIfkjEus&amp;#43;N7mHFyFYYy/NdIcvJVXRivNPA6phmDzxYRRJRTBnykBYkJzjSZClFGLDkVc3fVkjiqTw0S7/eoQDJ0EEAcAOABiQNgCsqZFGxFvhcAXwCf3iIpKmHnvvzVNOuGrPGdBt/NfML&amp;#43;w8IX463sLxEc0D9IfcLiyrXAPBJPcG/T69&amp;#43;2YMzzQzLGYBCZg8ock59tfZ73rC5n4RY0Fskd/%0a%0aPdP5lnsvBq3nqgdDjlkn99YawHhSaltyajQHpLpseldeMX1s/cOnzpNRYZoTEQAqhmf2Ogvfi9akoP64wtHgmYWazuc7rf7cCQVxaFYxJQuGLWsm03f8P7jmYrg8gCM/FkkfMkPcXoqBwnATI&amp;#43;Q8O5hqbzbrol3gmajX9M/rrw8X4zwWZG9AmeaS6aUXgA8clsrbIdjSuRrD1RgzDzC5kKHjtC2Y3mfmB0SQDQPQgBGAF4BzAEYBVAHlT6AcEAbq%0a%0aDgC6kRJbdAMPnen4pzPlXiUTy33fxY4M9xX24&amp;#43;g7wTcPHzCvIX5w9F1q9udVmmBVJdM4XDnrvq1qkrc0ZEi4FkI8jdjtdrFRit5n0keLmnAVJI4h2vSy/sjuR2/D4i9VxO4mgL6kpfKuD/R&amp;#43;S34Iy8d7vokXgmZYXnhH4RYFe1qlPhrwjeRryGkcAZRBXicX5VAemBsAT3j9LkED1ATQACXaDUD3zPILM9s7jcdFV&amp;#43;7r1syBq4&amp;#43;4xkgcFrsmkc3w%0a%0aB2BBUTcL3149uHwVoHH/Zcv74sdTsL4giLx0srA&amp;#43;YySLoi/yZ7M8Q0QA979/HdVXkic1u4VVn3&amp;#43;q/gDIX2fy6JN7V6s&amp;#43;27HSZFn4IxYuz2PdXidese72Nd4kevV7&amp;#43;1OMg13s5cEs9D1xAabrik9PMWkicDHrMLSNLmYoXszVI&amp;#43;jG87vx23u2RJALqMo4pTdBFUZZwmznKn1qNWKes7Gax9TQbqwJEi4BPbytw3Uf9kOtQrvaWgb6SEJ6YyDo6FLY%0a%0akpKhtWCoVkI94e6&amp;#43;rRororYHrIsLYyPlRu7Ocx/1fZValAavMnyvNVPUxlVSvtLZzTPLIhBTsYix0vGawr2D9w0Be0Q13rDOJ5&amp;#43;ICkATACkAckDNyhkCXG&amp;#43;OhyQDgD4ANikLAH7c/thM1ObYXBvM6eX&amp;#43;464&amp;#43;4Ptm/4PxK&amp;#43;IX5K8oXyPeL36Pd2QFe8weBWQiLje&amp;#43;XKA7x8jaem73g&amp;#43;cdr33pkXgvehJpocHP7h&amp;#43;OBvVVHPkFfdRMBU83H2ODmxoj%0a%0acahogkmu8DwQgesCfLiuCkis95J1FcpcM&amp;#43;kijjcdakt&amp;#43;BuOGHHXRAwbe5RdrfCRDMpaf1OtN5bD7wXHgCQCXr16aPauF6sTer0/xESFg&amp;#43;V2cK2VVOnhIcKsTcpBs0YqSsv3iqfCa0JlKD72/CHIDQ6F9qUErmH/xdISLCk98QtO6PJsTIoMdNtMtRBORyFqC8GhY8F4S8vafQqen02zHx88eTmk5NgeOjQIXACl9ZOgvATQAiXQ0AwAMmxCAXAA7%0a%0aAdmxGHvhn7n3iXfA1OvdU6K9l&amp;#43;qEc3HkWusZhw8kzmXvc3tIdcL3jNejXiDi9eWK041Qz4Fk0wSGnaO4erZ/SLzfaK2hW82reocsV&amp;#43;WPHPpj7M7/Lh1ea&amp;#43;9ce/Wcr1hLeEzUmiXRh88uXm0&amp;#43;Q0vQBUrQSCSAQp6NAcEA8gUgDEAV3c8AeaUwAbqshXnB5Vp/0/zVN5l065m9Y&amp;#43;2w94P2RmOHyHfEPqNukP9C907BHe2KfSQPCen1IaB1/gRMTiyQ%0a%0aFmeXL4q9CTGRLIYqI9YO8i/QnsicSiwnRSVwnShmd6W7USUqbWEYOJGbCLfPJINU7svDD10OC5mWEPG6lccRBn5/921AalNx/SaFCwZCwp2UtgjFRUVPWjHCHbrzzCE/Wm/&amp;#43;4IIZHj/NAyCsoLZoBcyHiq0H/FtiG9CH5h5b7&amp;#43;TWudZfLqbcNSt9cczBSDZ98slL3Tcw7fxKKiBegsANgixBooRWk8WgsDw6WCvbhQL/iKCsUJyCv3wmAPhfcx0&amp;#43;%0a%0aHDaNRoD4AOaALADgCI4R&amp;#43;KL8yuSVQOADw7pB/1PRXrjQZ/DoqqeW1V7B9Z18t/jPyt8mvhEd89JEe83y1&amp;#43;O1YeB4Jd&amp;#43;DvVl0tJbf49xCejawGv/dj5sNUnziq/1TqE9m903RHU9au07pJNca5A/JHyMSudC8gQFKc1UOlvxt3VA9ZjO83xwaIN3ShhuXPtBVWf/I8hZ&amp;#43;2vuod1fkWWZu/FwxIi8PWRJYa8zPIkPw3NlWgEW55EuzLsScxLGGo8OE%0a%0aSWQ8ldoNkXdfItLRyT2W774XSDwpFmhTYB1EV18CjYXWHg8RYW05aoLA5bw4TBFs4xIwqUFOFsEZEWwmLt6&amp;#43;hjDXeL7eOUK1ba06/KGZniHcOCxj4CsNIXe4dOXoV8xvp880nfmboPcsCSAeOjx0d908AcDlVABADRgKQQUPqm&amp;#43;e7tqUTypj8gF6gxj33V/aJ2K8Gv/jcJX7vbX7uCcpXuedpXpe/866md2iN4ul89t8VvZbZ7mbt/MPoYuTooFq%0a%0a47jh/AH4d/XzvtcArwN8kQ4N//SqacK3RbOAJmzDZU6N8fstJVY33lqaAa1DdACgAQ&amp;#43;uKD1AMWblQF4DJ0KqBVQ/KAo0tvvTfoAsradGNMfiIdxMYXtWHyEerfsZ9wX9m&amp;#43;TPzm8lrmt9bLtC/gOn0U3TdstQSlPcUazQwIkYu/IY119XL3XZIeO78kj718Fn1i/CVxj0tnye5DvZ/b2xoLozXhvdVhJ4xddVlDLteKHeWcrrP6f9cm0yzQEjBbz1%0a%0ahNsb2P2eCa1k8ajiAYwWEn/jjIWLsPDufd4f4&amp;#43;sx0xoCxE&amp;#43;RMMgD0AUAHkCaAC0EUAHYBkiIQC/AMkAITb4HjQRrnmH&amp;#43;z0Ycce9rfuw8TPzb8z34Tfntnb937vb/zPwruNvumDgsG&amp;#43;BwGrecOKSuwECdTYZnwcduv9Xo6OvZ8&amp;#43;vqf0XPUxv3z5if6OVOpc6B87udNzeJmJbvhwds9bs6ttsC&amp;#43;2uTIGW6m2rYIPrr5hNJYAQ6yTWiSCm5obFTGKXp%0a%0a3z/H6LhhxURGsc8&amp;#43;WIH4FWJ0MZQy6OtCoutGp8J537CkAKqB/sXVBVAZwD1ABkAjAJN8MM&amp;#43;OiYAGoBQAJIBgqg795vlpTq&amp;#43;pCaa7REnZEtj9QX0Z&amp;#43;s3gn9&amp;#43;/wo4B/iHdpTs19lrpscqU/7Ika7/iAnWn&amp;#43;cD1aTPKgFOyfzfaTxnE157rTcuHwt7P18hVUavVocXly3IaGYqHVc6W/gYETOrG/suzxu9SiB2W0A6O30XJBJkACwkojIjVyNsQTH5X%0a%0a4tF8Bh0Img&amp;#43;RhBST/wOO1kLL1l2SFDXVycAHzmPEV9IaT6ATQAggEBAeoBfgF1QUqAoJkVCHYBG&amp;#43;j/YY8Rgr3o/X&amp;#43;J3FSQmQrQWPzp6SC9rD143JhdL/24/Lb9IzxmfF49793QvUs0I/3CwQDoTbFk3KxEcUCHtVtcaK1lvOT9saH//RT8z50e/aq98whF9AHky91e/RJMOr1OfHq9/YEgRbOpCTwfyPnNQ4EN1B/ICbWdgEzcS4AOrS3UxrwaIe%0a%0akEPY0r3RMxe/FK4GADnYGGaWtoIChfySLpgg1tvaEMRf3JPD&amp;#43;dS6gcWVjFqDkVNGewiUD2uOuZx2HZxY7hiszhCPgUtID1kdWB4inxLfFAniBwQYiUseF&amp;#43;PUpdt1S&amp;#43;8Z5h0QjKAiyAtMXLuPV4RBWhEFmQjLUsjPgVX9EfMTiATbAT7ccwZrCgQJooxeCJlaxwHhCUMGx4z2TOCB0UY1T00esReYSqMXwg3MHV3JPRK7DHEBNVp9xEgf4JvBTXaJ%0a%0an5vNEk2B6JgsEX1BEg5TRRYMdhu9ykGMxVgPGgqblAtIGZ4Q2dWBnEaAdtnLwB/ZHVoi1&amp;#43;wZwAqgCzRWj8IxX8gdoARpmhjZOg&amp;#43;gGtQVB4jABvbfgDhVGxFGSo2mHSWP3dKxVLfRhd4hykA1PkZANNfPj8ebwtfCtc7Wh4AG61KHyEzehFTuByvcvkV5l3VH/9U/29DdP8ufzOfQlkZjkKDVR96DW7dbh08j0MzYUcduwyRc2snlwfOVk0hZzDLX%0a%0akdJqHHSWJFHNyP9PDsprwYhd784Dmr/CXpNhDWKArUgWAD1O4koRAvoPGgVZC0kIgDWaEACdvVwWmB4d4QXZxSlVkIFEjA8Phg3ZFBEasopwDBIal8G9EgENkhzhHeEZCgnJyuIZeYUswSIDCU8fFENH3oeIhawGBkEnTC/NmhM&amp;#43;wkgDvRx2FqjFbBoRFa5MTZ6MRg3XlBfuAMGd1gWeFPgXDYuQ330GXhQKENzeu4XgM6/N4Cj9QETWmsfB00AF%0a%0a94hqmrAGAB/0QTZeqBAIGTAGfs1X2RVRCY3fzHlUTw6el3bcQD/63x/PS5Cf39/CM90QNRuMn8o9zIfHgAM7XxAwvlKRh&amp;#43;II08vwVj/RIRlLQfmQi8dAOIvPQCA2VbrDn8FFyAA2kDNix8DCuBHJXDgVwCy8BhmUOAICjGDeOUGBSclcIMJ/HC6A8CR0iJDCxsH8niDZ2BSGjrwYIC68HfJbcC5zTgA0k9Ozy1JGdhSrmiwQGg0my8eGB0En3mkL%0a%0aSRTmzQEKYdJynd/Grl70gv9Ix8ea3bgIlMW6hbLVJt&amp;#43;8HhYW454eyIkEgN/BSokS&amp;#43;A7pl54cDwT1Qu8AvRIhF23TD9VzFEVZQxWAgu2dgkYRAVeVrJ9FWZ4Q4wY4z5bTe5aunApBU9n9AzlGcMgqE2wFLdIcVNMAS1zEUOQWxYQPhJ4f9pz41kORWgDBl0YVlAcMhFSfKUDfxoA4V9q5xpOUDkEAHaAd1A7QT8GEYBOgEByBp92KWiJJBZpDiEA6%0a%0ael1E2yJL0FEQJgvdMUuP1RAm/8kLyIfe/9od0f/XPkqN0FvH6theB67TXsGfRlteQ0wu1cTHt8szzyaalxBSCpA5W8LngDfGndAOy0bJZULP22LXMYowEigrbsd3x27Av9uHVaIMKDVOWOGCk0Yy2q9FzdBxSodMfxFUWE1DW9B/CrPFoIGMG&amp;#43;XQfxNu3Ynchs0eWDjDs9K/23FW6YohEOCAHgcXw8dNbJ/ChkSWkh0VCx4MDciqi0kal9ainioJ%0a%0aPdLtlbmTDRb0F6yITs2myhxFChySA9UF&amp;#43;Me9xdXDwk6YEGjFrBSBguaewsK1GuvK3lVhEO1IVcVeE28JuYPF03wP/0EECHvdLBYGXKjU3NtWQFdd8UYWwfLKuYIsF2TScwAwLPaBbxlCkuEZXMoymQCGssdLQKfY6D/0j6sLLAhuijKHYoNhCPRfH5Rt2dwWdB9sCzDeDcH8BvQMMo&amp;#43;YUGwYwtq9HFDCewzxQJ4CroFPSJuRngNIDChdWAEvi5IU%0a%0aBMJCzfAv6DJ/w&amp;#43;AioAAcFnqCOhqJUIABAAagDCOTQBGgHqpKIlQSWR/SsCosWOPewhpmSFTbvocf0WXFm9OPxRAm/kePy5vDEDzXxh3J/8u537Aj/k3fV5ofSdi7metTlBCaha&amp;#43;Zn9e3y9mBokduH8gk&amp;#43;9lsWF0Bs9ydzp3SQdlwOlyHn8o5SslZOFRQMy9HzdgoOfOVi9Q5QRPF59BVWmvJAU0oMs3Xd8QLQ&amp;#43;/UX9axVWEK4gX4Cp5MrQ0BjusZ%0a%0arlu9zHYXFY73RnYal90A11McoC89CckJDg1ikA6Uq5l9Ep4ArA96B0xVktBaD&amp;#43;rXTRqgTevIEwKGFBYJxRrQ0xaV/R4WGAoKfcmvzJGIdoQ&amp;#43;HrsTnhJkBpKWiIsfmK0Ibh/iEs5DTsqimQUDLdu9UK3dYRzcE9yc9wzBypIapEBSFoDARx0wNw/WgC5IMhpKAAhZm6ASMBMAEwAKoAtgHqATNkF/w4AScIF2ym/FmDsCV6GGsDD6gUqQyDvf2bA6%0a%0ah5pAIsg6Z9571rfBQCKfx57CWDBhQ8JHzR3OVUMVZ8xwO/vcupyQMDaBol2RHVg26EjnyCgzjV&amp;#43;Z0mvB8liGwlAvWdRfwyBDeBkBCfXEexvCBpQG4VNV2JggRNoVSSACBYuAOtQICtTSBgAb4AMnGYAPoAtgHa7SEDRLBMPfpAPINa&amp;#43;eECc11x/XmDJAJbAq/9ChkFgkn9rIJcPbsD0L25Oamc7mih4HrsxbwreBGVaHyfglWDVvWW&amp;#43;Qd9K3QJ3A%0a%0aSsiTRRtPRdkV3m7IqDmQJ86IC1nYMV9abUWgRBSWPVZBjurRzsk9xJbXGUkqRxwAGkZ2AJqL2lWXVJoa3lPVGgEc2gZslxxf79&amp;#43;uVHgmOlIVSgAEEBhfl&amp;#43;uMjdiAAVLIxBGpUiJDhlH9XxRPBCj92FwfGkkmm43CscJAORAshCD4PbA3j9OwNQvWhCKf0EDbIcBF0QyWHxcCyS2L/dnZnphLv0mHynAlh8fIKmZbxNqC3zPAKCVZxmOQjtef2Gvc%0a%0aFAN3yszLch01FE5ZzcduwKQ/h8QXEEfLt0oOxZ3dFdJpzdgi4csSG/KVzBLgOPZIoFaIzqXAuFghSDZbq08U3ELFphscwvoE5VQniGjHvcd8T1PanElZE3deadLz0&amp;#43;sI99dTgF4UOkoRBa3fMFnNE2abF5PdC5LSwUEM2NkIPwypz/vMNdXgJMQm7caTmTAQS5HNSEAOYB4f2ToZwA2AEala4BMu1wAOigkFg9bdmC3EMcuD&amp;#43;1yx3Y/PNc&amp;#43;YL8Q8%0a%0ayCAkKFgoJDZnzrfCn93d1n7QTMBwKiEMZBWt2l6LotHEy3QOdUjGRBPFTcPSzhhP8w5wKPvTn9MkOyPG2DzpUvnCT5pHxsAlVEGQPlyKs8&amp;#43;ZzZA1i94/iGvHZhQbVUXCrIpi3pQulDiO103SpDqUN3pQ/1IALyg8R0NZy2Ff&amp;#43;C15h2sc&amp;#43;AyunQnDIoIWCj2YKhNQX6TJ2QkFxZ4DbhUKQO2B2hNZFgTVMk8EEpuJv4B6TC/al5igSjAxGsISGZhO%0a%0a1RsUG1JVdopaDgoXm1fC3P0bXE9RUv0OKVcpmy5Q&amp;#43;x9OnktUE5eyEMxXQ0Us1bKSyAIJQ7VRkYerRDXbyxseD90bXFxkH1eVa4lDi5kLMNPklUvWoxXJgqqa1k6ui&amp;#43;ICVFCexhCKbAX4GXYRi5j3mMQ0EULd1&amp;#43;wJRBwVSAWdxI&amp;#43;gEkAfQAxKg3UEEBcqyqASOs4zTY3BS4QcziYYVMxAOIQst9SEP3g/5Ckr22/OQDozxzedK9UZwvg3eU2sGHwd%0a%0amkte05pS5ReCX&amp;#43;IYgtpb0GLT7kiNDhhSGI34MOpQvd5omSPdR8oMDGnPn9rny6vYoNIoP6vUOBpBxjgK4sqoIQArUlIhA4aS/RtTCZPMCoyRl9Re&amp;#43;Y6w0khS2gwBAswVXgRkxYgTARbMRywUp0t1TAEaDdX4GjCLdVoBE4aSP9vP0m4ZwlsDgfxEG4AKjazeYUkRhaXHD8KySN/Vwd1xGUAXVBGgCqgZOhQsV1QYIkbcQBHcEBidnygRGlmYPzHN%0a%0adtq/kE8B0Rj/0DPcnAvkLP/HB8L/z&amp;#43;QgWC0QMCQi355AND/HsCkY0bfVfRL2gbXST9bEEYgFYdEkMEJZWCfFDhhPEgZ0Mn9HFDAOweXGWlKWQgKW/hy/3gA0Ucnbxnwf4JDoj5oaupN0DskbCNXuDnPOx4ruB/4WO8mnkGsVlACTj6bPfR9fw6/YeDZIJOQnZkKAEm0X4ARgHDrIBYoH2CgdoAqoB0PI5lKbzXg/skl4Td/F0sDIJIwq4AGwPrQp%0a%0aEDYLyowmosq3zv/YWCH/3E3Cn9EH27Q6E0i4ikKOn0WELiEf7xa6g4QvjC34G15WZV5wM4fZT8TALIhGk1t0NAPJqdKkyqQ7W8a90Kw9kcMoLQYZOZPzRL3eE8oV0HNShtXnz5AhrDYZDuSXVU0D1qQuvcXwNupNuwgnAeOEeA9ZCgUfJt8LGRhHx0C4Tg6RdpNYGejIAQXcH3gcbx4Qn0NTlA8BkwlYbBS4x9VYkZUWCJuBfAH3CvaKIQKqjC&amp;#43;B%0a%0a3R/MAlkWO95IXNkNsRFPSamZpcjykawOngqzTOENyZigM14ZewRWQgEVwE2aCG4XqMBaEWEJttYGXeMNVkApgCVeONmsCEnLzBrHEX7bwh&amp;#43;SGgQ/2sRgCEAD64/DXqAUjNQf0rkCkAGgC&amp;#43;yGqBWNyLHZ30YclKLbmCYrxIQ3xCm0Ooww&amp;#43;DW0OPgrsC5nx7AqxNPjw/5FupEsC7fOmNTvwYIOR1tTAKvV50ir28g5koFI1g0QTC7GWy9N5cmd2P7A%0a%0aa92UOUfAcVdSh27RKCgyzvATdC7wB5zOR80T3avTodCxiXpa9Z3kDQ7CCB/AIN1Ohsk1AgKB/hAClv4J81qsIFA3qdmz2OxH&amp;#43;CLqGIdCYt10TH8Utg7G2Nwx58SUIrgPwwG8DS4B3C0IHlFDJN/zUUfdrClB1&amp;#43;fNgVeZBd&amp;#43;Faxp9FIyadUD3BEgi/xGQj2wQXcxeBkNHcsgaEpuYy8n8Dy0LmRhJy&amp;#43;ggCoiaAXgCWRd11bmOktHdHBCAY8SsDH0b%0a%0azIesFr0WmpfmnaKAL9fyBchOEZ1uBUvWXEGy3Jie4Ik&amp;#43;kbCTCDLICKwLvt5zymwfEhNhA8wAzBqy2USaJ8S2TEhMlBDaEOzLp1iXB8LK7D9BgfQnbUmAlW4X4w&amp;#43;QU80HnkqJFHMSKNpZDd9J3QbC35kZDdVqXMKbhpqNktDHZpfuGhbH&amp;#43;BDC1j1KfAMaG71Eex3mGKzbUx4SC47Kg52UEnETXh9ujzAeqYHogUncGhBBlUlcexn/W64eEIQe1qXL%0a%0akNnun3whs0EPBaTH9p/Q0X7FEhWQ1abDpsTOTk7Lg5x7EhaAPQkHRhCctwT2R28Cq5y50u3SucYMKfHDhEQQCQETAAgFgoAfQB2yV1IDNliAFpgSWVw/2wQ/hk&amp;#43;Tn6QLV9Ih28w8AEvEO&amp;#43;Qmw9G0NSxILDKEKcPUn9gkNJw9C8V2yiwhNtn0RdJajl8tXdUGPQjKTHQjBtkkLZw4Vda9h4Qzn1sUJpA/0s6Cxn9ZOYYVwZQt3txdGHNFkD5u0q9O%0a%0a592gms6ARC2UOpHPzc8kNZHXIw8oJaCbXDiHXYbSRDzu11yJLRtJGn0KfBeiwAZQrpwzmifMYFRzHDDF2YAPBDOQo1gJXz1cDwhUFW8POUD4HuOIJ4KBGLJUbNpZHJqZhgDc2&amp;#43;GbdpXoxJkGKlSgNymVooLhQvRLq5QGQvwQe0UEDfgOXd/glkXaLRlbVR4LgJFhG&amp;#43;GBaQbRWsdKKV9V2XgC70SxAeIBXgUF0vTC3BqIGU&amp;#43;QAU9XXoqNzBZIF7BM%0a%0a88YQnKIoRggEBp5eIF00PIlIH9A6C2AGAAVX03qfyB4YwZAZXwQQHqgWKRyoFo8OOln7VoI&amp;#43;wgMZxkRT38kTV3gyjD8cI4ImjDAULow9tDlKTsgvgCBCPb9CfAIN2LRcrF2MIpwf7ApsE2fZFDQj1U3Qpk67GAaeQiJ/S5wi2CawV9fdRducIYvXmNDYJX9IdctiyU5B58wIABePzolOSefGR9dYMi6AJFTyDs3ZjB28SN1Yc1S/3anc/Z1HkMmB%0a%0a2DqwXYrLT9dCL5wsACPcPfne2tW2gh4cYCvLDTvR/BL6GWcSeJnqXs0XV5k0P0kN2QbujVteW9X4OeRd1BZ7XOsGgI3c2VXGmR/sH80I3Mx4w&amp;#43;4D9MSsD3jMCp9ALAZZjZu917gZx1q9GJOdSR1BW&amp;#43;PS&amp;#43;AxLA0LGExz42UMFFhPHEhiaJ19y1NZcqMW9XWwJft1QVwg&amp;#43;jY/HHBaDEITMEbLXPR6NhxGUyEjoml4VwshZGvwE21G1EPgdUEgbDHPI%0a%0aeA5y3xhba813h1kdRIkOADke6ZT5FmsJFRL0FsHapsJ7BoCbyxclzW5G1Cx8BT0Rwg1hy5IWnkovhywV5hu4SgwiOkuvzoAmOl9AHKgZQB4pCSAEEB2yQBwdNEYABERKqBlAHqgXUgbUBb6RDU3f2kqVr4T92xwvV88fwOI9gil5WCwkTdqEJIfU&amp;#43;ClU2dEMZcSNUaRCxEM8TV2B4RaHwH9V4i97xH9HndTsgxQxW8MkI1go/sCWV9fH5xQoNYvP%0a%0ais0j0RPS2CREP3yAMtlF3MA0ki9Jh1vcicRr3s/DFdZr1GHISIaESxcZmF/V1uEZDxAWw5IPAMTOU4w94wNIECbE2kf&amp;#43;GFxEyAIKFIAsVQJ2DX0c4RB9ybbehgeZEoIOPVh0ORiOUMT2UkKcbgF4HOMWbJcgKwubswNoXuTGChEsDZ4CSA&amp;#43;T3A8LFll7D8tGoxsnTGIwH9a71&amp;#43;wQ0BkwHKgVqEPeTEqdmZugABwIYAF1DKhQQQqCI93VH9VBHKVf%0a%0apAFdVLzNa09BBLfGIdoL1HnPHC&amp;#43;yLDbTgjq3yHIk&amp;#43;CGMPQvDHMI/wXYVzA1QTaGfBDS7mo1R0lLvySQ679TDAr5KL8rGUxQhcCssJAAwe4er178GE8MBSKw5Mxo5hK4LOY8bQfWQvAs5gOrZdIW/CzOPMxsoPukHrZJ8S/AYT4TZ06odIN82jyDKLkRdBN6Od8jECEBe5tHwAIQG/hI7G9KT31oqMKDDq5EqLzwTUNoqOESIgJoqMIhZDZBxS7uE%0a%0ah0V4E0bdXIPzitKSaA8qMjsQiEipnSovPBPENiuD85wqN2Aaqix3GESBUVf2A2GM6I8zGzGfIN122qorOY&amp;#43;3S6owiF2qMZHRNpcBQgAjnRKqKL3CMQRmiGDSKlmry0mUSF4FWL8Mw9Vq2L8PZN&amp;#43;fxN0LtU2/B4bIfxFonmo4fwzqDb&amp;#43;AoMHVWaaWthNkmiA/oRtzX6ESLpfD0L&amp;#43;FWkOgi86O5JPKUEBGT5cuCXST4Nx3E&amp;#43;DV8lPgyaaUGQWmm68D%0a%0a84nnANKIMwJ0na2AQEnnAEBbrwcBSDMHAVPgzyDYUphPmFKJXJBbhqaQW5FokFueUUnqKdw8SRYgxRkY8CcZB62PXRACg10TwDEzG7tJzoZcKqwz58&amp;#43;fyhIw58md1BI&amp;#43;hsn5yGot&amp;#43;dB3Uc/ZmEtJBckEhMjFUitax4fdF2vS3Jl7BQQeJpFSM9HXEhcBnxiUks5I3o2KSEcaj8UEKUG9Ab0AaN9B2m2AssiBn5XGHgMI0AMPsxvvxyjIn59uFWEB%0a%0av8ifFrDGmQ9DSiEW6IOkBdaQWj1zDS3AlwYEBJfSPYtNXHsGbBJDlnA67wy1ESZfIotPm3XS/RkfDUVUlca/jj2BDx9Hy2AwyBD2GDTO1ElgT90EjQBSBDDdE41TVW2LNUWaGuohM4gPDL1bEgR4HgpFWRmRWQZV2kwPFc5VYxFhDcMMiBXWUChMOFCZjxoeWierABEEi1KZEqwN7h840hifplLaCeGXrgywzwDVpkUsHvvTMo8aGJoGgIUQlD7U%0a%0a058UBQbarRmS21kAWgBUkOvX/CWDxvgGtRJZE1gGOMeeD8efD5UsGeA9uBm1EoKa&amp;#43;xeaGffaBQjzBNFG/AftlZQZMkOGHl1TDd8A32uGaw8uST0PgVtrzAQKQ91rF0VF&amp;#43;AfqGQUXzllt2zJIuCpwAxgja9RQUMQzlJoE1cLJmglQVK0BfJ/fT80CdgamAoYY4IIa1PsasQxvELlNK03AUNoK4guWxB8L29pbRxxIDIkohQEHYkMEAzwpLRZQIaTH%0a%0aLdrc1G9GE4ooxhSUWh4sGrsANEV3VVcNWBkznmwoJxpyw/9Ow49TxxTd2lrlFcLKEQ91XimGKl/LSQgmeYtWUZbRjt5R3HLI90l8QkKNdgHmlpPce1F9EgpTWQZ2CHmLgZNQ0BlIZtf3G0FA2gHaVe4AhlxUmnQq5UVNgoueW8bRWHEH/CK3BfDO3J7aA2lT4sRBhleWsRsmRR8ZYpgKkJcdcwCNhuER0x/gioVYpE2eX0kIE8V2mereUdR/2CoE%0a%0aslYdWDJTLdvmGCoCOit6PhCJXhUmj90EfdAwhj0Smh2SL05fIjw8BW4G4R9rnxhDDRq9HMWI0cjmm3&amp;#43;ampRQS6MRg8urnogShUD/hxIPX9tYD0xfbB5HXlBT8Ftrh0Q54gS70yzCbJHIAvcK6CcVAFDQEYdx2L0WVsbOwJCA2hnCzrDYOdQpg2zMHtrvD2RCawTJUh8YmRoU2j2dfplnCwpSeMb1Rm6US1buDenFfRhGEpqKsRWeD5iN0kuiKcKO%0a%0aQszRxHpCHCXh2YAa3FiAHprYgAYAFKga1B2gAoAJIBV6jHhFIt8ACHlPDCyq1GKBxgX3EDSRWpY&amp;#43;DKvYyDxKICww4j&amp;#43;yOkokLCgUPowjtCl73bzcFCYGyVrO4kdd1L5Bwk6zWeqJuZHKiT/UE9WfWhoCZEiAW&amp;#43;IqfMW7QqQpdCWUMTMQRCBcKyPMzcSvHzGeyVsgzRPKSB/oXcAmOBVcNDgfGjnYDHSTZIx0gyDSKirwM0bdljKrGCDFYNnYG8ZW%0a%0atoWmk40cRDSuAwKRENE2jr8Ad5ONCGDTAptGwZDRNpGBTzwfYNKrEOLPPAIgOBDHGQB3nyyXRs68GzGbSZhEm0mHoMcZC7uU0oNhlrabxkgZHBDXoNCIlK4RYN5/CfA1ndOsO3FKgQeuH21U&amp;#43;AgilB4BhhyLh3MChjeuBQOf9o4Ui4tB&amp;#43;B8EGaPHYJ5yhDOH7gdrwcceowJUnObEsQXokeCMNjUqnx&amp;#43;RPdMsAVHXnhnKwPgHOjuNg/9ewsYTCp5e%0a%0aaRYaHWfKkj/LWUFDN0NoRAgynEQCSgQLwk0eAjol9d0UlXwLiATQObEQboYPA5tX7wpvRpQZBRB4HBrEM4iV3r0C7Zd82JkRZivTT&amp;#43;YdXdtyyL7FcMGE1ctVQdmSAPRQ7YdH1PgFrB9JBg3L4RL9B0MD2QDpxFkdKFCsFsBLeY0YUhOEEJ1aH1HEfVfuF0he7MO4Ob3JMoi1X1HIeBBxD0gVyAFGMpdQ0lNwxRCZpk4EAdkGdA7iGWvDp15rCO4A%0a%0aRhdmKJCev9XHHwY8eMbunQQL4tb0lB4ZwgG/kj/dkZLVkAopAR6bSjKBwhlIWWcE/wbrHsBeIo91jeRRsIQ2SGyaWJ89EokeDpV8BrYuDNTrFUrWMZ/uCymKQYfJQJ4UEh3MALUYY9RinRUeEhX2UebIfMDkOoAo5CM0ImI37A2yRprYQBi5B5AFiVr4F4uCBxyoFLWPsCUf1frXmxWyI7IDedqDD93MotRKPP/X5CAWKko44iqENCwmyDwsNHIw%0a%0aVoMCwpwwYUpoOX&amp;#43;bv06cN36eipPSWSwydDN8BDeLFixi3wNSRtRRWXTCncryJGaDZI2C3FKKuBFkgyDN54TGxqiOIDfXyL/Cxcl/FCRbYBQuLraLR9EgKi4s0w7CW07RFMYfjVAw6CPhQnw7whZIDRYVCgQYmtNYlACtRZIOg9Sl1ZkAw4vExBOMoCQEDa9T&amp;#43;NxOGffFlJVrz8eLsEyuTxIAHhl1QOQDd5dZFlZSQJ1uH63MV5DJFug9Td4vw5cW%0a%0aNjR4BNsAqpOONn3GSDCyNMQm/45gEA4UwAXgCc1Q0B6YFKgWbkBlzJsSxD/x2k4gsc4hXbOZeiqdSEoo3wiEJ5ghtCJKOqLQFjNOK4I2SiScJBQvTieAAIrQzjd5TVgIwZEthISB9tHEx3FXV0mcNkzKQjdKL2QYl8EF0Motcjj73fg0FdeZwpHI2Mmz3NrSK4eUKsA9MsNCPWIQz9fAMZo6VVID1mJYZpEVxRXYRDSWUcbQICwIAVpMmjL712LO%0a%0aBUooMzhBfx7AJJIxMwCHXDgIwiS4ByQynjQkSJ4zMsceP4SJIwamiH8JnjZWKZogo9RhxSwS9JL9Choe0kw2K6KPtgTrky/fgUnZFckBx9kgFLlSm5cRj2nZIBYYl9RVfsL5mewoOljmxbYtc4muQfdZ/B6eUC&amp;#43;RyZmGgZ8RmBwhUQsO&amp;#43;wywxm4KFC6GB8IT&amp;#43;gw/TRVSbBIPBRoap01bQa6Va9eTXrEUewgWH3KWwZzr1hiBrpRd196TEh5MPQEK%0a%0a6syE3FSd7UFcTaYadVq3lFBbLobPB&amp;#43;IM/QDMBl4VCx2s1y/SQ99rHZIZmh9ITJoZBcxChLECBkzV2GPJg8b8D1dcvQH8M&amp;#43;2Z7ppjUWyIY1taDlI79DoeicUMtQMXG6Aj8pmZDn4WuCoIKM&amp;#43;JEgAGn55eClwECcfILRdGSzgqnEJZCFIODch4OgwkeCzMJjpGCZ4cFVlJEAL6wQAMHB6ACl8CeEqgABycCsXmKwHTWUmP3oI6jg6M0wfX5iqu1Mg/%0a%0amCjiMJw2QDicJ4Ii7jedSp2TK8OSG9mbv1Udw1rEmEDhDkqJWDWcOfghtji0Ts4vBsQALLBTXVesUvnFHiEBUFHHtxnSjmCenj&amp;#43;4mzCDZIM8B&amp;#43;cLagdlQ9TPd8DojHGOPCiexcgb7pwtAtRHuxR7Wy0Mqpj4w5iW/AxNhJbGyFQP08tZ5FWRhi0ViYGDxVuW7wpmQwyeUMX&amp;#43;yxZc5ZDQPjgsdNeSHiwZj8iTiGwbdBAiiKYr8DKKPeAgRN9ACqAa%0a%0a1BK&amp;#43;hBAeHBGgG6AAI5BfluQ0vYdPUKgLGkXEJTAXmlI&amp;#43;HxpaECsH3Iwjj82CKO4jTjD&amp;#43;I7A04jUrzBY&amp;#43;Z95ayuI2lVOeOAyaelCh30ZFLA/mG0AnjCn&amp;#43;M4QsWgvmnKve79KrxMo6zcWp2anf4i7n1qNWdd/NxzgCXDSWKQFeKCxcIn8ALMy/zWGOOU7CKcXfcZDZAcBOwoqsG1NabJ4GNp5F31Kn2&amp;#43;PLLAVQOSpGYo&amp;#43;gWTKFUDlPVP0DSBcDl0Ve%0a%0aChDpxDRSLBMvzMgcbAARjRfN9oPC2ZIQcoGXxCpb8pbCyvXant8yPfVMbjR&amp;#43;Jv&amp;#43;b20OABqAK5DjMCviELEYAAKFUjM4ACmtZUs9/37JVWtxoHPKZp4/dy7Ilb9ccP&amp;#43;YySiT2xO4mSjtOJoQ3giKf37vfQTch1iVSDoeuzlg0qYe2OorSwTdAJSQujYWNW5jdciAePPIoHjnv0A7Ync4FUBIjBhUGGE&amp;#43;Hyl4gMcXLdd3eiwqQrQL/Ul4JRVGaAlca%0a%0aeY&amp;#43;GD8FIwNSrgL0DARQ2K&amp;#43;YclxKBAbggYFHxSUMb2ZKnWw/GY8TMJaEoB8x&amp;#43;OZOX4ADSDnAJgBnABo3EEAqbAjFEaJl&amp;#43;J4pNdtvSME8C&amp;#43;B0lnxoaiBg0nRISkTlvyhzHsi1OPmEkfsgWMHI5YThyPkoin9oG3j3NVNvFRCIk78ei3r43rALBKPJKwSUsKMgASi3&amp;#43;NN7EwDzexjaA8gKRLSo6kTowBeEoLdEgPdJJQwieT/IRWiZ90wIw38R&amp;#43;JREm%0a%0a/4C1nlCHkBbgS8xM&amp;#43;B2gEycHzEtgElCIp4gR02I0iR8ELLpJjpphLpE2YS9&amp;#43;MCw47iNBNow1AFQWPOI2M9Y2zj3Gtdch1m2ajVGVXiww&amp;#43;QN2ghSKzjQrHF1NpjVyK9fYyjjAI/45htt/XuEr&amp;#43;C16SfnMniMj0PI&amp;#43;59IoJKQl1N/oRJ4xpp6PWz/L2NskxKyFE9IeJ6nD5cEePpo1HizAP1w2q8LCN5AzNhPg18ZdwS0eL5/bzdSGySgp2DbyPqQh%0a%0aID3MDcWSi0mI0ihJvCeXxWMdXcdvBOwIYCUSDlteeAqfDOES1EOxGa3A7wAYiLcEzF14DVtBODo8ya5b6Myt0toPmwzeQHEaMJQqQtHD9Jb0FL4rpAv4CKoEFgSiLLnDz4yZlejaxxVGJGzJfUgqAwQNzksLimwH4gheQfwSgJQeGujBCx99HBsKuo&amp;#43;GjsfMp8ZsJesGPZ14CDooLA4qHnwempmwwPaeYpjJHSdZydpEkCKeDIiJGbLdnwl6OVZT%0a%0apARZC&amp;#43;IHCxgU2uUJzBm9QEaBT1qXw/AgKZl7UuOax8WmAxOUbMg6JvwddZmZB19dTojmKS7XVBDQC/&amp;#43;O/5xIHqAZwA/2Fw6dP0hgENARRAAcD6VEYTHmWeNUiR9IOiSKK8h50bA/V894MZEtZdmRKD/NtDtBJ9E9K8IQI2ErUxeUAK5TqVuiz67Ez53hW4w4USjhJkIkQ0FP3sEpT8ExKcE2ajTMyJQ22CB7mf2Bk1/M18ZGKDRc1FjU7EGxIOxU%0a%0a3CdbxGaWWlbcO4wAqChhAtwnP8NHzVVdA9GPT5QuW532gqKd6w3tgKAqti8LR9kM2Fm&amp;#43;NXEqnEJIA648CgXvRxlWh8gWD3gEVJESFuOaXiv3AV4WJjfelEtNBAYlUSpTbJttUCwNHh8BhAQR2RxrC00HrhQE0YCUjJYThOvLpAEe0GyUMC5SMf7D6tgEFxOTpBENwaI/ZBf&amp;#43;CjzKUElk0xIY5Qudwnw5oicXB4iDx4g6KlxRUNBZQzObbMxHjU7F%0a%0axxXzBjnLgSswP9rLN8qgDmI4BZBpjZsUqBcAHNbZgBp2DoUZbkD9xTAXAsvMN9bSyJLj2UEn5DVBKarBYSPRJOIr0SziMI1dK8sEN0kxshvqQ0FexNcLyzxeeiTbH/BR/iLJOf4zrJDa3SQ/7jZ0ORdM8j9nyHXBgt1uzRPBwC10LLwFcCH8ilwomT/oU8DZcd8/wUfDOpPvlufTHj6mitVcYghbgpY7&amp;#43;UXANCDGljQ4DW7B/JPJPGIYmSJ/Ai46%0a%0aASXYLgOO5prHD/0aWhJWzXsP8h84yVA6S1VdxeEfJswRKB1Ld5dz0QobbVY0NCoWycP003o1fAFxPxmC4xGgNRWbndgcI7Ddk91L2V/aV08BGXKJdhkJQhiOl58BE14Jco7jjsFCbJuuh/vHO0Wk1M1LhVcAgFQKzBWNkeiGcM87VHECoo7FSvudqVR8BBoTowmWnHMC/xlKJ&amp;#43;4PRJIAw4KERjOIj6dX7x/4EhIVFJjeIgEUz478NrbMo9SXWrCI%0a%0a0jraBdDOWiAdhvPbcIh&amp;#43;ILIzMChnX9rTQAhAHxMIWAPsiMQLlQXgHYDDuVdSFS7S4i1uLXbYCcUwGAaCO1DINP/RST6RO&amp;#43;k0WtVJMWE4FitBN2/HQSewOV7SFiuROgdNbg2jGMEgdCQ4SrDA9cUWJRQpcj2rg5giUSRBybtFQiWr3R5NE9jF2C48YhFcK3Q1OpzG0gRcvAHzjCDXsSyT1eE7R8EBE9yZBRXZCvmZ98ZBmyEyAQjLWffGmZJyK3Ka%0a%0a9oV6JlkdzRQziO8Z98gEHeFVKZ8PEkFXuY1Yj6PX4tnmAMKGHQXhH&amp;#43;IKgCRuO448YjqKIqAL954gBBAEYA9Ij60XKsAJjJg1YjR2w4AOj9uKJk40qj3mJa&amp;#43;SPhdiOxjPzCTIMH7ffj3RIBQrTiQWMBks515nxn7cJCDlwO8QIUxMxISMzjxhWXYdLNIxL0o22gTZE5wkUUXBNYBOf1FzWqTPdCZMKr/Fr0fPmPEq7CRxg4k1mYE11S7AHB2gDAcD%0a%0adQyAGBAMMVJoDgARHAQh0kkj2JcPXX4049hezrQ/bj/MNdE9TjfpJYU07jWRLkoyeT0L0YHGeSAxLwkYn5NyXf/BFiMOGu6fYS3Lne4lnCEZOsEyX9JFPrtWE8CTyOfJEiopPBIg0pTYJLgb85YpLAlMfB5dT&amp;#43;YIgQZDXeEJsIUUgAEVdoYynkNSYDTWTIEW9BF2LZxaY1NaGmMRGD7WQmVMuTmhIrk1y9WZniAVxJCABfPU1txJJuQloBMACBAR%0a%0aoBCADjpAzjyFILHKm51&amp;#43;PpvKSwuYP2IhkS1BKcUltCj&amp;#43;O4I4FCRyLP4rIdq1zynSpgCRgGbJM9B0JNMHngXCl6WBcjtnw3kiGIqbm3kvhDC9zWSasY0kR34edd9&amp;#43;FDMH5wPnEulfcjrY1ywqAT1xxgEgXg&amp;#43;shWAiqTqgPnYbJjcBjscHFxdI2WuCmFTxQ3osoD7HG/KciD6tDXwZGg/ej30V5g/UgHoo98rq3ICG0UABCOwYkIODX1HbuBVQRxIA%0a%0a2hE6K&amp;#43;VbUTRuKaU2N8Y6QTyCwAF/0/LNk4ZWnwAfQBGgHKgRHBuPGbOLGlbRJxIdFVhU00TAeSXRMYUt0T1BOcUpYS2FM0koGSl7x5TRt87FWUNexNYkN9qY90XI1EUr7ioaGBRWMThjkywuyTNdXnQ1E99COFAopCIIE8pHVSqHVlw4rDsSPrEnWCQZGSUvFiAul4vL3V&amp;#43;4gzweaI/YyVnZ&amp;#43;cWC0F/VF1IukGHRRYj5Py4Lahhmk9UpUTb&amp;#43;wnrF%0a%0aPt7iAV4HGC3CgXPM0xKagFGJeBhUEGAu&amp;#43;wPhBTgnAQMbCPEqUjPR2h0Zz4TsD/xDsR8XmWENVweGER&amp;#43;ROCAuxnE1S1fchcgG2we2hcFKrc9ZDF4MIFlHXgknFdc4LGBJsZdIAt9IB5/hkx4AUY&amp;#43;yBxxUK0HhCimJm1fk3TjCU0tgh6yZeA7cmgUfsRpQxe44HYUiJ3gL7ZMuNBGbrkU5ym4dx1XjD7MBFCIgTLUAV05tkeMW4J7zyaE/q0SVO6/S%0a%0aGl4cHpAJdsqoBikblRlACqARRA6bH&amp;#43;9aGdRVOoIhFBg7lnQd5CFoAFrWkTdS25U341eVNmUqZ8icIWU70ThVPmfVsdQZNtUfYQ1uF7zEhI74L1Wf5Z5BTlU0PAhLVTKJVSzznjEzGSgSPGvJDTnJOBIxlDl0zSU0oxO/VrEM01gUgKtd8UA5A/uZPUzgl7GENFA&amp;#43;I0Umk5Yi2d4buV8ADmAOoBkRWToUgAZX3BAJ&amp;#43;s5iKBHIvMasUTFQyC6FLsUh%0a%0ahT31McUpkTR5JZEwVSJ5K0kpe9kJ0bfJGSHGMWpFyCj5VPLGLAx5Xhk6cCUkL5QWwTTlMXAi557JPovbvwYeUCE6njcZNRIwsS0eVLgfeSCeLufPahlVQp4jT8MNJqQ5&amp;#43;ULAKYdaHjU4Ec4uh1rcMGnfnDmxL4LFNRKaLghA2MElOQ0g&amp;#43;S7n3pAtWMsNPTDblJEBCoGB3lB9GAoB2RGunK/No9BXi/Yj5gBXFnMamhoBFY2BKE1TRZkVLDgOlUtL%0a%0aIpsZm3VGQVEnTlkLthasBQgxb0jlT/0NXcxzE/vDhgkSFbEH5ZsmMiwZeZDhCD2YcQf2n0kaXizElgtdLRB4DnLLHgLzwt9bEJkKHICVrowRDT6RsIDRzJID0cRb2HdHDYrfVdHfBjsmxSpSx5NRWj0fL8NIFQoZQxPhnX0CjkGvzQk/wUsUmeYFd4JmVObBiTGcOcJWNT&amp;#43;SAOQEFpomzdIgm5jHzBIG1lgDCvY9DdWkzWpDAjLTwzA45C9RPXEA%0a%0aoVZ/0tbEoV4gHhjboB2gGUAV3gF1GToZMBd9xX4yPl4OVJE2STqOF2I3GcVOIow6ZSfpKE0v6TWFPHkkP93FIp/HKcvFLWU3ukARKACOLCrESBpFWjtKMOElTSZCLZ4L4iUZKxQjcjM/239YADm7WMIxc075yawk6lzY1hqLZIfNN5jZWM11wHXR84Fx0/gju1za1J3IF5XlIUUr3CQ30AQs5pKkU/I/HtuYmG4THg6YGGwL8jesAd9J2RqS3ZI5%0a%0akI/hJOwSm1itOpQaMIv&amp;#43;Uj9f4YaGDPsIUhqNjdkHopnxWLKIVEMijAtQhBY1VUVUiT0eDBfSLReSAJhRXFrc0StHcpHTE8Vf0YFm2yBIYo66jUtYQDTxjOwHoYEsHBw/6ghsG6sJwg3fSuWI6TK5JeHG1tkwGl&amp;#43;JOkc6RGABdRZZR8AcV965yXnYZTiRNsE8YTBAJbkKIcplKHko18CHwJ9dSTj&amp;#43;MWU9kTLuKpnCP8ghRqRBtdBFNf0Dm0PCmg0j%0a%0a4jbMUPvP7jGdIuEqCExdMUIwFc2hzJI5mjRhwpIycA2aUpoX7hULGG4olS0FKoo2p9fsFKgfQA9GHqAbABpBEkAHkBhOKMYa1AqdiSAca11hI7kvnsk6zLcXSDSxw/tJ0TX1IO4uYSZlMx0/lSx5IBkoVSOFJ7A4vTCdIiQjeYEeFEXEiRQxPaGWydmgT709Fj2EyiUnB0jnz500wiZx3whTYsnlPjgT6EsbTZ4hz9Rh0NdVBt2W2S/D9JbeWHKQ%0a%0ab0nuxcuR/satBj8DQs3jFgZSjZe9KJOX&amp;#43;BwyKepKBBKNMhpEM02ABqAamwxBGycU4EQlkfrGoBr6xCAFsiixyPHQNJ8aQRA1HSVBMO4jHSR5Kx0lxTRNNx08TT5n0pvbhSqHwd4/wo4DSlUrwhOUADYJTcDlJT/Z/i1eHp01jVcDUlEkACcsJcEmEjSkNywwkibN27ErVTxdK8k1kCexNsMk28MZO1UldFQtPDjDrcvi0oyGWC7HjSZCAwJcRkSC%0a%0aWh2REPwbJtdT0W2M0wT9Ch&amp;#43;RBjKcXqzX/R&amp;#43;UApIY3JniHkFEG9bIUEFY10jtPZ8TnhgCNG4G7SYJNYmSGJgUneacrBl4FpkK&amp;#43;gHIFK5C09ZYR3Un7T8Pxv&amp;#43;KoBsAENAIwB4cEf&amp;#43;ZSIngCGAeqAPXTzzExgzkMinTjTpAwdEj&amp;#43;0Icy5Ux/SHFJUksHcJDIFUnHTyVSWUxXsJtBXvboYgTxEItkVgi1&amp;#43;bMAzu8PR4SAyBZxSMUsEJ3zSyRdCPKWCk3%0a%0aYzJZ1X9BEiQeKZA1i813yckmlCJHzcbZEi6tVkUxkDqd0GvDituK3bE01UwSKsXf/ip9PZ42a9kZQoEGLROOzM0YbAblnnwVPDJvQgoK0N8wwLnKWRElSL0IeAftgiKJIIy4NZIQxYfpjNA5Vd0X1ZoI9VNa20LdlI8EE1TaYpg9CFhPPj&amp;#43;X0fMVe0xrhd&amp;#43;bctj3AfcPv9auQUjBqSfq20pJ9VUN02wLCphgJEnJTDyGEr&amp;#43;OPjqpMfjPzBtrBZoP%0a%0aW1/ZU&amp;#43;IcJiUH2VcJbYfLjpfVCxDpO3U&amp;#43;2091JjpbxJsAF1IP9hUaW8gHgCsQClCGOhDQH54XP1K0Oi&amp;#43;Gno3mXg1HfiB&amp;#43;wE04Yzp71f0kTTxjLBNZvSz&amp;#43;KrXf0SidNVgcMdZJzp9UcDPLGIA3iDljNhIK9k1jOuEmmjLAJs05lCXJMPkxQk8eML/OUlw4Fw7O0ofVMCpXUc7JCe8N&amp;#43;j7R3x8KW1rhDF4yNMn3E20/ltEsC4GY1Cl&amp;#43;zE2Y2hyaEtzD%0a%0aKNpgXswVaxN4jQETrBxNi1ZMjJzIVT05pSaTgEROAA4ABbAemxOgDK&amp;#43;dlhelzAxWbRiAFGAXP0i2SCjbjTGCLL5BST6FL&amp;#43;YoYzn9PEM00yG9J/U9hTSfXmfDtkbuOhNUeBstwi9MDT9GUZaMWQqdPMkmnTtDL3&amp;#43;T0zQeMA7Si8ZfT1wxXRyHRcMisogwjjKfGpMKFZDRmgZxmeWE9ggRFSwe2gHBT8UFBSV9O&amp;#43;0njiMFIkATzFSABBAUqA6VFvrC%0a%0a1t2gEkAURBrUCeBOQAb1JL0sqtEzVJE2sChKRqravTRDOHkkYyxzPD3DSSxNL/UnsCyFJ/0g5dUfhFoOFDN&amp;#43;kdLGrRf2LMkkxkRROs46&amp;#43;ZPX2VUh79UNNTEhySYlOHXIdd1P0IbL59iWQPMg7sSsJxImUU10zOMusTqLO1g54zeY1EQ3LC1wMFw/cyPBJFA7Wd&amp;#43;ZKkQjfxrjn5PH4596mK0KCguBUsUNbSZSN/9KWR/hABEQVx7ggECOJiKtAFdQ%0a%0acNMgVy0N3MRL2EYN&amp;#43;jLDkRlI6IGKEijTCwKXVuMD1QLxR&amp;#43;CTpCSqiFoX4ZSqmb&amp;#43;S0NOAhggpbcPaIAqLGh7aFh&amp;#43;NSMgpkfVWBAj9DBlCHU72Ms5GLiftTRaWDRowkebHUU5aP/cEGhVzHuFAUjfmC4g&amp;#43;C0GlIqMt8z19IqAJeDOgGwAeHBUCF&amp;#43;AYp4Rl1cNQ0BaJWpsCFjXMJr2Isc4UjR9bvp&amp;#43;jMHM3fieVME00cy5lM0E9/TULM/09C9Y9zn7D%0a%0a/ldUJMgZ2UteyhkxE0D7lu6YtFlNOkI7QyNt3g0lm5ENIz/YTCpROB4q2tHDImOUai/TM6nJiyWLI7dXyTavCF0xsSDyP6nXJDOUK50n/oMj2PMvdxL7FYkqNVthwGTIBAjpw2sVJkCE2Y2OBdicS5SJ&amp;#43;SEsAWeawlzWXGuAhIMyI4KNnIy1EB4LXiOChD4NISnJwxUE0CGsnTIrq4vCL5hVeAfIzfYvBBPaQx3MkYHuHN5UijBzAw0IzDvayRE3%0a%0adSiyJv&amp;#43;c0E3bh5AfQA&amp;#43;gGTABsl6AHKgeIB1Dzo8ZgBseg8PcCy&amp;#43;GWQWbuSBnyuAQQzOVKasw0zMzSSnY19hNPHMs7iT&amp;#43;MmM&amp;#43;gdtxBuqUzEes1csIAzh9CijScDqdKmszhCpBkUEjTTHBOrxX19gAN4strCAtNnfPKDryL1g25SvNPowSBg3niG1EDAgMHYLSdc/iPJYjzT11y1vKX1Pe0i4ietDbnxCKVxLcA38ZZw14Cn2SxRq1EgQEAQWxg3MN%0a%0auwPsS5SEnwhUA/o2XECAzD0ZhgrfSo4&amp;#43;mFwWkRMjo8Y&amp;#43;NGwNVwL&amp;#43;log9oj3rDaMIgYaZT0kfD5PVAfjL0Jp4yXYXtCcZXvTeaRLxWaMf5pB9X&amp;#43;GM2khsExoUzR7ZF6wJLB&amp;#43;xEZdOspWNll5EEIC52qUiHwpUksvdr9cbOH40zDftOQMTJwOmAZsdRgaIAalfyAbmXXUYQRIsIv0pmzg7lLhNnZ4QP7kzmzIJxWXMM8Q91GMt/TW0V/U7qyKfwZsz%0a%0aCyFDMeiFco9GRe5Eg5F2lVrSazPuJg0/fR7aVmstxF5rOpA6oR7YPBdIk8aLx39KyUGLK2rYqCrDM0I0SyvpF/4kMt8WML&amp;#43;a4zdrLBUWnNLjNBqXdCK/33Q73CKiJH1QSCTYSd0wQ5U9BEhMOcmsjOaIE9zBL0xK6yU&amp;#43;i/vJTDeUEzvB0USw2eEOyYe4FJQHYpjbVQbA&amp;#43;BuxmPo7XchDnsKd9cUKLo7IKE/NAdUfxx2pIQ8TV5jmynVQAkVpOlhU%0a%0a5ZjNBMgKrlurHmEGroRWUngBbN6DJjpbPM/1RGiIBx51GwAM8RwQDjoEjNxwH/PaqyEjiLzDBAqlSDdOCyn9LEMxCz2rM9ErezJzPMTYWyPj0A0rGBYWWSYpM8RrNWkZwhDfWuo10tZbMvsj4ijvHIshDSVVKosh/pwHIIbG8imr0xPDWynjJELNE8uLOVnV&amp;#43;y7AP34IYRnniaiSaJZZ3tUnQiPjLQM/Wdaw0UrcpF&amp;#43;rEJ&amp;#43;Bg9zEhpkI5og&amp;#43;jVgY%0a%0a7h&amp;#43;eWBCdOc3DkOyUz5rWXQ/FHF7OUIRXx0UBBxwCxxw8EsnDkMtkw0HZ3RpfzQoP/EYKwyKWtRvhFybKcArMEBUs7UAAllQ/6g2TwcOCUFNSLKMhIUAYxlMm/5oOVwAcQSeAFNcKqBSACBVcS5Sel&amp;#43;APoAhBHJ6OnUmP16GWKcohz24nHDBjJas40zwz0Mc/6TjHI/0qcyyHyjAQW9pIUc7ezxBFJJkJ&amp;#43;B3jDdMksQSKnSwoyjPHIWs6RTskJmOA%0a%0axcwXTMMgX8FxwEs1ocEnL5/c58zb11s5i9duzyQ8pDAHJTaXFiLkgc0pwyq9y2sisSzrN9Ml3t/NKOs&amp;#43;zdPlzAgZHiVi2rEyHkIzNWJIgZJ8C3sOyQlHTC/CylbLJOJRXjHFAsrJNiM9UbEG0Nf1wzOUG8nli3KeBz0ZWfaDcpLVheYPwVrdOnTU8tpbm2zWFhawjTOauU3c2HKadNNVjNzfzlcEFqRIl1e0MRrHBByeQRIf4gIN2lkNpgv73UtO%0a%0a&amp;#43;Yjykotdd48pWepLsR3kTZQEGyp3kRfVpg3/GeYZYprZFyKd6wNkUilMjZdvQAjCJ9m&amp;#43;NG9VfBXuHdyS&amp;#43;i/FUusJ/E&amp;#43;kJPo9aRkhO&amp;#43;oYfg&amp;#43;BQrjChUo/BctHz8XdGAo1r9l9K&amp;#43;0vGzKjON/NwcowGA5foBJoEuYlAkv2HqgHYB0QDhw8npdIKY/TB8JVHixDmy&amp;#43;NKHM45yRzIMcr9T5lIFspvS8dL041iBMr3wlepTpegeI/EhxsBCYteS3iNRQy%0a%0aEgNXw&amp;#43;cofT77PH0n0ymL3m7bwSyO07xVI8LVNvkh1iJtgTUlnwP9Bi3LfQ13T80CrodZDsnUGw4KGfGXjF/qGbEENMSahhYBNzyjOlMgmz1xDtbeqAozXqgV25GKBKgcez8AHEkxf8&amp;#43;gC7QmeyjYTGEjsgt2yF7cCcX1KQrI5yjTOrck0yznOx0zqzpDLQsq60eIEWlKgpVKOLuB4i8e3x8YI9NDJZ/FLDniG/hBnTh3KZ01i8ZFKbE7nTlqMHNE%0a%0aFyh13dUqCFYeUB4/Fz4nOic&amp;#43;WdIuDtvc&amp;#43;l1Z22M7FzqLPMIlJS6POsMtzNUDLvIt2DHP14JFV4N7VaPYmRRUKApFZsC50/oFp16ak7g2iCA2AVePHsHtmsKNmRaeRhYxTZdMLRsfkg/yIDYc9IsXBPFT1l8BEgQTtzzCjMHEdT2UnHVWojUqiD2SFg6S2qddmVQfgCbIFtwo1HEV5gMZm4iIbAo70PsMlpV/j5GSRyb/k6AXpT4cAZAGyBmAFhwH%0a%0ay8LWxeAVNcki2nbetYhWA/c6tD2pDTrAfIDTJXs&amp;#43;K9WwOv/JCy57wnMy5zTHNt&amp;#43;FSAbqmg41sIBq3y1fzBAdilvQq9M93CU5Dy4q23MxqcvTJAAi&amp;#43;9/BO/WSBF10zRctEjJxWncmsTi/xFjPFzYlPL3X&amp;#43;yMuEgYKJNcIVnc6qDXYPJPcctA9XcObOzrUQ/xTwEbrLRhCHglDBOEAvQvhF0YUmh&amp;#43;Xk&amp;#43;CYdplnDICFyRG7FMHT1Q/e3yZW4wELRRiX%0a%0aISA6SLlNFJjUNGAvL9a7EVcY116agSpY5sbI1JCL3JgViaSbuAHPMys09zxuPXEGABOgDvrYWps03KgOYAGQG6AcqBn3hqAaB4N1H0iDqFvWBkE0iRFankE4NJ79N/c&amp;#43;xSq3P0cwDza3I6si5yurKuc8DzVuPkMoTNaaDHwUFZ/FNLuA8TFviIs6YUSLKjEwhBGsFK8q4SfHMyyW4yzYMCcuAzzb0HNTsSzP1CEt4S0XCKEuWQpXGh0Ol0/3CU9c%0a%0aE4ZJ2gTS&amp;#43;hWZAuzZR0b0NgoIYo5xnlg6LBNMV07KszSVJv&amp;#43;Ejd9ABeAMS5F6iqgeHBc1n8gIQARgAQAQI5A60MPWHSVBA3nJj8ofP9cGHzdHOHMxHzTnOR8oxzaCW3s9HzwHVUgFfpHfQ1AiWy1pRTOOvRifIqHDczOEPlXdn9PnMos75yJ9LH0nohLKLyQ4PyMXPQ0n&amp;#43;yXv0moG&amp;#43;cbYzck1q8AtJFKXdNLVMOs44z7jNs04Jz2QNjlamSSXLYFY%0a%0aHhF2g0SQlICVL&amp;#43;LK9dnBTLg/kEVUPesPlAXbOwtXDxWfExxX4wYPyXoy1Z5sAq4y99Uqjf0OwkuiLJIesJeYgihYl1vjOhoCtx68KBEa7gOI2jAgZjDMDBYM1ldy1Bs2fUEKiaZCHYqyn/af1k2QlBGR8xKaAKwVPRv&amp;#43;xfgb/hpaFn1MXiluHUrO9wUrTm6OXzpnPXEQgB&amp;#43;ahLAGHAhgGQw8sAXgALQigB4gHqAEPk9BNfclQQgPHeY2s1e5L7Mp%0a%0aeyK3Oas/9zLfPXsxLyrINcU87ihbLS8iSTZzOudfo0oRCTPG/iaSWnrLho1zOIsorzrOJdpdxy5rK&amp;#43;ch&amp;#43;zLhJa8ntw9zMfsott4XNAAokiJ9OxPG4S6cyM3NHki9wush&amp;#43;TUPGvQLLA1uB/4O31gRgWsPmw1BBVAxs170M9zYrpQrSGTDlI09G5IBmQRaMp5Z3QkaG&amp;#43;6Zf4DaE/oFshTsx6RKgouUkVxO&amp;#43;x3qCMfZ3RamwX7Gn5z/LPc5AxugAZAU%0a%0a5kzGFKgdoA2KKz2bgM6PEW5avp25PUc5B94zQ7IFX5Irz6M83yEfIQspHzif0kM80zUcyynL0YluR7RPv1ECJEXWxyR03xIRNjUApJ89AKyfOBwuRcbJKMArxzuSSw8w3ChENqwtWds4WSPW4T6ZNMolA9&amp;#43;tUDM4Szj5PyQ9055FKgcxRTtxSxGb4Zg/GXYSycvNArDA94Pyl8VWoFr9DubDtT6gSoRLlwcJRzxbUxMe3ZQJcSpSO5hU7SO1MFYX%0a%0aDxoeCTM35gDbVHgQ1kLpw1gAZFzFHx&amp;#43;Mo8zsGiVPCML8GHLZ7x4PE&amp;#43;seIoOSDc8iWUhgF1QZwAoAA1GPQK3bligUgB8AGToX4lgcD3sqwL5LlAlTbiC/SJwYLUT&amp;#43;UcCoALnAqt81wKxjJA8iYzLTMV7K&amp;#43;AqkkNpL4xS&amp;#43;WetDGgcYlWwV5zSSGtONDycApHcv4i4gvOMwtgfSkPkuFz2mmN1erCS4BJPe1i&amp;#43;vO0WCQLaSFiBPngWDyQEKQYEMwdHe%0a%0afARBTZoLgoqhL3oSrilXTf8Issw50HwhGy7qXL0eFsCpkVSXA4Ya2e8tT1tAupUFql6gH/YRoAYaSSAKAA/2GI/YEAogAuYjOkft04JJj9BKRrQ59SBzIACrmzdnWD3ItcByP5s8ALBbLeC&amp;#43;gcXMETBJcoNXHXvGcjrMHeiGWz1zLls5DzE2Mp87&amp;#43;DqfPVvU0L/ERAcuxcFiToC2EtYbM4CSmpP/Dw0kcxXAXW8jlw6cmqC0/A1ijWC5AxaKSSAX%0a%0aUh9Gj/YPABwQBBAfyAdgDHCFoAEpCLAXp8i2Wjc0G5u&amp;#43;l40w5z4fPuC2vSif0IfJOJG9Lt81Lz6Jjv8xkUwDCbNJ7lYcl79GYwcgUBCk65jQqWstzSar3iCqELCxlEwyUUx/DNw4qD1rIbdc0LRmh2Mut0OUImOHzpcImGCfTTR13YszFzHYB1VDKC3KMrC/JD2wv&amp;#43;eQljz&amp;#43;35Ar6QpH1Y8vsT75IkgZK0D7Dq09mVd5FjVDANZ2FAZDJSFpKKqQ%0a%0a7hJNiPcAslf4CSIi00WoNbhItRbulyXL3Ry1EYGHMkAKWUnPvDFm3us62lDaDGA8QVHsQHU2viJeAnYGLt2eD01QiVwOlOJFqTreTaC0fRHCMX8mEJ70KVkAUgT8E2grkhSDxqMXFYISBjnOCMdbWl8wmtZvMRULbNgKlWwetUh2KQXJH5L0XVePvBhvXQuPpM4tCv8SND/CxWwgpkK3GRhb6gGaCm9SggqaHeaPpCtAte85AwSlQBAlSI1wUd4S%0a%0aOtzQXBAVOhS&amp;#43;j/YAnSzgvxgKS1BPH8wTvpBDI&amp;#43;kgYykwu5suULebI3ss0yXgotMxtzedU7MntETDgkXFHdOlnYjarchRLQC73zkPKF4LAK77NBCjDyjn3sk8Pzf4PwCpncqeLs0yFybIrOpasLqkK7E2wy6J1w82vdPcPeUzLo8oXckHaMuEwGklCpoMiKwcti9fUs5XwthzHnsWRUj7lJkD5p3dEZabmESsDu2cJ11sNW4ZngsX15SEzRirQlxD%0a%0arjHFBxQUWR5yEt0yQpGWgNyZ8ZnGJ&amp;#43;4z&amp;#43;Z/71X07gT/ayqAY4AqgFZUQCt4gCjyTABocCo3Gep33Uk06ginI0ki0EcicBP3RWZhDK&amp;#43;k&amp;#43;CyUwrbAoDy3AtUijwK&amp;#43;bzCaIYAuKP3s7HyIJWGImP99GWw2SOTSwszXX7i4xIsikfSGfLzMPj41hlzE&amp;#43;AzRY2I8gcKwICHFVDtQuMqggoLZdIm2fmhSTmjCe5FIM12HG/QKeCwteCkw9EW&amp;#43;AGcNOmMjF%0a%0a1oYfBqHANinLU3gFTDbpkz1YiDAGh0FP4IsETenLgJJrmZCqZzWQo4qZwBCAEwAR0ANgpaAOABfgCQHSaYFIiqAf90aax&amp;#43;3bGkOyAGi1CYdHJ/cwNs/3IUiy/cQAsmi54LUfNA8neym3LIXCxy4hB/MG7wh0zWlR3Im6kBChQVywo/45azJFh3M70yw/OcAxyLNP0j8rFyTVMLYd85dHiEsnrzDzT5kt5SBZIIGIuDLZLr1VLB&amp;#43;Avo2McQNXna5L%0a%0a5gWInx&amp;#43;Hoi0uMl3enJtYsMpfkExsz&amp;#43;rQgNpYicYsE4SZX&amp;#43;6G2SWGFwQCKzFUhCoPgVYWDqwX&amp;#43;B9uA8ghV0fHiq3O7MQ9PmsOKldk3PgeJ52ItaE9cR6YIAsqQREcD/YcDgioGTACjdrW3ygcqA&amp;#43;gGeYokTC6Q2wSSKS3IDPN6SNajuC6mK7j1pi63zznNt8kxyp&amp;#43;2zCpQCYAtgbL2LGzQbXIAzzaB00F0sL7InQ8IKjxn5i1nTNYMOGdEjVrPZzR%0a%0aFzT&amp;#43;0w0&amp;#43;2zMVyg6PeA/SSquDsQwx3jU0ctvUWFNZjI1t3MWJYExylYEql17jCvQEL8A82mPaSDaouOkl4dugBaAZOhYY2TobxIeQGtQOYB4cAk4xSIf2B8gF1tGbNCvASidnNOPDJY2TEas6ULYvMnvNez5QrUk5CyMwvLizwLHanTZX0Z2AgJ4RakHiMtkPuwQaR7cxcjhhgXyVsFb7IkJdDy9ou8c0299otPksgLKIWIdagLevOgc&amp;#43;JlVDUvoX%0a%0alBoI3BlQ3JMNEZgfwpn32vwJ/EuUgqRbIDgWDtIqb1d429C0qEDUDmAaFFE6UfrSQAP81YoJYAmVH8gehDzFMzyfWRJIuoXFMhdiP/8xML&amp;#43;NMLiqe9HgrTCipZg/1eC9SL3gqk4rHzC&amp;#43;TLLdLTVovy1doiRDkBCimhahyiC/PdA/LwCisLhYpAA4G0hcxFiw8ymUPWIWADIgx5wm0LOMKPsS/iXhCgUMmZ4SAi0MN4vmC&amp;#43;4WaNLI3iQ82To&amp;#43;jy0N%0a%0apMv8KC&amp;#43;Tvi02wnsRvzQ9Cc85ADAbMVkX3IPmCKBcPBnzMTc3uzkRKqM9cRxuFFCTQID1OIANN8agD9tQqzrUERwJIBIHT4S&amp;#43;S5&amp;#43;sP6i3AdP1GLfAuLZQppiz&amp;#43;K&amp;#43;bO/i5Ly0fKzCrwLCkuripWt4&amp;#43;igYoazADMGrGKyyPkBChNUO4pXfKUT4BQs3ZyLo7HRcjvwnNKy4I8yh4vZ3ZxZ3ND8s56KIXx&amp;#43;7PAIStLdkNpztaB38CfJ98A66eHgO1RqE0%0a%0a65XHj7IS8YGEqONboBcAHh/BvsKyKJMV/kagHBAGABugCEAEKc8xwzipmzpEXm/CLzP1CnlctyxEsrc5MK4C1TC&amp;#43;vS6kvrczMKK4q8C8WDFooHA2o8VHTgNAILGZ238bdBPfJlvYyKMAo14MyL4Et2itGSusTNrEKD5cNrCg3Do/IlivxySWM83Nq94SM3NTu4CvTWLbyLySMxXV8ZEfCU8uFgpXV7Pcbono1&amp;#43;8arcBjh/gStJav3m3CYxfZJleK%0a%0aQJa4VVBQYpo4OtkePi0twkC4E5ZL36LADCjxIW8ufgzHCGItFgkLD14yDN6fmlgyIQa6KFhXeAhsCq/ZVJw4v7sgFVOgH8gOB9sAFIAA8RMABB/ToBSoFiWbY9DQHhwKTixIvKcVlSeoTkkk/9Kktg9RSK69JUDRUKpDLkSmQzrnPPg8FLJYNZCGv90iVGVF7lqSG99N7jRq17cjeS&amp;#43;gp0SjLCA/NwC8zNLQvpzZzignLTE2sTaL1yg5FyMuCWWV%0a%0anz6AusmU8y&amp;#43;Il04OQLXiHo2ffEYq2OaangUzmbCY9gOuKGjXMzo1ldi6XjvHH06AA9JILkPKUyWQo4i0qF1wSGAXmBwQFUiNN82oHygYI5ViMwAYgB9fOeSo2FiuPbOBEsVLgUEt1L8YyLimpLlIu9S9wL5e1miu1ohgF4SlpK1U3Z4Q8YdhOWpLd4h5kBCzARIgoTShwTVVK00w/sBKwcMyWLU4E4&amp;#43;UpNOR1Kw9qcbQsc/BkhkeHvojho8unO9T%0a%0aFwhgTGBJuocSEIDdTCVty3sAdS2UBoYLTz&amp;#43;4yPYW4wPSWOS3lpIHBToHYAcgEERM2J/IFzHXVA3UkaARep2oV5TNvVSRNK7L9yohxfi75LAAokSj&amp;#43;KlItAC9ML6ksZi&amp;#43;3ym3LCQ1ZSBF3PXeIp52M4HSO58tTJcFbUo0tZnMIKxFL&amp;#43;EgwDdEsAA5WzVbJ0XDkdKZN7i9YgCsKc3QcKDrOWVUWMDVKuM559eY0I8niz1VOwKfNLouJTKErRHFBGCh%0a%0amRDvCKoHT4C4Ih2MBj0II2NbScF8UNDYUFbzIAw3FZgCKWwY/NH0j30U7CeeWHaRa4&amp;#43;4wSkxDESeE/wkwEMtzy/XMkMXCe4LEgi9Sa5U14GTwFSL8Cxf2QEV7F8ZkrMrtLEYp7SjipNABqeToBcRJToVu9OWHqAKqAkgGByJKQuA3J6cnxJIvSJagwt&amp;#43;Nki5eyEp0NfP5KJopLi4DyGYt9SsDyHfLBQpRLJYP71Qlw7iMe4lQz/UCWBXaNXnKWcU%0a%0a4Txx2Ey69KBK2bC8Yl4yx5wvn8UxOY8kADlSRn9eApwBJ6xLWyrVNos/DzR3JZ87h0IDxCg&amp;#43;rURLLQS41T0/Kj8hDsiXLYvER82IAtVSZoiIlawxnzF0SMMjMRpMoeEscKHShhcqtgU4Uxo55TF0S6888DwoM0yh2ySOMYOOlAUqW9s&amp;#43;goGiU&amp;#43;1HsZFhACwBSENd1WSsE4FkzazF&amp;#43;NAfGhoc7JuIXAQuXcf/Cttc45&amp;#43;WzpgKoDcN22gpowgGhurD%0a%0aDdqX2E2Mwc8EESpEQLFoOdwCBCn/Dv8MIUkwPyKBEZRHmgEZRV8PhyjLuB0ED&amp;#43;EfgI6Dir0J5sjaEm3ZyyAph7sPhyifA14MpSvTQOHIEQ/aWXwEHCL3ws7KQYUt0S4waMiBiGTCM5uDhA4/Jsp2Csk7vdNIRpoRLTIBFIk2boCAkJmFOCOYlusQWjXrBJC9mEj1RkC7owA0W1oFBdesnwEY&amp;#43;ZuS34aKi5lCxSs3eZTTxQUCfDXDhKwDxKDvVIA1%0a%0aG9n738KL7osoRhIQcNNeHIiiZzrNXAHZJLkDEF&amp;#43;dSCRYHygdIU83NYlG&amp;#43;J6gBGAOaAEAGu42&amp;#43;KVBHfSQjCQ3kW/D&amp;#43;0vku7It9SKMo2/BLy6Ys3ssuKUvJBS/&amp;#43;KX3Oayy&amp;#43;D2cnTbAdEAlKSEZKzEpN6y/E5&amp;#43;ksCgvzSyvOw8/mM8oNtVL7KZ9KHy&amp;#43;8j2d1W4WewlvO/FBGLya31SjiongWIAXUh6VAdBKB8qoCqAGABgQMIAClh8oFo/ArK8/Xm/H%0a%0alZ5qgaspdKoJ0kS4uKngorymmlgUr/iiyoNgpuqCooMhJ&amp;#43;C8nSenVHLXrKPZAvS/3yr0piCxc1TyPp8gzdOwsXZf0yn5xWy3WC/GRqwydzB8vZ3L4wMoQG4JdzrR0gXTmNqJFOEC0NfyLeOYIiRrBhZAMIQ7Jk2HrBgLD/A3PIHdEogCiM&amp;#43;nVc7BDLA6E8SZMAs/VIABp9nAGwAf8ZfgFn/NqpnAGcABkAzFOoIwPYisq3gj5Lu&amp;#43;jKy1&amp;#43;KKsvW/e%0a%0aLyKENqSpLygUt/irdKahgBHX0Zg/FvdV3zy&amp;#43;SV4Ry09QqMig0LrON00Kgs9DKVvSyLlsq1g6po/nJmOKlDpYrlw1sLUgoZHMWK7IvOiwlLS9z0KqWL5MtMSwLTWvJsKw7KkQrqQu&amp;#43;Sgt3oqbrl1Bm4YDsMTIF3wEJcK7ADYy91qphbU5lyAMMRoYkY8oTl5CF8qHJief5oE&amp;#43;3JXVHZ3HEuFIhEbZAFIeS1BUF87MHx6eUCi3ZjKEXgYgVy/5yZSY%0a%0aCg6UFS&amp;#43;DsRfehEaeIoCqGG6OhotjHDY97Z3aXx&amp;#43;HWQHDjfwmDIrfX6RWPZlO2vcVVJjFhxsmqLXzPQUnKyJADahRFEsxxYoyUIA&amp;#43;SSAAkxmAHKgDgAj4unkh1KFoBdLeb9xlPKS7vpREqLyqmKqkpXSqjLy8pUiurK1Ir9S8DzycNZi9mDgWH&amp;#43;YWTSnTPISdKkAQhfyxLBO8pZ0ruKn5x00uwr0j1eMyFygCoeM17K6vJsMolKlzQAc2TK/JJtsu%0a%0aTKvIsiRAFzXNOXQw28IpPNjMEqV3BBKpUlxQOmSt2Cbqwr0bQoaxAU1ecwl7n0GTHhW1VakntpKkUK5Hw8dSW1A6bSh9TU2NHZTTB71EflWQlpoLgYUmNhvEmheyEDYcHhT7li&amp;#43;V2jW5hirPhw2xAQsJyQ54CZoZrJAnTgTMoxO4TAuJEgHaVcqNXhXylgzfWKfiDfvOeAv9BQivvQr2Sqi4cNHC0IGTVtK4MSjIBpZDUFXPGCDjCAMIGwylMcvH%0a%0auzy5OTc2DCdAsG/GABv3m/zcEAFMmTAEaIeQCbkl4BlDzBQmYqhPDC8rYjH1NISPuSj8tXs0vKBCrXSwFKlQobc3YqHfP4IwNLL4Os&amp;#43;GPYcLwKNB8wmiUgSw5ToEsvCieUlbKGywvdv8ra88Fz4/LODY3UjNNOYQmSy8FQSnMrz5LywxMwAg1XHfP9yOxl03yLyytTJeLB/wwtNR9i49H5SSupGsHdYSQUM1KDCHcwY4wFIPVMgNzNHAWgFy0CrZ%0a%0aXgcXDMcLUEt7kGMQ8Yi5Va6FNCTPgunEgQ91kHtGfAQLFpce9FUWHleQCM/9EvSdE4lkRIK37AIJlbvDRgYaUIARHBA&amp;#43;WTAKoAUiwBwbABVwRfcx0qdcvYK&amp;#43;qyP7W4KsjKZQvdS6pKNipqyqaLtipmiwT9r8vbkuvLd5Rqkl3pu/VOK32p6Ezg0XrKUE2uKxayRdOTE7/iLEqUy1Fy3jPSgiHjpqCR4glzIyywSwoKe&amp;#43;SJqZ35MZQF5ba5jFl7gK%0a%0aHFZWRVuakqCXWKKg9VZ5nuIUGgNuJNpb1zkfH5eOUMhGh3gcP0bByjKvGDIWhKIsxIJ2E3KioBOgFwAGVoWgDtSVAgNIg4ATAAtgEahIHBWAKf3LPKcpC2Cd5iFv2SGM3yKYv3bH5KS8v4K68EfSqEKv0rL8tEK50R4CAn2Yyt/ZKe5eh9xyzYmaMqtDM4Qqcs/fKHc9FKhMJ&amp;#43;cmP4MxP7CvJDSaJfs&amp;#43;wq4FQcKjrCUQoAQ8k9Wkz3sT4TetMR&amp;#43;L%0a%0awFX7iAMErALOXaKOToAjM1ucNF3NFJIe6IatI6bc2in9Bsyz7ST3O7SiOLkDBngZmxZ1DYAZgA/2CqgHOkxETYAJIAD4vwAXY9yelJId5ihySJwRm8PSri88hDVKuoymRKULLoyxpL/4sUovdKFnDnKV5Jb4JWeH7CujhMqpDylCvhiMCqrItuKvDza8XAK0X8Uv2Bscwpt2GCIxLCBUD9JaCUDCXs0F3QzBN8KTirns2wAAS4eQGzRcDVH/NwAc%0a%0a0FugC2AP9geQAQAKqBrSyKS/GB41kIwjmCipCY6A5yVivkitYqT8tXSuqrZVh/iqvKr8rmiiFjvyqhZDfE7zGxDYgEYUrQ0MFgG9F6ynaM38ssqxNKwQumLS&amp;#43;cdzT1s1sK0GAnChGrjrMo8slCN/XYvMDAoKqcqx4rGLKzE&amp;#43;HjsaqTUcR9PkElKfOZnMzs4Ymq7OG7yuaIWAWLEo1SLjLMzE6zTDOa8ljyqUun09ndnHWWqo0CEP1nMU/Ql9T4g2%0a%0aVtjCkLibmhm/mzogAR2LQtoFNC9XQ7sUq5oNgyUzbhxw1xhc8UBIDluRrJiovgCnUVqS1ylU1dbJ1MkQQ9DZEU9Z2c70Os7M8s9k2gZY9U1fWeVDvpiXDZQW7wi&amp;#43;wOiQwotICoSEsRoRNn0KIRGQnw&amp;#43;O4wQ1XseQe0feLHMcK1XmA9ZBkgBLU3uAPRDx2LpEnggPEUC65pvdn9QgHFMmxYYdhVoWAy4sq5oGMNy7m0UUqgoEgM9UujyieoagCTZN%0a%0aslEcGQICgBc1hcSA&amp;#43;KQQAT9CgBmkskq&amp;#43;8RhwPbOQqlwCy43VM1vEKbA3siAPKkSgFL1Kp9SnYqGsqbcoZTgytMRYVBRzE8M9jLS0hX7KEhksDhkxDzeMKUK77hwap2iyGr1CoMSyfTF6sxqn4qH8h1vOsKBczDMhMsaAoY82btnnjmWRyl7KrT88XNlVQoCjGrQkWOrXlDYSoSAlmjo1IrUuV4LpynAC4DXHiVbKbC0tgT1echZW3Zfc20Awlu6F%0a%0aCD3kjYEhDJBSAnw6cq1SpMfahikqh87W5oj0SEaf4QQRKvDGuqTaVQbFuoUqXxCq5VX2w1Ig&amp;#43;NWX0fk/H5gsrSkhOrwRN6yHl0EVkdIoAR5txKI1C5A3NrKYRdmiLQQbuyuiqTc7Kyp/1ys/yB5wXYATBDGJR2AOwAU3yqAb3hsuwrAg3ypKunpN382&amp;#43;g7Istyqqvfir0raqs2K9dLpos3Sj8q5opvivuroTTXYF6wf7mLuQGqEogL0A&amp;#43;sEUvHQm%0a%0avkyfPaKQTLL0tskz/KGr15nWPymr2QMk4yREJ5kz&amp;#43;yFMsa8lMqXjIfSxGRrKI&amp;#43;fRHimR3yC6TC7oum1UYC&amp;#43;/2bEFGwJ4phYCBlr7Btk6QZlXiHYQ9gcSsRxAkZEQlyY&amp;#43;dhoSHApfaFey3XE0oSmuLbsa64QzhQsWPTBzF28dYdFUkq5MJUj8EH0Z4hmYXC0f9pzL0XjUBB69Wn0B7hgsCCtDqSeeEYqeLLp8uzqpLLJACb4XZk/MT4q3VAqoAoAA%0a%0am9ViJtKtUgtnIdmNsivcQ6&amp;#43;E/87yvuq8RLHqsoyz1KZUy2KyvKGkury6/Kzqtaqo2xqVwLlBtdnrWD2MF8eMq8gvjL5VO69ayTjGuiC/RK/iOdjDryYjBpDX&amp;#43;QlHHT&amp;#43;CIw7mpvAk2yQQ1z87cVUw07&amp;#43;LKYajDYYP&amp;#43;NXWLQgq9D/&amp;#43;GWRdqMTJWx&amp;#43;be8jrCpodRVJ2jAsb6MHZPO1HojHZCIZInk1qvQAZYjGCtEyOmxqTFSFfQBsAAsAAgA2AElaL%0a%0aZzgRwW&amp;#43;R&amp;#43;La9kyWZYqZhNWKx8r1irmaiWtZGrfK&amp;#43;RrsQLEKzPLlGuudME4MBAI&amp;#43;R7jfgrngGphdGo&amp;#43;41uKxFJN5WeqKLI/ys5r75V5nIUl0ZOcaxjzaatYs4R9obRQq/hIeohdwwRsRGzlat7LRGwzEUsYR0jHffhJqLxLGbhsTdFv4TqjCvUTabLIPzi1wvPAr&amp;#43;G8ZBVqadG84VJEVGyhDFVrR3EGoPR4eoixDK/hUrkGoS29nKMLweNQCbW84A%0a%0am1ssjQ7HqI0OyXpNDsH&amp;#43;EmaEh0TspLaROYvOki8O1jHCrncuA5wLl/4UkDGTP&amp;#43;GH7oCkXKmKCJ3Eq4g0mg8EFzxBrob/DwyEawhaERrLdBMlS9i4O8KE1XgLEgslOxQXSNW4UBYZUCcVDyEi7NlO27aTBkvmCCC1&amp;#43;AbaS7ghroVhGvsZE0fuiwDQeBbLOIS5W46uJIEfAyfcLlq4pEL7gI2f4h3YvUtDbDkANEOBvjKLRWBdFDO2oIo&amp;#43;/w/4z1ij%0a%0aRVU&amp;#43;y5cguNM9SYuTOV48IVBRwg5qqD8VPVVePnYC90DuiXYHTQgWHNwF2Z7MB69W9BVozDIzvh/kUK5LgJ3DmVdX8wt1WayXy1sTRzjH3j9LR8PQiNzeXaBFjIPHGMjAqp1oy0SaojtZAnsCZi7zA0jZDx6ansmVYQkowSIYyB9dOiM7bVlKL1JD2RZZC01D1QD4GmkwRV04xQoaHh1biZ&amp;#43;bspA4UizK65tmxHaMsokZLJoBlBocXpyoUNEWogAb%0a%0axI7611QPSJQjho3M1sjABbAYgBrUHqgUgAtgBaqquqebDH3OdLOzVeku4B&amp;#43;VlIyqZqlKpmaqRrWlWnnMALO6vfK&amp;#43;lrtKs5E7xTrPAAaUQIeu07NUu4uDWqFXqqp6rJ84ix40vfykxrhWrWstnSLyPBCpcCn52Z8o7LoXLC4kzSAnO5k&amp;#43;j0vOtM0mk1aeJpNXzr95Iic6FzLbLGSprUNVMzS2JNceI4s&amp;#43;Go80uzStNLoSt7y&amp;#43;SRLCO8MFvwEalCRR%0a%0aTKXGuRq2Ds9spbC&amp;#43;mqiWLHcxJy2PPJPF5YMTgvcYbMNZBquFbAS&amp;#43;QcIG8xQAlgQeD8nuCKbDewx2GrCUeliXA1XAaNkUjYgnSFyGG7GZPQSJOJcOEJI/z2jAs5eBg92IYLaikUhMWhcNMtwW0CbgkZqMXg14nrCdFRdsAFSVCgakQe6N5zhUAoqQ7p0Dm6sbRr5sEQlbddQl1HY/ldSlLAuFFgZ7CJiRjYu6khoV4UwsHB6GnkW93ZIdSVPyAiwc%0a%0aL1QCXxiTmgmigh&amp;#43;Qmpi7P2CGvQYsDccSop0YjV4D4wb832aSQ9/&amp;#43;B7bBrTrcp5IcvR8Iy40vGIr8AOEB4QJXkiyz7VqmSApfcSb3VGwEozACLVcTmgKS3shTF5LvPRiHnhm1Qu6pboqtFzU4tVb0HjTCPLrDXjHVprNPTgADRgwhniAPEA/1SSANPLDgul&amp;#43;LEBv9MdKqbAHGDbcqnUT90/tEaLWCLGiqrKy8pfK&amp;#43;mLFmsaq5Zq5or9EvqzBhW&amp;#43;pE%0a%0ai0RFwbi0tUsVkMi0IKkUrs6tLZBqo0K3191bOJSi59zbP2iiFyHepgMiwzcj3STfWyeH1K67kkRkoZ3DNLdCI/siCqqvKXqpxrB11sSh7CsXGfalFhz9EoqdmgsXze4bWiNIDeIZCL/6rNDXTExbR6TbdpVhBqwZ5oGj2sLW6oUow5SlLMVeE2yTx1TiUPSfcUQnV&amp;#43;aagRnNECyFTZCewFIBHxxzCMJJrN51VFSHZKRwxuvQp9dzGfaKcQPITIEH%0a%0aQz7GNuTM1d1iQc0VkI2HxRTN5gItG24YDLL8F46v9gjAHRAJV99ABgWYbAfvN1QRIk2gHM2ArLcEO9YWSqD8tdShSqR53IyzTqVKu06x49dOo3S5EcFGu3SnSSmWtgbZxV9UjYwwasfiB3DPZqrv15a&amp;#43;VS/UwOlQwC9EqTS6izveqXTSTK&amp;#43;8pTS67K7erg7WxLUvlaYPvJtQIR8ByE9ihCXcy9eXwo5M0Mj1yiBY5wJSJYcqmheOutQU386&amp;#43;x48d%0a%0aNF/1R2ASaYGQB9FFoBSMyUayXr4WPGEzH9t4L7MmqilBLki6ZqKWqeq58qz8oWai/KRCqv6sQqQZNv6mxNu7ET/aXpHS3IuPmgMthbi/RqxFKoSF5kEytMa0GprNPcilwSKUszE4ArrnkpSgjyCCjLKlWLKXFcgGF9PVypaAlJkZSxIQV5Q0waKTGzvOSUrG4hrrzpmaa5wLkWRe8ZcN0tRHMNuUFRTVFoe8HqbXjqb9WolELEWWHqgBoA5wDrOH%0a%0aEAeAEByArLRQrLcUmK/UEEMsjCGBo06pgbZmv&amp;#43;Sr1LfSr06ulrYd20q6eTvqup9FXdjTkHpcvkRBkZCV5zseEwfKQbnOtiCmKpOHWK6wWdGavxqtajLDP86mjz8ZNt6vJD70qzSwPqX0vs00g130sxXW/Mry2SzcoiB2F4PGb12cln8jz4IegT/JOCg9mqxIEgPlDF5O5VxLXmkaNYFQVQQYNMgi1pUXlxNvBT0Idp&amp;#43;uAQCHQyDXkgklLNo8MlxX%0a%0aswvlgZaeiIFvCgELbVJzw56q7d59xTc9cRS&amp;#43;j6AdoA2AF1QMmCEABAcSQBMAHwIH7zdsDwy86rQwFd/EIaxmtWcPOL3xFh8ymKHquiGrTrYtUD/eIaL&amp;#43;oE/AzrFuS4UpjKsLPLa9kqRwJWecTZAdlyGifBjmsc605rf&amp;#43;u4LUsFJdMhdKcLD9mey80pCkMi4Vbs1UWsakjy1stYvEobsUpTSsyjVsros0Aqvir5/cRD3n0zUU6y3GoOyirqFwucKo%0a%0a5oGUGYc58YUtF&amp;#43;Yb2jAAn7VUK1xjTq6Fbhi/MC0G5su4F5o&amp;#43;dhp8LCmZnhE5y&amp;#43;YN8oKWmjOIXhlilQOH6wfu3TxTpyA6qnDG3LkWF&amp;#43;ER0VuIwOiGrRoOpKxe&amp;#43;jBXHnLZ5h2rjZQGQ1KXw1TXojVkow8EdDWGGr0Tb02cqLSZUMJUhdmehjB7BmXH29B4CBSIL8UItoikoya1BPHY9zJnJaaq4bkDHhwZQBbmSLAhkASABAcJIB8oFFCUgAagENSw%0a%0a0Aq4rk64pwhGHeYvPLrgqY6UlrnRPJa5dLmBqpaygcaWvV6&amp;#43;rKmYo0izxTUhtgbahEtBqPSnLyrHmkzXIbtbUt60Ab8Ut/y8oaV0NhCifxjotOYBxqq8C5kqvA42rcq7BKe&amp;#43;WnKv4w&amp;#43;SH2QWVsDNQT0&amp;#43;bgqjCu8ld1gWlhOVa4yij64PlACMtUvPbV0mo7wvd5AOhhONbxgxvOGrAjdRO56m10RLnoANgBEcAZAQ0A2KIk4jgASbMIAHgBM6SMAU%0a%0aSLBGvvEY8LSROoGz9QT9wrGh/SQRurGmIbqstYG&amp;#43;sb2BveqrSrFuRWUm0yIkJaYcl9S&amp;#43;VASpz8erF7G/UbtosFapzqcRpt7Xh8U0q5AunjzFw9UqZKJLPsIjyr75KHmZ4IWpMNkOSNn6V3MMmYOOsqMXEgYfBgYm8adRL7s&amp;#43;8aaKL/YegBoJmPUzhls6Vm0F4AqoGTAKGcGQEIGkqqr9PB8/fL2pD93YZ8vjR8QvRyHgtPy6RLXqtoyxsb6Mo0is%0a%0aCyeBtyHZhgvqHYHB0sxlXyvZPcbOtJ88QbcRn7G9zqs/1&amp;#43;ctHlHUwRXVxqMME3TBCrXDH96rXUGaJNg&amp;#43;GrR0mWxGmqedJlw&amp;#43;Fd7erl9LGq2hqmnB/Ao&amp;#43;OjjG5R4mIi0JXhBbUVNU4Cw5L24TbMvCOAjPXZeCS5DDBEXZhMVFhUyLTG4E7hKYTloY4x09A8FMBj8GPmsHaN3JFM0GoSVaNfGSeMXEthfOBBsIOpQB8cyuRmsd1lFUkn&amp;#43;dmRxsDAU/%0a%0aHtn1zkFRK1vmHHsIRhULWjWJ2RekVRLNtsgsGTKavQctLcGhAghgBBATBClj3ZUXAA/2Dh/DcFsAB/dJ5KkVRUEWFhpetr2SvS&amp;#43;zITC9Tqj&amp;#43;tBGk/rwRtv/NgazrWVC&amp;#43;RLVQoA0gyboHUMKMK82hnA0rqAh7D4YkIKvfMUKuzrQjNsmnizB4mKG4GaxqoG8wlIEA3njNxLFRv7EVyRymp9nYmQsnMHBRHgNmKny2ns&amp;#43;JoF&amp;#43;CgBeF3fdMSB3eBBAH%0a%0aDpn3K0AQH1kwG35adL9pu365nIrGmoMDxDJmrJayCbj8ugmlXrYJshGuRrL&amp;#43;phG/tLxekRIKf46YwAq71gBaO3c15y/YIc6iGqhWsImkPy6c0q88ACJ0gGncswmPKImo4zIuA84lPzBMAGS3ILb5zWGCTKJWpO7CWl/7LZZEKadrMUGhmrApvcm8&amp;#43;qYk0i6YR1bP37itvwApJCRaz89ZrUfWWaQ/I/2FBgqzweykFcbQvfTVbBbmhbIbvQ29CVoD%0a%0aZEpQTZlP3oU1MxQM&amp;#43;40OufI5HgPkRggoP1MDjXE3x0G7GfwI4JRimWY1FhJwGF4SdgW9CZcM0N4sHdM6wp96GykquDYCNHEA2d&amp;#43;XFb634trMFRvdPop6Xgo8bgYtDqbKWgQLEPHD/QH/FcBVuZvCje4ICh1W26PC&amp;#43;x7okZgWbSINl2zZ8VZ7Db3WKUEEHV/O6Mvyko2cAjD3iH&amp;#43;R3JykUXwusMC71W8jKLexHWEQzKzFi1oFUdm1N0YT3RhD18Kq%0a%0acSUAP2wfxireLHLFdhbhTpGam1zDHQqOhND/MFeTz8NIHmkANix6uhWT9C&amp;#43;&amp;#43;rLJZpq0ZoTG6lQ1RmUARwB&amp;#43;qjMAK&amp;#43;IAcDLIuYByoDwISsiJKo/8qSrXkueqBSb3SD77A/qxKPOmqCawRujda6a4Jtum/0ru6o0ignTWxqVrbRlEsybygnzW0o9igWbzBIBmpBLcUPIWkwq/iP/61NLV6tAc0ddwpsAQ9khZQ1V0k3kLry1ShCDrtWl41UF0vx65A%0a%0aXdOisOQ7oq19OYaiQA6QApYMIAAcjn4hp9ivnwAbrBRpnaAVeCAJp5sSGhpeqIBY6aARsthCRrKsp5s2sadOpoy4QqEJs4G7SrW9LWatcBg7xwQXLUSElAS6NYyE3kK03rfprEU7acv&amp;#43;qEy6I9pBtPWWQaE/PBCvYs3ioC0ipM6AsZaP3popgdFZssvuCAMf2kDtRYPPx8frC2HSPrth0xICFJdTjICWMbI8q56z&amp;#43;b3eVYUN10bNgI6eP0&amp;#43;gHUPR%0a%0agBkwFKgRHB9AF2m8tNq6ukDcYTbBLBHD&amp;#43;1bFPvKt&amp;#43;LtFo9S2Ib5mrQWlHNEhpUpFozMr0mQTChFzM36BuKmkXIo7lqwlLN6xxaj2jIWooaY/md6li9pFJXqk&amp;#43;qgtLrxW3YyZLc6w2byurLbVPyMuAHy42aahvmJA2bOvPd6xdwbnjoC7fFYbL55DpAxzHHzQ2Lbujhi2r93hje9GiJ1avsgLZxkINjCnR8&amp;#43;xiMvdHhXoK85Rwg/yH5QKb1gDF6RV%0a%0aWJ0pXuCP4JDvEYyCvRU5NNZa&amp;#43;5DEloKVD9fHUs5E&amp;#43;ZwEB4HKrplyPz1MCiA5r385tRF2jbEL&amp;#43;NrarShFZLxYhDZT7pC9XywY15nBTpmAEgDiSzqtJbgf3UAIYBocOUAD7zM5EfiKHD/bRaAH7z9JsvKo3yy3H7nLIk&amp;#43;zJASGLzeCt9/fxCZGuZm2lrWZqSGxbk5DPhGqh8aXVstdrKDTB5mxwJR5rfvAWb96AFajxz56sQSr3qIQrpG5BKM/OpGk%0a%0adcTorw8tMqXirK65mr3irqGpZaUNIJSkADmHSFHOwyN0z/yqTLdloxqgqCbbyFA6XTboorK3ex21S0w34wwGL7DY7SiqiOaUV4BGHL0G/BjLWixMrlMKHk/BTsjHSggo6MheC66VYKyuXKzGbhMvKhOedgFwyva3e4mQpnUuNyRw0toNZF3Vx/8DWhQdU54Bstb3UirHtpK4N6yTK0PWBS0xdTBgPK0ThV4q3X89oEA9kOCYIy8mPcjaRpgevo6q%0a%0aWgQQmpLQJ5BYgwQOuivYNBCUrd8iPE4Lq5O0sRExJL8bMSy3lo4HwrkGTrhEQjC&amp;#43;IB/3WYAJdQwwGwAb4AtnLL0xpIykrQcR0StFr4KmqrT&amp;#43;tnvc/qWZuhGsVahgD2XJ6ajbBHMNCpkz036bZTIdF9zJLDLJoOaq&amp;#43;zA4UH0ueqRZqhqyhazEsA2oPqe6xKyVdD6LN0KkmSFxzNKbsTIQzR5C&amp;#43;TUKu8ajfwuAgibBkLL5q8tdyQd8FJfMXindBrrF%0a%0ayQZjCRGboDUbCltQPKQ9LNeCCod81uAqCCG2IIKldguXzgTIp8sygiKRPRoaEHtP5pe6N469gMjECUiNUhg&amp;#43;T/YXAAV4GcANcEQQAuY3dLCxszyVkJVFtdKlpJY&amp;#43;AiG8rLgd0kay6aUFssg/RaNKo4GtmbrTJ16taENQVCLbsc2RXS0Z19X&amp;#43;p0o9/rv1qW4dh8Tmp/6gDa5ZvNrdYyVHBTSnVr2vKv2O4SpMOfA9yq2936wVfColxAY&amp;#43;MkJ7XA4j%0a%0aWrKFXbUSZtzvJ1Q84RuZBtA0zk4SEACSi0uxyayXjrWVi5OFgBSoFvrcEAPbWdiegByRAoAVGkTFvE2&amp;#43;S4VPNJErlay0W76QvLaZsYGpBalNvYzCEaO6qhGrECb1pnMg4qncHskVlr/yuWpHbBBrmVWuPTB3L/WgiarNq7rEgLe3Bt6haiaTQRC2AzpWr4sxrDLmutsgQtGFoG891h5rGjow70Fo2e1GrQ3OXDhcFTicpDnDkhlDAJCg8cQTAF43%0a%0aRVAfDQoG&amp;#43;w1FTS3OSs&amp;#43;5l1OGlABFq44oRa6opeHeoB6gCp2DRgM/XEQUdL46FZrMWooAGwANgD8WuDuap9PmLXheBbVOJr05XrvSpeqxh43qqWaj6rt0owsnBbAxPrEBFJS&amp;#43;Xemhgh0Aw5iOxafppcc9FixxEkGkEL1VoxSxer1MshCkwi5BoqGpWL1Bsks97UFr1NzHUKtDTq4ww0X4DCmAEKgBGUokp8ElXN07ibiVMNKnAjqVHBAVlh/2Dc1A%0a%0aHBlIhNS8tYl&amp;#43;uYASDE8Fy2cxxyKltZs1b5j1oB2tHSgdp0WxpbqWuFWhsau6qbG94LerIhQynDx83dRE5dy&amp;#43;UoEXR0BZox8UZbJHzInDeqbnE61ffhZVWuUmcLT6W1s5Py1P0OimgLsZOYwRAyIGE50iaIuPhvkpq9f2GUGomr98ki68AChfwoW/QqdVrci81apstnGnyKNBuFG/8M3iEG6P&amp;#43;qD1QRoRGwZ0CMEy&amp;#43;ji52NOXboP3wGuUeKReAkGs%0a%0ahLRjAl1Bnrn3yO4QAJzTQIAnqa5tjKMJlxcE1U1YRgQDF0WSgNG4UfogSBW2pfKGktYtPtoOYb0QWWEcFp&amp;#43;Yj3xJClm9WymEP1mjwf8R0NPcrpQKuj4qAc0UT1ZvCwRXAYsQuCoJiq5eSfFPgVqsWtkbiFmYTrDYaC6Sy/cUd0PsLA3ResQqvPamgNApVwQA2t9xjXdRARBWEyZVGao8spWwOgS5Am0TNkC0L/YZQAfB3t4Bp9ZuSbk8/THSqcId%0a%0a5ifdxgsqIdfMJ4KhTb6lqfK3Raz&amp;#43;tU2hIbRVraW8BaYdq1MHl8UQjJ0/LU4Wq/hAWav3AsqrrbsRp62sxqVP3K8hoaA&amp;#43;qZqg6LysOKTNybrCoMIpkd8urs2mVqhqt9fX3aRtrD2zZam3VWWygU7bKomsITPVpoKYwlGQoC5R8L18F73Zyx9kTX8nR91YB6zK&amp;#43;h&amp;#43;Cia/EBiGSPdDAudRAmW0ypzt8H2CE7hzzBrLE2xAIy2cW6Zhz1WNLvBm1vLcH%0a%0amqGpK7KMupL4HhCSKU6fmcIEExoPPvgAAR2tx00ZIp4IMVcY6IsaEcOSQVDvDXsAgI2RimwpV0fmHuTTeLjMLnWjnb0F1&amp;#43;wFoB3vJFCAHB9AH8gLT0oVWYAXMdrAEIAP9hWbC2c/BCmPwEot41xGtl2kQy1JvGixmbNJrB27SbVdt0m94K97PgO9ot8FXXGaFKh6Ukg/Ir0DpUWuBLWOUGytxaPesHGoWLQ9sXNeg6Zlrw86mjfnmBc0cbJlrNWp%0a%0akajcMtmy3DaWReanvlRuEjsy/RvLKneK0U9OQx3azzflL9Zcc9lxJwlQ68SNFMnJfzB1K28cPQITPvVZ&amp;#43;S9o0mMIAQdzDp4XDYgqrHtJ2zWUCPcwbhAGjl5XS1z2gOyS7Vgeg8SkLlmJNBM3SBZyy0tW/bUlqNK6lRr4hbAe4ooAAc1ISrMAAoAAPk9GBBAK5lTUFbOWHImPzKvG6qT/yBGxSrEFvpm5BaKttQW5Xb4Joh2xCbzjRXvRrpShw4HZ%0a%0avL5&amp;#43;HeINCoBZqVBY3agBv8TbWzumg2SDXQdyP6EHciHg2ThWqJXKqj2snaqihdmJYQQ4Oq6OW4PMHChHft4eHdi/7VqQme2WsqcKnNJBq08KjC/cW0GUCPYGbr6AnKfd0lakRT09&amp;#43;a79q&amp;#43;Ojio88zuQoSrOgCLAnYBSAAz9TQAYcCqAKqAmCvf8x0qCBFUWv4bHiPjCk9aBVubQ1Xrz8vQWzSqjFs0AbrAqkmf0IJ9/qvKxTRr&amp;#43;KP4nJFDJCMGWh%0a%0axb5VMt0zA78JuwOhervEWVVScUxMMPA&amp;#43;CrkuorMC7L8MF78Utgetkjscz9feozEUPyq2DN2ksZYeOL8LOZpqKNa3t5GqA/OOUUVWPzOngEyGm&amp;#43;DA28mNBE1ErhS2CZO6lL2d2myM&amp;#43;z5sF4jY&amp;#43;ipgWiigYxQxm1NGyR82unmJkyympg8BtTNeFh1a5QM53mbBC1n7mJrC9w5BUsxIqTmxmCUmrl34E4VJcp0tADRdax7WRUtVWQLvUeObfBMnVZSY%0a%0avaiS0StOzLq6IWzX1Ftmn&amp;#43;Ec2TWumJQDlAupr0xWzAg1LXefkER6KXYeVtN2i/gdhwgaGKI2yEl2ieiqup&amp;#43;rDL0NTpuZQBpPnh2UiK6EG9kpm0tZwV&amp;#43;uhsKPANW2mOwbKpJITDipU7Pjs52o40OAAZAPGaeQF1IYgBugG6AO4oeAH1QKxCNGkemx0qrH1rqnoyUyD6hESiRnzl2pXqFdpgmnI7m6XB2jXrIdpqGWmBMrw9Y/mbcc0GrQqKj7M/Wo%0a%0aZb5VJ28X9bgzss20M6/&amp;#43;uTK1wTwk05zS2bW/HXZLi9yuHn8a29XJSele4rMg239evAlZuEwA4VaWPtUqljQZsXCuChqSO1ZFXdV2Nvjf4KWv1h4fVd&amp;#43;yBwER7yA5p2jNxx85UF4U5sgGmFNYslpGNA4n6gF2D97OXd7xRtiyDLY1JW8&amp;#43;2rLRyiq6ngL8WmMCLTpT1Byq0jU9F3wQ/yV9DgEmYwAwPo4rtrw0xOySFNPmtgoMrQzc18O/UrGlICOz%0a%0aNCKgCGqGoBdAsSkYaYQQDpUZjS8lAGAHLLGWpIuqBaKzXeShIY8RStOit8bTqZmqrar1pq2lSlNICqSZtrksAnlSL06fx7IbKVrOoOE/UL0dpRSJi5UUrqO1xbChuARRZbgNvskrVajyMxSh1afYHTUN54nZr6HVGr2RskmXerjJidW8cKgSvK4WWKRHUpGm0LxtJty0/CrFiPKbATcesaJOl01Xhzo6NZhULseOeBlfQBTRxKz0LS2BSM47KwyS%0a%0a2S8PCdzZZiXvEq5KqYA6MYiTIDnCEnU0NZFvRpnXmQnu2XaMf81&amp;#43;mlPMNTyZBHonK0T0yz1K7I3jDZIB7gBIH&amp;#43;aUu966gREreLrtp3ipLtqJToo5gAGaz5C3iTOhOhjfQBjNE8Uki6x5TbIhq6R6qiHU6aStqiGsraz1qumlTb6qqYunSamqosqSMBfRhD4UHZnIPlWjLiTUI0M307CvP4uq&amp;#43;yGj2cWizb6jtmusk6dsuosncjCRtwOvVaiAodmy%0a%0as9ORtMXMlDyZTfswnQrbxAwb59CdHOykkaoStt2kjtdbqNg7f1VMpWssCABtuFwiQc3bpZqz4z2PMCinwV&amp;#43;eG0OZ3p5tye4fsNC8L5GSn4Cymj7Xvi3jGZtWnL6YkoINyFhQxKS0owvojfmZoZnasP0dbViMlpfTr07zGcIX5MQw2xU0Ggg/EVSYV4&amp;#43;DsuEULav1wXWP/xCmKHsceqESUpXGwlfOUtNGux9/KP8rU9KJJhIAbrLtiAm5xwJxFO1Z%0a%0aNrbxlvmFkgJyyHjSLLPrCxIJ/QEWEnwS7bUFJJutPSku3iAQHIGIAqhKoBk6BviKoBEcGBAkBar9TR1cno6rMIwu517AtoG4rbKxrpmz0rytpSnVE72rpFW69aursx8yVbsfIZ/JANu/V6W4FbctFec&amp;#43;BBc22x2/9bRLuA2ymqf8piMH6FqPONWmYZXVM&amp;#43;eOz9mgh0bfzi7buJQm26AHp2u3ZJ4HqrCnxa4ITmymz8mrydu//KwIDUGj1bo9pXxS%0a%0ahEzhCHgUXhBowOwlBBfVqAJdCx/G2pXD8o2MrGNWGTTbC29GwEfFT12bV0FqsjnHI13WDoyYsMjzA8YvHhoIuAMMLB/jErcDIEyaC&amp;#43;1ImgGfAfjbbNozLlNVsJYKhj4xNtpYjHxAn51hFxobrMdzxAzIFYgnA4ejEabRVdmUWRkaDm4RBNEeu1oI6wuy32jClaVTt5aFmt2ZmUiM&amp;#43;t&amp;#43;BF1QBAA2ABCxV3ddSHV8haLHSvNwKtMlqK6lSZT0jtGiz%0a%0aI7gduka206bppaWmA7c&amp;#43;R0gF06u3IcIJM9Edo8Yaf4AjPfuvxtSTtsioDbCdpMAq/IFxysao2bcsK86kArF8wNW1ocKaKsKtWdHKtKGgR9VrvGS8SzlYpZOiDJPMH3gINElYies3LM4UkPHKGzW7H8wPU5oOhM5SIRYU3kNcEt7RDYhObDSyycwPqS0hIlZYmZNNCApBXK3gnec01ETMAxUaQZ8JIaKE4QaNl8ceXLZCv/4FVkp8CEaHEy0eGCcO%0a%0aycarii0BrjsKqfvdzlVbhR&amp;#43;EjS2du3iue7WZn0ADPN4gDgAIaojAAlCXwBAgD7AAHA/AGcAOraIFvvEQQIisvNOmTaZLHAmuHzStqRO8&amp;#43;6p50gO/m68jv06sVbjMEASicR8wuHqn1sP/wcUTXgHCFPQ0a6FCvGu&amp;#43;fUTuCSe6MwinpWuykbfFuC0&amp;#43;WbPNINuvazHjKtW8caaLMZGv&amp;#43;7LVsi4f9YLngmWu1aeRqcK2/s1uA9XA8cmxGmCj5ghUFXKz%0a%0arpYTJGsNowW/1WG0K13C0u1Xu70X13jCsNYEGlifBjE4PEeqJswRF5cVUEx8Xajf&amp;#43;rd8B5ILmRtuAh4VtR1K2EmD4x5ypxUyxQ94nLs46DQylzvIpcjxq6sOPDKDzKi5b1EqrjGj&amp;#43;aLHsDoXAgyniqUa1Bf2R0gIKckRWdSdLbyoFVfJRbinCx4Tx7Tj2TNZq6zIIJw0HbGLqhe1pawnupVRt8hgRGmvE7kG3QuT3RUdsRS/06FbofZXF6afKBtL%0a%0aFKUnsXNCajdYKLe1W66fJD66&amp;#43;rFwrlo4KzeyBKxUjJGfGN4hGzpgqw43PCpXDfgKNYiWmPjL0R5pxyqZrpUFBG6xlBeOtY0hmAYJgI6PUQKACYZFsBQYyUcvoAHW13uwQCPMJgWtmz4sTk2kA7A9zAOylrFdrrGtE77TvU2mF6G31MW6mBdoLylezxQEr7IQiiWklEG8&amp;#43;UyfNdHVVbsApx26yqx1xxq3WCklP2s1lDXIpK69W6TVv6O14qido7Eq%0a%0azdO7ilmo67PBPaOtWc9rotCwl6zCIUGrxk/nhpkntwIuige1cDZiw0yw&amp;#43;qwIAcil27QuJb8IfxwgLku92b0zOLu3U55sAKtNLjqcIlqrdi8SGiwX/gYAhxzV4wno2IZVOTdLLvMu1dZm1emAdV5Xk7aMNT60pL0BEq/amXc9iJ0uQDCYG8A02K0SXg/FD1kNUdrCiB0V4Qapy4mpCoOS2SM7QxA3Mi5bGzbiH2JISdRDpFoWVcqUHZSXDqT8A7Ky%0a%0aeAHSVyAmzx56MLvEBjV&amp;#43;ihUrZsnFnDKTtjPp3CXRCCOysYgX7wXcBnYSEgZvGg6F7EylNY2s4aNFVza8FoKYgYiq3iMty8/I&amp;#43;BkpT&amp;#43;u2Q1fjO20s1cEwwm8GGDheHoawRbGGp6KkRb0AAm0B5CDTuIAFgCPBy8xFwAGQF8AOSJd7uEa/ijzTrl6&amp;#43;E7D&amp;#43;ofK7m7BVqCe5pb&amp;#43;P06usJ7kf2KOsxaqpnwW9c41dkPcUCh03r0aq96xFPq0SsUChtFmn%0a%0a2Atssfegt6YKuD22kdWwuysGXDT7wOMwb6ujpVnQXTurzoC47SU9B5eowpIsp30ZuaJZNLk&amp;#43;pdyEvazIIiI1KXY6PqfjLrUJrolqqpXVWLwWElcPth4TnWk0kg/uDA8OKhZHrFyqOi3JCpIifD1ku1SQP14eCYRJC7rtxny3louKkBAdp9wHGcAXUhKbC8NSsiQQA4pO4pd7tEazeD0lnK7D5CpQtqW/laWrsjeoVar7pV26F6urt3/A97ttHJdJ%0a%0acaqSU6WMZFE0yM25xyTNo&amp;#43;IzARcC16&amp;#43;nA6IHJiqTo6g9veMrMTgHviPUkaNrLAKu58wXLQ0ilCCnurBDmShC1tW3VTCusdWhJTzroB4PK8w1iki0PRLWXOsecxNPKt4kyyzhF1tPV1iRlaTTtQsSBvmyLRf9FfmfqxlmIwlOF5K6maKRZEHhH74qeACtGqbCGJn72jWL2QyBgwyTLcPwzYYw5UQDAZIY6NbokkCWCoEzy70AzRVr36sB0LeXBBSV%0a%0a&amp;#43;BB7Hv8KrQmpP7gtpYtto&amp;#43;On770ZokAQqzclWYAKZ0WVuAY4gBz1OzkCqAeopy2/GBV2ALfDgr4WR5WtTrObsROs&amp;#43;6ebuU2o&amp;#43;CY3tCeuaVhesYWadUrLTUopy4leO&amp;#43;Ed&amp;#43;7/9Jze3NobdrgevW6y3tVmiLqggxZ&amp;#43;9YhXVqjO3q89LucKzbIyFXV08zBcXifxWdhCeTj1JwtdyhRoX&amp;#43;A&amp;#43;DqSCUq5vuvD4XRVg/GcsX0N14F9kCQ1vuGAlDJrLntnu6%0a%0aszIaRXUG0AhACpMYHSHQUNIavoCqxYlEzZQvKLzfSqwLw8Qjm6T7pBegv6Kvrauy9br7pq&amp;#43;sv6Fovq&amp;#43;9pAp4hQZL8Eu9LMgHT4SfrGusn70WPkSTEbhZu62n&amp;#43;7mjvNrW7KUXMAG/4rUzt1mtLrUy1fe81TM/Nfs55501AuUoD7gCq8zO2bddC1ugrqWDtG&amp;#43;rGqaXvJHM1TYri7&amp;#43;n2AJEPwdAgHpcIc3S&amp;#43;rcXM9upJzAEJ0tUFbzUUHEd3RdeM6QM%0a%0asza9A32keBIQgsmpZpf9A7jJKKMWiNeZQ56cnI28rAYTFO2Vsq2pvgi3TLWtoxfasJysCrsFJ0A2BswY&amp;#43;iPegpSArQYmtYe5/FjeKeipoFtm0WMAtQZ8K0csCo0KVxGEhN/bK4Oe69Y1T92clsrBmIOJtIKftw40kg4VgQpMo99ZLewz9x8rRzvYaxXMAy5eNijtjO4KMCVhFl3EBNbLlaYHzQFgJMxa4daYWfFYIiSm1HMDA7WdrQCGpEJyuxs2%0a%0aXzvvsuG516I8n42igAZ&amp;#43;Il8fKAoACTpFoBNAEuKUjpgLLE2756ebEHg2urBU21fKIcV3qR&amp;#43;0A7T1tf&amp;#43;hi7FGQFu/I6hbrCaJIAWYvvWzzIPknZdfHzhHiDulOcBlrluzN7yfsgU2o6OxR&amp;#43;IqRTpvqWuwbbHJO5G5kaISP3k2D6Khpjlfv7ZKzHwOwHy9G8Ox/1MJUtzT&amp;#43;T9RxQqf3txI3G8PpzY3KPwRW0dTN5GXT6aGAuJRqS4toBwKCZ9AirWK%0a%0apRmACgmZMAYAGzReOhKdhGBx0qWGALfVm64&amp;#43;AcC3x7Fev8eui7sjvbq9/6Mftjesv6CxtGB3/7/mD4JAn6XuXlI2Gz37sEORv7F0jHCkIw/irxegErfFrPqyobHAIZ&amp;#43;3bLKQdBK9nTAZFxSy2aD6okHbxbEgtosjxa6LJtCw7dxmR7gc9Lq6lNkelAiXRKwFLjfOWOEIy90JovO&amp;#43;6lTRUOiBbZ3EswEMldou0vTUPBMNCVZFChH2LSaOfbbMXI6&amp;#43;%0a%0aOzFyiokKzRS0pSbMDJ7HJFUYlxlgrvTa&amp;#43;CzctDkrSybBLsWPGZBUlWwOJo7aRgqYk4j7AcqMOd8ygwpXwpRyyJuvw6DSqYakmDiQAOqmAAbXD8AeZ0NDwIXFsAGgHjoP9gGQHtSwN7M8gtcoQCD7tXhT5Dw3qYUvlS0fpRB9E7mLsQmoaYervZ&amp;#43;d/wOlj67QRy3/z4u&amp;#43;YHwAdcBYkHSAs1mhB7LZqfS7sSRspIBxAGTcPQB/a7ynqIdVv6ORog&amp;#43;n%0a%0a967GtsMhJzptvvkhwF14DH&amp;#43;4CpXmjU00Xh6uIXUguEwOIrcGu72ZR7LO0ddaJNqtWhv&amp;#43;BcjQwoJ7E&amp;#43;imFh1gPimJcNIBFM&amp;#43;XsdZyyFBu8U5uEJuFODE01p5SVwu7E7Mcx6ULt5ae4aYBzERNiUYACqAZZzWyRGAP0KnmJZsetZRlP4o6EGLD35WTMGP1Jf0nMGoDuq20WCwnsUS&amp;#43;&amp;#43;6BwLoaLpbQ/Abiu&amp;#43;xe7qIBS96yPS6&amp;#43;kXglbqxGkS6NVt62k%0a%0ab7xiTsqpE8mhtfyFyatZrfSit7lRJPDbejK7GpcScGatEReNvCC6PXwImhYBB90O0Nm1IjfKHEs439umGFRpJZ4DCxA83vBwI6KgBAmFudAsR8NBkBOqk&amp;#43;JGeBtYT/YcEA&amp;#43;Qr/Botk66rZ2NOtH/ogm5/7qqp6B5EGIIY6uqCGy/srqzEGGCEB0S5a2hgeIw9xis0JB5JrOtuEulW6&amp;#43;vrb&amp;#43;1zrP3tZ&amp;#43;6l6Y/IvWGE9hweVE9oE9uqscCYphnuO04%0a%0aDpnMGmNB9li7PMEmYpeOrqUC/6dIDDFYzYJ&amp;#43;O6AcYriqyuKXN9qCIIa4yJPMEDdDMG4QdUmi3z1Jueq8CHIXoMWjE7HTu8NGy5VrEVU4u5OsushWa5eaTQhgQdwAfDAKa7lgexYjjl83sIOpncFlvFi8bb2oah4iWl0nsQPHW7mDqeK4X0wnPtW7IKbQr/DGEgKsBijNEzd2nAQU7dWaA7EXC5kOrE9c9qe2iR6jrNVmSUnNtUJID6g0dg2eTqai%0a%0aqN7gm0ON4tSerJQTJy&amp;#43;jDj2GmhTyhd&amp;#43;1tjtoPq4uEhYBAu/bKYZD1465MBLxGUAIEl0ehYowp5RExkQJIBlAF1IGiV61nfc&amp;#43;wgvHqpmyO0Moebq9HTsoZYG3oGm2TCw8n89OOKrFfpOUgG6XEGxhTIOHCxvpozerF7TgcElKn6YAcXNdYHZCXJByA9iAaqiZv6iRvJh/mNBASeaq2z9bosK7W7mXqzErcC6FudWjLq4DzZhzYgMDwoh2SsCnWedP%0a%0aTlx5tu1EPxIBXdYIm4flkmgoAxtC2V4XlJw&amp;#43;AVkfg09zHPmJTzde2&amp;#43;YJt7hAuvwe76WbTaPEgRiTjDwjriIYJ7aGGDFvQtikcx3JBB6Cj7FkvkFVcZsBCaMHITOFTZQUY9w42qCuvQS1qbUjlxXtkNNEtiWpl466hRDQEUg5MAozQ5mJ3EC9iKVV10WiwMhiEH74v4oxd7NtA/tIF7gRo0hxTbC/pROvm6tJvyh/MHCoYaBn/64hDsY9R6YPJ6Lc%0a%0aFhuiJABzF6wAYmuvNrawZGiWnz3OGlm28g9jP2rKgHovAo82IKjVvvAhg6P3swB2obv3qHGxyG5rq7hn2An7Kc4gnbgjCIhEY64Dl3wU31RBSgy9YRypgOSwU6g&amp;#43;icO5hZXcgDRSARPlu4YDKEkTPRsWi06cgWq5bhCUCBCVkpcWyD9Py0ksAW1MAM/jDrSlTF0piVexbN2kWR2TGz8PDEKKuZUWimqtdydW1lxAiRLfsgXWwYsLg7GKQZm6LjJS%0a%0awVftU1kNXMF1l460gB9j2YAJIB4cGA4PY9r6ydeboB1fFEEQj8ft0ULQjC8/UPujRbHpmYIz6T4QayhrI6QdtyhlOG1NsMWmEakgEYylCasLJc&amp;#43;2f7MhrZFYBAF8nfu4i4y4bZB7i89b1cMeAGoqhM/S26q4faCThH9Hm39WkazCppe4arxWrMK9yHZK2fTZRVzQIXYeUDQ4WShGAIq9FWjdKFQpSnrVe42skBxV1lmbW6AlVl7MGlZGoTvzs2G&amp;#43;%0a%0a2T7TTunSUH5guOCeUrz8HhCVcrV&amp;#43;nFc79xJbyqE3BlXawqMfct9Hqr0OQKhIfyuiQBylFIAOkBSoCIAWUI3wYqUO08651xMetYuoToIqOHnuR5Wkr6EFrK&amp;#43;0F7E4Yvu5OHcjtThwW7NertaO5jxei1WL/QsRx6LF9p3bLoRgCU8JrVW7&amp;#43;7cIc9MF&amp;#43;cDCrHCoAp1cJahiibpLqGO3v6Wwdcm9R5ggyS6S2864ZGCBuGhfpJeybasntYByrrFwsc/K%0a%0afzP0u8IaPx4KXcfcZBS73SfXUw94CGCgOQk1MwpdMpjXu&amp;#43;smpgno27EQ/yaklqmbLoGI0hEU8cXNEx4TX8n2UcI44Ifm1&amp;#43;e0cREFHOEX5onuxmKF4QCBHUvaU8cEGfOrEqONm5fCw0PrCtkDsNGsDpaSZl6nVBSVxHeOIF&amp;#43;a1BdUCRnWH8dgDukzepjjRGADgBAHHB06AK0/vhgFpIPMIWKkQxNnXBhpSSW6uACnKHKvu3ekJ6b7rCe2vLYIclgp%0a%0aYFSfnUoqxaVngu2oRc6EfhCWsGQBqghJl6wPs5JSNrACpuirxrODrvKA7xuxCVXcwo/52ZoerlN7SMVDGIH2qX0yJiPHRD8Uqd6tJxcXjrsu2UAeiipwnTfE0BQED6EoYB6ADwAAN7SZpykdCNJIvIuuJhMHx/rGman/q5umJGtIbiG9H68waSRli7nRFDNMussaCP8RlVQEova6axMYY6&amp;#43;9CGvuKxfb4E8YaKRjYy7YOcm&amp;#43;karEtOuxqI4zuZHW%0a%0aVqkuu2y7iydluku855eoZZGsSztlthkJSY0gtFwwTVwzNKTMaJr5MA&amp;#43;0OALmovA6jyE5S2u0MyaYaiDBD64QtEHAba8ZJZehNr7hkQzXKk151RYUK0eCkenDX7s7xwqpT5YJSbEIPpqxGrUcp84GU1zU/AQ5r/gE7bEbMHEFGwWAllcVPpGWhBoI3THxSP0CcpnvqwpGE414A8snhpe2OE9AQJhBtUtTDiesIP&amp;#43;EJ4Rd01eMlp871&amp;#43;8NXK3pzmeq%0a%0ayRweE7c7FZyXVIA05EgEGxXP6kYVszVS/iyDmPLDkgg5DgZKvrHJlQDC0dTTD6zbLR0eHGGqplRsnYgj4xG&amp;#43;oJCJMz1aCRObdrGW34NGE4VxsLm93pAVNZyonF0ZR5QV/R3gdcwMXE4tpbASxCE6SrOZMBSwPuS&amp;#43;RMSbJgAGoGWCuhR7uTmdhxiEQCBJTUh4F7dUZf&amp;#43;1q6YYdJVOGGQkIRh6ezM4eNEJz7cOvmMwa62bI7mSzUMXvsWrF7CXG3Bp%0a%0aYHqtQMM6yKBtpLehWbL53xG/uJxB37iA1Vx3wOup8AKuBmieUpT6qdUpTk2gmzCb554ul/kBS6QMC2ob554PplnJkNDgcCpIbAFrzbUFPR8otpqffoADzUHABlKeCV4HCD0cpTOArRJBnz1Xho4RBu6bHq9MQnsWmQI6tc8uBMtEYCu&amp;#43;4slfs0xWxYiIw/EknhDWUChKHggS33wU/RaLkK6afCbNByZB9ictFJSaCNH3HiBicQnJHusVmhXrC9Gs%0a%0ae1HZxgDFlsflhktAKLdRovRzCo8Bn4YABoVEy6sbewfpnskeC4QEaMYd91cAEyqynZ/IB4AEM1uU2YAfAAfLy9PAjGZJKek0iQD/0U4&amp;#43;LEalrOm6JHKMdR&amp;#43;9FHDUZ3eohGYXv2KwyHbEEhYU0RFqWW&amp;#43;HXsYsGJQKqHJ6qsmx1GCQh6&amp;#43;r&amp;#43;7oAddR3gtfJrHCvrF5uzah&amp;#43;sGrQpi60ZL3Gse&amp;#43;XMqTAL7h&amp;#43;bt6fpNm5kCqXoD22wD5Yvyevo6iytKe9%0a%0asH6YeGnLsHkbUF&amp;#43;jjQWkeKQ5TGVZ1YLOS6YHsYB8CqMHtBdYX9gmQM/FpGoukd6jLhZPkMx18CxAe1xWNjBSooihjj0Ziv0Cy6NIDwyZ7hxdVWg7g5TrClcG9iD5ndkCVkr3wR8TzA&amp;#43;m065K8rt1xemQ7Cud24hNHwdYsVQ66MeXOm86nH3UFH3awpSxBRSvTQkzOzjAm4Ky3FO3x1kihP0FFpqm1GjFyAKMgqKPwG36NGKGTsEaH9XEAk4JI1oA%0a%0arHPHgTvDUo2S33YIAwCEyrwsm1ovtvdA75/8Jv8H8KxVF4JMbhqUj96Zc94WnmnT3Y2eGO8FgLzLLBq&amp;#43;x1uxnUa9MMPhgZ8I5UjPOJcFsRfvwsgDZTzAWKfQAIuIjGguR0FbXMwDw7R8HJoRAIhcQ1Krqx3OXMUDLBdHRuJUsVXw0ZiaFJw/sKBh8HA6A4AYaY5gF2ADdR6a3QgD9gi6qgAU0h6AAws9x6OYPX4wCHPkpAh1qya3Lf&amp;#43;nSGP/r0hv%0a%0aCsIEaRhobNLVmJA/Tb6gJd8ysGeMf9RfrKAAJmuuyHfHIkuj&amp;#43;CSkffesob8XvBc5NGFYpEQnJ6TDIGhzuGPion0&amp;#43;JTPeoRxlmHWggrh4HHD8cfSquHW/Ej2&amp;#43;s63YNqMRJV2fHdDNGF4eF6sNkghRn8IiCMFYhKaxzLZQLqe09i8IsGyU7d59Rv8J/C//Br4k/Asuh1Sbp0mOwUwtsQh6v2TIO9IYmb&amp;#43;RAjIItqezOM1ikQEQNl3jCsDOPCCQnhoR%0a%0arpdkxq0MUr2Ih3wO8wDNr3MAgY4wNWyfDYnWQMwSx5Yvn7IXUle4LBIa/x83WydXjr4cCUQUsieAAZAVMdRZkRwZwBviXBAKAALNjBSiEHYUcaSU48cZ2AOzoG13u6BqjHtIbyhwhGCoeIRr8rcUcGFF8w9RSCVCsUYnvZgKDyuBjdM0ks0kNUK84TcdqzCS&amp;#43;cTqApGo&amp;#43;rcRope0TGewcaOkD6J9Mye3968nv4Rzn7KkdH01NG8Do7BkkGtYxtCl%0a%0a9I8LQjOeroP0haKJzHcLQEtWBRqLkKA270SeF00Kdh7ZMwhh5pJeEwlYgDNQIOOymh3mANypGIbNCxrZwk78ru8h9SQDAEiZnqxbpBoDbCQ&amp;#43;Ae4C4RtZFiBYTZJCkjDErF8FXWhxZkvgiIGcYayn0B8W2kwEHhxBKrqovi&amp;#43;/w6gwYETNcE6Tlz0/yB5UbXBAtFKCs3UOYBMAGTAcxzGgeKcPwzJItQRonAlJukJibG6lrkJ6bHu8cUJ6A6sUbL&amp;#43;8%0a%0aZdGMfGFe2gIDC2awat0PD&amp;#43;7AwmRaOnx7/rbIep&amp;#43;09YaFt2rEaqFx23fOkH&amp;#43;wfBQF7G06kQ2plG2fIYC0tQ&amp;#43;bFx8WLANUMvoakp0QsMWNf4i&amp;#43;w&amp;#43;SKNi6GDNNF6yPmAJ7M7oEMlkKclaCgewI4SH3EZ8ASd68AHYAoSqOLAQAQTrURWpstRykwfkufgbjIh5IdJYcZ1jhhE7Jsc0h&amp;#43;QmDUdzBubHlCZhe2TqlsfPoDXhAThEXLvS6SzxIJn8dsa/Ww%0a%0aplvzDn2F1HTCePqkwChkrgq9wnBoYlJjqGrsazhderSYdErOwmzQr7Br96OfqtW7&amp;#43;zDVPNg9Lq0j3OugSJfjCPMC/MCNOMYu6kPizTPFshIb2AIoPZTNEUzBSE2GNAQe&amp;#43;Z07LHsSi4UqROMSFgzugR8FYCwLk01bYdsaEUQ58Y1aJDVU0NT4Bre0tLN4EtWZKFhiN1ze91n4yXmYb1iSH2Qb/lEBH&amp;#43;7ZJbOeoj&amp;#43;&amp;#43;/bfsHgIPwdBBE3EOeDSAG6Af%0a%0acqGQEAcCgAQQfrWeDV1&amp;#43;JXhV/VkNQ7xk5yNJoUJghGdic/&amp;#43;/vGvqrUJntCe5kYTDCdlqW8IlYRZgczPPknaAyeiIWasDpwh4UnrCZ7hlLxuEcphlDAa4aA7TUnd8cuyizdzDLpekPa4AfFpBziN13YO74mWDlC7cbw/hDcwdV4zw1Ls401/VVEeJFkQyQC2tkhjxjldFxMK2Pp4Zoop1LI&amp;#43;jkZtrDcK9uxN0HJcEIrPQguIJ&amp;#43;FgqArEZkgqSHTBb%0a%0aWAXV2XsUsy&amp;#43;/0oSk7B3UDWzC/Bw4Jm6CO7d/oS&amp;#43;4RbgwfQAfQBIcAbMiuRewBaAcsAjUpDC1/NT9J/2okn8YGaB0km0waR0jBYqydbqmsm6SZ7x1EHS/v7x3uqDiaA8fYRsJvtmTrLL/RMSC4n5rEgBwcmbifxh4XSGAfwhwHGpWr7img7zCp9RzEjk5hDMwVVhwo2WkiGQtO5h/QkrSL6Bdpswm3TnLYIOAoXieMo222r1EyBtMFVR0cRiEoEFA%0a%0a1dHdN/Sbbhd41ViR&amp;#43;8uDp73BnLZXtbOgCkLk1lenk9ZzGfRGf6o50VeGj7p9DkVVypfI3vwKwNZvEL22MdkSbvGtMmKgGwAVAdpQjV85B4/Dj&amp;#43;RqDl6bD4qqAA2Vtwpstw1S2hO10qovLIxuOGKMZpJzYnqMcbzHTj4Yd51VJwbpi3QcGSNJTV2RrJpkW7J5P8&amp;#43;qqjEkdgRQXyRu97CkeHJr3rplqG&amp;#43;0GoxsocJ7YHXdo&amp;#43;JsLr18dI8zHG2BRhxM%0a%0aDI2iIsJA9GKaG1SUNDPR3DI44rYNFMGBtVCUBag4ZEraOVDBv5WfksnYZE30h&amp;#43;IEVthnKgqAER/K1Lwh16UltTJooHyViGARHBJWgMaLAxpfH0YfKB/IAY3X4AfvKqsuKnnPFtE/&amp;#43;l1uUPypFHB5Nouhpb6LtrJhJGlCbTh4hHVmvq2oWQICPWxpeT8tRxQNdyeSdlunsn5bv5Jqd0ByZsh2fHbidze&amp;#43;a6YjEFi7uHOQcXqxzNZMaaiH5w0/iAek%0a%0ancomQW&amp;#43;3BrqfF3tRltINjPRNKpqdq&amp;#43;YFUEBo1KwR7ym/IXgCn4wEsc&amp;#43;2GIRNggQnvjrvH54fz4rwfvTPhhqQk46zvQvK146vu94gHBAFslmABnUZMBCRHePAWZGVIoAEEAHSvup5nJkMSsUzvobgv5gEinUUehhr6no3sSRgYHkkdYuxlqDiezDXHLHTJX7IGmTJq4xtHbi4f1zTb6aqfMi&amp;#43;97fiP2iyb7BVVRptkcSAq1VLqcAce7B0gHQcavq9%0a%0acmC0qvTL9wMgIyU0fdQN354V5IT0nGck2kUivo2T&amp;#43;qeSrV42XhAwkM0AckAMI4erxNwOnlk5TF3iBoCN5a&amp;#43;2Dbs7WQ1cwsUTXdkyYuGlEm3EfQAGABkRXoADnsOAD/YIBYfEnqM7oByTGHgLQJ61nLFFWmVLl2IsckFesyhpwLcEcCerYm6ycgh2yCy/sSh&amp;#43;rbvhBjJYXVN&amp;#43;k6yvzbzuBN6q2mxBsdRm2lzNuwhzinjseq4HvLkacLewiHGht0Iz%0a%0aMrRHzRPZoa8kMuxvqGBjuyClZaN8aLRtzaLiHybYSZm2IMtDoqGXhshJyDhnrIOQeM5yP6uCK0FeDGyPptH7iijMbg5sDRWCWhz1zPojaRWSCwDU09cVlMWIGKn4ebRvJtlEcZgH9CIZR6yDQpzKxW4bbAb4KLxsumfkYkAcqBNfMxAB&amp;#43;16AEkhlcJgxVbvcqB/7Df2pBH91u7k8sn2pCGfbVH1IbSphOH9UaaWjFHqvr7xzqskgHf82imcXA&amp;#43;oU%0a%0aNLEmk9O3ZBUKFT0He9eSehpvsntYopR0/GJ/AnCjIN8/2N1GKpJShXFQlCtgdOlRUmfCZsJ6za24aHXYl6B4eG&amp;#43;7RnfFsLbKb6YceVm&amp;#43;s8uqZUmYJkBfuVJ1g75fX9pxIDZjUa24zQNaHEnU9FXWIxGMbhLjrYhKesWfBHh8SFe2Efo76htszW4Rlx6/MXGER6xDuE7MBLYI34aYAlUWlwRb7oIek38vbBTkQrUbvUjohvMr1cZ8CCtI7BEcqyms%0a%0ayQpvIWEeHhIlqDYpW4McsB8FzkqqfmwfOiL/GCFLjY4YhvamgpKkTZkZxQBIBd43Wl1p02MdAQ1cqM1KbIZJy0dbPDlnDGKUlpuDmgktTYohEBsAVJYyiIECii/Kd4mgKmJAGVGJu84cEnqV9gFgCSAYgAQjkxizoBcxyQRugadnLCRujMXmT5WroHrToyp7Wm&amp;#43;gZL&amp;#43;3Yn&amp;#43;8fP0o2mreRBxZN7nuPzYofkLiZwEeqGBMZ3k9kHNCpj&amp;#43;A/GukYI88%0a%0axn0yoXHWNGr6fnGyUDMV3jm27w/wJtGmL5JWUeODCi/517MMKYRmbJQfTKW9qmq0xjpXI9yI0bRNiaa2dbAwcS&amp;#43;&amp;#43;CmIAAZAOAAoRVKgZgAaWHv&amp;#43;JJweAz4atii&amp;#43;gCDKx0qjBskikGHCtuqWjWmoYYgOi9aKKaNRvWmTUadOozrbTP6QdGYSBDp9LvSZPLBsu1GeWsXpmDT&amp;#43;6lrNIUmH3umWYmHeMH7yqs8e/oUyjWbT6clJsSmmjrIB3inqDp1Zx%0a%0a2mAXSslYeGKCeRIZxmSUFvfUEZy0uqUmHZUnQZIg3I3AV&amp;#43;YeUNDcghgooEuNnYaQ2RCDz8unVD2HIYYZx8zfsOS6FMDDX2O00dagQsOYc8&amp;#43;CivXB2rD3ku6ux5t/BfaX3on4Xhgwbp1OhWhw95kI0s7MVI03sIOb5H3zPQAdLbGyPVhamyQQGeKPJ4AcGtQKABNADeuehldmbnsiK9mWZ5WjoG1ieR&amp;#43;iN6D&amp;#43;Kjei5ndacx&amp;#43;sJ7tes12y&amp;#43;CctJkC0%0a%0asG0YcY7eCh2volZzr6l6a2CIxrV6YRprim2/poW8lDiDuGy6oaj6YtWoc0RHyXZ6UnFyaLaeUnOweHG4PqTbsD6lVUREa7PVp0AcUvdT0dt2BrWulAYm0IEz4INDjmwCCg5bkWguJ0csfSfFd4NXgMkTBBCuRoS4NonZAkcZYpd4FBoVftW0p3KSCSLGS/MANEb2ZFh9M4ypji&amp;#43;q7bYKZu2pLt4H0laZwBiTBGANgAnNSWcidQjMHqgQUIm8cVpu%0a%0aER3mOkRbQQ1af7MzBHIhvz&amp;#43;9KmW2fwR76n6yY4Z6PckgBv62im7pn5cvTa2MZiaURoD9Qnx62n/gmazfjH9DI&amp;#43;ZxfGyvQt6QmiJkvAKUiH/MxJZQ9ndOQNy5&amp;#43;4Q81P0Uq1f4H5GjsIMaBS0QOQDkaydVytvrA1ZPRVjDrQk7Nneip1QYQmGYDIUbDDZRktSjKQWgHjoT8sKVl2ZzRyNSwousGHEfsbZk5mUfso5mbH6ScxRhsnOGe4Gg4mZEhieL%0a%0aQmw0rRh5pskfguJ08oy4dDRzDzfGSR4lM6V2f4ScMsjWcxadztC9EApWNTYU1VSe1kBGEt9TK1rsOj/QJcEBB7mNnFGalIa&amp;#43;gIM5QxmfmIOcKwZ/ymDqYkAEEA7cSrOSQA4AF&amp;#43;8kQBywKh9YgBQORBwEpbJlxpvZFjNuMWeZTqOdnLoBtm8/upJ5hnaSdYZ2bGPOdo5sh8f3TLrJtxmoJHx1jmkTWJfBj7LaaxhrjmzmjhpgpGjsfqpnjlL5xmLd%0a%0aGqP&amp;#43;Kex6oQ5wrg&amp;#43;lpG5MZoB4jBzucrhsl7qAcIBt1G9GeSexmHIXIex8NGEAb3x4D6BwZEQ6/HWavY87j13CV/TffpkvR8SnwhZm3sefYoyiKuBv7wJkCXDYBK9Dhy472l2/NrraCTDkA9nQ2ccBhZbMVl6Ak/YlPDNhEX0MqMVElMtCys0w2buNNVSRltkXODiyicwT3Rm8KmNNzB&amp;#43;kyKjMUbicu6KOCSKaD2KIiQdjCa47zliEGyIirm5maq5y%0a%0aUBgQY18eIByoFaAc1sOABTzB2JaRDYoeN7eoqorUknWgZdS&amp;#43;tnWWf7p89bKtvc59hmR6f7xuEayEalWtdztEpWfFftpAqEHTjnJWZhp0rcwueah&amp;#43;ySCDpEx/bLqvOZkpzbn0p3A5hHrsYl06RmFCQnJlXQpyeNutHHmsIJpmSm/nxpSrLA&amp;#43;4LFUMuUlXgqMGrBt3Nhy2L4O&amp;#43;Fe4JLBpgXUs1zRBuhqYwbJNfuH4U71HhF9kR5VQejzp&amp;#43;DRtLTsVS%0a%0a7sntKrEJbgbw3uEWBLJuCnYI&amp;#43;xFcQqIlvQdvDAsI7qBmNsrNTsrAXNZl6h1K1VkNdogGk42tilfgHqgWmAeQBgALMaggAqhOABh4S2AOYA7qeVRrrneaR2cw9bpdqiHY&amp;#43;7GGfI5kbmzmfIp7Ynh6d043KmWxubJ6E1&amp;#43;sEF4DecPToKNfXl&amp;#43;6JW5&amp;#43;1Gaob0gQ&amp;#43;wWkllZ/VnYAcA7MUn00qlJ/Wa2wbIhzqHN2egqvimweInC42zlVRappg1O7nap1%0a%0aUnrALe5u/mOQOWWs&amp;#43;mrCYEp1fHQBdUZtUmfJPPpxzSpvoOWuDQ&amp;#43;ukRYGPUIa1p4E8MjlF3&amp;#43;BFhrvO2KSw7J2guJT45Uvl9q6nDDohWpEPpV4zUC0L5l2C8tNyE50FusRJsdaF6zQUEw&amp;#43;2KEwpE5pzGeoMD3jGReacGt7GG6YGwfqDO1X8S4tGsRI8wWaBSBcfdXrHw64&amp;#43;YSD0722AQb8FCMm6wayj&amp;#43;MPxRaaELvHcV1sE4GMCKbAQVoZkhDvHsjM%0a%0aTYSAnUKZtoA0QhIIAlpRvsrYIjEykO6HEs0t0xQEz59oQUdD8peOpgAJvo80xngEB8Rqkx1OozMYpeAFDGXMLw53dhJIp7k4jLaBtWJobn1idOZ1znB6eo5tfmcqcV7CsiRPygob3LUYYW54kJhQX7HSGnyqds6vSiBrk/u4wnUZLlZ0fSl8cf5pUnn&amp;#43;d9p8ibIBejOog65MfFjJn6hwqOYGoWYBft5m2NkgoVZ1mGfacmS1oXDrvc3G0LaSC6k4%0a%0a7cYMgdJZrA9Xm6y9BA7qwyUjewjlR7GdMllKI55eadoZWkaJZFFkZPjALBU5o7GTAW&amp;#43;fNGyD3RhDsaZ3DIRUq5oG&amp;#43;z3EqhoQ/CUSGswD7CAI3RcfSRCaAu9KUiceBLEJvDzZOFktmVi9BH61JklgSEYWfUL8HOJFGhBWAWkbsQS6dvG3nmS8fy&amp;#43;OAB4cHygfIV4CAoAMXmiDB5AbAAj4rwAIwBstrmJ6wL3MI7IV35uVvQR30JXqeLy4/rYkfBej%0a%0alnV&amp;#43;d0hjXnOGf0mg4nhcSzjSxbN&amp;#43;kEZmST13PFZv07J8ZZac3nTse8J6cnnCYF03sKgXUig904fEVvSzi9SwVhq&amp;#43;cLWXoEvUN8BeIsJfIo&amp;#43;CmMNPZE/WWqKmSN4CKdqv3QyrgIBc5pw0PnYP5pYKAcIC&amp;#43;A7fXtoJmgkes0p6hK3bxXDPxRu7t&amp;#43;U09leXzBw61Dk&amp;#43;aeBuoroUOt5eEtb3QPEnfMnBaRBHpSaIDAmPUgG50o6eHB/jugR8npbuAcYS%0a%0aWhXStwLWTbIkcB296nwDs3evRaCRd7xokW6OcemnzmzIFRWftmFudBaQVtaRbmByfG5yrLhj2n5UU6FskHz8Zp&amp;#43;mgLHeaVwl7Lc2nBo&amp;#43;MRBEkjsZqisvBaDLLxPGtc2kFn8&amp;#43;1hEYqKOOzGjLfRgKAIOIbhKUhcFAkYZimwsEcZKFUHVOL5AWF0VG9x8iKPgZdjPeI1cNbB4w22F9royimdQ4gzi/MlSU7DPdMim&amp;#43;mJLky2wB/CIxvw&amp;#43;OzArQKqE5%0a%0a6H7eHfBrYBmCrgAG5KbWwoAeV8W5VvrdOK9ppykbcTjIm1Mc07fgSN8cbGwhabZrMHP1KiFnWmfqeNRgsHU/pZJkz4eGHYxLN0ZyPiaLC1C4e4xrjm&amp;#43;BjeZvjmzlIE50XSNssqFwR1ecxrwHqIlcmWYHrZM2jSC73nsywdum81wHu6R3kasDyFQHiEdAfZlDgIIP3hIZzBELFSkh6ssXAGPeDYzID5GEdgb5uhIDgH2YmvVGmI6np7sAS1Htg6mg%0a%0aaMmIcYq7yw1RwsW89Jn7iVSZDxSod2plMni8dRJ9ABiP2/sMhRiTHKgI0AIZ3qAZgAn3jtBM5ifRa0J&amp;#43;ygMefMPPUyGGfIxxfn13prG8MWIXqHpwkX1&amp;#43;biF7Bat&amp;#43;a0ZUDwp6XsTSW6qDk5QbbGMhdRYydNWGG4OIM7NuZDO9emGwdQBlGmnec6oIKWdbLXZmIw2NGo8kyY0HoICgzH0xN5&amp;#43;4lyv7OJohkHl2bQ&amp;#43;pqn58dnZ7MIVZpNKP04/eZvvO%0a%0aNhYWSOwRMpR1TVccGm8Ny9B9&amp;#43;Z05To&amp;#43;kz6KUn/gWmg1ri8tDlJWwi2F2y7z0qhoOx9oBHTUuSdrdMFePb0&amp;#43;W3cFEZthTLy5&amp;#43;vRIIkFlSgyy&amp;#43;Z7EPkjHRyckEejuDly/INnujS1uH7LdZE3Vb6xA9QA5qVkDtJT6KoxtDAsB8hEj8F2sZXgITlIEQoFhIwm9VVz2eGTqptx1Ut465OhmCupYeoAKAAVR5Og5gHBASBx5BDgASaBrmO0lotkc4O0c/%0a%0afrHOdfF5znm2eYUqjmvxZo56MWpucRFo2mKSq79SYGGfVB8M3AZboK8qGmqwZ23OkreObUKvyX/X3&amp;#43;Z63nWNDE5toXxsojRwmXzEvIhuxmJ6zQ2ZiCKKtcIlfEDDWAEINYUVSEFvehMmw4mn2KzEZ6sG00rUKeO/TEAcOEcq8nCVISSvFm4KYETSIkWwGY3OABdUHkEU&amp;#43;LyoESkVPKZamwAHkB&amp;#43;saRF4pLxCZiaeXmWTHLGpXmAnpV5y&amp;#43;61ecxAy%0a%0abmrrXl8PBJEBN3GaJ6eiwGTCyHjedHZqVnV63Yp&amp;#43;Gmh3waO&amp;#43;haZSZS621bavJQBrE81COi6uDByxLgwCdy8zEui&amp;#43;jBw2rIOpR8tWdTgHAHrEpd6k5IHM3i5q/E&amp;#43;IgkKGfET8WUC7gVctBmsIQI51XBg3CjnrE9Ub1zD4FvzA2R0QRvzPR7IU02zEw5USAagzrB9jHnLDxLAihr&amp;#43;P5NGym1gUuMpToR1MbMwBEnR/H4N8HGAm/xbdO&amp;#43;ROcrHcmL8x%0a%0aHw02zzMkDcXQyi0AAQ&amp;#43;bBGsae6XzLg50m7WZjxm80FOgHZYMWZSCPnBToB32G6APgTqNx9F6sDvSCCFuJghopSpqknwhZc5kGW3Oc5ZhknfqZheiVbteex86Eg/ez35z/c1pUt0&amp;#43;aCDCbQ2K4mXFvtl0t70pb4RsWMaAuAF3emhKafe01SgcZKF9ySrn1VvYATaLL2BgLTwuoFF4tHLQwXwzuEa6LjkjYI55jTOUl4e4DdI0T7cI3sOTAMXQw9yU%0a%0a08WUkqwQFpK1EpQEVI94HO1boi7ZOeOGrdCmUxeV46rzzGzJA0CBDvVfLMeYiJ5Y7pR7ovoHp1nCPVc3jqdgB4AzAAhgA0ARIlQiRikOwBJMn4DLDofRa9BXSX4NXA9QyDDJdSp4yWNiciFzKmwGwgClULbfjgQo2WzRz&amp;#43;qghapgZm8dn5n5YntWsGB4mBcgg6PbpyCxNHuHSvkz4ncHsR7evUCbmQRcDwKtJWAv3ZWHsATG/xvgn53cZFufCGQh%0a%0af4v/Rgpvon8WYETTxGRfne81Y86QHaAHRhyoBaAdL7lAGeKYYTqCN64&amp;#43;8XrMH4lRXmsRarGvVHRuaV28bn1easl&amp;#43;gceQqd89sFFagGu5F6NnDVc5&amp;#43;9wJYXpq2X&amp;#43;SYPcsuGeof7h5KXnbqGhtYG2jp/57o7qwTZGpkG0zFAPFcnj8bnZhTkd2ZFJvdmCJcFFvBVAn3bso5p50oWuXbAq7EXYlCk9r3uJDmIMoRDJ0WQon0O3GcTnhGpmQiSM6N1zH%0a%0aM4gSBR28BBKXA5ivex0mqQ47dcoUlw2tgo7ojMGbawWwQEGL0HFzBx&amp;#43;dtquiLVckXhL1Tf8F/Q35mlNWbcXYafvJxR85UdkSyBPHj05pL6IAGrWDKsYAEZUuqU&amp;#43;gG94cgjiABMU81LGgEsCxWn42EE8FD84QPJigGWdUaUViIXj5c/Fttnvxe5ZgsGvnp4ZqLswECKnYqmdPJ&amp;#43;sMqn3JcN7RLR0uRMV8UU6cyQhYc0SnpBQDcCVchqFie5uvMAFk%0a%0amWACv9RsbbpwvyTBb6HPh26H&amp;#43;B/Jgeu9x5VCxTo7S1i&amp;#43;R54uow4FKtQh6JwrpqEn/tEMaYWAqayGCp7W7pe2EDqwi0cYnhS7MN&amp;#43;GOxQRysakhfh6bY7iDQQYelR3Twoyam5ri4gJdp/zBemkfUU8f9BnK6srOCVquS2AzPEKoB6bpFpsH0WgGJm4fmLfzsAH0WfhpiaXrmyxoElF8WcVeG5kyWGZrwRk&amp;#43;XIxcopq5nOGeh22yX2/T/Ao4nOxv02m%0a%0aXgSZC9BaqG0HVYYXiEpGZTSj6V95K6VnGSRcPilxcd8/1rF5EL6xctDFKLa5p&amp;#43;FUtLvR2locPAUaGMFx9xf6VGsEMNavwQ8IuE4ilqmywbFqdvwTiFfZ3&amp;#43;vDkh/CnsfXjrSbyXbW4aZIGP0ulQPvKHIPPYQQOIu1FW1&amp;#43;O9IWRXADqPuzWXEQaTVglXYYeypujHcqY12qFjch2JhLUakz06yjK1BGHnp1bmTedoDNmRnUcOx3yXtueF0upGCWMtmi%0a%0awmkBVsavv6neyxI35n&amp;#43;odapxkHNGY1Jvn7ImRFV3KWigtaYMW0LlmrlvJq3tTpLOzQFR2&amp;#43;a&amp;#43;hgu1f8tEoj2HEHq9uDUyT2wUWSKkXL0B2lHmzQoCuXgKGB2VloMrSaIrCkZI3W2yuifCn30M7Uyrmg6Aerlujhy0mQQEcf8tcF4gFKgXVAyoT60LiTkwHrx5OhNwAl67dX71LGQG8q&amp;#43;zMG5uNXD5eBl7MHk1YslqMX8lc0VuA7M1YMEppEXyYeZh%0a%0an0H8AgQ/ZS3JfXk6BL1LVf4j9WhyYKF6izFruGCScbcZYvxnNKbGdgqlyGy93dmvCCp1s0xOFMy8MerRARb1xTTGmWZtyqJwk7vYMbaoDi8wEjxvfNo5pxCr2QCe2nmOTCdxlkjHnmkkvmZiun6oDaqEvY1AGCACgB46HwATABZwiNSuABJAE&amp;#43;GpJW5ONVl/57he1CFhTW3xdAhtqyVNeiFyyXYhYKVoo6tNf3S4HogqFzVhbnhpP/JZ&amp;#43;WZ&amp;#43;oxlk%0a%0awmrNeaVx7nhldQe9Rm2wuu5n/YCoNOSXwDSypwe6p6HdBI0BHgrIUdkVuZ/PwNh7fA&amp;#43;Dv5QNLi0235QR9itgikVXp10TNQpeAiq7DWjOu7KXkFeTdBtBTAo3jryoBkAHJVrAFjyEYAZ/0M9fgQ/s1MAFFWJ&amp;#43;fk66RXd1al2sPw6egUVg&amp;#43;Xqtc7xlwLVFYbHO6aAyoRh2YnSRagQOgZxP0SaQAHQBE2x5&amp;#43;XKbnqV/GWWRZpZIr0aUfGoJHjt03owL%0a%0aDtkjx7Cmf1CatMZlWdt8fA1wBXyAYg1v7HBMHd52TACoMwVXv6DgY2WwtGsxOC6lwSNlSz/Wl6/AOjll5Jx6tfwSeB/gr6cjClhI1vmyJbPtmXdKBAbO3k7Qj1IVmscJjJKeYBnOsRujFWAnQWQnQT6hIhnIQuabEFosHMVIEQ5uC3QCi4iCZmZGIVHOzcwOBTuZAMG0Qp&amp;#43;22JkVrofLUOTVcb1LzeMftau4Mrg69JZ4CBIQixGwmlK8ng&amp;#43;6hJCH%0a%0ao9b8BWadiTkOPsslPsHOTM0RfaEmUJmSt5V4ozdWcjfPxd&amp;#43;/tjlJwcYthifZBAQdHhsilKI46CqmAYCO8wjlDMGIsN4miJXJPCeidg5oJWhZf9rHN8GbEGE8qB2gAjAPgTnABBwHYBOgERweOgagAVpz7WixtbFXSXQhuFwYjnFBOOZ2Qm8VeU1k9WaMbPV1YS9OOMQLD0v33rEZhCsQWaXNlVkdfmBPrX8hav5r/KvSnVmz2WAhPPkycavdtGV2%0a%0aBXaCZOyUNSDHW8LUZtT3WJKdmmJnoYPPxwBtO1cp&amp;#43;7ucSbwwfkU2KW69R0YpV460qBMMM3ET15PLzlGHKq7IFqAPQAgfIKyotzd1bCRh2ZEUexVhfn41eUV/FXQddv3H8XHTv4gRhYhjws&amp;#43;ebmylc8sfMNq7GR1tsnrIZ8lyzXV9d7h6sY8SLhqibaQzDaRumGSdd5F6tXwnJ8m2AX&amp;#43;LI5B8PatGY3Z4HlPMyBc5kDOVZKgxKWedfoCDCxWuTvRK%0a%0aX9qMmm4GC5h/oakuOW3oiifeVK41LOaBGyLaeT50oqwSa00ETtrvCbhUgn6YQrEbvQUuUepJzHXaWOja7hU7L/0PmX1WSGsWbAVQXSpC4hGuMCi8l127EL18zB6flWBPfMKOoswNlcAlaQqQhl1/uwsG7wdyggXEyB7/Gfow4kBRkfxXeQC5NKMZbXGyuJQYqNeOrmAMSo7igV&amp;#43;FsA8kvzAcEBMADjirRp6oHjoUQnFaZDklJWiMuo4KLzgxZouh%0a%0aEGPqaRBlfnVNdTVzzno9wUgMus3WFa26QqdU2w6yUHn5fbwxkWApcHh03bXOO10bNGZyZmGYkbLdtkx5Rncj2tgz7KBK3hxgg2XYyQ&amp;#43;yXDEXUQ&amp;#43;&amp;#43;ZJHcMmN93D3Zp6A0/NXcF2wPpzTsC&amp;#43;RPp1gWEOsUuXSuPZyatLemMCy6tQZhydDEoL4ihlOrpDmJfQV13RBoM9B8khzllv1kvDx40WyN/DdIDZVNGDX2mc0NtaYdac/Pr0SZlmwMEw2kqEnK%0a%0acBHDhuid&amp;#43;Mq1NrEH66inwUQkAwKnRF4EBqjjqdiocpU&amp;#43;ywGiJYlfP0ANgBsBrBwBAAQQB4AYgACuzoUe2UwfNsUCOH/YUfFpjpD1YKN49XYDdkS4lWEDcVl0kXpyomAhHaV&amp;#43;20a84nLZYdR62X&amp;#43;CjLVremsZdoW9Gm3CYbV&amp;#43;Nrr6c/IZL1/WX7ghFg&amp;#43;yxW&amp;#43;18w44zrDaGhbZnqMN7V51KwGwuQIHDNxP0UK9mwIfKBBpm88wQB93oGxtdHMjesUn%0a%0ax6IDaMlqA2h9Y/F8k2GqvgNmEaaSA5m&amp;#43;BTF5JIkB4ixuDfcZuKxGdRlqYccXuX14fSv1Ye5zo6mWWMZ54r3ibpRmBX&amp;#43;TZYqs8pOIBcgWbNwbB/hkit1dn9u3W4/4z2yAiUtUivwODGF9Ma63jrOWCxNnNEQQGmIvoBc3OY3boAOABbAQxoOKBKqkZqftfRVLunc/qq1oGX3xbAhurWwZZiF89XFe12ACfZxLzVca/jiqc8VLGsDCeAHaCXMZY9Nh%0a%0aZYQpZqR92Nxi3G&amp;#43;026jbsfNEDAWiGGiSATYalCct4muDafZG7wkWTOWd&amp;#43;89ChqHLIptWUlemK7NtWplfba2jDeu96wVr26AuV0zzxcloFT/aQvTacMsgXTlA/A7QeOJ/gLlxtcO3DJ2oKuyMVRATjoY3jr2n3oAB574cHFAG3FoVRqMG4Eb9XiARm7FacXwP0Xb8GkiunpKSdK&amp;#43;xTXqzdq1kfWsqZWE0/jGzel5gGmPzqWcfXn8tRquBq0qlefVm%0a%0apXaA1mF9k27sdYvPGqBxo5VlgFrIuwl8YkaDYgFkVqcQ0sJsvBazyZkyg2nAIYt8Ygocaui&amp;#43;s8ZtcZRuxXlXBd0DyZfNaSfLVIU2MKNdBl3uEKqLV6Vtm0N5eAUuTz5sQo0yhbGEmgayyV&amp;#43;mwpryzl/K9D/ZAntXHqW1sGyStQ&amp;#43;6jW8veR4A01&amp;#43;4EJQTBECmnhDkAYaG76xhdz7OzRlXnOJMNUlDFChcKLeOrYAzdQrNjpoUEXpZU4pPw0bcVbJP%0a%0aEClZYuqlX5dJY43PAcMReLZEk2wxc&amp;#43;poo36tbU1xrXbfjUgFSVMsCJdNRKdUyN&amp;#43;7rquzYOQDbnaqa25gbXMHrSl39Xl8a5G9VnRtuYLEcLkcfjRsia00bSC2OAeqe3FOD9xPSGsc0HfyGQc2EQm1TXBnfB4ikpoW7orirunaHhOwVXiT4Wb2XroumoeUG9J9&amp;#43;Yceu2EqhqPGK0Sf3QPhF46&amp;#43;IATmWll/QAFTLQuyQBpiJTzKs5M5Gy1kqq&amp;#43;n29IZ%0a%0a1KNUb6hEXse6Yhh&amp;#43;XbSTYHp003&amp;#43;gY7ZuaVn4CNlz4tgEr0159tLq0n&amp;#43;DK3VjLdNhBK&amp;#43;zfsJ/K2I/ns13P9iLcDRjHWR0iTEHINYzpN0HqJsHp4tubXoLC9IxKI9sEB5oa3vfkNdafQnGLHsBbNhUAIEprlAUQr5tW0DhZNpDLjdBdcpt3HfSXx4GGCS2t460tYpIEGEowAhgHqpczZM9NToURXWWBKqqKcZFfhR5DlYQYNNxRWjTaPl4fWLrcuZ0%0a%0ao2yH0BVX0ZCzPuZ0yb8tTkrYkJRGeM1mNLTNYKbHs3&amp;#43;tfwNu7mzewrViQc6aNNW8FzqhtqF363vsZaGjo3W4eWu8UmaFqv4Ce53vksIq27UutA1yagp32i53qIbQo7Wu87YtMfLW7V4NEmRrywoogVHNLTmJK55j5FlCpzbUFgevXYgjUa0KibhdGVSw3i5VyFBSFdJHbAHPos&amp;#43;GwXYziVZcl9UnVdDZBTBDl9DVIEh2dcWLlIuD0w8ZiKKiO3QG%0a%0auxsPVKbRLADpqmw5fVl7Gs7Wnm9aCXsTeBd9sIVoQWaZymVoy1vuh0tWng/6TyRkvWZ7qnl656aTmzpeigAJkNARoAjApYDdihjGHqgYpbB5RKq4mKtQELfP1AT9x/bAfXz9wTV5E64keL&amp;#43;9tm0QbwrF4pFnzayNvzi7nlWiJcuuK7N6xZGjeXJ7pW33uQeinWfzW8kkDW8yuvkreqoNtsVyG2KUCHYT2QI9Bj1Nz9nC1qeorM0BN0tm9D14lDu0%0a%0axHw5y&amp;#43;4K7s/cKzi0EZkFNcXX/wbRTGuSCU&amp;#43;XRh0GEI9cZ7ZRmh3DjCh5cJP/hGADoBs9heACzZ/2D4V0myNfAntiHzuy3RVRm9KtcgN2C2ata7x3m3V7aopzqstgG/&amp;#43;lrWsCyPwMCWHrd2hQCJ/PlpVkzWfINaZzs1L&amp;#43;dWBxerLefAPWYkJMKDljMQeonLBeNR3Voht6iaU5UAQzndzoVcBOw2RdxskHmIKtA050LKXEvLiPz56Ounmg82k931NB%0a%0a3Q73Cf0f2kn8Fn60M16ABNAO102UzmAAwKbW0Em39hCSY71zPINvXRVopISsoVmO6rAZcH17m2TTfOZ09WkLcgC&amp;#43;iYLQRXvPLRAnzp9R0s70OuEVMWUZZ4x5rIsrftpuqncrbRpwZKdbwowZ4ndNKQFJnXA&amp;#43;rZ1vo6M0dpBhmTY5RNtksT5B2zEmJNwNs0BWKWYzvDgcsElHCVyc1iPsvYt&amp;#43;c3H7YKm6WhcgJSXO6dMBm0pVScQ7dZSA2kiXVISq%0a%0a5UQWCsulsJzt1vap&amp;#43;kfj2WuFyAHaWtkWQKoJNXiYZHsZSBCevi9xuH4N60eSBGYiDYPrBECb3NLweTKRmRWaHwRBqTFcUjIs5o&amp;#43;UCwpCXL3ZAQ8IPHfFSuApdpofBcKVzH0JsHYb5g9L1paN8CDKQT7Dcb15kWcUjjAlcFl&amp;#43;DnWZlzHRihbko&amp;#43;3WjwwNXrOT/NsAHIUFoAw4cVpqjXnHcpm/dWwrayWY63kUchh5XnebpXtolWrrfXtjEHaKeROL%0a%0a2llDJa&amp;#43;xXEM/uZN0/mKjH&amp;#43;gnA3src/VhJ2V8aoW14mfrf&amp;#43;xuAG38htjX2X/&amp;#43;bytuc39uZ2B2jyqDcOMslKOXe4tusW0KslA7qCDJAJXSB2nxXIyA3XmMj3YQy0i4WLUPfFDTT6uWbIHct517LAA9FcgDs69vFd6HGI9Enx63j1oXy28kT0oyn1XFARmUkNFjnKN5p7mCFS6sxvVJ3o&amp;#43;d3iSpKqEspSq6lQwwHaAOYAeAE4pcI7jjSE11GlH/mvc7%0a%0agbf9t9PLoYs/sxFk6bcjYyOnBGtZfRd79SqHbTVso3/LcY5iZEVhzhlo&amp;#43;U0zxa44dm6Ra457CM5bZX13h2/iPx2ppXUno4N7sToFbVnILidbeM0&amp;#43;&amp;#43;2pHYFdA4wqmsz7YC7/oi6ck4c/hCTMnJyj3NfGBHgYKh2bZiMmBKlBDx524QFNSLNeOoqUGjwPbhbAbAAoACup4xBoVXuGpIA&amp;#43;&amp;#43;YvKmF3d8q6GWhnhcBP3OfZ57ZDPJfmVFZ8d0fW/HY0Vg%0a%0aJ2YIavlyFDcYUDhZh2tJTeLYRh0heRlzIXdsalZ90dvJcpdvA3c3eGV&amp;#43;g3nIYSC4q3GDs1t3sGZ3MD6yzTTookdgV2kNoF4AhkfhbyfaYFDaTVeafyxL3qzHCc9zGu7TbAmI2zphAN&amp;#43;Q0fFVrBYSHsgGoFiwyHVKhJoawmQe13HXuVOoEWKgAs9X9g4lmYALxJChSSALFrMQGZOATXitYGxrmJ0VYPwWTXEXf3lmC2gderJtFGELbUV8HXMFsbNg%0a%0ayGDieLeah7UDfxO5ox4qRJd4tXtsG&amp;#43;dCzW16Y&amp;#43;t7631gedpsAWj8b5VgAW2frC6/o2Epcdu5elLubqIRB7Bokp1ui25ybItzxa6atotr97MeVM98AXoNeBZwV2CBldtr4xDNBmMCVJ8YjDymTSLpwZpiVwXdH7mK3jIBWAIvCCQ7eqx2ARvFWtkHoaHNBgNXsYhzr3zH31DCkcIaIUH3DeMUNk1sCqc7/ENehX1YyExXEuFtKpZIUE807TmcSkGH%0a%0aNUfb1witwEjRX8fePpIuQuiRdo&amp;#43;nPsc/1T2aCBxal5YLAmAjfEKiYsHVLcdtcjOUFWCWcR/IYAAfKMC5MA5AGIIsFV85EZUJIAHHq2cndWp7ek2pSb5&amp;#43;cNNsh3gdbbq6K26zYa1hs36BwTXLD0OoIkgZIW0Da6gX9qqsXTdtMWuOf/YidmoAapdhW30pa51l92v5Zye7Mr2lbEQ3xlPIrSd5kDZ/RBx1sGrPYvpl72qdfJ10KaBVb31wM2H7bvKc%0a%0a9N0flZkZby&amp;#43;LSiI9ZMN3iUhXpiDhEV3E6ddtRQsDVI&amp;#43;CkFE6SNSpwr1Bz3ifgC5OLBD3Pnk9rI4LmXsCxaurg9yPEIIbHN9X&amp;#43;r2V1c7UrFtJA919qDjxnnweoFuuAFEojXVvEAjDK16eDmSnPmktfnWp12OKkwADigCkuD5aeDbnpYDfGKXUkRwakx29ZvFo48CvpiaQXt1ZZZZjJXT7oo5mA3t3cQttkT7pvitgNKDiYw3Ug59A3J0yyRl9XYd6%0a%0aW3OHfO9e924nZytk72kafu5k7GSDdVjaxm9bfb&amp;#43;2wqqDvV0LLr3e1FVgPQFKzBy/&amp;#43;ALYtMxbLcJcUzprUNAQlhEeqSLp3YJGsI2UDzp/5tJoLJIeFpUmxxOdnJZEk0oqSCAwdyu/onIcKbpnYBb4iMAYgB/y3ygVIUCktm5PoBXxq&amp;#43;ek06sDSnof8E9nL7Mis3SHfY90inOPcodzF217ZodjOH6HZM68Tg7zcYpwatXDtaA8T20WKh2BqYy4ZMSp%0a%0ahH4apygrl3&amp;#43;lZkJPeToXKt56kH6XY3p/pWGle&amp;#43;9ptW57lomm1kgVaDCGOSt1RJxz2QyadQtW9MfHHvRoGs&amp;#43;sEhfEGV/7dzw8iDvsSCu0GJIrT9Y/Hx/uCFvCe1CHvlxTrBsAitkVdhcVHeoFARqsW2KE/4se3a9gRN5fHoAKoBOgBZWOjwien1QDHUtgF1IHu92gFmJ3/bStZEeFpJYTrL9iK2N3qitsbndZZFgiGWrrS2AUhGtNuztRyAgUzk0s%0a%0at4ZyMQU11nO/Y8lo5oPtJsDa4mp2c5N87HpvoCmkAXXuaYNmTRiHUHN7VV4Zkk526l/mnGm&amp;#43;JoptL7DUNkfOwfdDrilVwDc3yyXzGCjSXXCCZsWyKFNaBZkSC1p2CBnWZnktb55iAB&amp;#43;wH8gavozyv8gLkKT4otQXVB/odd4QkRWziBzKe3ftZIBKVR3HcrNzx2lNe8d&amp;#43;b3CVfBl9TWAnaayxv3TcGbUJTy6Ywbio7gCaFHQq926VbCPWgM6ypXpo%0a%0a73H3eiU&amp;#43;VmOTb03Jo3RsopNL7GuVZq8hcmQNomOJRntbJvIZ557VR5uZ3aDGbv5x2DHYNSdqFzNgZaVoz3vOukUv/m&amp;#43;wpAV/rVCxe5drZboPtcZf5yS4GAAlnW1GZLgZrx5/E8J8YgihYn8LIKggLgVIFmqkfQKFCW3YwDNuf2viceWATsGcos8wES1t0LcZWR0n0&amp;#43;4W9wp9HimGD9R8QMkW8xvC1BEG2kkevtNgYij9C5GHI19o3mzOHaKNbvyo%0a%0a9hfZB7Fpg8l9ItV7tVOkWBxLFIOnLSpGDM14C80I/mC4VX6c1zJ8BmmnMoIuT6jcxRWZceWYO2p&amp;#43;qHEaqSx7srvYS9ULF8VX3ZczjR5oOjzxlK0Zca8sey0AKGEPF3VTBnteI90UAIJ9RsBfwoqaCLtkeZ/DJ&amp;#43;SO6wQOnV5aiC8LHrqIxU6Kcna5IJKqmHaRpFoUJUoil0JAqChL&amp;#43;5oBG55ZVksymMkVUHNyiuuPT67xZ8mN1yZxhZ8FCL8EBPZq%0a%0adpLqweFt3L5y0Ecrk6KqjUakDw/5zWaRGwhkIWq1RrRm12sPCN/hZ4mhQPCPbtad1IwwoaMw0BDgquZcqA9qo7M7rAHktbOMq8p6FVrUe8ohzDdvx6I3aPV863Ffe49jBa1duW9nFHD3clgg4JTrETFzb2OyFs0EsHiA/pV/ZA/diItzazGRtIttwn4k1sM12WKhZi54aHza0UwQoOcg&amp;#43;AKji3YcZ5drB6GnY4OxdTgKCCwLkja0Y4KLcoQTfD4M%0a%0aChmuLylUh7F8BchIFgKZmkCSwcEGyQlekKIKG7MAudwlXW4RARHHjSIyDHK3mZxGHx89E2puebp9ElNjPpmXDCdL4xeOsIAeHBmWBB9V24PvL/YbAawfX8gDgA2AEq&amp;#43;JVGxfZ5sDVw/RaFIZj2VOsDiAHW2ParN8h2QddtDsHX7Q4KO5b2mMJx&amp;#43;lmlAjaCixF7n1ufbWjIIhN29qJ39vcZiI&amp;#43;2AFZrCsb6AkWYDqoWr7aTUAsqPJtZzNVnIw7KDu%0a%0agP12aA1&amp;#43;LqPsZkypAyUw43JxUEo6OIls4Qno1AzctT/C0cNn3ZwCZGbe8ZiKIoEfupsC1oVeSzwKKmBImJnFcdkF4R2RF/qriN2npW4P4RzvXloX7V&amp;#43;eU1C/y1Xym&amp;#43;NgiQMGJKKUHg4Vm/nP4ICyzr5bcxzOykl0unKudVD9ABECC2AIp5/IEhAVih5or6AbHpm72p2eqEjQ8rQwrp0VWx/BAPTJaQDnJWUA9ox8fXedT60ET9ieV&amp;#43;i3OG&amp;#43;u12yd%0a%0a5aQlOjSqBKDfYQuhhG&amp;#43;lZlJ1lWw0dDDuNGA0aQl5zW/7JZV&amp;#43;7Kt2Zlmy33vaaFV7v7Pee6CYsXXCarYBA9eg5s9oDIhDgmRKPnvCw7NdCD452t1iDYr30vwInhthzMjfDblhCGZuDxn8EzvapSMCbrgm7x84ebqb53oLHzV9FppEZIPGV04Q93ovNiuIFoKOuZcV3To8bgh7GHKE2hnkR7DNArm1CxClyRxpJI4&amp;#43;BQEykebH0mVeAWq68pMXFDN8%0a%0aFqtRIFlxP2vVZeHWyAoRQdeaGkVwTgAFAh7gXiADoASlHnD0pbFw7m/LoZWbaRe/rns/tI5&amp;#43;TbzA7gtih3dw7gNyk2LTcWx6HWMYJFG3SKT7OawYyyDCb6jIS7cDZk96l2Qg5HfctWgpYc2sDXnBMc2/&amp;#43;7LCo&amp;#43;9j93Ojtyet928g&amp;#43;s9wD3QN0jWJpDgTLPuJNDTZAkhbomEzkxUZzlz3FfIj1RT8MtkQgn7eI4tVfo&amp;#43;SGqphARHapUxNrANjTIjf%0a%0aRZIffdI2KM7DlT1w6C0GuJkABoxQYxcEAw39aGmdoA1&amp;#43;paAAHA5tCtBb91n/nfiSFV/XcVpjARlw434v1A&amp;#43;9ZId6b3K/c1p9lnVedPlibm0A/AdASOqkiM&amp;#43;QiLk3d2hMKUbokid693eyah2EUO3rasq033rU20Kmf1fZfM0gcVd9b6Omq3K3dTDpCoxkQhlSjj6rXWS&amp;#43;Zkxwwq9soC6Iks5NOD0tAMgFshzeOE9eGE5aoxU&amp;#43;FJqsVwQVM2moHjoJ%0a%0aRB8oBz2KtYoABF&amp;#43;X9kskB5AILF8Wp2AfGhbLS0pBKSqhTeAbQAoNmnxHdoqlUaAOVtS9DSBc6x/wRJal4BfthyiDkhOYwtD7BG&amp;#43;6cjdov7o3dr96h2yjdUJ50PL4Mv9cxJVa3uIpy4J7BT2mWygQFDFDr7ymA9LM4dKfuk9ygPZPdrgbQBFXuDaWsoouk2ARIBFK35oXlAbiK2GNOOqykBxAKYKcS/AJIBB49hYTCgZUKnYJyj8Ayw/GYpzURCow%0a%0aCA4gBlkZEgGExqwVjBl487bOFJJTXGojiAt46yKzpAIyg3SNOP6mNWGzctY5jPjh0dd9qWq&amp;#43;kE044/KJWg85rXgDnNc47kVT7U3vRLAEvBl48&amp;#43;RO&amp;#43;YvqDa6SjBv44UrTOPBuJLwWBOM45xiLOOH&amp;#43;AjAYOihNnRcEtREE/TjgvQUE8G4nVSo45MxkCiV/pwTtXg8E4u&amp;#43;nOHmMEFgJGU/vG&amp;#43;YDa4DPyQTihPhxh8ozYBtIHxoUngWxUluLDsmE44el%0a%0ahOHlwYgfAND/EbsjePvTl4T&amp;#43;BOqE92SOyAMZUkRz1R5MLH8cyA1aFuCax1oE82AViBzRQSKbg4HMB2oKOP/gpw2HzlidxUgROOjMWCFbKTikyjj2ZtAKQQuEZM8zCMTjorJUlC7PiAN0kAT9In/hFXYcspbE6jjiixDZFpxT92B7jfjldgP4&amp;#43;PGVqhnIDdpdRji4VBYeYhEgC8xwYwXhGYquDBaYGlBT2zQ5zeMeYg4gDRtohBWfCwCVqhIwEHj/%0a%0asQ/3CAjXS7oxDTjgdNz3F3j5dJjMGp5BZ5xdXK6QvBl4/HwV&amp;#43;AcANWo3RAo4/KZltGMoV/d2/Z0k51ijcS96BOTDyjkwEHj1sq3AVfR1K5EgGwnFZiNih1xPMx&amp;#43;IDzjpQzbMUPgZkNDcdN2fVllk&amp;#43;J5tZO9WQ2T1ZPE7xWTrZPMb1gga&amp;#43;AO4EgFFgKvqFAwEaBc46GCtc6sBLUgHCAMoHAAFCBPgDrMpkA/IG4AbKBoAHuATIAiPa9IVYAGACpg7%0a%0aJwGqzhAHAggU4hAiAB&amp;#43;l0oKx6BY6wyAJkBObdRAUFORABCQSFPAHGUk1VQ4U/BT7IBEU8QQ&amp;#43;LzUU4RT6sB9AGhT8kVsU4hT3FP8U51ln5OwU5xTjIAGjJoJQlP0U9xT3VAiORpT8eDcU/4E7IBrUBtAOkAKlTJT&amp;#43;FOiU4yAFlOoADTGowBnZi5TtFOmU4yAO2JelPE1x4A2YEXIMMUwmEZTxFPnk7QeJjTgQBtiEIA6lnlT3FOWwDxAZVO2AFVT3%0a%0aABfsApAFVPYU/JTnlP9AB1TigBcls&amp;#43;KC6BYU&amp;#43;YAE1KoQGeubbQz4CrCAiRhZDm2/PBOQDtT&amp;#43;kA9lF5msiBS9u9y8e0fk7/GgwBXk7jAAgBQxT&amp;#43;ANwtzEkooDVPKU8lW8FDYU&amp;#43;xAEgABU6FTwoBikiTT6sA3QnOUVNPE0&amp;#43;nhNgB&amp;#43;0C1T3ABNAGCAe5Q009FWb7BUOZI/J2039twAAAAKMCnicHHgBtPqAGrofAMAAEoOQGHDjSJIoFjQLAx0QDrT3%0a%0aZgw/H&amp;#43;AQdPm08Lo9tPo05NT7IASU9xJ&amp;#43;4pEwGTxYzxhw9dATxHw0BDTj4AsgELT4tPuADbjyqgIpCv8zdOSOkqoMSpPk7QALdOVQFzkWcAuoC3T6NOxFYQAcd3Y/rEqfcQ804QAAtOi0&amp;#43;sMT4Bx3Y3yp4amKVzcNABvsD/edpq8QA5AfpdAQAMAS1OuoDfl5gRuLmEJxgABaihARAxwAC4ETSwO8GAAdKAQAHSgIAA==">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQAWGjoghH0EDihmbgBtcDBQMBKIEm4IIQArAEVMAAkATiqAOX0ATQApABF6gBUORoBmACFGRtSSyFhECoAzQIRPKn5S

zG5nHgBWADZVyBgN&amp;#43;KH9iAoSdW4eE8LISQRCZWluAEYbqYhrZWDuAAZT5hQUhsADWCAAwmx8GxSBUAMQvBCIxGTUqaXDYEHKYFCDjESHQ2ESIHWZhwXCBbKoyBzQj4fAAZVgPwkgg81IggOBYIA6hdJFcAUDQQgmTAWeg2eVTjinhxwrk0C9Tmxydg1Iclb9/rcINjhHAAJLERWoPIAXVOC1wmWN3A4Qnpp0IeKwFVwvw5OLx8uYpodTt1YSW3CG

xx2SSGvxeyt1jBY7C4aAAHKd46xOC1OGJXsNGjsXo0eL93qVCMxuukoCG0HMCGFTpphHiAKLBTLZU0W05CODEXDV4ivcO/HgvLYTielyBEDgg&amp;#43;2O/CnaGYmuoOv4Bu6uBsF05fK3MAFKYlHUnsC/Q&amp;#43;Ww/Hk98Q9gZwvK/7I8Pt6vx9DF839&amp;#43;NT/OMmP4nreUzXABLw8MBUygSU4EPk&amp;#43;34nteIEPjw97nohV63ChpRwIEfoiOEB4nr82gvNqlHai8

SSNNGLwFhhUxkUMLzJo0RZhjsQw8PEWw0TsWyvixOyNMmbyNEkybJqJ8S/FsTGntoQxDFsyaqUkvG/EkanoTRwnaNc&amp;#43;aqTsjFJJGRZJAZvzJjwolqdpWxDNxmk7IpF44QChD6I6A4IAACgRzBEdwG5bh8&amp;#43;ChFAkL6PoaiDv5u5UmgAb4IUAC&amp;#43;qzFGWQ4SDsACq3SSNgjQABoALKYAA&amp;#43;oFbBbAAjlAHCkFULZsByMziOgCwIEs5ArLq6xoJsTmnJq

qDOPE/66ucxCXGgPGnPcjzPGg5mnF8EpnqUXIigSMLwsiSJII2GJYt6&amp;#43;JQgdxLkBwZIUlkUAcrS9JihKnJQtKQbCry/KCt93KisyXUfeyMrCHKCqvCqaoaq82qnPqvbGl2uE0uQtq5agqXOq6Q3oLgLxes2xC&amp;#43;v6i4Ar1WM8EkbE8MmtHTgwTAZkmqD6XGLOJlmHA5mggmNC88TxLTzoVlWa5hQgjYk22GSPajPZ9n5WNC85o7jhO6lCbqs7zilF

O62wq5Y1Lpw7nuXa/ue23MdBJSwV&amp;#43;n5JPbb6YdOJSNK7jtPp&amp;#43;Qve&amp;#43;&amp;#43;n52QH55WQ&amp;#43;qkhyeewPppkdTBRzsu8hr6Ox&amp;#43;MdIVMaNuyebHO5eyfW3eYfnhHBeoee9OfjxcdwdNJfPshnnbkFRFW6R5FUZRNF0TGjEGRJClhjw&amp;#43;biSP8QGdchYlvEBZuQp7FFhPDPxLx/Fhj3UbR&amp;#43;3w/DCLHEz&amp;#43;O4maRPHFbCvgtSUMyZTb8dfMcpvwz1s&amp;#43;Z2dqcnJtGJ9

j4JYZTWJqlLxFscK&amp;#43;8lBIRhUhPbUjQJyQS0kWEWHsyI0W2AxHiYkGYKUFv3aMdkP46R2NpdC7Fx6HnziUNGnJvK&amp;#43;WrIFBUIVaz1mlrrKKMU4oyCWIlPcC56QZSyrqcoEh6g1HqsoOYnRfj1HoJgfQvx7idBcJILY7R9AdXgCDHqfVKAcnxpsJIJCPjjWcFsW2Zw/poHQktB4TwnpKh1h8TaXUTG7TBPtIk6AETHRRKdTESM8SuIqCSO65JKRPStH

SRkwMKhSiHEKQGfI5oCnMbEkUb0QbROJn4SQZNoa6lVBiOGWoTFIyNCafIFDrSY24UufheN3Q8AyT6KGBtAwfGDKremMkGanzTFzTg3B9GlHTNzbMXVxz5hoipY4YtKzBEHKFRhMtcTEDlh2fcaBuy6l7P2OZSoRxjgnAQmey4XT62xobCKxswSmwWduJKayzSF2Yp&amp;#43;Mh5CU4IVjJhKCZcYLhwAknTObzzx3ymIBGuYBCwQX&amp;#43;a8x5cEPknifFsbC

ALm50IIiRe&amp;#43;FFO7RlovRPupCO6WQ4pJQ&amp;#43;IspJwqUmxbSDMoyNCmigmS7kkHq1&amp;#43;NxCc9NdjmVGvi2&amp;#43;MZWKqWGFfGeJZUykKbq0qhkUaEt0CPMzcTCIosIMGwhKdyqm8MKNlSAAj0BXwAPJCH8hQGAWTlD1CSEIOwWRkwADF6jrFOJ1eYixljaI2GOAZBwNimVOLNeavBFJSCsatXgwLPgcG&amp;#43;I45JLirpuIgB4o6HJ0Q&amp;#43;Iuv4m6pJgmPWeuE1JUTPo

xIBiKeJfqA3OKBuKNJeaMmQz9Dkj4eT1SwHhkUnEJTFa6gqQgO0zTqkfBdMQN0EhcBDAaaTJpZyWk7SplcNiFEaIeuZgmPp5iTFDMzCMq4Ml&amp;#43;KaRjNMiW1y5WLNbO2BWZSlbbLXGrAh&amp;#43;zdhqTsaUPWVTlyXMljcj4FtOzoodg&amp;#43;W2p4wW&amp;#43;2/X&amp;#43;9y4K/3kpKA3ZF5c7zPLBVveFXyIM/PPAnBCiLvlfqQ0B0FaHs7xw9o&amp;#43;CiYKd3vPg9CyD8cf34ah

WALOjsRWYXHGCuj8KGKEdA/h8DpHEM5zvSCjOnH0M5yY1MVDCGBPx2BWBl51HAV3go28QjEnwUkeo2KvC0riLrPxZizu3dcWQX7s/IYSQ3K/3iDJbiEYJ7jhsnPbuK8didInipIYdFtRGc0jPTSQmLyGXMupNydkKK7Ak2RYsklVLoR0ipGyQX&amp;#43;4r2FtAnSbEprGLTu3XudF8xv3C&amp;#43;OIz1lnLiVQQyozQrEHWQooJGmq8CxqV5Txnzo5iUFlpYLW

&amp;#43;VKGbWXfkkaezkItFnkhPPRClb1qXQWffT&amp;#43;KVKBaJVJMzM92IGQizTbU2x94MWS4trz1mYzHFpVGdSBnnIIOGOxIhtlhKqYEBKvytDCIyoYQe5hgJWHxQ4aq7t6qSiarKFjCA19GgAC0KCYDmJoPocwkj&amp;#43;UIPUfQmAV4ACUABqsIHVqKdVTfqrrhqFiExAQx&amp;#43;YfVmN4OSwNK0bGoAUhtcNW0o0QhjYdTxJ1dRJvOiTVN6BAn3RCVm16kTWSVtp0W

xJvBac5v52DXUsosljpJ/Wgp7MEa6mKSjU97aMadqxjjGp/b8afBSODJZ2Tu2UzXGZhmkY3KhtXWzZDHxrc8z5uzCMCkV7Dd3bMl9j2PhNiWSsk96yKFbJVsOdW16HMQt1icx9RsTayvCnhO5bcuNPIA9hx2FHlM0cDg&amp;#43;HYYLi7cbBYp&amp;#43;mhH89TFpoR7zYA9FguLJ&amp;#43;fiNe2MKSRfxiA&amp;#43;FUUaYeelrF2Ke7rcZR3LFune4Te3mxcb0kIzFhphxUvP

mVJOR0lRemBZRyIOUt17FGC3j014kcybt995ySFU5Zrs/Qslm3Xo1SJYYyV25UZlfItbKtfHHPC7onKE&amp;#43;UlQFdTcf5X3sVVile2IE4WSnHTShKEyg1X4V&amp;#43;ygCGD6ER0aENBaF1UeEIHKiqnoA4DmDmB5EkBqBaFUVmAkA0RdVOB0QYlg09WxxZUJwSVeFx2WmsQ3SpwjT&amp;#43;Fp3ZzjSOi8WZzOl8UukJACVui50zTCV53LVzQl1aR&amp;#43;gQCF3&amp;#43;mkMBjF

0lAF0lwhmlxrSVBhnyUbUKURhbRVwDytHVy7XANxh13dC2BHSN1MKDCnTQBXk0jPnkit16Rt3nXt3XSVG600gvwG34XFg933Xj0gB9yPXlg/UMM2WVh2XZj2U1mOCmmOTnGjwuVjwe2CNb0T0/Rw1PGgzTwQjwykyz3dirj/Twy9nyJKPfCAkqPhXqzAGDlqJBXqOLyaJKCMSDhE34xyKdjQg42kxhQvD9i6IGLIxKDwwIzaLACoJKHiEIwozmKm

JHxPAqNEx6LSxzkzxk1wz9io3NEu1b3UyTwpW7yHz72wUHxxWH37zsn/n3nQjPgLFpjP0MnEj4nYgjBZTVjkhmNC2fhpmc2GGogOReMLHphc20jeAUl4mLDX0flYgFWGAjBniP3qzIhWychFivQ4mLGvgITK1IWEnywkkjAomHi1jpk6y8y2EjFuJchpg9Qa3zD4jPmMT0WOA5nbhZWkhFkgnEjchkhskZJeQoVYC/xu1/3SP/xnEAOVTey4Q&amp;#43;0g

L4V7V&amp;#43;3iD6CSAoFKmcE6HoAAGlNBnB8pGAhB4hDQRgagRhQldRHUSDnVMdyCNhKCxovUSdfVhc7JLEydXgScHF2CC1o1BCJB41jpE0&amp;#43;CU16c00gkHoqQxCIkJDxcvoFDC0icS0ZClDQZEzSgpdrDZdYYdCFdm0DQDCzRyljDNdzkyxalB0dgrCx0tdWk7CCzHi5IiM7dXDuBccPDeZRlh5RIaZwF3cEAYizZmdZZj0IiSyz1g9dlQ94jn5S8IAH1

jcY8rk/9zYsjNMxihjU81j08/YwUM8YN9yli8NNga96isNdy0IZjHxVjyEDi287sO9YIkFTirjzitM3ze88Vt4bIct2VkxasaS19ezRxjFH5jJKUaSJ4gF6YRZoSwshZ&amp;#43;5TIhZjEuJIt&amp;#43;IzN38W8xTqEf9281yntoolVgDQDydUpPsigYCKhIRwRSB5JfgWhOghAQQhBDQAcGRSZlEhyiD1E7StEHTscwxnSaDcc3TQwTEmDg1hLdRfS0AnEZDOD

gyeDvcwy2cIyOdhCM0Yz21s0&amp;#43;dlCpCdoZC5Ckl/Sy13p0kDdq1TRcztDxpMU9CizSlIiPgO0TD6zKzzDB14hayNCbCGyL0iwHMeIHMeMF1WYrgV1XCHdRkV5bI0FRZ/CZkhzPcMjQjllxz7kNkPgg8YjL0NYtYWVQ0lz/L71n0gjpTMjLZsi9ydzuifZMN&amp;#43;jijmMAItjBjZ9Hw9jtjJMAIairykMLzIJCNGTKNCNBqurBjWzmMmruqwARqjE88g4

wUJiZr2qg4ijZrK9rhCM8N0IFM/ZFj&amp;#43;q7x6ihqpi79zw&amp;#43;r6q0JK9Dr7yP9Hzgo0VNyMUvy9N&amp;#43;9QEATb4JxjMssDtuV4he50IV8HNbIvr&amp;#43;5Iw9ESxRxIsxkaY4sZ49sowAaeIV5QMkFdhtZALusF89s0btAvr0IxIAbxsWUXjRwpo9FpJsad42IdhhTrJ0Ir4aJtQHNJJbJRJrJLIVITN8xoEaSQtDIGJssgrthrhBJFsKJaU&amp;#43;Ix9b1obNttg5IWb

l4mbfj19GJtgSx6YWUXNxbJtnNpJdhZIbJRbIEhZe4aTTJ9t5zOtRw556Y&amp;#43;akTIxsLRidprspUCKpTlxZTSL3twDKLvttUIAQQeR0JwR6h/J9BcAeB8B2LkxugAAZeqeIAAQX0Hjt4vR00QGg&amp;#43;AoIAV1HxyoNMXoPMQXKkvJymsgDktQAUsBiUu4KZ1UuTXUsDM0vTWjKtNcr0vjIMszIEGMpTNF30ozPzQ&amp;#43;GzJly0IbXssVw&amp;#43;GV2csnLVxtA1xS

M8oHQJmTF8vJgnQEEbLnkArHG4h6UXTZk7Ois8NQEEj3mgXgl7QCJSoqsPQyvCKysD2iIvTiK1l4lxxKo8pnHKsIrfQ3M72T1yLqpdrE3aKA1Wq3M2DyKOrAlasYwAlzzOrYyfA2sGIsXeSKIfKOOyNfMuO/OWJOIIbeonlEhZS3QYmFkAudwltpWfnzFok0mGDHBArM34goY4mizon70gmcOMXnivh4gnGdtFLdvwqfP/oAOexIvYRAN9ooqVOg

JVIqGIH0C2GIF1XEUwDEh4AQCMHaBaBGGUFvmYHnFR2IO6n4uzrWEdN4hEomgLDoL9W609OYKVELqrprr2g0q4MZ1DKbqWU4M520o7tKBejjIspUKTN&amp;#43;mLpFzMvTMstUMyRzInvlwcqV30LnuyvCbLOXq1SrIJgmAN0aT8p/s5EbIslQSciZmtw7MPtZhitzAnwZnEiZnLGSuHNfTRDHKfrbRytftVnftloDW/orN/rSPXG6cgHfSysGIo3Qa3Io

yfDBXmpGOavEwgjaq3KjAgnWdmpcwgmQbgZKFcfeWObupbwetbjwYHx03fJ/PvmuHMijC7kAvzF1vbkjBnmcgohXm1vMlVsjFshjHAojGM3Ug60m3Mk0h3gIXMkPkkji2jD4nZOK1q1Ea8nFPdskc9qIpezkbIrVSUa&amp;#43;2ookHoFIH8iqh2Hqh4DgGTvjt1IQE6GUCeCqiGHygxAzttIxwEsGg2FogDXGnJOcfdIDTLu4E8ep0jTMrrv8e8VZyCd8

ZCfbp50iYrUMr7riSJxJ1LUSeiazLUNSdyTzKnsLORmydLMXvcvGbKEKc&amp;#43;H8g3vyYqbXFS1UiPncPbLQBcKPqaZnP4m4h20HK6a9x6d90yv6dKFyrftnJ7kCySNOXKZXFXLxYAequevAe3JtgPIghzYQm2eAYaIQamMrzPKWIvImq3LHCQZr0wwuZU3utwYzZ820yojOMeYpXs2swodMm0hRMWz/I/mX0gjeAcxeNpi1jDHYiM0FOvvvmMxCr4nk

gYnYhom8zIgnbePnmMj/LizplxOfhngIQocxaDHEdu0eq6hHIVRkaAMJYUcXH9rJfQGcF&amp;#43;HjuIBqF1TmCgGcCGAAHF/J6oahdS4BMAWxKp2oLG&amp;#43;LeWbHIAdEcUHHWIA1xLzEwqJWFp50vGODfHlKG60Q1KlWW7oAtLVXYz9XNXOR&amp;#43;64ndW0yh6knR6jXx6TW7Km1HKLXI30ZrXyyt67WvKCYagnXlyArVZYX3UxwfWIrUOGnhluzIqgrxtaVg3Ur

Kr0q/cJycnIBo2hnY2UX&amp;#43;IE3nXk3lP1z02gHM2FmQNYGrqkNc2S2AI&amp;#43;MwH1j5rbqHPHZMHMI7yXO0JTzJiTmGjlnLrPOBq/lVnSipi5NK3C3/0K4IuzOg5nONmSgWj62EulMg4oHC3c53wYv1jFN4vZqkL3xWMbPfP6j7OUu2MfOrOWr3xkvZqYG/xAN1rm8wHDj29jiW3Xrri4saYP4VtHJA2Xjh4pI4WF3hZdg8725WJhZaIpaYwZ1LN8U7Jnj

xxh4ppALH5hTBaGJtgEW6JpJetVaKJr4wxGsoT0IV58tTt95Kth4HiGJrIoseI/m&amp;#43;zoE&amp;#43;zQSWUL6JwAb2JjMdJNvCwOGh23Je2xJRwB26bIacUWHfvVb146JaIDltgF9aD8VuszMhTjEZIzMLc180f2UXMiELIIFJshUPMF8HJrhH4T4lvBUpJ/NMKQKp4GZ5JNJWJwEHN&amp;#43;49vgWP4hZBJzJeHQfzJtI6bn4CFoKtMZIosd91IaVd5&amp;#43;4r58Tow6a

jNIIeI4TAKP5Dl&amp;#43;sDabNT3xVsWJHL2pGZTb25T5GFS/aSWqKVGJB/JEchBSpooRhdTMAw7dVugYAk7mBSoGQcwoPM6yD&amp;#43;XhpaJ51xpVJ50UPUAzmPh0PYjWCadZWcP66AnFW/FlWSPucyO6ODWtXkzqPB7u7h6q11CbK0n8yMmZ6smOOIA3LuOe0V7ddcB4dBPSrt61wTMF4RHOYj74ZpO11ZOPGGHr4zalP77Rzw2&amp;#43;nVcBnz1tOr0p5iwbJ9OhO

yrJnr2E8TPYJars2pjf3jzfP6ukMa9LPAuVi7OK8a2zrS2YxlqbyEVlr5qWNG5G22vbnW2u4HmiGW2iw7IwwELiwCx7ui3ImhbX6zCwLMm3brLZH4hI8l2YCDYkpB0hSQN82kGFrAlx6iRJI8FDkqpC4gGRaY3EDWHOhQSQQBaj8NrLSmCrMNvuevV2gbwvb0IpmobE3sRTvYqoLeijMAFAVJY290AyYeHPHWYCYB4cmgP9lUHoCNB6o/kOYAgA0

CBR4ccwbllYxg5Y4Jo5kUNGHz8IfBI&amp;#43;tuUoLH0AH2JpWfpGJnTiI64cU&amp;#43;/BYJhn1EK6VxCUTCjqWhMrswC&amp;#43;dg3uhADHp&amp;#43;VbKk9VjpkycrV9a&amp;#43;zrPtKvU&amp;#43;AMgW&amp;#43;5TNpKGF2DDwh2EnRMK8Fqan0B&amp;#43;7MTdi8znZapb6IbNKr01WTV8tOIeOfjw3nhL9W&amp;#43;i5P&amp;#43;qm3X7qd5mx/FLrvwKJlFi2&amp;#43;/XanUIfABdqhFXAtpm0gZldZqJ1RZoWxGr7NBiI1dL

h0OK5Vd44VQnBi/2bb4N7mhDXhqTQUh6JT4gFIzHDUW4hVhgUJY4OpDipLwdIwwYzEN26xI1Ye2oKSKzX7JCwUSa&amp;#43;KbEZDUGjgfCKAiWjZE15IcbItMMSBPDPg4lVutMW&amp;#43;BGEU5aZwsWWWbAzCR6fCtMvEBzGOCYZklKaRJUVB/lwrf56B92RgRkUiim8fa7Ax9lbwDq/Z2g9UOADwBgDx0kgdITtLqhDqI4WwwiZMLqhGCKCa&amp;#43;1jFQc4B0i44w&amp;#43;

9jGaCmULqx9Q0WHRPqYOT4KsLB6fNupnxsHqtJCrghwTq2cEatXB7g0vsxy8G6EfB7HKfrky44BD7WuAPoKENtbhClQgvcEsTzbI99vWffDgH63PpC86Ic2UfsbwgCqcI2mozToMzyEaweGruIoUm1KHojKqszdrlv1IiEYqhs1DqmW186KZf2Y1ACAMKrankWhs1D0ghA84pdtgvVZrhQmuZPVTOHXEhl10W7aQeUdkb4QfAEYnwdIWtMMDSgjD

epoWBCSSKfASKPw1IeA5dr/x5RtjiEm2aBMLDHDP5niMldLOpGniPwqsOCB4TQKux0DJSAYr2liPvY4ieEeI59p8ABwcAeAmAHkEkDgDlQkgfQeICaX8gtg5g&amp;#43;gKqPgHqBMjSC9pIPqoKkiIdWIorUMG42DTjh4&amp;#43;MrYwXKwTQijwyRHFVhKM7q2CFRI9Iytq3z4JNs&amp;#43;FHJUbWlKBy5y&amp;#43;09UoLPT8F5Nl&amp;#43;BTPjp8HygGieORo9mJJDgFvB4hFo1AC

fV9Zn1wS6kAiaGg6Z7onRLoyfi5SjYeiZy&amp;#43;Q07iTjGY8dDOY/NNhUKWbhjBiUXHOBZ3DgiTzwtXSoQ&amp;#43;HTEpjhiR/d8Os0mFPl2uMwtth/xuI453mUYWmB8XOyLdTIEYbWDCKeLXwJaANMeLVhZSTxNu7KaiKZCciYk&amp;#43;Ig2P8rfBm7O5rgi0REThXPbzi1&amp;#43;zAglmwLAIcCuB1vHKBUHKjYB8Au4uYCCCqhsBkw&amp;#43;UeHP5E6D6B8ANQfyJIB943iWRg

lB8aH1DAjjSg2g0NHoMw6GD5K2HIUfK14KBM0&amp;#43;AEqwTpWAlSiEyYE3PrEz9Q0dFC0ExUYxw8Fl8zWbHVtG6OZHaj0JvHIIbgERw4T6&amp;#43;bfVWMgmcjXAAaVohglaJtF0wNuXDGiekKM7j8wi2QoabkNYlejNaTjSPMkVGncSnRQYmqt&amp;#43;gEnQNUG7Qnossy6GDFTyCYwtjGIklbl4B7RT6Rl0jEPTU4bGZ6VuRGrJiXpfsYYesT9i9DM2bGaSeDIfB5

dBhn4X6bDLYyozHOdec/g&amp;#43;AUnP8lJr/Trh&amp;#43;W3imR&amp;#43;yhNP4WbTRLKRKCeiGbn/DiovFVIrJcCm8AoYqR12ykd4mGCGxfF8BsPAhBJGWFETZIlM3iCr1JRRgTuKkPGnyU1hm1h&amp;#43;Y&amp;#43;OEk5HdTGY&amp;#43;yPMtYVyW6y3c9EDEPRHZAVqdZBIYJCGoWCFjCp&amp;#43;4GvIWGJDpp2QhUMkE&amp;#43;KpHHDCxtuIsQLJTNYi0xV4VKcEcWEG5PwxugsD4vJGRoGyTuxtFLM1

gJyeSWuyIiUh7QXH4tZGAU8iriM4HKlQpEgF4P5DgCEAhAUAeoHASgDtB8o8dIwOCEaCSBDQ5UYEFlOUE5S2RH4/OvlKZjaC3x5OANAKO/FJ8qpjdVPgIWuit0oyQE8Jl3RcEtTKOEE9qfKOlFjzYJmhFUekyQmQAUJQ0/waNMCGN8eQU0k3KrG5LuzgES0tAGFS7KO5aUbmeiGFVomBF6JWQ/3PPWn7TlYiOnB/BxKjznT/RvkqqnxMLbmcd&amp;#43;FX

MSXeH/lgRsx5sJtvmJUnv85hMFUSNfjm5ICXch3AHtAJUiYDd8VPKOWIznFxyP5mIlgWbyJaKlU5yjdOQTHyj1R2gSQGoO0BeBsBnAPIXAJ0EkTJ0eA&amp;#43;UfQPUDw7TA0cPLLOqyO8JPjm5co3ULHxMQdzwJPjSqb&amp;#43;Oqm9zLB4o6wY1PI4yiqOk8qCYX3o6GsUmTHOtKa28GV9fBK8tCcUPXnuhSoW82wheiFiRY5I1bbvpJ1QDETGmZ9NiEWB5I7x

HRZQkIjfPU4v0Z&amp;#43;no8TiWEny&amp;#43;jbWF0txZ/Lmb8TQG5XCYXjMvbKS7mqkyBegqxZ4VURV7aZouW9rLjApKc4KfiIqDtB4cLwPoDyDYDKBk69QfADwBbBGBEcMAZwJICvjw5OgNc7hXXIJ6IdzqhUgeoIqDTl1PxRg0RQGX7l&amp;#43;MJFPc0UXVJkUNTh5IE6eRyFlGQTjB8imeT1OVGaKWOaonRRqKYmcdKka83Ue0BMXCc4hmwh4lMmsWxDD5K0hxQxT

po/ML5W0niWG12m3yNOlQFiY/LYlM150nE6aSUNX6pKrpzbEMXbDC6jCT&amp;#43;4w95HJPozAKUU&amp;#43;M6YbEogWkNIR3/DiAKQVrS1KZFEDfM8224fwsSaJA4jHJxZG9glOC/yfKUyWrjCF3A4hRAHXg7BSoQwKqJIBGDghyoyda1M4DrC4Bk68OZMOnX95cLA&amp;#43;OdDYGzIca8QFykfedLHyZgiLWpJgwZWYL/HN1BlgE2RZMqak90x5sypRfMq6mLL1FvU&amp;#43;

eYhPNaDTNlw07ZQYt1EA59lk6C9NfD/hboYhS6VAJ63ImJCas7EGyHpySp0TglDEvaaaoOlvKjpfmQul8qfS/KmBIS4MTdPCV1dUGkMwFe0QTW/JY1gxG8smvElLUn&amp;#43;VzUBS&amp;#43;ThXUQ1JyFS3E92O5sQh2MFPEisMkhwVJag3JyIQjog3cl2gFeXpln5K8lwszkGcZ/iSU&amp;#43;TUlJKxOWSuTkUrsl64kYPEB5Ccs2AVUa1LqSqjYA4APIEYPHXBBDBc

A3QeqMU2tKcKlBzS&amp;#43;8b&amp;#43;yviiqFs3I6jowW6VXAFyMq8eWIvlXCjJFoy5VfVLCY0gR5oEmZYouFwdSUkuq4vsaxWWqiCyA04ss8tXkWrMJuAXANapmmvBjEYWOiFynNE2L9BgyBISfIIk0kz47TO5dfIn7&amp;#43;q75zE7xYdN8VkpPlr84oUEvjm8TQl3826ZF0gZhjU1W5eojDJ6IjUWNjsEasDMLb1EwZX03YoArgjsb3kQcLjbDKDjZdHYLRCTe&amp;#43;DY

xjg4xDXJYumpaGKTolBMwsUTKebah5yFAmksCzB7FjTIV&amp;#43;ZyJfGojWSwKncUXsLx0ic8AezNdiLZChGLwtMmCQVlTWvgQ1QSNMLzNGFOx8ReSh3D2RLJ&amp;#43;7vEMKnPBzMcHkgQl1IUkRfotydk9c9ILmEWItiQ70w3gLZS3At0m7bB14CkChsZjMx5ZFuY4IOWLULDGYKs1kCzM/EMyHDJIxw7tQSsN4MDsF6SpOcS0pUhStUv2cqFsH8jEAdgcwIY

AyCqi6oTAPAZgIWH8jMBlALwK1fyt3WCrbGw0d2aKugQvjbErc7gLRF6XlTBRt67ufhxql9zY0KqiZS&amp;#43;qmXNT31E8z9VPKu1WUS&amp;#43;cEyAAhP6nqiTV&amp;#43;GrZUvR2XgbNAUGl1tTChpjcR&amp;#43;pyp1VyMQ0ydHcP8BmHTUBE31Om2073B4ufpTk8qcReDRFgCVcT35fywBpvxjXb99&amp;#43;bGITfRj35jCQG54JGVWwOpgoWivG7jVXDemZtSudOpnVXEp2FsOq

KkZakHAxmpw/YvO4TTjIE2PhGdUMrBotXeQZqTwV/KXfHFQbwyvpkY6TUhg6rE6c4eGZXTnAoyi7HYN5HXTHGdjc7RJUxRodmpa65jnyn5dTR2wLGzCEV6WJ7t1jcjjhmGm8RbLxCLCtYBUTDM&amp;#43;ItkeLPx21HwyMF2uhZGYvurETpMdhgoix1p/EPbnN1VphZCtwsPiJJENoTdNNbMsSErIhLzl0VwwVLIwzHACQXMIFW&amp;#43;ADR&amp;#43;LGJoEPcEWQxGMR

uRXcwFehuzOLD2TItSHahlfkgR4JEBCvZ5uCSsyYokSY47SOvEZ7Q6HVmsgsFC1HyeYpsoCRyErIniE0K9vNH7t1ic3pYeGHelYdfBLCb6MUlWBij5tYgs9/uP8GksvD26jgVs5s91AKiuGYCOI7MoWObh&amp;#43;LCxf&amp;#43;U0DPRSgUiiQN9fDY2oBUpkxYqBIfGErRAbmhikR3krBf2ra1DqOto6ngc6PoiYBdUmQS0qQGUAjB8AnQP9ojnyWlRPQC25kb

XP3XL4j1YVSPlYpj7nrdku26uhVIO3DKjtUisUYPNVUXb1VRfQXAIp1UqKc&amp;#43;bgpZU9ogAvbtFyEqvnopGlgbxp2AP7XhNYbHBdgTsg&amp;#43;bwCiqurHcfJHYWSk2nw77l7i3DU8q8UPz8qvi1kiYjDUrkEd5Q6jbF0Y2RdmNf6SvGrpBQV1xiIGcoiBg6o0QQMFXAXZhCGGiaeibIz8CzuCNAZNdrh2jZmyEmuHGu4KnfkBgBn5ssZwKxGUbqBQ07oZI

Xd8NgyiU3NYVb/AtfEvSzIkJkMI4lA8Jb3oRxOF8QsHSlQonxD213PnvJFFng9vmgrE7mLz0QpacU4kY7tO22ES0xeT8RmmhV5R7CAatMYRlfnYagkAamtf4nzyIS8NVszzGkhWM7H9w0t2sW9OpFWztjnNVs6ETTILAIlIEbMwmtrBLBiynMss4Fk4WhpHHt4UkYxBFuaNxVrJxshzAQgwE/wD6i3Egew03QYaYSL&amp;#43;1BOyOPafFVujWmA7i0o3S

NcF2I8lRAU605KJAVCuAC8GcDlRugRgAHCMCqj6B8ojQZQPoABxVRyoM2ppUtrg5uo5IR6/hdR0lV0Go&amp;#43;uOK9aWh/EhlFVhHR9eMufU19X10y3g3Mv6XmU31D2v9fBK0VrKJDui01aBvKaGLB0eq0ppvW&amp;#43;V4SKIpewFjQZQ0kS3O&amp;#43;p&amp;#43;xYkIYgcQwK26VxYiYMOPLPFKOmNmxILDCxMd3yijR/P&amp;#43;X5jE1HkHfoUT/TpqnDhunfopjCM&amp;#43;xFMlXUFT9

L9jJGqiSGWXeTul0QqTwQRx2JGKTMG7iMebT5JEYgZ2cszj4TDM5HiOfIFdNG/Ni4bggQQyzVeeoWTrmoozEG6Rs3TmNzVW67dRYrvNbs/5/F4sK3WyELxlqbYP4Q/f/m8Bkh40owZYrHosbqyZjJsJWlzPAotrwjZzRCbSMZDUjD9jMewv5riRQTQJnxxWqLIJHrWi18E/3ScMyW4YhVzF2CRtVNBXYtkzapAvntxDDCOzQRHNe/F/pHYkCxVBW

B7gVmHNbCQaAtbU5ELZKRbQWM&amp;#43;jFAOJtkDHF88CayQKXXiUFIItmCWjSQeLLtjhjkTbqftEjhbtQBtAcWZvCzkN/MzDUXnCcwUInWtS49rQQqQPUrug5AdoOWErlVA&amp;#43;gygdQBoDYB4FHQRMEg7eL5ZCrho/ZUVY5JPXtTxWbJ5DZXTKmMH9tsaBVfev/H8mOD52oU5do1XXa8&amp;#43;2q8Uwst/UaKZTqywDW9uA1WtzVyp3UQKBKajoymhoxsjQ1Sw8p

VDmXcHf30dxhYP4L&amp;#43;EnJfLvo4abTyOqIoRqDXidD4BCZ0&amp;#43;GpTZWmo110m2NEcenVnwzeZ4LjvxTN/pHDO/PXb6eyNpXIzGZzYhkZPDs7WdaEI8rUKmJK6GN7sAq0CsJ1ZrfOh5RsyAqmFgL81Pee3RikLAQ90E5AwWLDoxRvFXcK2J&amp;#43;EeZFlaSuk3/C&amp;#43;tGBArgshYM3ILVcJFkHCAsnmNSDHtSE&amp;#43;ZVuJ&amp;#43;PlDUzMy9kyGMvU8xbXNy16owM6CA1zN

5rordNH8I&amp;#43;AKjAF2zuUYkSMIe12C35b4Jk560ZmbH89SUSPbBOVo&amp;#43;KNqniWk/uCQL/Iuz7NxKTmu60WPhyN91m7lI7Om4OEPuCtR8QkrPbUWiVMVgdawIQMMW053WioDyC0bggAcVQTQIxQQDx0WgjQfsI0H8jx1NA8dWDtAB3WkG91IliaNcA5FXBktklz9UzBKkMHvGAypS3epGWqXTtT6tVgZdFN6XZVCt5JtZRENiG5TS8yQ4qf0VWXwNhAe

Q42RW7RgTjjqm3IXWPmjIXN4LW5XoYCuP08NzywNaYZNnO6LDZGv0RGoyLum8d8V&amp;#43;w2Jv9s9FvOWR/Njkcwi5nS2/h0/ghGDNSSAIxZzNh9MLxn8licmIrkLpPKhGdqdZzOxnczgqaCjbVoox1bbNPNzaQNFzGJGz0gVUtUCFyLSm27d67aqvHbOZH&amp;#43;5kp&amp;#43;SkNEzErzJqWQeUyCubjxHEhVaPiTNGyNGHr3aQR7AqX/pbJRInSt97w2yEKinjGRr

JQ8IRkNglmfMnm0&amp;#43;mHd4W2DXx2lSkPm6LV3hf6OS5&amp;#43;&amp;#43;bB91lrcQDhCIqA15Jxsta4DdFwm5b3RPriQQppSQN0EaAEn9AIwEYH0DtQthdUSQfAKQA4DlRaTd4nm5sHVmlBhWEVoW9wDQ5smZzBgtgnts7niKeTKlpVbLYFPy2f1it27cotHmGWDV/6hecavMtGFpDet8aVUENuBUn8w&amp;#43;M2/UxB3WiHFh9grXmEtMfy/VRhu07Py9GoIOIkVqw/odi

sAr8dj9msxRlTMVxPwCdoO/zol0VwozJ4KTSHYri4yc1rVvNcXfbadnBaVdvEjfmvjvWvh0&amp;#43;YeO5laN/Vt4hNGHYsPs2YJzZSWx&amp;#43;IzH2uj7gDqNA/I/FBNVYQs&amp;#43;K&amp;#43;E7jdovImMlw6tE4xZJsZzuIQgRoGA6SClREQUAEYC8AoAjBBI&amp;#43;ga1EYFgfCXltvNzQUg6uC&amp;#43;7UHWoLbfQdkryXxbcqyW4dpCIEdapalkQhpYiYq3jBjgr9WCC6dqK1bc8mh

0aqA2WsGHll21iqYJjmNkm6p51lqZpmYkr4nDmp&amp;#43;5Z4eJCeuS7FkoI9SXCPbTwVkw2jpXa3wpHqRaK26dx2SSCdNZ2I2BiaGhw/0HVWO5hHTXKP4UQwkq8EfTW5mOiuR&amp;#43;51HGF366/b54IFznCztLF8rZ1WSVC5q5FX44Bj83c2fbOtmNNFKCFjxBVmQRL9tkF/fORi2OEYwSLLTAFhy3utjNQWXhn8IX6Atzcs6QG0rISwvnn9X10iA/ZTxck7r

MAn6n8dBKCNYSWLznpgi4h92x9jPc47RA/g8Rb4E1znkAie4nDn4kB&amp;#43;&amp;#43;BOP&amp;#43;FyRgKdNfLVRd7WwHI1&amp;#43;NvBQ&amp;#43;xHXE2fs7obAJIDYDx0oA2T5MAyGTqI4Wg9AFOvoHiDKB6AhoQp&amp;#43;zYoKSPG55iQE1oJ1a8iMHl6up0wcacsHmnx26RepcFOdPSHZlHp3du0tSmjLz22U6ZfWXvaQNutyZ7qPwCsPVY65xmc2NcsLlLb3AVzCvC0i&amp;#43;XsNvqpHTkNeU

u3BYANVMRFA9uBLsdkan21c4UfJXbnXpxqwldc4DucZSVlLrf1zNOcw78KNR7RizFTEYx2j&amp;#43;OEBlBfwv&amp;#43;N5baF/nfyN5jjHhMm3UgjpSnxhuwVGdNUbS3Ir4NkrjnkCMKxfd3Jzmdc&amp;#43;DRRKwaEtR98G2CNHaerbjtMf7kjz7bNZVheCbrjGA1jDd6tUkAWkDTHG9ZRZbkFHsTMK1iQTZTimSN/q2vP49sp8UKmfEFsO6Ei&amp;#43;9RVzccNO/poDz9tEZ

E9JXm9UTT7ZA1sABz1R4pvwXABIOICkxyoNQZOp0CqDtAQQ&amp;#43;geqO654UnPvXUfUp5AGoPSWvSa0YRcG8UsM4w3zolpydqELEOs&amp;#43;Ah&amp;#43;wR&amp;#43;pEN6tY3DHfVcsuMsAaK&amp;#43;8pjZR9rNVfaZDjfFRLZesJhCjbOJX&amp;#43;M4VUOIPIApb71gAPNpVu7bNbww/s/vmo7Y2lsty/elbdY6vbgYy52Euuc9vTyC79oheTefNFUr&amp;#43;/C8su4jMIRPnPsUtql6wYAQMv9

GInSBjkxReRd4mhM2BGefFWivqdjR0sTYzZetdIK0d/HeK9JqCvvby8jc&amp;#43;DuJHUjvnNjKV/gbNCoVb6JFy9Q7PvU&amp;#43;Xs2U&amp;#43;c/Ds&amp;#43;ElkbC&amp;#43;Onivk4jDwSw&amp;#43;Wa7mCJbKvWBPHL2ErvnDA8MFp4NDDQpBjAb5s9F3A8zfv7EESU9RW7eDPA1pnD5sr52HiOwnCEW2eJYqe3rVf3T5gSjWAWmrx5IFar4weqCyfacJtMohDxBrcWLZp16jzo7I7shS81Y

vnIbtk7Dsdf1Ts2UOORKl3jBFUouIa3X1xikw1gIFrGvSZJzxSFLt3MUIp2gZtGzGZp4Ws3FwLH4jnnle&amp;#43;5rkrej/0LWRzfKLVyiL7W6v4DFHmJ1R&amp;#43;pUvBdSfQQgBQHKie8kgZCigJoBgB9AKALQF4NgBAd8eWlwwRDrpL9fUdipbJkPVg4T64PmD&amp;#43;D6W4Q8U9RuSHKnhRTdvU&amp;#43;0c7feqwZ04MNWvb039DhehM545TOw0eb&amp;#43;GADXIamQVnvAOxRD

tGRjtds&amp;#43;wnZ5Gr2dBXvP9p8R8z2KqBeXT7b726F5LPhfqh9G706F3qsNnfOExcd&amp;#43;V&amp;#43;jFVxYvnsKuFHamCKZq4c7uLvMSDgFe3D4Kad&amp;#43;&amp;#43;AmI9ewMLRSs7JbghJfwUN5YeCXiri5mdBUwAs1MU40D/SuuZm8qxEncT&amp;#43;8jhjmFUXZ3dmPwrSC3iOVphGCvwwZM&amp;#43;o8bXGsslp8Y9n&amp;#43;NZJW/UQZegscbAOwRIzdeaw3Y&amp;#43;PvgntEognsAvGo5pp/7xhuIF

cCo28FgVuRLE/8XhIbk&amp;#43;9Fnfz07YMfOmjGRUKY7nBplsbUyyxGfDnwxQYRb6lB4ktSLFBIdZaBFNMMBMEmE8W2U2VppkVfYXGQdjf/QrdH4HbFi10sErVXMdhZe2hF0VQVjXYp4cMGFhYPQ/VyxXuZsUWNodcG0p5l7WBCCom3crFhZqJaiHsdKSLG315tXGi1fsoneiw/s4nY1wkAjAFoHaB6QXVGTAQQdoHpVeIboG4hwQEuSPEtffdXVhEOSO

X192pAN3E92YMKk5NFKLuVk8WcB9SIcbfZT0ocyHR306lnfKhx08U3Ey308tbBUyM8lTbN3A1IOWZzssNTbeX6R&amp;#43;aeeCRs1nZaW4dVpT4lXsKnOHR9UYrePzrcQrBt2SwGxFtzOlyNDPxC8N&amp;#43;LtzqsbnVXT/QhhXwwL8bnb6TAAB/J8CAwa/dokrxOg3ogecIXGODhdEuQYLAB2/EnSy4creSTy9V3QnRWoPDcF0J0gMeLgLst3FsziVOrJSG8da

YVXjPgwDXLGshmA6BFAQpoQ5EOYtMeaRWwIDQ4PQQX9bWV/5aUTb02NwaO&amp;#43;3v8KaPnhbViXSCGJo99GiBxw18SCA309zD/Q1hRIdmS&amp;#43;Im3buHrUARMfGshvqMdnEhfCbwn8c09YsBd0atX/nl4MVaBUVd5yfCziwj7QsCawhaNSD&amp;#43;CsPNV3sdp2I&amp;#43;FfcZuOmB1kQ/d7y5I&amp;#43;UQXjppHTfiEaM5A2gQUCInJQPI98FVQKNdA6BkDYBBQ&amp;#43;IBaAWwBkF

1QagIYABwskRoGTodgDi1KhLCQS2ylLA7ILKcMOQukj5S6I3zFsQ3GTwt9WDDwOt92naN2FN7tONz4N9LTTwGdHtIZ109aHUZ1QlGHKIPGk4AAP1Q4qGaBRJw6mewguUTTJyGXtjgTBzLBq3PINrd9petyOd2IL1VKDE2Nt2C9jOL&amp;#43;TsMc/OriAxKzGoRTDBJDqma88MSv16DEzfrzUwjHVYPhVS7YhhRdd3ciH5oCsAEVRoaIXYGQpSaMySAN2G

AqQ2CIWVdlHtvHMdn59Y5RQKF837EX0QN&amp;#43;Q37BbBmAHgHqghgWpUNAGQC0n0BlkBkHaBnAfAEkBdUX7WVCyDeBxwFdfMSiJx7A9xnZhpVKTzN9Q3A0PDc2DMZS8DJRfp1lV43Ch0lNVbW0Ld9hnD3wM8M3CyxM8mHRvl48LPOsgcsL0cEhgDqUVQxdVjTR3AfxNhINm9Ur5Dz0CsCgw5188vdU5xX5znHHSqCwvbtxS4KMXMwowu/Itj&amp;#43;cpiE6gK

9XnQsJmZBvcsLWCywltknAIWbYQgoaAwbGBNL4GFlYYWXJ5mIFIhNV331aUUEIfxQaUBGBZAWekJqCMFTkJfsBw5QPfsgpEcIqAqoXABaBsAHgHoAeAOYHqBkEZQCEAdgIwGTAUpGACqgLArcLNF1Q2xSJdbAz9XQcHAmMNKBnA2ulcCzwuTwjd2DE0Nt8fAi0LFNlba0MgBZ5Z8PtCRnMyzGdvfT8JdDG&amp;#43;FHFiDLPf8JE4r4Yfmsd7PEt1Q0uod

yXoZFpaCP8tYIh2xEcDnHz3yEAeJxwC8ygz21QiO3LP2TDMIurh9MsrId0wgtqP9EUw2gxTFGD4USvFOp9&amp;#43;dNRzDVHYXRwi6vWamWYwzXP1apYzQrwKI8w5wFv4XMCYPdg8I353dgBojMLgxho&amp;#43;NVzNMMAf28M9HAsKmJ5/UiNa5V/bd2G8LiCsI39BINsQh4f4SLWPstrQcUWEX4S2kOiRZPRBXxurbWRhEQKadlqwrZDzCRoT4adhI13ZOdHW1

FuXrgetaaNpg0gnMYbCQC7IQSGQ94aT&amp;#43;m4gzceFnDBX3VrBfNyaKcAbDuUVdlnQcVRmWkg0FLkn/hg/crV&amp;#43;Nj1HH17IR4QhHW4breiG39otWsRplIENLShEKsaLQ9kvhK4hoY2IDfB2CT4XLGOE77L/R1oB2K4SBoSZVlElcyGFhmOjRuPiEJ8KUFCg30lDGHWB5gDLSWnxHFCmm1o1QojyfsxI0j25DB1IcKJsiFeJ3QARgcqCGBOgIYHwA1wig

DNc&amp;#43;gBAG6AZEYgHjoiTRkQ3DubYp1/ZUhPHFDBL3MyNfEulBwKPDsHBSxPD9QlSkNCZbY0NCYXIh8O6dLQjyICCk3ah18jXwsIMM9M3Z0N99dRXIF/D7LXCSNtr8a/BD8QIv0M0NgWXsjFiUojIRU5wwgNUjDEIm&amp;#43;GQiJmQqMz90I7P1KjBJNMP&amp;#43;cagiL1J0e3WTWF0yuZYMt1kXSiNRcW2AyVmwQ1eb0gDzo&amp;#43;yARINIBfCVcT7EsExIlhUfRZpS

BS/XBY1sFLGNpewwlXEiMRYX15DpIo2PUDeBKoFwBMAPoBbBVwgHHqAjAM1BxN8AQDjmAKASaTdi6TCAB0QI9XX1dIicbUIcDZLMNGDj6nbk3Djzwo0MjJnI7wNjjxTO8P4NXIrT1d9PBB0P8inQn32&amp;#43;U/fAcHdCkhccxtkjIxzy9ZSJUuK6h8EbfDMw3PXIKEda4oz2dsjnFsSbiflFuMqCkwxK0DtPTAfzkxe/aYJrNIGHoImIeg7wwRcmzYsN

HjSw8eKZQiwbbhkD&amp;#43;xGmBFksVfsh4Zq1C&amp;#43;kGw7zHrmQQzJMHXYiX4YRkKwFeeH2etIeLx3O4aYZeL7do5cJyPjKqPVxRNRfNcWQNLxHkHaBGgTAB2B6gXAHKgdgEECNBcAM13aBcAdoBYcv4uBw9jzrXX2Q4dWQ32ASpWMBL1CgyKWwjirfGBOji4EkUzcilba9T6dPIoQ2091bVN1CC9QbWwiCs3LOPA0hAPBNnQcEUe3s9vQ&amp;#43;KI7J3ifrHgEyg

UMNoTPPBPwI0EI/IVhIdtU6TjCgvVhMTDbDDhMzDoGdrxaiuowSTr9Ggvr1/lIGZr3H8wMYaKGEZovDEmi2MTqM4T5HEFEWSU7Qv0hVf5JoOStqvYYIajhMdqPWjPwGrymARqZLmHiYlEx0LUtMMlFS1csHfCdIofUmnoYQEYhEpw4tSgjBZrHDiFnjQseDW8dEsTWns0mjI&amp;#43;AZgccJwmDCT7KmnQgqUHlGkhgfLa0jAvqNXheYPZLCgl59uBGhh

F3kkC13oUaEmXq0KaAzCtkHCeo0l4l9IET/J7HJYX6sIaJzFT1v&amp;#43;K&amp;#43;AO9HiJeGO8jzH5mB4xzU0QIR7NJhn&amp;#43;Y3ZIeyfgL8EXgD17jczGz0JwAiRQ8kEM2gywEsV5g/MuSKEQZJS9ZBSPtjfESMSUBfHV2PjBw0&amp;#43;KyUZIkgmTp6oHkAZA&amp;#43;gcEHoBwQa1DgAdgZOkNAWAXVGCToHAyI9j7HRDidNKnQ8OqckhXUOk9EkppwciLwtpzSTrw3JK1VyHJ

BPgSvI4QztDggvT0Xlik8IIzisEswnGl6AKpNl4ABLvlSClQMiTAiuocZFu5BUWP0yEOk&amp;#43;CKyivRf/mw88ogZPT8Ew25DbiSonuNaEpku6UqjWXQrn6C&amp;#43;g3ziAw8IyBgGjZgyq3mCazUrnKtPkRf3aI8w0tgK9FMXvyUdCMJdw3TOvS5kRdxEob32jeGBXlXNs9A2jchzZatSJQqJfa2JonMaLB65TsJGjS0YKU2WZlljX5iXgiYzWAxJTI3e0IE

UsDGhVkbiFlDO8jJY7jpjnNOPT7NeScmlyi0Xe/3Gx0tLzDOj0aI7GSxFU&amp;#43;FloYgRMdmZD2aSiF391hWlS5pf9dkWskdrGrE1gUUxb3WFaAu1SPhbuUgRj0owGplpIssKyK1irEkjxSUJInkINdYnS1PQAQQIwAnDugGoCZUKAa1CqAXEzAHKhNABkHydSodelCSinek1EsF7YyKsDA0s9WATJPeJLDT3EJJKgTI41JNI5Y0xOMySE0q0LMyUEp8

LQS/Iz3wCjXKMpOwTdRdmwuhwo/OLXBASXBGHhXLcPw8tRkBHlBFafHIJgiwwutIjDCgtHWL1cYltIM4Kg4ZOjVgXDuPGT9km5wrZxo&amp;#43;FGGjb&amp;#43;GaI2id&amp;#43;eojaC8MHoOwjGvYDBhcxkwti7jmraFVU1Cjdf3mFjgylCOwfqM3HNl7JVsK4DtgeFi/hCwFzGSxGAkoPvh58c7jA9tZV62LTBs7AUPwdINeEFg&amp;#43;ZYyCJRt/Anj19BsllHiwESPmigFq

jc4Wd0fg4PSD95eSrFyw&amp;#43;UMZHCwGaGmWUSTZGBD1N2M0SONT&amp;#43;w01MkiDYvkPPjA6DdXBBmAAHFKg6QSHGcB46HgG6BnAAbTYB3Ux1iUyPXN1E1T1MxIkDSHPUnAPCOTY8PFMIE9hUjToEgeVgTTM5BIQT447JIlMMk6zOlM009BPszMEoKPKTxpe1DCi/wjzPzc0KeHhSCjTM5VQAzbG0QDkfZAHhrSa48LLrjIs2NlYZuAmcDT8orawxmZio0ZO

Sz24&amp;#43;OBKyBo7LJH8EIRaOWYeghz3aIbkuCEjElgzdxHj90seMrDhAzlDFVn8elPd1dNMkIr1cSJ60m47JMVUViteXCzzBseU00P8oBd3XWwniKIVBpaIBBU&amp;#43;CG7W/DipCXA&amp;#43;Oa1dY7jP1jzUw1xezfsZgAoBfgEEGtRNAewCMAwEKoFxBoca1B5AHXH1JUzebXo0E8MdGHP3DpKduURzZVZHPMEjM9HJjS5FONLU9U03HJvC8k1BL6lxDNOPfDxn

MnOczwNQ4Fzj4g0xVml3MadkRTwqJnINTiEjQx7J3MPeE5yH6NTk6T3RXnJ6SfZMKksMznEXNkcPTHZPYye3SrP35GqWqwgZhg2MVs55cpvyPyKvUOyn8&amp;#43;4lLg11qrAFzKydHTRxPA5/AM185K8Mf2KyqvbdJOT0ZZOzmTn8iGXrMkMPMNb95MXOxV15NJDB6CLEvzi3S0IUvzQhVc8FCDhJopIyQLG/NIwrh4CpLnTtouWtia4zqbMOX9d07aJL

DijdYJbZBzbhlPwbZHRKUgkOLHnW4KGSeBuEXmHYPR0&amp;#43;aOgMGysUyyTHE/MazET1ndBayogmM3hgrdN0Z/VJRGGVWgoZV4zWWm54Q6HIHSFC5V1u5TNVvVf0EiRPUiwVvYLHMxQUwyHsgF4OiF/hXICxNCx14wWGXwBYZbGskxVZb3S1NhZbJXiRUycypQj3f7kSxrgYCil469dFRBCUaaBDJ91IXQr7wS1ZmNM0zzbGlH1q9R0xqx4aA4TPgGA5

4MG4daesMYgC1CPG3gtYF63ZFAWWDUQtOUFdk6zU9cFkGxQqAkK1hjgEbMGwVZd41HYQWIBGX15sMzD55XuN4g0KdgzzCuJqsNhnohq1ZD1&amp;#43;5GZd3TtVvhKWRcweeRbGljytQ71Cp5IC3MGzmXSIo3jF8BmWax96K&amp;#43;A1pr8P6NKM/hMEUxJ/serQDzklJ0TsTonYcPDyaKQgBaB4cTABcAdgfADgBYAQgDFC/2LYCAd6AebW3VLGLm2/iKCOmkQ5

n/P2Kk4A4g8MxsTfL8SRy7IyBNRyy84jiU9McpNNxzEEyzKxzk0/JJryNbNNzfCvfRzMzj288aQKcu8&amp;#43;Z2s9ksW4nkLGcp1Q8k1nG0R5JDggWEnydpdKK88ukhtPE4keArljC4s9tKo1EsxQu7S6uQan9Ntk&amp;#43;jHqJ4Cp8FaiQMdNR6DEIanUDM&amp;#43;Entx6FCzO/LQLhJJUriMjkwUp5KhgodPV1hg7ainTw4Ar1zC8I7CJ&amp;#43;d6iavF/lNkyUr78q8Zr

1rxw4H52uy4IDZKLxFkk6hFLQzYaIWTpcvMJL9hg4Ao3cV/GrLX9dol5Max&amp;#43;yDGhh1h7LTDNxeuYDL3gWeKossU6eNiCS1oSMhim4b/KVx1pWeMhmAzbuf4KfxNrUwrwQ9IaV2fMiEra2sxR4J/E&amp;#43;JgMhY1GLYUp4xOD5eSV0bdTTJwk4gdjT4gKwTsISIZyKUJ7gZIaA8mhZJ27e0QL1AsezEPVGUt/Vq0BGBdmX0CQ7iAGMzcZIKqLu4TiAxc1

IT3MGxiEMCmGxgsWbMGwtaJwjbsYWQ8uozIWYLEcgPuWDK2tHdQmmJQCsbU0GwSsCcSvTnIVHz0l3hWSDDLWfTkieYYES3AUSGYjnMW4n3WrHE5leR2UGx4EcLR3itymwKeY1i4yGjCpoAcU2L2InbEHFf&amp;#43;VvRnxzZFCgXhJeZXhiKzgzY1aY69VeJ64qtP5kFQESYsDMkTCsJ04yjik&amp;#43;N4yxfY2IgBSoVlj/YN1FlBGAeAHOX0ZrUUwMNAOAIdA

zyf4x0h3tqCWxWuyi6YtGDTSpXTNDjw0twPk9I3DHMryrM7HPcja83JO8jbM1OMzT04j8JtZyc3XGptiDKnLzjNTI209z&amp;#43;aIqhLj0giiQeFLcFyyriV8/IIizukxtPbLmE10zQj2Ez03TCd8jrzPzt83tMi5Nk3fNaDNoi3UeS6s8GjawCLZyC3Qd8TrBdkC9D4WNp/FSESvMKaNu3s1ZijYOWwtae0X5kYwSMoUdbsvsK5Dg8gmyeyz4qlQ4rug

TQCgB46UgFpB6oEEF1J4gZgDLkXXBkEkFDQdcI&amp;#43;LoOd2MzyEUdQVDBsfDpTiYxPA8JaSbIm9VPDIS9wOhKztU0K0seDczL8Dv1bSpRKG893ybzjKlvMCizK3EosrowPBLxIL4H61UMy0iPw7I7VHbGJiQw9zzCy4I7yuZKwSUbHdt8o&amp;#43;MKGSO0oKvXzLE/uIatmgj/J7SpJGKuaiazCrkALIXf0sILAynaIPS9onXLMd/hOmHxddNPzHA83MG9Dt

VmQz&amp;#43;Al4CBYkreAfCRzGRtmSVdjpoQWNHgpLDU7Gx1iuMh7J4yVxPjLOKJADgCGA4APoCFDJAeIG6AhgfQAZFGgIB2IA&amp;#43;gRoGYBnACSooJNY72IWh0iuar9QtMg8Ku9rIovNxyS83k1adPAzSrVU68&amp;#43;NL2qckg6vrybMxvM1tTqrEq1Ec07XCCFqbepAJLRpPCQvgUKW/24cy3MhNeAp8VKung6SxHW5z6E&amp;#43;uJ6TGIJmCXyUIlfM7cMI3kuqC982

/In978uXQXSoCw/Irg8IyvHr9fOTjUzwHktTXRriCkuykTDIZFUrtFaCMFQR&amp;#43;8KWX/h4KT60O9uY8vUywxwYvWVzz8UspCcQEL9wZpT5EPlV5dyvzQOLBfdmpDy2KxxOpV46ZwBBB8AIwHBwdgRRF1J6AP9nwByoP9lEgYAFsD5UxqgPjCTJq9bCfFdw&amp;#43;aoWrg0BHOUrwSvBzWr1KpyIryjaqvId8a8jT3NqDKq2oxLm822s&amp;#43;0Lq3NKurh0F2uKE

tTJyB2x8wNjMHynVFnLPpw&amp;#43;TRJOUQs1KM&amp;#43;qGSmfJeU58xtJch/q1tOFyZHGOslyN86GvKyYjLfPhrIqzNlGjs7BCAgKYxMdP844q8iNt1MagXlcxgSLGj2NDrE2SS0p4FyU2wD8J/Ai0BYN4z90SsDFQnFQfKzAYYEWI9m2FTsBmn&amp;#43;YxuSuv/88VYj1ZqWKs1LHrP7ZAwXUXgfKD6B8oNgHqgQgedT/YRgRHHBA4AfQCMBNgeWsdJ1oHPPH95Kz9

VZMHA4LK1qz64vIhKUc9apSTy8kzK0rkShEpxzH6rxufrjq62uXkdbHEq/qKgam31xrK7vIOUlQS2Sm5WII&amp;#43;RITbSykocVuIAEmrV50Py2rip810R5yfKlkvpqFySOubjo6sXOCqFS3ZPKak1GKoH8BE5OtrhVoifzwjTSgaOZ050xMzzCh/PCJGoaYb/IrhACjPAgKgZAaM/4wASfy69OdPCMgKr4MAsTNlNTXISrgy9LH&amp;#43;J5rRt32E6ecWNV5g

EUfQ1dpKufF&amp;#43;5nvdaXHATZCATPlp8Pc1uJEKmgqJpl8F636xUsXCzeCFZN4z&amp;#43;YGZL6lhZBUFu3YKV4tVxPw34aSHNpwaeBF7g/FCdmllRwZ/AZJkaF4S9cu8Hfwc1JkazE1iW2Pm3uDy9VlFuJeGHSW0SheTWkua7yyuw&amp;#43;Y&amp;#43;aDmLl4JeHYPMxKsOnnfhYbbF0JdUaPFOshH4afQD077IBqDkh6k1NsTWKzmvYqL4zkBYAOATQB4BEcQmD&amp;#43;zI89oE

0BSoSQBeA4ADgB8owc1kVQsnxcVR1ZbGxaqDdHGnWucbS8txphKrwzxvhKTah&amp;#43;qd8/GlNJ8iicuzMxKHMu2rbzQmiQGpslQyJsJK1waSES0P9ez3UNy0xpP5ks9QOoeU4G&amp;#43;tKT8WSivVDUhc6R0ulSm0GsrMeomKt4SyrE3RztfODqnOTEuXK184byeAu6b/8uDCzaQUXMxjE82ghvWI07JYgiNiG8SRmbbk4aihr8uEaj2J862rMWbNNWFmpRPr

T4n54cyjDQnt58GyDYZrZGbm0lD7UyFwtJaK62OE9zcbJoLxzGMsMwx8Rwmj0ZE2lGMxRsXtkT03jJYSbdzhG2QMw2y4RlPlaw3hhnQdZJWUIrDaZCkFR3JEc3eEWY9YWaz7o0YohZG684XWx34A4wlposaawgsWacHiHs3IaeOuAbiM&amp;#43;D2MQ/ehifTjjerTwCF8bfzbr8aY5uhIN8FkO6R2Q2cXkbiVLlso9x6jir6B46BkGTBNAUgE0Bk6TQDx

BSAIQBaAbQToHygtgE0jMbscEBI0FlWg32DTZquSw1auTLVr1qFPYzKHkuDY2uryzWvSqfrTWwypOqgm0pJCaHaq6prJf6qzzXBMsRVJvSva8xD8z1nMuMHNr4EFl9brTf1u&amp;#43;rA2sEk8xRmUNuXz0GiNqSy46vtJPyDkuohiqD8kdKfyZ0yr1/zrqXpsTMB/VvzGb4aoGTH8kjZNtS4YCsttkw5cpDEmah/Xv26bACrangLZ40Zt79OdQAqGac2x

0oS6GiOZoDLC7NGpoa79LDwWlzhKiRAo9sTrLm56wk2wlTYEKiF0Z6YabMWx2aLpHeI54KGkpktgl1rj1UaF62KqfMUkk15eyID3eSOxUHh6yfNQWBRoqumlB&amp;#43;CuGaEmKK9aSnlZ54EJGm&amp;#43;lTC3uB8J4KLpDUy0XSDuuVAi2sNBCD3EPkgpy3UgX8xLICsUmQh4TmmmzT7aruXZpZCA1RZ5IWDQXjQSSfHJoCQ3BBV5uuJ2Qmt2RA/EG5LJDzFAt

ytJLWQpjg3tlZ5P6by2wRAi6mhhp/iM/CYqUOvGzQ6HE5RupVdSOYE&amp;#43;zmANKS2BCAToDYBfgAHEwB/IEYGcBSAeIHhxugGjomgsEHPKoyAShXGDSnA7WrY6L6lxqvrLww2p46763SwsyE4k1tRL&amp;#43;O9EqKTRO7NJtaJOsJsfgqk9axvRs8ktNp7nKk015iISCulaSPq9pK&amp;#43;rcmn6vgQ2afyvizgakZLKb8/cKpud8zaztzNXpNpuaJU6mzprMH&amp;#43;M3

qwb62oMsLrSjc&amp;#43;FpohsRzSl7BsoD2nhfo9BDHMGfcwqd0YWfmlh4XmU2XYZDCoElIzZsWosgF&amp;#43;XTmg25&amp;#43;IalGcwvNOEneF1zGD0KxFaBwssSaqw&amp;#43;KDyR6hqtDyua5qt5bmAa1AChLSS0jYAi5cqFVAqoBkCMBlAbABeA/2cnucAD9GSv2wNtfCWDT/yljtN9z6830vrHI1npvr2e82sNb&amp;#43;O3xvhL/Gl8JE6SkoXs/qReu1psg8EosEPYQEBJpIkV

akfM9atQFupD5UAtIWV7dnOhKdtQ6xtN7Mv6QzqjrjOztPFyzOqKohre443Us6k6xOrudCI/tNuTC2mdwSMc6z/tOZH&amp;#43;jMWrbJqS5Ns73wYiL9h&amp;#43;mv/JALirCtvcNFNQAbt70uyRMrDPrd/13w9IGHXbtNjSiCgFsaMxwBIeIBkgh4l23QoApNCnlFkhoFI8oixV8SRvpaJeMPUHEdJSGL7LqI7ZoGMGGRWh18zgiWRq0qEkKiG5kKDmNVll4XzU

T1R2FzCixItGmXsaT7a9Mms4U8hgFy58GtQwRjNJwjPTQ9UcwOagqBu0G4mGHWmUMHHI805pR2V3BfhtuHzXKxsUfbFax&amp;#43;SMcvZb7szlsUbuWjDt5bSAJIHw7EcTADYA9SHwfygQQNgDm05gOAH1JP47eoFVd6ySuGg98AxCuAMKkTx1Zj68ulPq&amp;#43;&amp;#43;pxqZ7tWvkwNqR&amp;#43;zS24NVFW8J8bjWqfqE6X6gXrn7TKuvltb0Aamy3UtPOZ1dqjbVpl1kAe

xTvZhHq/zPhgKBXrj7KlemhOP7g60/sQaWSsny17OSmw25L2XCXJiNcvNUsP45htaP7cf8/hMgG6m8FHgLvDPCKETfSxaOgGwBzIzf65qNYYzaE2jzuuSsC&amp;#43;MyqyBvPdIoiUBjf33L9&amp;#43;6vW/4W9OlpbaSsfnlh55pP&amp;#43;Bdb0UqlMmx3raxxhpKaibsm4EeACjax4OvFpYgVCqGlX6tnGu2uU/NNYqWzbylVPZo/yqWichG1HY3uCh24GOjBdeD4KM

wgtY2lgRqjeyVf0GCy9JeGXuibxuity6yTvN8EdTrHwYSKzH&amp;#43;FbaYhCxT/i5V1Mge9IyB3wRUpwbqq8&amp;#43;/VzcGkejioZAMgbAE6BrUP9lIBdSUgBgB4gfRiMB4gFsHaAcgGB3la65CS3iGFoAfO0ERbGSyDj0hzVsyGOOjStyGY3Mfr47enPHPNCCc5N1ENCkjNMF7KhnUUwlqbZOjwTLrSGkV6fQxwJ9qvCA4196sNI/rj8T&amp;#43;4w3V6OkGFtiy35c

YdFzb&amp;#43;vXoaE7OzfPOGVSkoDwinnG3umIkupdP/7piVLOStTehYdzbHnEdz5LCxqaMwikBoutMcgMsdmrENIMct&amp;#43;8RzeaybcL6JxRFkDjTHi5SLragq2soaI5uO7AKK4UO5GMrdGCp&amp;#43;yc4ziwKtecx/4gIvUegs5sP&amp;#43;CMhwrP4JA6/MNCoeIr6SBE8x34ePoQ977YsVF4h7UzDFof0ztnNwtaY9k2NSSjYOODvuTQrHEUsYUZsTFxR7IL6eWwOigB

yocqEqVfEwgEaBNSFoC2AQQZOniBNAAHB4AoAZQBb6D&amp;#43;pWpDQAE6jhSHp0UNJUr9MiNNcbshqOI8bb620fvqJ&amp;#43;4ofxybQwnJdGQgt0YqHW8hft7R7Wam1djHWxodNw1YLRNcsLbBpJTB1aBaWoTQslXu061e3Ts91dNMYaBquSuKw1Kwa6oSH8BSi6lkmc4SUpC7u42FGvzxMX0uWjU2mszwxuEi/Lq46gnfk415JqYEmjK8dMTrGJEkgqojQsV2

SsdQefeghFJuCrAf9QLCrQZl/iQ7u299sN3oQFtaJt3dYaZDknHZpXalBBDUsdaxdzILfZCJR8SfcbhTuabs1Z4/g4Cs7HnvEgZwCx2mfDAEeuHgfSxXdda3oqKaLfuoj3mH5gxdX4cQOc00K3DzR5Bu96gJ4ySEsWvxvmPvxFIjU2qo/GE5fPqUa1AwOmwMEAEDgBwkga1HiAGQVJynrWLa1A/YOAA2x1HyDPKXMQrx6xu9qgS4NHVazRxnoH7m

eofujT8J0fq8bx&amp;#43;&amp;#43;0brzp&amp;#43;lONn6s0j0e&amp;#43;1Ha34HBA8E1vRAQmM5Tq4dkmxIWsdD2Qmk07nRKMdEcfFMElPlL&amp;#43;gGsGSSm5McjbVJqpvjaKrErni8azUtgLaLOqGeLH9ieZoLqMuyqa4C/m2bB1oAOphmO5B4cEMT1nvVFU0hvCT8t/IcBYKmfwkaA5HywfmMccrK5INXnfHc&amp;#43;lwa/Hup/jNbw&amp;#43;gfyAjpCAHkB2A5IhAFKhOgXUkNAdgCaXoAWwH&amp;#43;s

iHFtaIZ0QB8jQRQm7A4NMQnlqiWzDitpqNJyHdpvId46iJw6f0rShgJtfqbaq1o/qqhxfpqHfgMnuk6Io14E5QV8D6LaHIAkBpU6Eo2&amp;#43;AhjSi96a8rBJsR3E5XmEEvjHygxMdXzfbSSajbv&amp;#43;tCErG01SGZOSKGktoghhmxqlc7lmYsCS7dEC3p6bz8/NgGiYxR/i6941Xv1PJAC2dIQGc8QjHTbKGm4eoa7h3hmXbqQ4LDj1hI&amp;#43;Qb1lPgyuwD6W9

RwjB9P6fq0I8v&amp;#43;XLDAR8tGEx2NGZD8oSowY4AwFhULCGJ2Esah4jCwL8FrGJGz8Mwer1VhdWHsreGaBTD19sILXLLQsec0R54bGD2g7qsfmmJoWxCfDIYlZRfAj1uaWbHNlkaPLQK00tVYSq0hXUfTHG96HkZuy2pnPrZqmZjmvQ6JR3lpaB/IUqCA4XgRgGYA1I&amp;#43;gB2BnARgHaAYAaSGtQW&amp;#43;mWdDAe&amp;#43;paeXRu&amp;#43;wvNY6XAi0YIdcJrjs4NNZjnra

kuegTp56jqmfsCbqJ86pNm6Jr0d&amp;#43;AWwPBJpJISeC1UMwG56aGx/02236HIxwYejGhJqdpfl/pttLEmJhiSamH7&amp;#43;3BuAG&amp;#43;NAiIhnwB4/JjM4Bo4aWJa27GQrgy5ogosni6ysKllmQrzSUMK9dmWBZJIPx2RJGGBrr65XbP/UrqxzRWgxcruKWm7q9JfSTHmqGNQUSHqIuwbnNWsXUwZmf5z8b/nEenqd&amp;#43;xdUBkE2AZ1GoGYBGgHj2To/2BABngAOE

EHoUW&amp;#43;/m3MRpITvpATY&amp;#43;OSqVmGnFWayH9avCe47CFwic57Tah0cTdHw8if56qJs6ZomaFhvlF7EFy2ZpzXgJsWe9&amp;#43;xXzODHeAVyGm5FezJs8rPpzKP4WZiwRdQaw24JQwau0rBrKjw56BiN6wZzCAH81maAvDt/OqXPfyi/K3qRqtJhzvwbYXLUvhd1F1GvrHnk0o1Zoh4SySPciAv4lP08A24LgplUwyCD8jMFVwv1NakHzT6DFynnZRE9Q/B2E

fZB/V&amp;#43;KgBOdGnhkPbAQxSuzQUl4DKalrGX0C9DF3tEp2tGId0LadbBwF1zDFRhCHNHFUf0cEX2OZr5Au7JFHf50evFGglioEIBJAQgE8HNAp&amp;#43;JaBwQPQEaBKOrwYZAGQbUYlmviqWclYj1CPh1ZJKNkzWmwSjIc2m8lzjvcbClm0f2m7RhNx2qnR5OPNajK90dqXPRy6eb6ml2yovQH8G/B&amp;#43;onKp6cdwEieey36&amp;#43;hviYGHVekOuGH&amp;#43;uszFT8hFtB

vDagZ0zqmXBJWYeL8ZlwtiIb06zLOc7yxq4aLCNF7XMrnDsCt0Xx0tXn1Iy8wNufKnbiP4PEhOIvRMx4osWG2cImu/ensdEEWHsJWOpm9mZnSV1maMB8APJR5BiATQENBDQeqBeBDQRHCNAdgXUhaBDQRevJ7pqhaaiTqOCyIPDm3BxvWnsF4VctHr6jWYlWDWqVfvDSJw6str9Z8oZqXqF5VaurrxNVYSCMON4khZ6kzftAinq8xGArHIXiZgb&amp;#43;

J6fIDavZnrMO8/p0ZaM7bVkGvtWpJuNULH41ffI6aL&amp;#43;RzvoxKzK/kWXWqSs1v45NK5PeQThyXU9XovC4dVKuvXMMC6H8gDeExDltLuOWSjJ5hHh/C2eEKKe&amp;#43;ra2Rpk1pLFJQvmsgr4Y1eJ73ZIdjYLXs14KE/C26GGscftEctQcfRJDNVbJQEsaHWTxoPuEzHOM&amp;#43;bFSBVlsEe5d/hC9Z3EZGFEwrTU7tZXCzA8ARTsJqZhGKrtSb94PfX1y3ZdFP

c1Do4EjbWKUZsWxR96OWIZS8Y8mhetthH6xv9fFhRqzX/5slcHRBZ9oGwBEcUHC2ByoZwHEyWwQgDpUQQToBeBKk2aZ5srGjQWZNi0IBMWr6erBdsicFy3zwWxVghb7Wh17xt0rJ&amp;#43;/zeOn5V06ZMqlVi6auq3XGdZ7y0HGrGJQB8wMYdmnPKPiPYiaIhKNXN1k1YEmzVvJr3X69UScBmT14OeF0Qqwseja9Smq3dXze9ZZedllqztPz506rbghU6

gfxvIum0AfhqKMHztg2lFkdKBkcCwdORqxE31duHLJkuqeTwNmgsBYmaCEhclB6/4dSqTMDwssVWfd3S8m7JphlXMUtILE6RZ0Ql0Q7Juajb66r8FkNr1DNRmghSWZRFKHGFvY9KCwosW6LW4aXJEmaTcLGgKYyosS7zm7lISuvsGOGFFnnMquyvUhpBxVgbdkmxPSCw9wWGdjv9DkOvTaZey8G0yKNXA7oBskOntXTXGZ/xZJXtN1mdtT4gfyF1

R6AeoFJNdSOTJgAeAXADScrkRTPZWhLcHPMR5p3gGSiaeohjhzpKDCf77Vq1WbRzdWtnqKXJV7WelWChi2sqXXRuhyNnjPWifqWl&amp;#43;xpRi3ompIUxHOGB6s6XX8OMtHh3ZgZcT9d1zYX3l&amp;#43;kjkpEWkx4rfEWHVlLN/7Del1czZIvXMct7krGMTzCHdkDZWDNFhsYp8IWIDzpkfuPLssgASEGmJCuZL4SijbZggRV2zggWEtoJXbrB1l3qIyBpSl51

vWrENN1DtcG8d7mvQB4gGoD/YhAFdXqghAHgFIBS11Oj/YoAZOiEy&amp;#43;gWzfp2VQnm2oKkJrWnSX881Ia52hVnnZFWrR3tbNDyluOMC2SJx0bInnRqpcl3ScmXYwlLp3UiqTGXPlCgayStmEI9HZ1aUcIGXNkveruF2tNNWhhvLZYZX8QrZv6TduMwkXgjJ1cUdQ50OHhnNqeMXkX4UQZpvWazJ3bfX5h2RZBc1h3qNmohhFv3y9Vlz2CA2SgCAsLm

/1wAfy4mrW9cA3058tvv2b84bZatRtiufG3KwybdIKd55nn54d4MEWi0Dsg7dNkHZcFs81/2umeJpIhTPqZRX9BfEHNpuSHIpQeJjWnMSZ8DXnl53JOuoQ9maWDaQQEeffxmMndE7uLEaIZ4hLLL4Cdq2tgePeFLVzjFqdeJmGdbgL1JD5tJB9kVdHwNoNswfT7ZV8BfFRsX9Qjcx5CsGkvBXyIDMo&amp;#43;F0taiDNkr3MPXrFG5kGhf19rFrCAa4NFb

pbYN9HnmZ59rbwoe4v3ex3j6qEkmWT34e1PcCXWZxHGUi4AIQCMBJARHD6AqgfoHCAnUowD/ZpWzvKr3Nw4p19mZK1eE771a98UwWO1jza7XcF/JfwWOnTvZlWdKrJKC2&amp;#43;94dfF3KJofakN7a2hcumt6&amp;#43;obiCnW9pEdpYWZdadVl4&amp;#43;fZcqRs2lq13eFr6aI0es6fFI1rVsZZisJlu/rN3MG0rKWGS4EGbzHDhnzsnTnVuRfmWViNYeES0xlLj/2a

zXLOAPX&amp;#43;nY9OZndrXLG2tFggaZin8QIqfwX4QBCxTzCzrOWxtD87l5pEfTC3&amp;#43;TnHeeCIRUEBioDTnHEFObJr9YyFNo0Kd&amp;#43;Cg3D7eXg25/mIlAr0KppZvnN0U340pRQWQVxCmUUqmnpmwK8MEZkqEycF55sEGdktXS9HuGdzuULYNhiH/CrtJRPDsj1x2fD9PYgA&amp;#43;gOUNuLlAGdUIBSRReoZAri0tZ5Byocfbs2EjhcmFZFp7QVSPy6H0gZ7O11ve

7Xh&amp;#43;jve2rRdg6ZF3BDELYon00io&amp;#43;Caqj2XbNm2Vuo/cz1V/N0CKSUDfpsU2Fx3B&amp;#43;oxkS3G6P19vhd12UaEBKKaWEord17gZ/XrAPUxmGv2XJMXMev5GtlY6WIOqX/fWPzJv1dgON/RKsmxLZbQ0qwGUfg5EgBxGjdqwh2NsLnw6wi48eJkFd7d2BKIBGl59h8ltgj1maH7wnEIYik71iup7NZpO5gAbWeLnAXAC2BGVGAHaA4AToAagS1v9hZRye

rQf1HeAQFbZ20Jjxmb3zRrI682cjnzbyPpTwQ1lPB1ko7F2B9iXcdDKj4XuqOrqwggV2bVHU9D3/j&amp;#43;2YDQUtqwptkuF41Z4XzT3o9Cses86xDahjo9fGWTOkrbLHQZqY&amp;#43;zbljipua38MH9fgGc56dOSsmogr28MTe2UsvzVh71bIjy58BUDOq5vhgZib4PfU7PNNb8wViviLKuQpN0KAROiD4E73oCwPQDs&amp;#43;DRzVfHNlQacwaAMVXAXnpr2xiQu1

go15MqgFWsHlFBIkBdBClkKaMRvywNuW43tFUKUmkLP6qsUbT2i&amp;#43;wOmToLABAHhx4gKqBbB9AfE26BdSGAHhx2gKQV1QoARpbiOJqmIedUwqYVkZNA0to70F&amp;#43;RUU8yPxT7I9FX&amp;#43;d60fyOZTgdcTTgtvWYoWDZxVYnXIt0Xt1RxezeCEYqqmfZaW1duPVx8cplfd3O19nLY331e5zAGzBc08&amp;#43;v7j1&amp;#43;09PWQ5obZWHQr5K35LQDj1aiuQUHoPmofOh

/krN4ri3p6Dl0y/aAUY54ue9POtk5PqIzJxGYbaHejFH5QukPfX&amp;#43;X0d14zIui4nYIIF17FuujOgnT9xFkHIRHZF4wKK8bvLxIQ&amp;#43;wJHJeBWhb1ULefh5j&amp;#43;raQ/Oj6jHbj650mshhd1x7W43HM7Zo7dHhsqn/nYdcLVGmH5UWpA/F5JuaNbR5X8erWSOgBVbywqN9IOUO4p8frtZ8j2bg9YvRR&amp;#43;xNOLOL37ASl8ABTIl9sAbJxbB/IQmD1J6gFoFCG

GFnk8zz8U9s9A62doU975andzZWrcliU52nxV/S9HPDLpEpKHee4TsoXx17EtVPR9q6tBymJv&amp;#43;sbJG3CruHhF1mxQ6GnZyVnJJUsbycy2sm&amp;#43;ku3WdOy0/D4Tzw9YCvzzu1cvOIquNo5un9107AAmmzSZOSOqSLpvJ7kgq/t7kZ0EYgpf&amp;#43;ZDzbFOsvAUMxheKBCYWtYPAVhjtsMdjLVtDiFnCxUbWyUSO58BPX/bV4F&amp;#43;FRG019qex3Op9i&amp;#43;pOHrio

D/ZFQ8CcnDfgQ0AZZ46ToE0B9AP9goAFIGABkuPgG0klnlM&amp;#43;S/rkUlqPjxWkh6jkb3rZ3s42mtLgc50vNqmOP82xzoy4nOFTwfZnOVTuc7VOUDATiXPoNXZAgocVPpOl6WklLdVTps04OgaaboOv3PBly05tmd9wK8mH998Y5iMWiSpoaIZjgaP0m/&amp;#43;9Utr8T9nOCP3P845PK5uvdK&amp;#43;WSx78FCHjRb5AaAuMa/1ehZ0PZ/W&amp;#43;EwKYjY5kLCmEiCpo

sJFo3Z99Hq3y6G7aupdk301BQDCbhEBC0hj2CPT25UzuAWvwHNNQS&amp;#43;Fx7X9pqMWSOQeojUmjGh3guAgYvvxT9SyV6wEEfaxuviV4s44uutXlqMA7UigB4BDQabXNjGWbACGAWwYB3yhSAKACsrfbzmwZ3&amp;#43;PJmHGhfuTvpiSDw9S8hvlZ1SvsicJwc90upT/IYRvhd8c673&amp;#43;9uVcVPicy1uH26lrG9F7m&amp;#43;XO/&amp;#43;1DlH4M15ibpnIDHOJ9mDJJdIV6z

NPPLi0&amp;#43;&amp;#43;mVrAaz8vmb4pt32gr9m8hre77M1Uf8MQsdCrH95jFTqBolRZivZiXMZS6Ua0Ddd2Tlwa3goNaIlHgQXjp5jmxEsHFTS0mGGCglczj7PS&amp;#43;Jdm0LECL1rRmA&amp;#43;FkSKBSmsiJeKiB29JdzHeMJYzLQe612MPXMVqaN&amp;#43;/RJAWJ8eIQL9ddlNvv5zTYCX7r8B8Doqd&amp;#43;IHjoeQFsHhwqgB&amp;#43;NKhMAQ0Ad5DQa1HCkagTeQBvA7zWQcYlzGnp8yVp

tuR0yMjqG7IfB&amp;#43;tWYKXfN&amp;#43;G9U86H5O4YfSjqc/KP07sTsxuxpK6pCFuHhZ2L01BZjsdncwNXepL6jKm76WZHD2dy3vLtkkGP5H208Uem7rNmmHD96sb/krz0ZpmOICnK4iUljrm4Un6gv2B86pStCHTCrSpOd/kTqZ56WT1h5SfBQam3872PwUOOf5vyuTwz/Otoo5bMeptsgutlVrKfT30L/IPw&amp;#43;4lhaETb7VB8LE2dZsfd242heXSDNN6xLM5Y

gCu//laLbiBDTsfSaMZGgFnLol8MhLJCrDS0jx&amp;#43;aU8d2aaY1RZMQz/0oJ99HHFhjCLRkbkhjTifAJPIz5SFSr4ignmMWDvcYr5RUqpEg91YTf4eRVp9eVJ9lrJIlC4hnzU/3A8FEsgUcUFpHEIyqdaGpNcgYEVJ7kasdvxYtu7rw2OtuJAeqCJF6AKkWkB8AGABqBGgOABGBNAFsEoBsAZMBzvZL74uFViqpCe1XA0lzffElKjp9IesJtSu2n1Zu

G5HOBnkpaNb/AshZHXTLsdfC2LL0z1F79RWZ6Nsr/QUlcvt&amp;#43;pnMNOuoZ3RfMYpjys2ftdpkv4Xf9Jm8N27To55/kbz39bCuH97ZbzsazJNuf28wkRN9KRb1Lpd2Az44/mFG2mgruEEtUbJXbBYhDeazBG/6Myx8zv&amp;#43;HOsTC8x3ort/AVEnBJCimJv0FvEQ5GvWplmsteMnqk6yeMTdABeBlARHG0awOOABgB6gKoD/ZOgUtbnV9AUqGIAMH0oD9u

OVgO9/j7LmSqWF0lvlYcDa97Jd1rtL9vcTeaH5N&amp;#43;IXSlo6ZMuTptG&amp;#43;zeMbzO44el&amp;#43;7CQLezFGQb4gMtpLY4nR8yVgh6YscMdX2ucmu513pH7GJGXm3w57EXm7s9cdX&amp;#43;7qIwN7krJ6RmO2RErJGiePl/YwZIUPj/gLGqAd5v3krP0wfP4C0M0rNpPg44Wairk4jU2rZRgovv7jODvZi1ioQbi1NZbKaaK12GLPkGp4FGwBogPeyWeFvhDGjnQBYPL

o&amp;#43;E7zEEOmygP1D2lp6u8BBiwILk&amp;#43;yyKKXC3BxcgWE2xmL0mzXtR54d0mWujKxIL8TWjFqhL3G9aIMNp4PCnrqBFLV8FqoYHCGw5PeCVs26tfM1zJ9tfsn37A/YNfX4Hhx5Q8yHhx2AZQAQAhgGAD9fwQRc8DfOVlbWAa8HidrQWgx1p99qo7sU&amp;#43;hvoPntdg&amp;#43;tZlN&amp;#43;Im035G/IWUPsy6oX0PkfamfReiIc1Pqc7U47IXZ62W/0lnpUGU7VpU&amp;#43;UYYY

bGt/ts6bz2Zo&amp;#43;V8RfKv6FHxu8Y/jng/Yapqx8qPufzv0GpWZKt6K6BfuPz069WuvTDBb8kjJ8762zh5YYbYR3w45gPx32IocJNeTYzr0cy3bC3frlcOoHYAGveB/Nx2v3XrUy6iu2TK&amp;#43;ZV4VK7nl8&amp;#43;D91RaOx0gE&amp;#43;ILzQHZpjD1XVgDjfDOu8sSQVmfucXeM73c0tG/BFSgKeJ/xpLxlFOgzNhcKYx2mtQ4pT2tNq27y&amp;#43;KgFoAQB6AboGToOLboF

1QhgaKGIBv2VlYZB46OYGMU6n3&amp;#43;MSPQ3ts9Vr3SFtffE4k6N5yWun3nY2q5bdJInOk7pG&amp;#43;MuUbsoeqW0P61sm&amp;#43;/fam1qfcbmTqGYMBY7hliVvtr91WAs9sc&amp;#43;tdDCj&amp;#43;ybGJbZ/4XncK1f2eAqoqLZvTd5j/M61FzMcufDhsdL2Hj9jvwyt13G51DM2gkZuznU/lP7lLAXzt6116tqYAgLtJuT6Rn57rYo9ko93kmL1wbIXnDqkRkzGsLkERtXOFer

UO62tuUz3SxIG9Rz9ML&amp;#43;AsgT25FzRRO5JO7LFXONW5/0bwCXZcxUPnleNo2rDnddmnGKxaLGghoZrI7D91DZHHEax4&amp;#43;n7ZCoEKHBGVeEY4xJdxxByFgllgHnHdAe&amp;#43;fq99bwjAGACfi2AboH8hMAeOi0iX/qoCMB6AKABz2Ucv9&amp;#43;weWlN5ahvCl5h3eWbtfQEqglPpQt7br6x3GD59PJN72&amp;#43;Ab46zQTrm/UdaW/M6oTfdh5TfJfqK/B35WzXZAcMB

hgGfN37Sbdo6JCDfDhgS&amp;#43;ASPXb4B/S04YCFBr0fE75yOYK7WdAaJtvPP5l4YYLZjLZbJWT879vZ/aVmPDDwFQrLDBDSYDBD/rP9TZac3W/aFjO/bl&amp;#43;EhrJzDrbyAhvwW7Ie5iA8ZqgvfLgSlEubSlSA7VZUx5jvN3ZAmUiwyQAoRTdAdge6M9yABVkg3CaVxqbbmhVYZkJfwZ3As0MBD1iafbyDVLD/BCZDHsfB5YZGiIXuT6x63dEgwifkhDtAe

DnWddgMtCw4N2AAS0yNroJPbv43KX9p4/eXjrmf4QohD4SojQyAR6RvSaSZcbyDQjaMwPeTcjGH6EzdBC3EQcy/eMgSrccxIlaXeA9jOro/8asSYIHV6osUSAu6QlwQGQ7gz4RYSvMQIFgkc&amp;#43;bX4GowS9LGhuyB6KvwFM4flBmTB9MKyK3fZBLwG2QrwKbAmyAHzUVQcxHNTWSHBFp7VVL&amp;#43;aB5LL5ImHL7PZO17oATAC/AbAAKRSp5XFaRBwAZQD

5QHYDEAeHD6AZMAtAVVb1fAD7CqQAF4PfIGtfOSp8iTr6aXaAHJJbzZUPPr5ELWQhFDIb5m/Eb6hbVD7oA636YA236/APZQ4fLGCuYaMIawVhadLS&amp;#43;DO6LEZUAnJo0Amj7ipBu6s3PfZnfFu7hGYe7nrLK6LHOSYPnHrbgvLrxZ1fahSA374mPUd5HHQwHOOVGi70ZwGPEdmQzsC&amp;#43;h08BzQktSbgvWFgpKGUn7MHZIDl6UgJfLOmbxA5SDgUeEg7

cI7jMMcGgqyM0z1qfoz5ArPq7A7n5eHXn6XvdcRzAJ966kQgBbAB2KI4IwAggTAD4AGKQtgEkQzqWo6/vLB7V7cJJ0dbbRyDVr6qtTnYQ3HX5QfGAG9fOAFwfBAEIfVN77VdN5lHJU7jPefoIg&amp;#43;ia49RhZL3XVI6rGfY2iH6hjYdZ5tJbLbUAry78LfzTEgkY4XnCP5lbdR4teAaJvfBpqLpSsFfgEv6FXcW7FXefBYuNdi9kEyBfCeELl2AiS6y

MLTcDfH7XBPYJEnEFJ/JcPA32NGhpPPYHnvK/5Gg5AziCOhS6oLYCYAHSDzqKmx9AEYClQDgCSAa1CUrBCaoLZr4mIagxgfVtbtPQVZ9nGO5Agyh7x3I37DPALZFHXvZXg1O7TnDBKznG37xgyDQog70isjAFptDOfYpbFkgb2WR7U3fpY9HWu6Eg4CIG7BMZG7QObx1SP50aAA5QQ8sFW7HohjuZOYD&amp;#43;WQGSA6P77DS4bXfce6OnAvA4Q3DAxVH

zodUR9Ysg8rjFtF84kQ/LjCA7K4unLrxilZRbcAhGZ/feT71gmTao0LF74eMVSMRaSDP6FXhpnYzSQIS&amp;#43;A/&amp;#43;Sup/wEt7URG&amp;#43;DVqViB8kPsgBacvTICf4RPcaWQ4CY4SPWBw4gWJdrkkSxS&amp;#43;KNhoS8M3DTZVyAvcGWKYpZkgzZbHhdXUSFePSezVqNWBnCDd4otc6wlaSuqjmTnj/NQ4IR6YGLQdTFDDg3bAWYbdDvUFw5wVBijuSbQ6quFAR/cL/

QeFFvS3dDbjKQnYS6MGCgwib5hLAsZAPjAQ7xEEELT4BwZVaY9gr3Swb/BVNYWvTL4Tgy25Tg6lSSAfAB9AF4CYAJ/5/saI6SAJIAtAUgDWoTAD0wToB9AOWpK/N1D/gvB5eg7QTdndob/Azp6xvch4s9WG7Bg/r5hgwb4Rg4b4ZvUb5ZvOEHGzSdai9UaqzfGyqzrfCRjjGE4tHG3D6nFdakSeawEJDdZV3P1o5gqR59HE7DYnMCH&amp;#43;zCCGjHFMY

qPLt7g1CQEnJU4YljDQEIyAai&amp;#43;lLYbZ/FLjeGSszClXMawFaY7PffY61bEA66A64bQHQC6A/C8pSyFbgL8EELgeIAwwIJhZjjQzAwUbFCqbfnK0kGCpLlVzBC0S1aKJTQ4ACGPS34KNY1Aq4TIeEdjU9NAK/cJHhUSNSC70RjYTeOSA4kZrJpLT8jdWOdDvMf4Qu4HEag0GuqSQ5BAGYcgHypJopS8WPqHmDGaHRFxSc/axLm3bL4XvXL43/OAjF

gfyDYgZQAQLboCnAuYBQTX4DOAMWoWzN4GM7CaDn/QTwPtFS4RvcuimjY8HR3QEGGZHVoXguEqJ3RG7c9aaFRglh5v1KXaRBcyqi9OQxvgmJoy0XswPTFMBq7BEiLGV8x4g/365gy06QsA9YMAkkFKPYsF/PEUoVcAQEMQ2agkRIGHgoXvxwyWsFi3Mv5PMTbKi0CZDvMKGL/DYBDMyL5ajFE5p4/NeChUIGgWNI7YfMUmiAkR2SKQrSTI&amp;#43;M2jMo

FqZjg/UGUnScGKw9cSSAeqAtAEECaAZQA1AYgAcUYgCsqY1D6oSdSNQpBaJDVX6ahXlZ09AaExvIZTDQ&amp;#43;N69PYc4hgzVTOw0hauw0Z7Rgx8EZ3Z8F0LNUz1HZiYicHbhYDTEGy9TQw1GfASUA7b5pRE6EHnBtxcpf8E2nUP6txUkFsAp/o4NCkHqPROb75NrYX7Ax4i6C3qiJKA5QvAwHmPWWIG3TDQH4Udh1qK/AKJHiKMyZjp3lSmo3eKlCo0P

nxRlILCMXXeAMBF/TLsT3Q0BDDTHsUgQUVCwGAZQeDEbHuHD1EB7FQgeHIGeqD0AQKDEAZMDRAcqG6kboDLqa1D0ACJb5QXAiLw3B7baUO6tfVBZ/Av0HWwrr56/NvZBg3eHjQ8EE97SEEp3ZD4wgsb7o3eEGLQpfoo5NzJzfNaFbvZbBfcOpKdLGEhyxb4EbPHb74gqOE0fBeAGdfy7HfeOGtvM566TOCElZX6GsfWYh&amp;#43;I3m6wQrci1RL9Zffe3

avnEe4RI/LgdBT/ax/f/bhXUiGFjZwy5jArymlXMbEQ4dI7pEbZwIjkEII9gYI0LhgkyaLTL7H/SLlbSQy8IMKSFK&amp;#43;iawQzTjcS2T7BNzBliP4QoUWSD7BXniV2aGiY/HUHokXeDvtEzQSyIqavkfrBneZCzjIf7gzWYa7sxdTprGG2YwwtmSEzf7jRrNTY3lCuKf&amp;#43;CxTJYcKGX6Wx4n2RcbqdHFBt2Z/TL6K3LT4aBR76La4QbXTQoHDfRQdcdg

ohVCw60Xub8Q1HhICDhp/cNkir3B/CQ0IOSMMeFajzHzQzFYkLM0WsQX/a14nFdhHUqCgD5QZMA8gGoDWoXYDBAUqD5QX4D4AIYCEASCD5QQ0CvAzB6fFf/5zTEnB4PCu7q/fpDBpbX4KIgEFKImG4JvMaFggxEouwqEEzQnRFzQ9&amp;#43;rS7OMF0LBQR&amp;#43;w51R7/U/QCPVo48osm4&amp;#43;uZNbbOV&amp;#43;GwNd&amp;#43;HAQs6EE8VnZ&amp;#43;zAqItvU74AI6SbVjGSYGTdY51

cYW7J/akFteZ6F9RdVEPQ7m7tvTUpgwn1Y5IgH6cgsuydZX4xAIbxyfBE&amp;#43;BWae4g3&amp;#43;AEQMyUYp2LXWSKGNgYbsZmhuOP7aIjXHi0FPeBxUKfCEHdfBaaTFyrxByQYhCrBw/BGg3wX4ggo&amp;#43;WH9wo4H8/CQBCAGACsKYgAUAP9gA4cDgvAKABzAXVD28eUYwAU2JILID5AAqgw6sY0Z2NdeG6/IaHdPPnYOw/VpOwwZ6m/LREoAzN5oA5lFewy6qi9

eCYcouvTRTO1Qpg0t6dDH1z8yUQoRwx2ynQw85hrKcrslcCEyopgHKPZKxaPezoqAlLjzuWJFPfeJErLCF7xVUv6z3IAShUOeDB6GRKUhf6K9ZH7gghCZBaaKzAsMOlCW0HYJdzV8jtA3khVqRYTIbdL4chM948/Q4FNVBNEvsAHBvsQ0DtAJqFPgMuTggeHA8AdoA/XRqE/vDhQ4ot0GTVKESNPFboyIiO6WieRGQAk8G2wqEr2ww36Ow434Hw4

o53g7RHMPC1oewth4GIs2Y2WXAHNLVb77cJHhF3By7Bwh&amp;#43;GjIAkI3eDDbCordYOIidGfw1jIFgi5zh/Jj4lgzJEcfTVEHMKJHIyGiHw1RYLf7WY4Go/84Qw9qwmok&amp;#43;xPEDLBDtNJqw8CoqrwMkg1YEyAMyf7A/wfZCQCATaTYM0ye5eyCQkMBDjWfAQ/HCPRgeAz66g096FQr9EKw&amp;#43;NE3/InoggZwDKAf7LMAKoAcAfKCI4KAAA4cqD5QIYC&amp;#43;DIY

AhJQ2GsiIhCNPEgFGjYNKw5SD7sdHr6SnUEHFLCaFIAyMHHw92GGzcjGWXJfozTajHzfZdCEzd5gtfQMYkAlLZjifmhE0MdEZRaj5nQsdoR1I74HPRgFr5ZgFhVe6HVCCYjt3ArxAHbt5AI5MwIQyTRn7QYjpZcQFNbRNqUgkAaSY9MaTBPKzVECsavPYXSZ/J6F3PfrGYQ3t5SLenQ9vcT4ZjHu5IYe9ZpwwYhNRR3a5/VkHZI/QG5ImF6QwpTG

jXKWSAVRYxOPFx548X&amp;#43;Dh4IMJWYJbBOTNrBxUcw6UjU0wEjbbgPLEdhi8Jv4cMXuCHcQhA/MCZAp6ZWidlPMAHNbdCLCYQZx6XVI9cbZEVlFELMtfng3odF5ePASAAhKmi3GaupndC/AKxY4LSbOfB/GdcxeaYFhm0ZYrU&amp;#43;RfBIXQ4IPdEWJYuHYJzcDq4kbVKpQkN4SSuVEZsuDYLjYeireEUdgX0duwjsQ&amp;#43;yH2UeAvGDFDMuZkiU0VeBRrfYQr

CFoHrvfxwauKBBw&amp;#43;IlBsZBzEZfdJ7OYuNE/om/6SAIwA8gFUamAIwDWg0gB/se1IA4boCBY/KDWoRibYo8apBvUSyGrAlFyzT9Qk4TJYinEh5VozeE1og36wletH4YxtF0o5tHQgkjEKrcb76IvLFmzCLErQqJrLnMtzz4V7r2zHaFDo0iTkkDbhtHOxFvwrjEfwtHS7XQprNY3&amp;#43;FsJBOGCY0raw1aXJrDZ9ZDYnPAQItNqzubR6uGevEoYVOorp

cTHBI16FfSOTBNUf05XYhA46HPnjo8YHikxWR4CHMPRLzU66blDtoskBvSawMGyLcQSE60VGwg0TcbOApGhWHJop/BJdp8jTBAwkCCjoqUWT7ISFYVdcmic0U9LmI2tS3dPEKs8HFQPCPmjdI8iBfmZEgB6BBANwonz4WDg7gsf/SghJtzjIeBCgIJDi/EZhEctS/5sI1zHriQLHJ0MxjOxfKBVAb4B9ANerC/cOh2QfEqRYuuQopRp6bmFS5g3L

wiVogMFnguO64Y0PFXgk34R4ojEto2aFtoz2FOZaoYoGGZxJ4ho5luCAxaQYAFu/ct6RUN4B8kZb754kVGF4sVGTo//SHfVxEtY9xGyo6sZAYD0p7Y9gFgYGXLfnfLgVcMfx5XbQEbLc7GwIy7HGovJE3Y3QnkQdmgCkNdiTgBfHjFW2gOychhVpWHiPELLBliHyFf4pFKECQ9jDg8u5xYOPTJlZkZS0Il7gE5waQEm17QE6cEHia1A1AfKCdAEY

CmAcqBCAPoBBJbACYAegD4AeIAFYl3E71d4GiWYTyhvOfZxYsAEU4IglJYwMEpY6lFpY9RE3gzRHUEqPFp3U&amp;#43;ETPDD5YAs2a5uDlEL8BDI0oVXbMY32rOyIMI7nLLZ7nSR5F42NhbBRZ4/w7XriTedGJwjrEnPT0xRiZdFbouQELLT7527RJHsfRiFsg/756E67GvEc7jE1FdjxUQ&amp;#43;aABbexSDQlwU40LCWyIXg/EEeAUzeXj4fCfB5aCM6ghNDI

MkHEiskFdhgEgqH64g0Hfoi1I0ncEAMgfyB6BFoBVQeoDtABkBbAcHAggOYDdAY4BQ4Gb4uguDHxHBDH6ads5ztfAnd9KN5kowaGB4/X44YkPEETIXaIAuU4wSYjEVEknJPg1lGXTczyFYtaG3opb6uWLaE2iViLPEJyEcY7MFCE&amp;#43;rEiE4uF8YwKqV4skHQQyZaTHO6HKlLrxeIrcjd3NCE6PZQETYrrYBI0My5jNY4yaZ/YR2L6HRIo7FfSdrZV

tDQmLEi7HsgnQmrEoWhYuFbBLcHTTL6V8xIHBGhcjVdouQJdjJYLxxUwkHwJYEQaaglYROYRiD6vShFOyRRIIIe2jmKAESA&amp;#43;bvQSQqKJVYbkH0xLDwRYQeCSuMzQgsWdBrmBonoWX6zIqMgQMoRbC/GIYGCkIqgHXL5jdsc&amp;#43;BEDYPTeTdrpHYOCj4IKuwdIJKb&amp;#43;6fqyhUAB7CkHwlErPwlgogInUqfADPA&amp;#43;Oj&amp;#43;QQ0CPAF4A1ADgAjACgAWAY0CEA

XUjggfN5YE/dTQhU2Hs7SPiEPYNBexRLGebEgmwA1RE0oiEFTQ&amp;#43;lFuw0jE5YokkUYlAxcAHtEL6DpFbQ8G4e/a2ZB&amp;#43;UGjANAQmcYyOHcY4vGUEJt6zohj7DEqvGjEm75jBAbHZ4dCHrY4ybP7HoJD&amp;#43;CAZecTvFT3JiG7oqGGvGDGhcyRAT0MPkgS0IdhhkwzAN6cyEcyKPwAoh/A1GPATamS2ijmNFQcoKrrEIVYoL8KdiDcHDL2OCgTJ6YAw88E

/B6JBeB4EnYGOYl4l9wqAlG49cTx0JoA8gXhHVAXVBsAOKSFgEzYtAXUi/AfyAwYjmzQkuS4UEYtF4PQ0Y6sTX7k4NIYokjeHKWfImjQ6clFE2lGHw&amp;#43;clZYxcnmXDAErk6mwxBFgnXwyVhqwT3K9DQMbcE5dDRYKmgHkrMFdE0VHMkhtzaSfoll4wYmiLK8mckoTG3nZ05VbF/rtEXYYd48A4goSLqoMSZqYYYx7qk5YmKY/QnwHKybkQaBTA/PH

71aK0lz4BtTgUFXgTsbGgpaTYS/tbiG1iIG4rZDzDtA55aAsLMlIIQmioxPAJ70Nbgxog4EuYqinIGRoC6of8ayAKRCI4fKC6keoBlnP9iEAfmblQftAt9eawxYptZq1bvq5Eicl2w4EF1orEn9rcPFyUyPEMo6PFhbeaEsolSm/AN0Ico9srghIOHOqNXYGSUFjA6Su6AQqj71vXXY&amp;#43;ENo4DEgOY3Qh07OUrkli6e8mn7dR43kJK4X5QfGak4fG

4kBIjskXth&amp;#43;eQbgHGRtSXCFYSRUvdwsyUlB/cLzTwBZGxAIVWTCoCrShUIql&amp;#43;SEqnvE44F6gGoB9AHyA8AcEDS/P9j1QT26EAOYCFgOABVAaX5tUkN7dQzqmfqVDFO4Hqn9nSckqIrap7wnSzpY3EndSGgmMougm5Y3N5L9H8Jkk2LZKgQopdIRZ5JbPlE2iMdjPyB8YAQ2t5AQsynF4h45sksP7/wzxHqPS9buUlymzE1zr/SRRaqEm575cE6jD

NbwwD46e5gbW6k9sRxQZkoPzV1bxbgUD2TGLByaDZMWhDtNeDK0HXEsQdGZA0Crqg8abh4CKVzXpErSuQbebJAHfBMZfzDXKGBDy0VKozGeHisNPgpm0FA5HNBLCMocskZrYqmG4iGm/o6ADtAMvbWoF4Dw4cDj0AZNGlQOYDx0UqA8gLYCdARoDMEqEmu4hr4TQNdiNPRXraCC2EwaQmmngvqnngsgmDUhtE4k&amp;#43;h4FHEZ5MPAkmsPZcnx4lAyhR

dSl43NcCkvWGI9wYtxq7MyTPeKbi1Yxkqz5TfYeYWDKLkKyn7UosHXk/fiRiGaJy0vCFVgmP5zEsTEro7oQCk11bKo0bHd4iY4enBLyKkyLirJIyZunbdFUNFYm3UnAbMuUMYJEMYGAdFBBmSAKZtjX4RV2Hg5HNe2RYrafD80czBkMemruqJex/6ZfS20aPbvEHrKT4pBBkXJQzY0fIpzjUbAgIZ3Qv4J4I&amp;#43;aZ&amp;#43;lpbN3BW6Y4IQsc8zgmcrBoUM

sQflYKhskUcHPE8cEG4yinR0m/7tAIQD9oZOhsAcEDtAeOiSAWCY9AY4BQAfKCWkPOmwYgumpEoumEo9vpxjEAHmReLFWwjDE2wilHJYqSmk0tRGyUwjFN0yc4t0h8GEks&amp;#43;HEkq6o5xJmmK7B7a1YVlDsTTpZkWfmSu/Q8mMk48k9E/ISkkadFSowGpzotrELooAZqAzbFrY3bELYyBGvrZvEfk8bF3gPMI9&amp;#43;asErYjY5nY&amp;#43;rwykh878fPvG94v6

QJ/XK4RMtUlaEjUnX04KlEDS1ZiDcJ6vcd3Q3eHPEMXYLDzven6cwwhB4zEwGRaK9Bg7EkIt2doG1A8BBk0Fv7P6EFKdHeuYNYEzTD8ODoQxK5b40UKjnwLXhYBOEloBKuwzoLWhw&amp;#43;N9E6HJLB6QeKh9kIgZHI96yPEPkhaaY2krxLcq5lTCjAU56xgCSXqzGPej5Q7WKfo14ng0sPKQ0moAggGoBbAa1BJARHCdAcECaAfUjWoa1AtAM1w1AHYA

1ALh59k&amp;#43;ByCw02HH2GREEE4nCV0rDEUPUgmYkvaZDUhulDPBRn3gsZ6VE2MHTUwUzGI1aHM0zlEe6CfB8o5Z4tE8xBYuWTa17YxkmUpklbU6R6vWL0F7U66Hz0uyk9YmKofnCUmRzMF5ZedQlVRRRaTQAv4/SZObeMgJGltHm7zHE&amp;#43;mENAJmAHZlnrEP6FFzJ05ZImJn&amp;#43;UoKkTbYM7fHEC4Yabl7b7Jxae5TWh3RAlzWSbuBNZD1g9XbdqrwVnwH

IefCuo/Gj/YAPbrWesRICAXFkgn9DokYkbL3HYn3mUQ4/BJcpgUSuoIsB5YLSGXiBhZBRwrJeB8kOH5PccbjvbGbjqdYbDAIdxbQjQHQMFJAQ/cTmg8RV5IgseJpfHfFYfopzGbMqOnbMmOmQTP8alQPoClQUpRPAtXyI4IYDWoUgCI4AHCGgUknJEqIZ8MxCANrKPhM1YRkV07InEPf0F5E4mkFE6SnYkimmN00XZAsk&amp;#43;EqMqonnwy6aV7bumO/

FpaRCAZFbkpjE7klMBJkyFpj0&amp;#43;BoMJXom1iWOEXk1rFBzEYlHUt5470gOynUqOAjYr6SYYSLqRiXym8s5iH5wk&amp;#43;w1hMNah006ILA8ThoVIeADGdbbLYHopaSNRL74Pni00AkbqwZC5oBPmFVqAySgIUGlpKbw4lQjiqlQEECSAPoDfvJ24IAZQAtAeqD/sowC4AUUDWoUqC&amp;#43;wh5kexXuCNPTpmlsxFnxY0lHiMxRHVo9En9U2um/M&amp;#43;un1sgFmNs/

EnKMtumqM6an5pHtGABIBqq8d1pOXPeRbOEdk7rTFmEzJrHiE8vEJZKQmlgq761BBdnBGTjkiYrelrUcGbCkmraPfcBFuUjCG8Ydu7pheoiKTVlmCSE6goFJbGHDNxlCcsDA9bXgFruJP6X0gC4BU1YnmJCioS4gAxIrOYoOyXeAdjPdoO0wCiX0fsTflIzk0FaNZ82D/QOabHgGDSVzPeGki5nSnq5TXeB/6E7hd/H7Y9tf7w88Lhg0/Fpm4Ve4

KvWDwrTMhrBLM15gKcDmJsw0cRNiJoq3GAgQhcoga4IVnxQCbfxAsJx6waAAyUoZpmR9ax6TFJPb4oHGjICCGjWOBjFKQTCh9tO8y/6P4aTcCoo4xUKiddck6QiHrIskQcyCsaPbvs44oqBUqnUqWiCaAHkD4AHYAtAEsB/sK4owABADJ0XVDjgTQBhgNqmk1ds4CxQNIjktuRiMnBzc7T5kjQqlG1sv5l4cptFlEsamt0sjHt0&amp;#43;mlmzVzIkwLU5

rQjuHjcFbmMY/qEIsp3BInaVz0c&amp;#43;m6Mcw9gi0v&amp;#43;EckuVGphaQnccz0xfnTTmTYhTSt4uCCpIkTTVg5TkRXP2B83cYL3fFOpI8r/Yo83m7VgxQEHDfbH5/LTkKY/lm65LHijsZwk&amp;#43;Xaupi4iVzmFQrDIZZSD8kSyQA7KEiVxba5bsEsTMROVzxkwGhRYbiHQ6fkG20Bn42yD7gpM9YSs0YV5QiYXgv4nWRcRQML4CQspVhErAfEANhq8dbwAVTYIj

wSrCu4auoOAtuYCQCgwmYpbikbLEammXHiuVEPr/EAkZuyErQqHShjDYVe6cw3fCGYMcZ/kWRrrMyNkUU/wmDcjipJAFsBTc/QBcIkjqNAd14UAYgDGgbADx0JPIwcvNn&amp;#43;3I2GTQYO6OLGnrlo1tYfMyRmSU/bkyMmckaIucmjUhckx4vRELQjunU2SnKdsvAEiPNmSwUvtk5El7kohJtKRaD7l7fBrF3RZjkh/aynG7P7mXfIJEwQiiEsfBJHXU

uJkl1e5ZlVQmYb4V2mMtTHjvwcHza0NZkcZOHou8qslu83lru8X4D0AIQC6kDgCGoCgDiQcUJNQelT7M3/6ugmEn1PFBztnLrIw5DbmhgUSloc8lEYc5RE1slPkyU2clm1TLFKM4Fkts0Fm5834CxHAvk0YhXDmFIiRtHcrEetXaGkHQ2RsRQ/q&amp;#43;/Wm7osienq9SIR0QH7kV4jxGlgvBqAIgBRS0uJFSYoHl/gElkpiDdk14bLKVmZXK3kZkF1ba

iFOU8Un8c0JkJI5QlbY2GSdCWJEfPTdHHUagWTNXaibsvQGxMnTnD4/HkEDdKkUMdmj4CJXgGQONbVqb4S3EDfR8Ck4wP&amp;#43;QixqFPgXopTQrR7RyGUyTHjgUANjPESfA3CSXEXwCFrucm6wc46bL2QWGEAE1ngP&amp;#43;XWkDGUgRGae4hHcK9BI47lBGE6VyY8LTRPM3Kau4BXnEpRxSJ6CjY/BJ/BeYMPSoU6mj0kXrJQM5ICHwSZBNuOCiGFcYqwsIU

grlTgbg9fejEwttTpVGWHMVChmu8qhnribADEABkCSAF4H6oLYCSAUgCvsfKCYAF4CZOUgCdAJIn50lImR8l5gOMAAQEPURkJ8i/mUoneHX8utnFEkhbyMgjnU08amwg9tEME02YoGTAnv8orHM5Rm6wie&amp;#43;EDsw8I7XeBkMktFmmM4QkNuDlBLwnFk2MmdkL03ZZLs3ryPkl6Hao&amp;#43;xkYYZbGTRbMI5ZaHm48o1Hd81AYnEu4kr4GYFCwscZJYANg

bAkCg9ctlC1/YPSf&amp;#43;D4h0yUkgskD7h7CO2kQ/NC43bJlDkuaVy80GJ59chHpfs2fmyZIYAUAeHBDACr6sqXUj5QInp/sGADL8mADso2DmTVP7hVC6PhEo5Wrd9AVZn81EkSU6tnSMhO5h4/5nHcwFmEcx/nEc1tlqMsJoUQCfZNuIJxwstDFjC7rpW5Q1aosjy6mUjFlnQw2icExYWXk2xmzsrjkgIgJHpWTOELUDTkUss6iDUAryDjUahHC7Qkn

CoM6TvOfCXXdbiA&amp;#43;IIX94CIqu4OESkyUQ6JQgKatMDhjHvZIA7BH6yg0Mf5pfMV6bwFtqs8cMBPEp3nkUos6UMmNk3/GoCI4XVA8AEYD&amp;#43;QAWpVABTJVAQgDJgIQAIAOYD0AVGm9k8Pn/vCoW17caCzjc2HxYv3GVs3qnYYrDk/MwXaHcloWIfXWYdCs7lLkkjm58mMAT7bqzA8cg5u/EpGkAzQyXpK4SITLkWUfbomzCtHROENsIz0ljmN8yCGx1

ckF86QTk8ApvEqcx8BSfMlmSivCIxiBK6xzW3Zw1Zxk5eC3rwFNK6ZwrzoH02GR9vQgVenOTGQvZUWsC4KndwcPDLYKVyt6Rv7GQi/AVdRVzfGNQqMwIhDmFa1kRYDW6dZCcSHI4rR/Gd&amp;#43;AjtM3AbvcrQQ0MAQ8MDSQCQxpFfRMEjXs5xwUVfbg0RKjkr4nGLcQ4ZYsyKLksQQV7c0YkKg2Zx6o8LDyEoFVwXHFW7dwY7jlw1QodiQuI/cSoH7xK

MrlIrEZcpcOQgiz9ngojio/sIwBbAPwZDTJqGkABkCL8kbTx0egA8gIQBUY6MW4o&amp;#43;BzCCwTwTeGoXZEgRmgJFMVE06unfMvVp10skVHcqgmUivMVEc87mFiy7nOiSCBVJeiqGYfeCuWP/lZ4udARYf5rkfdy4NinkXgCoSbxFAUWz03FkCY/Fkx/GaLRVRlnP7eApD&amp;#43;OK6j&amp;#43;fMaZ1KuD5Xb8l1gndkTxZkXT4Mdr2SHsa2AgySy8i2hVdARiA&amp;#43;Xd

qFYcdiK0czQopKIT9sVHjdMuMppNVuwq3TWSOKKEgwINVlj4EcZi0A&amp;#43;DSuUhnOi8hlRst0WF9GOmGgbOTShES4zqeoBAkoQCYADzG4AFsCcMiJqcS&amp;#43;DGB3VpS8SoRkyIuPmjko8EEi8SkGZNMU10jMV&amp;#43;bSSXZi8MF38o&amp;#43;EP85tk0i5/mKSzQBvAG6qrcT1RU3Qj6dLGE7GQL2L1iv37josxleiZsh0fKdmSE2yn/cuTl706Bg8aP55&amp;#43;lRP5IYIQH

w8904D&amp;#43;UyZJdR/LqPG3br0maIffVemyYjVGqkrvlbigVlqijdhTcYCh4IZ3Cn3EQWe5BrKSQ55Zr4PmLHRNCrvWTx7aAALDB6D7hPlD6nJAFsjZYW2g1GaXk4ym8UI0UXlZA5BBY0MbBCHEpHItfdwKpQ25RROcbybKgQOQR9kg&amp;#43;ZBDR7ZkZD2BUF5lLxyd8UeDSyF3AU0c6xV6Szlh0shm9w10VJC90XrifyBALXUhsATAAuuMSp0qJOj0AKqB9

AKqDx0SOgITBwpITPiUqXH3FG&amp;#43;U/nbcqAGJ84kXJ80kUUEgjG3gmSXlEuSUFi2kUqUmiAFpabhICZDGBjUm5pgiGL8ivSWdE7kVgChBqb7QDrKXGdFXQpYVQQ2NqAwsHm0g9xk3SpLq8QCe5hgT77TNJUUsC9gUTvBT6U4qvSs0EGgsBWzntdexxjcV&amp;#43;B&amp;#43;YfBBy3IE5mmIwquyBAKr4XuAwKXbCO8ifkbMqfkDc5IXIGXUjMAUHAq&amp;#43;Q0D5QMbRPA

0qBCARB5CACgBsAEYBcUv/6tS3&amp;#43;LuArWVACn4F9QiD4aXQkUDSr5lTkpoVZiuRkWy9oVWy6kXyS22VFih1oDCtaGYxddb2eIj479cYVPwPmjV8gkF8i2lzQCtjnHSwHnt883bCY254Py9OFTY0gVrC5ZIrs8JlKA9QEpeddGudSWnTExUrY8xdy&amp;#43;MjApPPd04uSubEAK5HnkQinTUs2Kqriytpcswqz0QvZZdeIvC9&amp;#43;dBW5wme6/k&amp;#43;BG6ctsSkkd

rAZ9dz7tdEXEW4JGK3cXCyIwjmIuAttSmST3LWYIMLM8/callNM61Xf&amp;#43;Dg2ebDIqfA74Ic5EUoGipVc8AxNid7jCTHwgCgj4bIsbkiwaYwpnGEYw8MfkjkkDvh4CQcRTxCdhJaEEbzsOa7mk95iGaAWi0kMoHzePMov4iPT20CwFGFZ4hCwy6LfwIPwIKBdie5aLS73BLkvUasQjsT3INEtX6dsfshWc5GjEIXCz2OSeAkCQl6PchATrvThr2iDf

TEKne7HpPMAByePr2Y9EiCkdzSHBIizxYMiWGgiiW8tEBC6wv9jx0AHD4AbslXiQJJJASmzKAfrQITFr7jQTDTpLculrQdI5iUgPFEi0SULy02UKMygkjUk7mZ8iandC8TrznekVSdTRkp4haDfUSEhjyl2VrSxoGr9M&amp;#43;WOIi&amp;#43;WYZQOXSooUXLCyyXhy2AbBMv&amp;#43;WdEWJFGYGTHdYTZV51dWnQvW6kklX9ocoU2Q7CdhpbsIDwODSmao8IbiRYBxY

sMBUEK9RiC1dYzRYkXhonCafGt6QyHvo5Dp1y0WXT8xuXUqLYDJ0fiDYAUqAwAcEAZCqoCGgboCMUdiVhimADcM7im8MyPnEjBxjxFTvoD5TJa9Sg2WYYo2WNKkmnNKgy7DUtoXynKkXTSjeWzSr8L0iuVr9KvO5R8C0lNiUPzbA1MG8OV3LUQT2VHQrTqGS32UQCjXpXynXqwCt&amp;#43;UaPdR5Lo6cUPfYgUzEzK5EC1QGCql/LVgpXKK06bEKLHm5T

i/xkyLb77csk5LbHeGpF4VRaAK&amp;#43;GpqEzOEqq1/ZKEiTHvQlZVwKnwxIK4BVnUbrY14dZI14HMZnUBkE8s5gV8swVm4K4fHqwYzR7YTtqkoPmS0RO7pwpWg7/RITar9XMoVuItQwsHzSXwdbCQUxrADGXLCEWAYzA8XVn6smDrboMgSfWW6oANemIFqeuH3ctnmMtVdiicCvToCR45R7abJmCuW7eWSm7YpFi5ISxKk5aEmS1qJRV76TiB4kG7wCM

ray6MShI/tRa7dAvh6v4YconYF/Sf6BLSrGO8x0HObAxaVyGTgP4JLlEyCWPLFI&amp;#43;iIAQ6mUXFE3YXh4CIbCYaYhC/MV&amp;#43;54CCtwJEV8wyJYiUO0vT5gUZzCIhV5pDtCLDMhXrIQ43/QYWcV5V6b1nh0uWGR04qU/jX7DJgAHC6kHkB/sXmCIE/KDEAdCAIALYBwEdSClQHG4tS3fm/xYfJayy5qvM4NIVsupXEEvFVX8glW0PckXSS1eWnc62VKUu

PFzStiC&amp;#43;jeTqawUYXMqxITeQxYRMq4AX6S7aV1Y3kWTonEKl49sVz0iyUnSqP6IC8Tnv9IBUJ1V779izVXDirrwTuFBUEC9cU7ojyV7o0oxAkFkYd8Y4Q3CahXwSq0XTiVHh2LThr7ucLQNdfXKwCan4xYJf7L4QRhgec7h/&amp;#43;BuyLGcPA3&amp;#43;AfTxCyfm/KhuXiylRo7AIQD1AeIAA4NQD1QYwKGgF4BwoscKUAPuUITXZiCeY9jpLH0FN7dDHYqiR

n1CqRkmyy8EtK82WlEy2V4a9eU2yilXBRekV1DNRQNDHumqwN4Tb4Q1arSl7mWyB4izwdlUbUxsWC02NjOElxEN8tjVi0iWmFjCZJbHBvFAodAWTUZZgJzD&amp;#43;WZsZJFIC0QFY8yYnIKoF5XSk5ITEXvylzUTUQHF1Xgw44V/SuA7mGYDL0MQCrNMmWjDWWmQ5aD&amp;#43;YeLW7gn4JQwL4CJXkQabJBOVnir4SLDCDKhjaYMyRkCUEhDsfBAPlFBCXK7eC

S8SWQM&amp;#43;deYaY8mgr3c7iFaHUWKuTFBRTSqqIym9Dy3QhATzEin3wecj7YL/Qm5agbxS1&amp;#43;AwXfdzIjcYqjsa4zxYENGpKt4l2a6lQ8gOYB/sZwD5OToAupeoCr1H67hSBoAjTRPFlC/NmR8lBCoqrLQ4i2xTdS8nC8KoSWoaqtnoakkXRawlXYatpXxajpVdC&amp;#43;gndKrO7zSn0YcosPQxlHSmJNDc7CPKfAW4EYVTC72UzCsrX5CeFiOKuR5xwwsHs

a6sZVWebEBGYXRYQQ4ZPgPCIvrQ7HvICBV3rasGI1d8AilTppeGCvwgYOvz2lIGTzROvxvPFohulMvzfSvpo6lKAYeM/jUe68bWGozcXJyoQJQkQ4R1aG/TWFO1TdXGjZbtEM4K0Kx4MUD8oHEjmQU0BQVDGeEhKK37g8Qv/FAGJRUuyWmSliGewDsMcSgyx0mL/FfE3i6i4ByNJlWYKNVipPzSo0AJ7s0NmiT4CLR25O6Kf0QmY/8PASGFAlovM

Fng6io&amp;#43;wGFBHj16OCgHqjGIipN5E/wOW4&amp;#43;PTez96mFhKKwwoSvMLBM0MczHcUWS0kHbiTq/6K7axhgHGJjIgWaLLdDAsrX&amp;#43;JHVbMkqU3/YeAA4X9VihbNFCAFigUASFU4ueIDDTJBafAuLalo6ji6y8D7JihnWpi&amp;#43;eX4qlnVYaqSXs63DWc63RFW/HPlEa53Hpaq&amp;#43;GZa32rk0VwGl8ku7CPXyGHwd4LrU/mmbUoyW67EVJWktsVVa8yU1awVUH8E

UlHUiYmbCqVWBMqYnSAhYmzUSUkPnV8nsswbGoKp8lgYW6Wm6rBUa04KkG5JDJjjMKz8g8xRXWWGL4kOIYrZPEii0W7orsWyF/wf4zrrAa5LwKQbFktmQX6U4Tc&amp;#43;ZeAVYAVB8yWoxvmfTqYUeWjobbtg8oUV6U8RtSGFQB4WQU7o4qRzk2Sfx5Wan5VsXMWXH69cS4GaeojAYIkJSXUj6ATQDxAXUhCAJICGgOSAMgbtHoiwO5wU3iXIYyPjCUtI

IQAsLXoctEmX85nV4Ys2VEqleUkq2SWJagjWgGylV2tF4DXTHtExaXja17XSlWIvwrVaSZUnk2Ngr4LA2Ci6dkhylgEzHVOE7Y76FRMiMQ7LPsUsGzxnxwDXLuSvOFSajFABTALBNiEczVc/W4BhThp9EoRlz4T/QSuQUj8oQZEPwV5gO5IDy5U9lJw2ObAjjdf5EnLGil6LTSvmbSGkUvXGFS&amp;#43;uVSRf5UcVX4DSCeIB5KoYAmAOYCY6vSJVnMp6

aAEYDRbAI3SzD0GHycsXaCA8GjktzbCSqumDSsSUC7EaXxGtnXEqvEnJGslVJa86ZEag2E7yqFkKyRHjPwVyyZ4/lG2KevTTGdIlbS0AUy6xjUNuR5X18pXX8YvA1jE2755hZZiuUiVU0g95xrDVvoUmo&amp;#43;mMGxUVkm1wzda5jB0sn&amp;#43;WQImT4Kq1&amp;#43;U488TVX0qbUb&amp;#43;FmTVYkFgbwB0pIIZ/SeK08WHo&amp;#43;4U4xC47rXObAuCwViUQOgG0kM0XQyh4nj

GaRrxknYJdwFEKRPcYrGLaxGwnU9pXKrFzww5bCEvIFi9saeB/cC9IpqsrkPEYGJSCmbYHqhRWr9AgTBYQHU7Iyqru0w9qDwGHrCylhGVk2zV2G5AzCtKFHJ0JIDoGHPYuAX4BsAZJx/qy3BILdIkVK4xDoq/GmWM3vqf6kSU/GppW/6&amp;#43;D5jSyaETS&amp;#43;SlTS7LGpGqalFi/640qnh4pgM2g2Yb4GBjFM1VihKIVYQiwvwlA32IjE3oG6R4weEtnYG

3E3skgVUEmu8kOU&amp;#43;QlQIh85UsmAYgoHrYXkSZqRiCAoVg4JlrDMfwUCsY5fSkg2gwig2dYpWmNanODzUQArW9BBXAwmBVrigcVGqiOag8w83u6nYWjmhQnksvrXw1E7H4Ch55LEJqJqcw4VQKuCCCJRAqEswiHvmyVV0Ch83N&amp;#43;O1W4FEdJfPVg17K9g0fMJhYOfGdCCG4JWarQHwnBXgoHq7fCCpd4h4IXHjRaS3DTsccyNuBro2SaPb7wQ2iM0O

hiLtZzB9sczDmHF1qWrGAIZq/ClJRWDT0RTFBUbL7gOEJpLojYKH01RdpWAtVwDGvdzMZIEgfCY9H8gycCwkcey1iuJX&amp;#43;CiPRKgvx5UMJRXzkMtSIbEPwnNUWTL2d2RcQLIGrCSmqgBahgrsL4QYqIEjIqPCV0veLltMQzCCofEijq/SQavTmJHq7doePImikWRmCQIZhan3aLRUSL4T/GQ9x/MMCgS0Y5wK0KVzeEZpkzsVWJcyCex3WRbD9YJj

Ih&amp;#43;JGjMwjsSY42JqvcaWIaY9kQ8kfCwQxdql60bxaBFQcTD0mCpQIbkbvCGHEwUNXh3cbGgnzBmTTcA2kPpHrlr4VhVoUbbLEWvGjEhCuV2DXzlVW3Th&amp;#43;7dbCQkP/yTlZMqGYbpFvq/YFg06NkBm6lQ1QDXy/q8EB57CRCaAThG9VJJxsAOYAcSknUR8hVrLfCpU0an4HvGtuSocyI3n86I0NC3I6Ly3Dk5mjLGTSoIKdC4A2TUjtGME&amp;#43;aU&amp;#43;3CA2

3cqFlS8YdiuWPSkh3ZFR6yDJrGU6XU7SpsWlGm2TB/bs2i05vmlgzKyL0zR4bmvu6wzAW5Ca/VUt4&amp;#43;GqYC783Cc8VV9m6XSiY/elOM7YX3m/kkuMzG3gFXxkFeEag&amp;#43;dXLjAWj1Xbi91UrxU2layI9hK3TbA2zejH8oC3CpMp&amp;#43;HI&amp;#43;QzSXE54R0wL4Zs0A&amp;#43;BLwHRk4oQ6JXCBYFQCd&amp;#43;DLOHfA3EHiK/tVbwavX7wVaaPy4ka/T8g6WjrwZeCPqtCjx

krKo9cYXgxREM5i8QAI7cH4af&amp;#43;Wl7GLb1pgeItSjYIEgX6f5ighR7UVFcEIOc1NV9WoqG2Gr9UVAUgA7ARHDJgdjyEASX7yQKqCyIT3lGAeqAmADRkwa3il2MSRGHyNa3DkxSp1C3a2RaxoWYa7M3LyuLWAGhSlZ8kA3FmojVYo260mIqFkL8D/Rute2aaSxE2SQt8phs2jVeygyU&amp;#43;ysdly66Xh8qoYnCilYV8cw5JEG6yUXrVvnW7M6XbY3VEDi

1K6ao36V&amp;#43;6tg0TbLHjQkaQKGaN8b/RCCga0QCm20ZazMwpdgzGc9HAA7tVcDA2kcw7bVlqMC07qnATuA7M6arF7r7WLDw1y7Pp7GmzUHGlHUcVfADRHbAA1QkoVBYy&amp;#43;2GMJeojAUeF8CNqmVi1a2409CbZEh2bjk9M3f6jDVZm0MFHWymku&amp;#43;BLWgmos2XW3oXzS6dZlmvCRRRBFJeg8rGHy3aFTwACmbCYo27SyCq3CGu02Uuu2LK3klrLI6nyi1

AUU6AJGt&amp;#43;DdGw2gTXlcRLwyYqUW0ChG0nJTDCLiyg2DEag2RysbWLoho1wQk3XnmiHlhI1dEvyjLi8cih3EOhoK/mhxknJQm02qiJG920m03U9g0q8NsQuzIZWWQJeCFYRJU0MNmjIGiDbmJIYHs/NmjNXQClDcKcyowohFUudtVEK/7iS0IdVI&amp;#43;KvTo49EgRaXU5dtNq6ghTpDfMfZCtc6fXEuezAMjYRjGY7eCNuemRbnOwkb/U&amp;#43;BK8a&amp;#43;Z/CBm

Tw8WnnYpCHiG8g8rP6IFEOyUK1BPGPV88IIGKglEgoy3WQEScmVePWfVH4cEIVFRPRuQyexDtEFKU62WJHwNSV5OtM4PdZ4gLI7&amp;#43;4uScaytMlFL1qF9XNXLZHI0HQw34AzAACQcwawG7ytMQ/WDWx232vYWreG7ABgYmoAMgfi4wACblQq7oCPAsjmPGx0iK8mSo1MTvrLfNS5R2hpUZmn/VxGmLUJGxO1JGteUgO2PFpGlLUZGh41QmxXaf0O44

l2isXUklyo6DOeA&amp;#43;/OjXomr62y6r0QWYRDUVGo6XYOjjWH0nUrVgmfxLi9RxBMkG2QK5oIVcZOFDCJApyYb55KaKYIMG2bEAFJLohM/h1smjLgXSxOVuqgGUdwaBSQ4ojYLsaWTfcXLTjYFGiCmvQrgtZYHIIUsWJ6dhhA0SxTkMf4K3RYyAOOefB0oXhVDjK2TzkVbDbCb/gGYNf4RWn5j67beA5nI8Yt2TEibYH5ivcIqgESGjXtdDBA0yfwqZ

AofUvNfk04oQrm6YKdjN6aER/CvQqU/HGIB6bkgeQuFhQpZ5ZagwZ2fq9waB0FoB9AWIkvvNRgA4bIUu2&amp;#43;qClQUqCGgGUb4ARmlB2t3EU9ZnaDwBvbd9FDV9S&amp;#43;pVzyvbmx2v&amp;#43;37wg53p89pXJ2zpXc6yZ62/F4Dy7KB1G2AEiQCLb7F3UXXEfBaBYzM4QdEjlUfTAWmYmtHR32D&amp;#43;CYOpvm9m28lwYMG1gYdrWIQ8h3kCsTlkOxh2rs9u2J2MJmlW

FF2tGsDC5mdTmcm7Tl920cQ36CGhQ/QiynCCWR6QI2mqJWHWEbFlrbocg6U49kRiqagJcMWpksQUXgqHO7YQkawkjwaHQ5VQYyI/SIR0kPEi/6a1FgeX/iKuT&amp;#43;hUbZFRboJATL4TeaWuh23Wu37DCIXVC4AWs7Ny3UhJAaQAHiXVC3M3oDMqZJaKXNByGrUI3xY2pUhutDU7O3&amp;#43;17O1nX/6oE1U0452Fm051p29I01DCXw3TH4JECdz5cEkOFh6D

CwaO0u2FurZ5TKydGOQ88lBy&amp;#43;ZVVGt6U1G4YKifGbH1GpF1MeiuC&amp;#43;IvohE2ofEk23F0/RX9o2PVSXE4omHaU&amp;#43;HjsMeMkQ8S4STIyrrr6zmH0w7qzEUhpGBsRYzrmFhjruu22JCv5Wn23lrOARHAIAZcL1AZQDgcZgCGgIRDDwXUhGAGoD4AfJTJLExAVK/zVs7Da2hgSD3bW2eXYTcN37WuO3/2hO0xujnVxurnV009D1KS50EolDLVdslMCl6YB

C80vLVsihyD44zqVom6u6lakt2lGtQR7Pf62/cqt3diwXSkGqkGkm66Xkm9ek9bCcU83J8Dzm99ZcfGgWDmu/h3nLoLVgy6mqkqg3sOnvFo2qR24u7FLNiIXmb/aXlB03SBH4CIohCiXgHuOPTUxARg6vQ4IB6N6xliHsbgkSlpskaHYOosASEuB2SCoFTWW5LTR8vCGUzccYq/tIbIeqbFCIylfX01UlDQ6wxYE3NozQZd4z94ARjUMfGFT4WGK

hC1RJCFYxYhcgSA3eHGhCoW7oH2vUG&amp;#43;m0FH&amp;#43;m4Z3oAToC5K/ADqgX4D6AGoCGgEvr1QEzbx0DgCdASQBzAKMWLWmMWsiAOXGRLdDpLGnXDgLZ1hu7eFueyN3k0gB0Nso53AOlD3Z8tD3nOjD0anTO2QsxXaWYgCih&amp;#43;eA05u8&amp;#43;gLeq22oO761y6kzQVuzsUTHEK5ikth29i1VXkGt87Na9k20O8rj0O2JF5zBc2pwZ1WDahr3oupr27K4m0TbGAIY

kFVxS0VKkefZ2leaf9pXCLe0sQbfU9cIewy26XmavAETjIbWRfcIFg&amp;#43;ERfA34JEaivecZdia5RHcJ&amp;#43;Aq3ImiHwYDLwkIj3tdVnyNqCV56HX7yZaNPTwhdMqQUuaQTiI7A&amp;#43;&amp;#43;wV5Pu9T1DWjipiVfyD5QUwKYAbRoMgO6DJ0ZOg8gNJzMATQAShFvplOrWWw5agxv6xapbckOI7c3FUwe2I3kE/Z2AmxI3Am5D2KU1D1gOnpUZGur5XOgZV0qlBCOE

RamVilLbvGfVITyuL3HQiu1n9SCq3Cjn0HU9rFzsuj1o8lpp8Olll1Gzek9anVHXmnP4nmntyBGDLLWqrCHAvX0r66iOUoCur2TUH04cemR0TbR45cyJ&amp;#43;BH2U&amp;#43;X74aIUu9DwoeyU4STFYfiufQzTmAhxau4ZqYDkWcw2YerQOQbyVjAtYr8RTGIWC67yQxWYzHdIxK&amp;#43;Oy1kbcU9xx6cYpHwafFawFv7jsQNidZCrQTIHxx8C71WwaHEifK7QCKpI

5qG3Nuarajdg96bYRaUgZ3FaP&amp;#43;7AUaGhpQqP0/el92k2RHBbAXAC6oZgBqjM/W6oPoA7AIS6W45QAAkwL2Iq8oUKtQuhfA0NCR8ct3ZEqC306qD2M6iv1RauD1/6/H34cwn1AGplEJu6olJu6y4co4AKf40PyLTUu6ICNoGomj63l21s3cqoSYQ8GXGK6w6XK6/E3Vutj5ZexVWEGxxn7&amp;#43;5KzdNPG15wdJFQ8nGQI8kFzjinGQ9BRTC0QOBVbK6U

UudFUklwMfx1&amp;#43;YT7YRcsERGJXLaTcsFEQxaL5ZRaI3kEIOX8ROA14Ovw&amp;#43;deV2jNAfy2exMwm9TzrLUGQmFBiZrLUU0oGlDIOFB2tpCA4IPCJTZIfnQ0p54XMLLRXMJ9uznRdB6vx54efzZjWtqVmPW7WlGnTYRVJEa6Fpr9BmnTW6mDBKOX6FF4HoLZyhogz&amp;#43;bMIz&amp;#43;bzo06IGSpI0oOERcoM06Wfw06LOrERDPA&amp;#43;dGw4NEeyVJGeyW7UE4Oc6NrY

ZBjpqV4GkgwYboIdNYW666xYKpIkajHAGnSLBIYN3JZaL5ZQiEpBvoN14FprYRJpodUHSCzB52DERU0pJXJRxdNXYNT&amp;#43;XMJ423MJJXJIxxXJIx5hSVFgQOK5KOGXJ1&amp;#43;RZZKODNq5hOK651VZhF4LppbUcdxvk1ZjZhFENrKpEM86E/0qim4gncLhVBhCizru14i1qOJ0t1WeDu6SeABYA4SxUs&amp;#43;7OKn/hMBCZBMFZQz3pFuq3oNVnGaeyAOVEmF9

sYHYrCVvQ&amp;#43;yIJXtdTeIV6TYkF3FQVdjPeBblHHAU&amp;#43;GrCpNBRWeqd6gz4U30m2Ucx6QMwaJK0HxLtHlJaYdKUwKOyT/EYQqxjBFjP0zYymk6VxkhSjm5VW7WCkL9wveaKbPRT4iOcvuxliGCgB7DzCNqEFrsjVYxMDZsQgB5VznNdzQOaWeBYeVNU2DbHjlAu1FC0Mmjx9bmiS0N4jgtBbX4eWnj2YckjZU7IEBhQ/BYhLDzPUmnG11Aqac49fBVY

NHEOyMCxVdWTYvedzlAC9UV70OK3fcARj3KrzQ8Rdhhbobx5tg9HTeWBvW44&amp;#43;l4TsTTW2zVnwSDJcquKu5EcxCPo5RUsoddT31gpQHxX0QrRblGrR9GAxJRCfATpabjbawJb7zGM4R0MWwFUMA4TaSVy2iBJ&amp;#43;CgtRtyNhMo1oVH&amp;#43;A44d6j7WMXiNgorBlOhrAuSV32bBY2hOKVNX40MV00xCGj60fYLwsE7C4bXswvla/wQShHg3CSznzwYwa7ZQ

xYBYY9K74fdYQCKV7gUChXo8Dd5V6OdDqQhbzuYA9WKuLhh8hqpnwB&amp;#43;Kir2T2T6G&amp;#43;DQ5SzXijumuwlh7C4VdSASrtSWh6WtlD0&amp;#43;G4gAiW4WVYG9ChWy&amp;#43;wL8BeBeAhrpMLdnIbcMf648erRqdTXFSsl4gcMCcox6QNgYrMrlC0eTarsNAY6iq2TxNIhnAZXQoFaPzA9s&amp;#43;nhqwLdUH4VkhpaCZDTG8pGLlUvSwkJQwz67ki8eoMIN2LdUKJcCVhCs&amp;#43;

ZISkwGnYO8OmyPb05dD/RTu/CxchrYJfELE5cbMczk0LuqSK8/xxYCjkiDbfAt6q/HwIEPigreeL5YAWBAIQbpLCQcz4M5HwOQ6GgOcuEhTtNngg9R47BQoEjQCHoHXutv60/O&amp;#43;w1MO1RDwM0U2yQlwkkNBAMREzHnZIUEr4TW7gUyiB8NLmRyCz4I9WIeC/&amp;#43;PgUs0aeCjejQ2tq4DIOYSyT7WeV0sQXBEQ8Xgk6mRngUAw/6ehMCOHEyGKqxDaS

QkKa4/cV9GLtVyADsTLBsyWrTP4RZGUSCgRCMMLCFlVT1FS590ALQOj&amp;#43;QGAAtyrhGNkisDlQEEDx0OACNUowBO4zoDaBpZ32EED1rQYHytfQAFSqEv3gJOQM/2yv0SSgE0Ie2v1Ieon0N&amp;#43;kn1N&amp;#43;3nWZyRaWVVD/GqGWs2bnNbiS8WL2mB&amp;#43;jXj0iwMYGuFJiEnA3ByrsXHUn2D/y3L0dvZc33nXjWdUUJHUOuGZ8&amp;#43;xo1kC5wMcAm8k/7JOHt3IrKS

&amp;#43;sOaiOlj2LDBrWPQsg0rm4WOGPKyXvSk1WzLJo1YRY2OL&amp;#43;nOAAw7Uqiky2Mvm/566PLgGKc7G13gNqJoQOqKoFBYJfmyZJwFGY5pzLrwZ4eUUZ4HAWQMNyVLE7dldGk&amp;#43;zumvKGUETiA2O6nndWObB82SmHoCYCwOLGBD3qjsSuLfzDuaQiw6iw7xzXZkiZVAT2ABpCnqWjsO5YObj2YfrgWhtpF4HCxT2QDsr/UKSEOcneChoyETKGRFpOKffSiv

crRgnFbhgCb7if&amp;#43;VGi6QTf5CMNlqzmF3C6cAVCxQlLSpNQKYqW0/Rm8yWQu4RfDjMkCkosVnhABMWju6Mo1p6XWSlq&amp;#43;Wig0diOr9RhjLFY2jc0TeAKcBK0F6aiCU1I&amp;#43;wOEufBjjVlBu&amp;#43;5rA9/annjiK5ThaHWQ3CPFyE855bVqE&amp;#43;N7XDwp2LSiwk8P4yGY40mLtDTFO9ZmEiDBjaTYEWL5xu1TGFM3njcNPSGyFngpm7tWXzICqMtObheWnd66yY

kIqGGL7uyVkitYT&amp;#43;66RhW0/&amp;#43;cRyGil8z1qKdgq8EXjwB7LCCQrmEgBTMqFxd70rqnY0Rsl0U2G6P2/eiAC/AUqBzqKoD1QdAgjAAoWGkTqqkAVdRsASQCB2hH1cSj2K&amp;#43;Ag/noxwU4KzLFWl&amp;#43;w2URapPkRuxQPx22/llLbz0FmsmOp2imOYfDD0BvNv20q3Mm/mUvkVY4R5HtL4hvVYj0larlWV2r0SK0WHI/OuwOA2/A3dY9XV8kl3VBJ5f14Omk

13fR74MOjXW7mvAUxJkc2e6pwONetc2o22BXKqtoJJGednse5VUbDOg2N4n74pcB4MT3VzrSYi81ZwmTEDa8rjeGL8khxn8m3YplDR7dczwyvsgv41vSEWcjbLOdvQLAn7zIeJZGMtFLTLsU/ytMXri&amp;#43;XPZoXan5H6JUeOOTex7IkJXhW874z16FC2Q0NYrt2FiJzakrSnuzmidZNnh0tUvTuKhrAgsTWixc92oK66LlNFIe1/GFGgqDFVIIILq4

/8S9lrzOTXfcSzGgkGvQp6ObgyDVe2ZYXRgmfRlrhgG6wLeSjmjFSGIv494QNTUsUvepn6e9SWiNFYbhoHblBpnZ/DwKXKWivQdioWavS9cf5hVzM5Ygy05GIcisol6bYIMMTCighKNV1IgJxrPD71kUo&amp;#43;18JhgNAx79WK&amp;#43;CEDYAFsl4gBOlzAKoAvvUgDtyqoB1E5GMPiUQOSsXy6tfN5mLPL&amp;#43;3fGvGMKBqv3we5QMUipO0mJlO0XWnoXN&amp;#43;jD33

M6xPlm6nXQiFkgIm5aZsimVLsMFZ180ls3vOxL35CSxTwanxN4mvxNI2iP4t&amp;#43;OQnNG0AquMgrxZ1Pf0P5Z1Nl4NWkdG7BV1J7k2NjCOQJYDhgSuEor0FdLRoIWdB4zePrHcQEg0odez4zKtSByBursw3EhExYdhD2egMn2mP28tWkBjaeHB1QlsAvAfQAtgJWWTqORAZs0oU8M4QN1yJLAOMRYxBaiD2Y&amp;#43;lz3Y&amp;#43;oc4HW0aWeevM0Z8nz3nWrpWJu

&amp;#43;iYvAGZ6pujVb80MrR0&amp;#43;tb4OKObDRaHLQs&amp;#43;j53Hs1cyUeuZWVG3mP2UhwNqPHn2PyhrbcO1rxRzBrxxJ304S0wW7lJlvxVJvdPMh71M7GFFheAw4SU8bqPkQX6otDE2SBYfaPkQVKrGK/&amp;#43;D3tDBPWTd9rdwJPp5WwBBQ0D3QWYEeOfDQHQRSt6L1GXhptM1XkjqwbhKpIfkXwb8PFiduEzWQrCwKUeZbJ5zn/LW2ippxqqHG3lqpo1241AUgD02H

JzdAOFEUAIQDKICtbGbFvrZlALWSBtnbVK3gCfGtM1ip1z2Np9z1Rumv2HOuv2kx&amp;#43;VOdpzQPdp&amp;#43;H1BeyA0he/CS/6biFLw8rEImmknbnQDovOsu2sx0dkj&amp;#43;&amp;#43;owYqFL22Bi1PpevmMFEW&amp;#43;WCq0BHa6vt2NulJOrp3rUvfVwMuB1bFPyzuKdur5ymxwSRbUdMKhmZ55DCSUonUH5wLHXB0X0x2O1&amp;#43;aXJDB2TlMaeUn6Z&amp;#43;OCLBnQHe6&amp;#43;TGTaod3phlF

K4WjzDNxug4sjeurQeVgKGFA2gDXEcxLh&amp;#43;sKqFZ7zrlC6G5TSqrEXPoEESbBAWYUTMbzFrDq44Ei7x2SCcHTnyd8F2R33KhiKyN4g5aZBA1aIm6YbPFzgkQiyskF5OYkO&amp;#43;yOmfqz8usCqCHbUkDiR91gVDhhTcIUhaUvd4XopsGp6TBBo0WCMrYadjMhdwU4kBBAM0XTSH&amp;#43;ZkLJlTbiBQ&amp;#43;dYZlBAOiHKhHaYC7z8ydX1MkMyAgpMq0TeA9pliLQx

V6bsoYZ78aMBiQDS/CpRCAFskv/eoCGgEaL36ngBCAZsl5OSjMv2kj7iBnVhF&amp;#43;0clbWrRM4qnRPGyvROSppQMtpoxOyp0635i0B2KpymPYfPtP5uZrnVpe2YIOrSVfuMcT1IqXVmBo1Ntms6HeKrmOpemAXscrTO1uhApSxgTk5e0VUeUi3poujrUQQLEN7MScW0G95AFjZk02xiJOI2uWP7mjzMgw8jBHp0LMbBA4yo2SQZ41ALTi89q7eaAEgG

kwu5USValeYNMp/x3ri969GUmKlurZcwwrhaanjJQ35gcoCzDixV6x3BDpAtZMe1Sbd5Nba9V7Z6eawbahijZOsV43wQ7wHeOyb3KvzD08Fni8mzl1gpdFL88cKwlyiHFxOyiD6C1bRWG53nH2zDMaewOi6kDQDw4CqB0qAHA8gRJbMAeqBvsegDWoZOib1QHOox51SIc1r50Z4N1Oe/qX1pnp44&amp;#43;/RMeewxNIfEE3E&amp;#43;sxNo5ixNKSyEkCZu62K7

B9l6yTgmBjB52JCQqgN6At1uJ4f3mrBuyjYcf14s/53ckm1NaxmSQL&amp;#43;t6EbYu1MHmzQmuq0OM4KuDJ8h2IEmfTm1AiflD7WNmRzSb1mGQQBPEjd0PCmkkJvW5mjgkLcpOi2uWx5mlNppgRPqQZgDrgwTKSAeoAU2ZgA0UzWAtgBs5qUxRMjygVgC5JCa4hFS7o&amp;#43;40R1puN7V5ljO4&amp;#43;3wLjSxHOqB9tPqBvz1k&amp;#43;pSX2/VVNamP/T5larkViiTNn0O

3lOKfgksxt50MasnOTo77gLCsyU8xrn3ex4YI5JtG1mxto3LY557eGezOBZ9f2Gxhwy5Jz5AWZnsVuB9WOIKlh2F/CXPSO0LBcBbKHm5C2gtJuyQosBkgL8HBBOYNowW4XlDh8ESbFib7gsZAUigeVBnmDJkV3Usmh&amp;#43;yUXha3VfVVI0eC0J2or&amp;#43;08GgkCJrI9ez4KYtOPRskArBCFK5PZA1rBHsKiQIefpkK0Htp7/KhJT6c2RUMHzTE/O6x35w&amp;#43;

0iyx/Px59NOB0EEDE7bAAzO8naYARHAjAeqBzAV/nYAfKAcAeoD1QcA1lp0nWsiDTIH8kI0pkOjO9DUVO7chtMggwonNChHMN5&amp;#43;v3cZjQNtsiyovAHAGYFxsjrJ4AlyVX/lq7MLDEhb7nE5uTMMc8nMwCSfMq60sGoMe0p6Z6BhL0x55bCuNSQMdP4tEF0rPmrP4Ox4JNqTQ4aFgGHm6Z8OCZJkuBtBefzfPCENvPOvwbJTjTzRUrjupmpOSajfP

ItXnjOEZ3r7GF/SHRY2S9YRtTsyqLDf8Nm2GYw8Ol1LgL9tApp7YEYw4zCmZvGXGX2FSW44zQynmAk2Sqgw2SYCJQtHKD3Jh6OmaYbemoFMjsYuyG8xtLAi45aaNb&amp;#43;6iU2zoE5HH5vhgGSc7ipNHCwn4oUhD5lbCvcLtXSJemGDwVChGQbOVIIDs37YB7aaaotQkuOQrNjEP3LSm7wcu3vUPZlmY0nOOkA4UH13xfyB5PXNEA4dP34AWULMWZ2q8

p39jbI0AvFo/cHxY/WWQ58LXR23RM15uHMGJtPmtp2N1yp&amp;#43;N2oF72EZG5EGY598GWE2kr2zZ60Uubx0uJg1MF48wMeJ49m3cSdlUeudO0Fi56z5sOWaxjYW8OkgUZcVBjX7T9ZWx1wwWx&amp;#43;k1Umkr3ucSTl/Pb57eZvoSy&amp;#43;2GRUQ2iGt2zGThKZr2pylg7E0A30Lse5a16VBDMhGHSU1ELlhWFFJDwCzWXp8LNhYL9xKZil31GU3PW59zAGW/IrS0

W/C7weBD7Beb2rCYbDDcXQo0BMDy6MTeDyJd7hfce0TdhezSIyqeAr4BfiUETSGMjR3RrNX6r&amp;#43;Wr0szcb4TMMK02W5QzA&amp;#43;S3C1TcR7yUSOmb4nX5jdAzGXuaAsooHfLPd/P6zeEXhQx53hO3XfhNPZ9AD/qhACI0/KDKAcECI4NgCQiqqCEAeqDwAD67MAMeTDy2DUfAovOv&amp;#43;lS5hGns6hanUtRG7Z3ip2HMEx6v1ExjjMkxtQO00i7n&amp;#43;e&amp;#43;aXvFN

ou2qXCpAILVPwVsYXGaKASTeZs1ul0nPsx6R4chmdPWM6j3zpmvE83HYsCF7emMF48042mf3yqxHl6ospMXPVzqEOnRwyAi9YCO/LgrRbF3r5r1OM0GRJGQLiDckAgbBO53S0pOCjG&amp;#43;&amp;#43;9X9kMyPuoFQUF3QJx2HS2mPLK7gxCq5SyuT4jZ6Ce0RaQ9KHeWoz76fYTS8mLDAkT4K7R&amp;#43;hiHYEeDouK9onJ6Bmnx39rqW2GJrzBDxktT3QOLA9p2SEr

BrmYmipOqe2E0YcrJlN9lPl6lMvl2lM6bdADBi5wAtAZgCSAPJQlKKACNAeaU1AAGghLJIApun12F039ge4gVNv2lmnxYhjOyBr/XMZqosHcw621F3MX1F80u4VtAvzS18E2l40RNg74LwmzpY/YqwMyZkj11vcgsNuCUH0AlTM9mmnNWppNTlbESvrCjWPL558kz&amp;#43;pk1mq4Qu9upLqRdbTMi59og9bXOazEnatifaJlr52pOBUqGhqCcBAckLCp

kMabJP4GLBbvIxWeOmKXm4ZrAv4w4QHlBNXEjfpkFaQUFHsUWLH533OAjEEL2aeJrxkkNPLJj4iVVZR2zcVyZ7bS6P0vNFSgmcpl4Bpv47islpNFONXvU4U0oHYXikCKrB2LHLSClh9H/R/Y1RFgROZ7eOj5QF4Ax0SQC6kRHDyQQ0DKAXAAsrHgCXFcWalVgtkRJALUfzH4EKzKAtbwmAuNVptOEx6VM4apAtml3z0dVy0sYe5aGU&amp;#43;5PG0qqCiV

Roj1u/PHOImgkJV6xWqD&amp;#43;zlWj5zfYJEVWvmpmas3y8YuaZuaspWO&amp;#43;Vt8wMur5ibW&amp;#43;6sQvHp0lonmU907xh5YpcoS2QmZUFhFz70QE771P5t8sQAP9jMefJRgVrjzRSXAAWoHYBwAZMDYgQ0CCmCCvB2lbQZpeMWcEyPgQFrvoIVnGP1VyosDUnDnNp&amp;#43;vOtVrjPtVhSV4V9XxVJEsnXR0vmuy8BrTwLEabSkgvxe9xMKZ9Dxwmy6Gzp350LK6fOnP

BfO8xvIMplkYTMe&amp;#43;fNIYXuvg8oLMbipOX21yWj7IBigF6JdXdgjcwbmChj6GtrAoCBEiZaPsj0xYKsCyKVJvikEhp6Z5av4ScAilks6Q0owBQAPAjMANSBSCQgD5PFsAtgUM1mMIQCdAZqWAFyCuiWRabxi/flU63oax8RWrlF8v0oVg0toVqVMtV5AFtV6WvF1zqsvAS&amp;#43;Gd59v1QkXaMoUVQwq/Uu7AIalBrOgYukFtmMeltZ6FYUYv2BjL39ms

JMN25asrp4DZx/M5JrDXXXtunohZzX&amp;#43;VXmlnNLEJOxnUMX14Fet2ucF9Y14ecXF&amp;#43;VrXLUeXQ8NrZgcNjnMOq/htMNmG2Lo1Bg1NGc2AW&amp;#43;llrok3RLRZahw24vyDUAQHZZCdKJXZaj5tPPBf5SqwTEDYbZhDYa5hAd5KOeY4QhvMIKi8yCDbUOAYKquDDNIvCmNgONCNlo1cNngsudEF2OweM48O3MssQ0/265dWKbwVbIqyI/6gjIBoURxmRMyWH

jWOOzCS8JYH/8RJ2Q2a2TtIm0Vq8ZQU3x6eCMyzFJ1dBhirWJbjna/CzIkF1oVaS/Ty8M7oLsbiGwIaGKUwnals8LIGbeSngFVVbgpQw4mvcesKlTe4Ju5jwoHeJIHxNBMUZFZfBCkML1/GFvQBsTBBpnP8iD2I5HbJg2nV6SrRcHVfqfYx4iLu6BkbQ&amp;#43;i26yK/BrIlrCww22iWSE&amp;#43;BNuWKHuYHU3jFG5OI7JYTQkCARTcM5prxVxwQCfXknIw2g

DiV00kKxmSBYfRK/MfkG8bY06Xo/lCxh24w1MTDS8FECisMLWhoVM4QYCNwpvVxS2e9bY2aaCfAoUZUPrcG4gyFJmg7CArD0QQi1aVm1mcKmV40xulLjmB2lqCAK234aEtXKhyBWyaGjNiB9HSgrQzF6Yw72YPsT0bZuPs8UQ5&amp;#43;NuBTsoFcM9jWbLN6D&amp;#43;giulbL44uipE3OPUCwvSA3wKfb0VQWI3oDWA0&amp;#43;RU3fEYmUmvBpvKQdlDXbBv6giCtT2

HF1rW5XfDIUGT26fNzCpW7hPfKh/NJVv2t0pioD6oOYC6kKoCYAdoC/AIQA8gLDqdAIVqGgKqClQfiqtFl&amp;#43;sJ13mw7gyVhFBpDnu/XQRsmcvOIVna3IVhqs51zMXNV/OugNwuvgNzeVEaoxE3crO1aMxmiO0wSV955akT2HGWHQkfPulpuv4/Na1G1gG1qZqTkt81t0c6E6v1emOwT3Sk3SV86tak/Jl3BSeaXehooeYQ9yMBFUMr4yhJLCMlBG0

ZnwbcIdg9Mkw0JViIsGtimv&amp;#43;1zoBGAfQBStSDG6oP9j5Qd16EAAHDggbSLYAGkgqp11u&amp;#43;uzYBtHeMWAA7QTJmxz0Bt5z3QF2tHYc0Nt5140uIFzjPYV5U7RtkutoiwitO/F7iITcrHZuo&amp;#43;UFciGgos&amp;#43;utD&amp;#43;rNtj56WKumrs3TV/NuzVxdMW15JPSLYDslt9R6cN1c1iq8JHFt&amp;#43;f3W19G3QKwWOCab2OgKtCA9bDPCRdXaiAFTYYWqh6V91nognUb

0pcFtu0QulatgYYd7XFzo23F2x0K8etuHCbDL&amp;#43;6pwgYWIwOgVPGJsFNfRE0N&amp;#43;BUbffyG5jDT4fKKtYke2goCPeyfCl0Mu9ffSyvapgI&amp;#43;fzCM0Bw5QkZfTHCckIxaX&amp;#43;DV1VeKq8AK0k/NyZOPcLkuAhe0bu5gJ3Exw6OQBYGwIOrTqdB8Wj4DlAPmU&amp;#43;DxNLuNTgHpOE5rpBPe8kgjmaMKshBvRrzCcQ/4uYwAkNwoho46S9mMtSYtNcbNqwbqec5V

wutcBB7cPWSi0c14FSwdusIwGMpVwRNLtngAcWO&amp;#43;LogdoDdAKqDTTfyAStGABCALI0ql40MBajLbaCMHNtPQWtB4jEniS3Oti1kBv385HP4axv0t5molKS/w23tlpYS6ymgsigmn5ahLAgiNa061ot1oGuivk50Xh/Wv9tpegDv4NySaC50jsd3SBFziojs9EJqIfrIevgK907PSpVWbVnh3Gq7uvvSFWMxmQ7sD3Hu0K&amp;#43;zj1K&amp;#43;/egSuc4xqFu&amp;#43;P

XLFQ6hQmHRx638zhaBCyE0A/qoeYRjLbbYRMMKoFi0VnwyFCDMyGk7jL4G2k0tr8qA7UBCGm7BFCm0mKmvT4KyBJZqzZB5HTcKV5FN4lNMuHfCjGlVLHusi6t6AYzvUOFKvwQlBKQlZ0NYIIuuOmbL2OCJVk1uPOPZo1sSASQDRHdWFMMqEXA4c0gtAExpXiUQAlV1dtlVjmJVCzIk6sOjNWNP&amp;#43;vQ5pnUSpoBvw58NsNdgpIpG5rs861vPzSha0d

5&amp;#43;Nvt&amp;#43;14Lf8PI0kJdnYpbeDR8MbWATp41OeJrb24Ny1OAd3twLpnjWW7S2szDKhv8F1h2CF1Hk7dtnPUNjF1oyW1Oi&amp;#43;qGqeNzyUshmzQzsbSS1aG8rxQtCpLtDFzR7e5XOJwQrLsd4jU2ve2gE7g7Q937bjh0mgM&amp;#43;VFgOomTWn4HEiauKHyLGPmjPxjfwbGKWhH2beNCyuLtfe2NFWu&amp;#43;nsmxP9Uh0ZhmSAT664AG1K/AD9hsnLDppavItLWuuT89

3mt7glVokoyruYcoaU1d49t1d6XsnW2XsnO8mMtdpN2lpvJLBewvkwiaYzKGSutq7QAJd&amp;#43;7Wvvt3Wuft/WvgIb0tt13xMFtxMsXPLu6LVqvyhl2GRjYrryUOqts3Fr1NoZINaRhj5h0uynnayBCnQiD9L2QYtT4vUQ4eFTCzGQBZ5UJA2SR5zlD6019M09yIt09pLs8AVqHggJED&amp;#43;QNiDiITNkcADgCv8hkAtAUqBd03nsFs1/RYihjqgA2gzAJD

/V1V7&amp;#43;3Bto9v/G9Cvi1gA2S1xrty9yfsK91rvzS4nUq9qn3t&amp;#43;1hg9stsTkawdEa19/xqwAfJDd0j0lGk1Ms&amp;#43;E3sH9z6XDRDMuuZkYK&amp;#43;lPR5pl9YglJmh36o0esSayju39kVJIcLDxQIFEInwa2RBUQzQRYGPkTZEgYKpHvRspVHh&amp;#43;KSis4IJLRHsWHXC8K9AWDNl7spTIL3Ii2lH1sB43/KkT4APzHKAMFWaAUuRGAdljOxQoUcAcEACWIruCS&amp;#43;M

Vge3vvZEhLEzyyvMHt4PFD9sgfAN0fv5m6gcT95vN0DpN0IqiFmK1tVOIZW2RYGpLZPtxB0hVlmjvWiMafWsgujdigt0zCbs&amp;#43;l9us0e9zPXnVYUDm3WM8kuHn7dzNiq02GoycrJOE6WTSLJSBgbJKF2iF3F2S5ltjY8Ek6sMRUNPd&amp;#43;DT5TRVKbGQmaOs11nrmf/xWDvSQtinnxB&amp;#43;JcORYHbg1MSeKZYZyHH4NJot1UdV4WVspeYHaNk0ACO3N4mW

XDkvv3558sJd18uV9iAD1QbIANKVSD9oYeGI4YI4SJgI5DASWVtUjLbxir2K9Q2tMZ1hJJi9&amp;#43;QOoV2rvkD&amp;#43;rtj9tEpNd2gddpr0a0130a76RLB0&amp;#43;/vOQ6U/AvVA3vjVtHSOc3ftMV30vck9MISVjvmgd/utUj/DsBIt1aix3j5ICyttrp53vDYtMTVg0h3M5y3vuB93t7drh2Qdrf0Cjy83X95QeBUl1pANCdhB&amp;#43;TuEjGcHwlN5Hy4WT7YrXfH6Q

sbZurxY15mmbEZxacPiuQdlCAPH7Y7cbAIA8c6FGR14yi0BvSWrRdqsML4T0yOXEpUlvT8kfJk&amp;#43;yDs1B9YxaviiVzc0fkF713BCXdGRWqahT3e5tPT1x7LR9sQintA1pggptAYSFV&amp;#43;7BYNupgDodsQD1mZQx5PKYAELE1AdmstgY8TtAbmZiIZOhx1nflut9oKh28&amp;#43;j6prUIKzZElEDpjPZ10gf9POvOntuouRtjtONFukUZG3NkK11gks09pFt2

ZfsvcnkhxTXgcb94bsJegkexsKRqVaqnPXyv50LVmWMgdpfPwdpDtVe0ZpEs8ODSkkuDtGijuepwKn4HN4QosKPuAIYlrRaAOQUCVClX0JXjcFXFIHN9GyaJZ&amp;#43;Rfx/MqDek6ycoFwfX/dcT1QtIUNQJFGGgLYCu25qDsUBqU1KZ&amp;#43;vt9xH11yfimSsEseg5pMX99mI0S92EdJDuscF1i9sxg8E0l1tck9Vp3DAWMjX2zOKIM&amp;#43;oLDA8Zo74jqocTVs

w3CD6bvqZ8Ox05msYScz6USxohuxXffJ&amp;#43;Bqdy27E4OsN4dxqx6WMHY5/ZLj/kc21n3Xj10YdcMHSSldFnh4BqITfJBGibwZMqDFH/wa9eqNu5jSAweOuyHIXEjxkkwHsbEXiTx6YHO/BfvRCvwUCwwvSrlsH6rq8gKs/F3Df9ifBHlumbSDRGsAkWcvCNKLBM/UNOCMHto3&amp;#43;bEO64nhOJVp4fJV1mZ9AFzBVAEEBDAAwBVQMRPJ0EYDw4X7Ktk5Q

DQxlvqMy0AsZpMrtIkiCd7W2Au15tjMYVrz1I58ftN5hVMZD7tMAFpgc5DvCSnixALd&amp;#43;zCfPtvkZHse6roNhut619XqFacsV5tqbsm1/A0Cx6id8air0MegX3axozM8jmDsrdsStz5lrXHd8jCuN5oTONr/pr&amp;#43;06u21nid5lh9PRAzKoncLysGE0z4jWJwoKdUV2E97lyr6nFvafLq7kBU8xDh4l6TwEPhrWdzSbYZaPLCP8rba8fJOy/5j2Qbcq

zmUi5lGbfxrbYvX2YJe4i8FR1PBLiC/VcrMR6hkLDXBdgYWGozQSuMfuTw1tJd4BxQAH3i6kGoD1AIUK1KIQC4da1C/ACgDFC1v2YDyPnI&amp;#43;mSodsH4FvMto6i9vUsw5wBvQTqXuwTiNvwTkFmITyBuzUlCe8EoWJEJ4u5V1k0zPp1OMjVzNu0VrBtThqxp1T6nMNT82sEGwDud1wdx9TqnRzFuCHphA9MylfivNBQd6/yIYSLF3zN3SFQmb&amp;#43;7CEC

V6k1cjwSu&amp;#43;xoadHdn6Vnd7xuqiqae3EZwgnpW2RvLODYmYSDpgUaWL3HN45O&amp;#43;v5ZGyKoplA1mjL3T/wo0ESEPa0zWDcXOWnEwKNG5FfFrh7THDLbSd7aneC80KCrb3ZSDAieirxNM8r3Njdgst0kiPTi10mYszUQsL2mqS93SbfIyDUMNw4at0zW&amp;#43;5BrK6&amp;#43;/GiXwA&amp;#43;D/8DFpBh8Nl6tx4d&amp;#43;m0Gf47ZwAA4eOjKAS3G6kCgBwAJIBX2uhQy1FqmXO

tGesiRWrxi&amp;#43;ual58EcRGvduxDoWuHt4aU1j5KcUDxD1AOsmdP8imey1pSXeutscaUrUDLObfAlvCsUF2m0SUMO6LD51A1Dj/CeEj07BjjybvczycdwCgJGzRM3sDbGP6TNZbt29jYuNDhojDNAC2KDrk1jDn3shqnsMq119m4WJUGz2ixQDiAcwMqqiTm89KP0bCoqzZAixcvTwGi8RWIa2jWR9FfEjNYJmSPjsEWB0PPbYGKdv4AfKDJ0ZQDw4U

wJVQK/XA5OsCQm7ud1yWzmgFysUSBhWb4iivOhuqvNjzhIcTzvH3wjlIfpT0xOZTlEeO1F4AYD3Kftj/CTIkD3M9dnv2OJvE4P4jNv7zxutftmRJTVuof794ifc&amp;#43;locmxhnO8xqicqLsTXNDsc1cfI83Cz&amp;#43;jDCffqI8fcr28&amp;#43;&amp;#43;jAg8pnP8&amp;#43;4ht8jlfMFJkadZjAJle9sOO6zgXgW4J/D6JHVL9XBZECy18wNt0J7JYCFgUIk0crZXMoI8DVwR6R7

xBUXaM34EKgKalsj7cYirlli8MQ2R2i2LJRXdhG2Yf0FMlA65xNjsIm5USVWiHsQNZH4fEiSe9uBFIrYGafZzlbquuEMoA8fL4xyabBf5qW4cLCHh4GdVz4dsvD&amp;#43;4E0MkzaytQgATqbABCAIYCkAWepzAfKA8AfjNCB/Iud9otn0w9JbH89BYQjvTL4z8Xswj4ftwj5IdtpqWuNji0udojI0KJ/hcrz2IjFlEJ2xRZamosCivFaqRdVToSZvCoic

8zs3vzUZrxbm9u4b0xnMGZwX3859VX0TqMv7V2cUcjsxchJkht6xo6mqzrVHbdrRdAr4zMZXBkfDNYk0VtuLoXrGyUJJjk0H&amp;#43;sFdcT4LN213F3uoKhishXSDzR74xRN&amp;#43;hWEIA&amp;#43;xplI2TuC&amp;#43;ir9g14yCvRWiC2qKPqSYPSH40kKW5u/QOHNyRI8PV1lqGAIfWHowg0A0knD&amp;#43;tQx6YYxttwiz2iA5B9Rg0myT9Cimidlfo8Ycrm&amp;#43;1njWB7e0WQC3AY

BDHjg2NzCTIXri5FEu37Jhwg52pHjfUd6jk1PHx9dM3BwkJ/zwaL5Fw&amp;#43;X4tSFHSUmQTHweQwlytGUCgp6KnkFcuPR7YXe6r3WUPFBG7ho8XTvkQZuMxcyAQMUSlO7G&amp;#43;LttLhMc0nNqHQ&amp;#43;uKBqymTJbASuQJsplTYADgAOxNqlF54BPNPNOv&amp;#43;tzOvEDqsfjz&amp;#43;AGTzthcbL1IcZTnjNNF&amp;#43;kXgsuNvMD2lUHdeyGkV3rtsihbLUuPeeGpyofszyVzs7

LmcTjjutTjmkcPz7kdzj5AUmLnWMaL&amp;#43;3tVjfJN1ceqKzJJf3VCR6WfS5g2d295dwdhUnW92QdXUnWefz9LCmmC3BG3Cbzdwc2QIsTFD&amp;#43;95kJhz4vSF6QLA7CVb1HIxmjXKNfGrZuDPUMXsjMw7aNnmZeB/GPgLrWduyyQlATfDVtujiO0Q/BJW7L6yBB7mXLTTGehOFO4EjMw160bGZfTVWmlC/uLHuv47iF4eWFgWQBVckbDCg9wCHia0QU2tL3

2vtLpLv5QBUuI4eID0AUqA8AeoAcAQ0ClQRoD0Af71MUQ0AnMtqn8p/mCgT8O6Dz9taMZiovC1kNuJD4mclE1KdUDjhcNF7ZdXWmzY3TQFtrz&amp;#43;zzDpk0xCkbngbzvgdjVw&amp;#43;exsHFR067tf8qxReLY/tcaZ6ccZcQsYxecWNta5t3LrkzMO9qvCd3JRcHLTYsodnis2xipOrrtidi5iFfQdpdcdThQfzdxdezj1ifWLziuzrhxdUdjuBfIynn3iwF

h7sCzXUMJb2tIkMr96hOPCofSTNlH3S9sRFO3dq9PHsUWSiPQcRQjDuAeqI31q&amp;#43;&amp;#43;sInpmdBrz&amp;#43;tR&amp;#43;KNSF3rzVNoUDBBAZIazN1fGYp6T6KsDN&amp;#43;Ax6DEGTdd4T/wfKaIyrSRKyBQuYBbVfiFrwkeqVpvzRwVyzwf/E62mOPG2NTEoIDChBFdmh3HZXg/MTJc7IpJWX6di1c8LiH4IYiqJaH7afeY8ydtteCuF1cz5Rtnhvdkwe6tzHb6tkGdEb1mb

RHEnZSCboCdAToD4ATYC02NgBGAHJU7Aaabk9BzZoONRNgT8tnxTmO2Ez1ZcwToTcml4xOlrzhflr5scYexZ0ddjsfK&amp;#43;scauWIodaSz6z7Yc7h4TjtezoZTPyL1TPabyifNeC8jNeaqISz9zd1cG6g6b8deUjyxeyxmbtLVoWNDrubvjT7ic4uqad8kemH/tEmQL8SCn70D4iyQdTo7CFuugjchiNJtFNA0eMkvI3AYFNXrChWmd5fRLAS/eH5iH

CJjLckPwUdID4Tc0cewwIN8VCMbwHINfysM0ZHxcKqemHTtBfpKwOjxAELGNAHlTtABAC/ZqI6w4bgMea&amp;#43;IB/sCn0ATpRN71VFWdS7QRwV8&amp;#43;hA7/UuJTw0u1j8HdntrCvIFnCsQNhefzS67mG4VXtK1/Cxp6fmjNE8isddd7kVTj9tszpuuaHSnOnzntcNDiQfEGn84Q2mxembj3tfylt2aLyG0V7tFdj1tndeNz6lZ68hhLAj4Q3EO6wzsE/CXW

DsO9kC2ga0WrC8kV2lS4/7oVYQ2Ru6CXjapdpkzzKC0uTiuduTiNeilyGlo6nUjfsUwC/sGGnw4OblVnTzHdAcZfx1313WekCcv69qRzL5nIB7gmdB7yXtGl0Pf1j2eczS&amp;#43;ec7LjD3585edQG1b7zYaBQrSrXtybvVba00/xY77PfcHXPd4742vnzwVX3SDkdnm&amp;#43;FBj&amp;#43;U8hQHpicAFYh15&amp;#43;JFfC5&amp;#43;GrF/UbVIHsR3D3QLe39rX18gvehBQtSEPsw

NjCMVGhmi5yuQxaEjm4d2QIKRbL28z5FWos4KS0X4ynyeGyB5kKlzoQV7ob3bCiWu9nxUYbieyF2Y2aVpj0ZD3ZdxziACyIYwDN/YJliLbzB6ecz0lgjfl9xLuszeOjdAAvb6AGAD&amp;#43;Qe3ctAeIBQAGiXCIy0iIohFV77wumLPCpU0ZqnXs7PQTal3NeVjvjfVjwtesL9ZemlqHdibmWsP7pSVv85/dCZ4AST4YXdPc7XvCPd6wQywSXKb4t3Dj/I

QDGfueab2u29r2rVn9nogr0hkfv7OnM/PWr0aq4vecT7BoY2q3sbViQeWqgd148iesT1mb3mkvomvp&amp;#43;l6rZMle7YClzXosyQgpIUiDdJ7bBURSuqbXYRxaWQqtNsbh34uLQCMSlBGQa5RM/B4iYUbdC/Uea7KuK914&amp;#43;H/EKT702l9n2sKH54dJdj926oQDgvAeqAtgdB5QALMCdoX4C6kFsB9AegDby8hf3iJr5/bqqsy9fAetrQgf0L6D0ANi/d

Ezq/etC4mMzziPeXt5LXR7l4D9Czw&amp;#43;F8m&amp;#43;DQCey32zbEcJRO6yQ0WxEDj/gdoOgCMTIW5cgH3mciqzI&amp;#43;M7wevmb3zcUTtdPAu8ts9u9jBUmtqfMYDidfL5E&amp;#43;p1V1N7myWOpJoF5MCiaf1773sO10fCnyZmXmJThi/YmoEauUHXOYM9oqycwVLlByBl6dHhVHlyFk8UBl6QbfBvePmwLlNW2Oyc4xnL&amp;#43;2cEhC1k0oQytlVdvQqY&amp;#43;mEqCky1rcDeN0

vGJ6KZ07aoRu/zF6IqMkkUfTL6bgqAPPEYFaZCPk8/YRTjInMXbrn5l9j9WKHmk4pSICtJADgDsppB7yIKoCGNMBadAYtac1w4882ShcVKgU4A7849pHM/fLLkHcCb&amp;#43;485i0mfPHhCcRbOaXFgFSUTeJJsNrn/nCPT3SBFHBsZ7zftZ7sfOBw4kcAzZit&amp;#43;l4&amp;#43;n6b1u629khqaz95wyDtLy2Lx8BNRdMKqoz6V7JMUWxH4MtMFhWMLjtcd&amp;#43;UmSv6E

sMqZW3/RA0J4QfeaHqCvbxzaK0yRLcKmhhw/3LFaZM72FuPqH8pZqrYd5pMteEhbxW/CPbZyzHSNEjzZiGJi0MEbbn1BA1/WYe&amp;#43;TBRLYDwXnDYdTqn6WEhdxu0sB6ejZIcW7vyH60/zH1mbWoEKf0LZcJAqp1LEAbwAp0wno/u3IsTLjvv3iTqUVKz&amp;#43;vetqxqZLOhfDzhhdxD6rt/GlhfwF3M1h7p4&amp;#43;bLlAuuHq61jgG6bViWdh0&amp;#43;4qf/8oBpnIi

5dtrzBvZ7mQKQnmI/4GhI83OekfrF6Wnr0/5dwn15e7HSFeO9xDu2xwJOPzqi&amp;#43;vzntxaAvLJfQzA8XVzFdaiqhIjsOx1chvlCiFYwvvCx7zkFBRJ41bmgu5J4i1OtvSWG7LTgCb5h0wp&amp;#43;6E/BSdDZFfUiyahizXVFZMLRGXRZS&amp;#43;7SCvwWoIyZB495x39M2EZRKhbNN/cfnhFq08DWivvEbzoAQ4QgA1PLT3x0bNOSAcED4CKoDWuXtNc1o2F/MVF

WUL7dtxThZeYTJZfQj0M/wX3aoIFm/dRn8mcxnvCvoQG6a7e8zVPWtaXy2r6hlDkAWVTrfvq9A4ygX39tAH/9t3L&amp;#43;nfzVuI8Xfbqd1Xxu3grhbt0m1zcWb3RdgdnI/tDzq8ebpTC5jRiciznzMsTvzMtbWc3w2wdeSVrMupwTnQjD9ncT1yzkYCNEFjWVJ0e6LmS/MYVCKTtre82/EioWM93QsCVzv8BHjLdZ4Q60dbgWOtzBYUvQ6iFErSt6E0P

o8IRj0w4CUYhccx5aGeOCRcWH5Ujg6r997h9XGwqgIfkjEus&amp;#43;N7mHFyFYYy/NdIcvJVXRivNPA6phmDzxYRRJRTBnykBYkJzjSZClFGLDkVc3fVkjiqTw0S7/eoQDJ0EEAcAOABiQNgCsqZFGxFvhcAXwCf3iIpKmHnvvzVNOuGrPGdBt/NfML&amp;#43;w8IX463sLxEc0D9IfcLiyrXAPBJPcG/T69&amp;#43;2YMzzQzLGYBCZg8ock59tfZ73rC5n4RY0Fskd/

PdP5lnsvBq3nqgdDjlkn99YawHhSaltyajQHpLpseldeMX1s/cOnzpNRYZoTEQAqhmf2Ogvfi9akoP64wtHgmYWazuc7rf7cCQVxaFYxJQuGLWsm03f8P7jmYrg8gCM/FkkfMkPcXoqBwnATI&amp;#43;Q8O5hqbzbrol3gmajX9M/rrw8X4zwWZG9AmeaS6aUXgA8clsrbIdjSuRrD1RgzDzC5kKHjtC2Y3mfmB0SQDQPQgBGAF4BzAEYBVAHlT6AcEAbq

DgC6kRJbdAMPnen4pzPlXiUTy33fxY4M9xX24&amp;#43;g7wTcPHzCvIX5w9F1q9udVmmBVJdM4XDnrvq1qkrc0ZEi4FkI8jdjtdrFRit5n0keLmnAVJI4h2vSy/sjuR2/D4i9VxO4mgL6kpfKuD/R&amp;#43;S34Iy8d7vokXgmZYXnhH4RYFe1qlPhrwjeRryGkcAZRBXicX5VAemBsAT3j9LkED1ATQACXaDUD3zPILM9s7jcdFV&amp;#43;7r1syBq4&amp;#43;4xkgcFrsmkc3w

B2BBUTcL3149uHwVoHH/Zcv74sdTsL4giLx0srA&amp;#43;YySLoi/yZ7M8Q0QA979/HdVXkic1u4VVn3&amp;#43;q/gDIX2fy6JN7V6s&amp;#43;27HSZFn4IxYuz2PdXidese72Nd4kevV7&amp;#43;1OMg13s5cEs9D1xAabrik9PMWkicDHrMLSNLmYoXszVI&amp;#43;jG87vx23u2RJALqMo4pTdBFUZZwmznKn1qNWKes7Gax9TQbqwJEi4BPbytw3Uf9kOtQrvaWgb6SEJ6YyDo6FLY

kpKhtWCoVkI94e6&amp;#43;rRororYHrIsLYyPlRu7Ocx/1fZValAavMnyvNVPUxlVSvtLZzTPLIhBTsYix0vGawr2D9w0Be0Q13rDOJ5&amp;#43;ICkATACkAckDNyhkCXG&amp;#43;OhyQDgD4ANikLAH7c/thM1ObYXBvM6eX&amp;#43;464&amp;#43;4Ptm/4PxK&amp;#43;IX5K8oXyPeL36Pd2QFe8weBWQiLje&amp;#43;XKA7x8jaem73g&amp;#43;cdr33pkXgvehJpocHP7h&amp;#43;OBvVVHPkFfdRMBU83H2ODmxoj

cahogkmu8DwQgesCfLiuCkis95J1FcpcM&amp;#43;kijjcdakt&amp;#43;BuOGHHXRAwbe5RdrfCRDMpaf1OtN5bD7wXHgCQCXr16aPauF6sTer0/xESFg&amp;#43;V2cK2VVOnhIcKsTcpBs0YqSsv3iqfCa0JlKD72/CHIDQ6F9qUErmH/xdISLCk98QtO6PJsTIoMdNtMtRBORyFqC8GhY8F4S8vafQqen02zHx88eTmk5NgeOjQIXACl9ZOgvATQAiXQ0AwAMmxCAXAA7

AdmxGHvhn7n3iXfA1OvdU6K9l&amp;#43;qEc3HkWusZhw8kzmXvc3tIdcL3jNejXiDi9eWK041Qz4Fk0wSGnaO4erZ/SLzfaK2hW82reocsV&amp;#43;WPHPpj7M7/Lh1ea&amp;#43;9ce/Wcr1hLeEzUmiXRh88uXm0&amp;#43;Q0vQBUrQSCSAQp6NAcEA8gUgDEAV3c8AeaUwAbqshXnB5Vp/0/zVN5l065m9Y&amp;#43;2w94P2RmOHyHfEPqNukP9C907BHe2KfSQPCen1IaB1/gRMTiyQ

FmeXL4q9CTGRLIYqI9YO8i/QnsicSiwnRSVwnShmd6W7USUqbWEYOJGbCLfPJINU7svDD10OC5mWEPG6lccRBn5/921AalNx/SaFCwZCwp2UtgjFRUVPWjHCHbrzzCE/Wm/&amp;#43;4IIZHj/NAyCsoLZoBcyHiq0H/FtiG9CH5h5b7&amp;#43;TWudZfLqbcNSt9cczBSDZ98slL3Tcw7fxKKiBegsANgixBooRWk8WgsDw6WCvbhQL/iKCsUJyCv3wmAPhfcx0&amp;#43;

HDaNRoD4AOaALADgCI4R&amp;#43;KL8yuSVQOADw7pB/1PRXrjQZ/DoqqeW1V7B9Z18t/jPyt8mvhEd89JEe83y1&amp;#43;O1YeB4Jd&amp;#43;DvVl0tJbf49xCejawGv/dj5sNUnziq/1TqE9m903RHU9au07pJNca5A/JHyMSudC8gQFKc1UOlvxt3VA9ZjO83xwaIN3ShhuXPtBVWf/I8hZ&amp;#43;2vuod1fkWWZu/FwxIi8PWRJYa8zPIkPw3NlWgEW55EuzLsScxLGGo8OE

SWQ8ldoNkXdfItLRyT2W774XSDwpFmhTYB1EV18CjYXWHg8RYW05aoLA5bw4TBFs4xIwqUFOFsEZEWwmLt6&amp;#43;hjDXeL7eOUK1ba06/KGZniHcOCxj4CsNIXe4dOXoV8xvp880nfmboPcsCSAeOjx0d908AcDlVABADRgKQQUPqm&amp;#43;e7tqUTypj8gF6gxj33V/aJ2K8Gv/jcJX7vbX7uCcpXuedpXpe/866md2iN4ul89t8VvZbZ7mbt/MPoYuTooFq

47jh/AH4d/XzvtcArwN8kQ4N//SqacK3RbOAJmzDZU6N8fstJVY33lqaAa1DdACgAQ&amp;#43;uKD1AMWblQF4DJ0KqBVQ/KAo0tvvTfoAsradGNMfiIdxMYXtWHyEerfsZ9wX9m&amp;#43;TPzm8lrmt9bLtC/gOn0U3TdstQSlPcUazQwIkYu/IY119XL3XZIeO78kj718Fn1i/CVxj0tnye5DvZ/b2xoLozXhvdVhJ4xddVlDLteKHeWcrrP6f9cm0yzQEjBbz1

hNsb2P2eCa1k8ajiAYwWEn/jjIWLsPDufd4f4&amp;#43;sx0xoCxE&amp;#43;RMMgD0AUAHkCaAC0EUAHYBkiIQC/AMkAITb4HjQRrnmH&amp;#43;z0Ycce9rfuw8TPzb8z34Tfntnb937vb/zPwruNvumDgsG&amp;#43;BwGrecOKSuwECdTYZnwcduv9Xo6OvZ8&amp;#43;vqf0XPUxv3z5if6OVOpc6B87udNzeJmJbvhwds9bs6ttsC&amp;#43;2uTIGW6m2rYIPrr5hNJYAQ6yTWiSCm5obFTGKXp

3z/H6LhhxURGsc8&amp;#43;WIH4FWJ0MZQy6OtCoutGp8J537CkAKqB/sXVBVAZwD1ABkAjAJN8MM&amp;#43;OiYAGoBQAJIBgqg795vlpTq&amp;#43;pCaa7REnZEtj9QX0Z&amp;#43;s3gn9&amp;#43;/wo4B/iHdpTs19lrpscqU/7Ika7/iAnWn&amp;#43;cD1aTPKgFOyfzfaTxnE157rTcuHwt7P18hVUavVocXly3IaGYqHVc6W/gYETOrG/suzxu9SiB2W0A6O30XJBJkACwkojIjVyNsQTH5X

4tF8Bh0Img&amp;#43;RhBST/wOO1kLL1l2SFDXVycAHzmPEV9IaT6ATQAggEBAeoBfgF1QUqAoJkVCHYBG&amp;#43;j/YY8Rgr3o/X&amp;#43;J3FSQmQrQWPzp6SC9rD143JhdL/24/Lb9IzxmfF49793QvUs0I/3CwQDoTbFk3KxEcUCHtVtcaK1lvOT9saH//RT8z50e/aq98whF9AHky91e/RJMOr1OfHq9/YEgRbOpCTwfyPnNQ4EN1B/ICbWdgEzcS4AOrS3UxrwaIe

kEPY0r3RMxe/FK4GADnYGGaWtoIChfySLpgg1tvaEMRf3JPD&amp;#43;dS6gcWVjFqDkVNGewiUD2uOuZx2HZxY7hiszhCPgUtID1kdWB4inxLfFAniBwQYiUseF&amp;#43;PUpdt1S&amp;#43;8Z5h0QjKAiyAtMXLuPV4RBWhEFmQjLUsjPgVX9EfMTiATbAT7ccwZrCgQJooxeCJlaxwHhCUMGx4z2TOCB0UY1T00esReYSqMXwg3MHV3JPRK7DHEBNVp9xEgf4JvBTXaJ

n5vNEk2B6JgsEX1BEg5TRRYMdhu9ykGMxVgPGgqblAtIGZ4Q2dWBnEaAdtnLwB/ZHVoi1&amp;#43;wZwAqgCzRWj8IxX8gdoARpmhjZOg&amp;#43;gGtQVB4jABvbfgDhVGxFGSo2mHSWP3dKxVLfRhd4hykA1PkZANNfPj8ebwtfCtc7Wh4AG61KHyEzehFTuByvcvkV5l3VH/9U/29DdP8ufzOfQlkZjkKDVR96DW7dbh08j0MzYUcduwyRc2snlwfOVk0hZzDLX

kdJqHHSWJFHNyP9PDsprwYhd784Dmr/CXpNhDWKArUgWAD1O4koRAvoPGgVZC0kIgDWaEACdvVwWmB4d4QXZxSlVkIFEjA8Phg3ZFBEasopwDBIal8G9EgENkhzhHeEZCgnJyuIZeYUswSIDCU8fFENH3oeIhawGBkEnTC/NmhM&amp;#43;wkgDvRx2FqjFbBoRFa5MTZ6MRg3XlBfuAMGd1gWeFPgXDYuQ330GXhQKENzeu4XgM6/N4Cj9QETWmsfB00AF

94hqmrAGAB/0QTZeqBAIGTAGfs1X2RVRCY3fzHlUTw6el3bcQD/63x/PS5Cf39/CM90QNRuMn8o9zIfHgAM7XxAwvlKRh&amp;#43;II08vwVj/RIRlLQfmQi8dAOIvPQCA2VbrDn8FFyAA2kDNix8DCuBHJXDgVwCy8BhmUOAICjGDeOUGBSclcIMJ/HC6A8CR0iJDCxsH8niDZ2BSGjrwYIC68HfJbcC5zTgA0k9Ozy1JGdhSrmiwQGg0my8eGB0En3mkL

SRTmzQEKYdJynd/Grl70gv9Ix8ea3bgIlMW6hbLVJt&amp;#43;8HhYW454eyIkEgN/BSokS&amp;#43;A7pl54cDwT1Qu8AvRIhF23TD9VzFEVZQxWAgu2dgkYRAVeVrJ9FWZ4Q4wY4z5bTe5aunApBU9n9AzlGcMgqE2wFLdIcVNMAS1zEUOQWxYQPhJ4f9pz41kORWgDBl0YVlAcMhFSfKUDfxoA4V9q5xpOUDkEAHaAd1A7QT8GEYBOgEByBp92KWiJJBZpDiEA6

el1E2yJL0FEQJgvdMUuP1RAm/8kLyIfe/9od0f/XPkqN0FvH6theB67TXsGfRlteQ0wu1cTHt8szzyaalxBSCpA5W8LngDfGndAOy0bJZULP22LXMYowEigrbsd3x27Av9uHVaIMKDVOWOGCk0Yy2q9FzdBxSodMfxFUWE1DW9B/CrPFoIGMG&amp;#43;XQfxNu3Ynchs0eWDjDs9K/23FW6YohEOCAHgcXw8dNbJ/ChkSWkh0VCx4MDciqi0kal9ainioJ

PdLtlbmTDRb0F6yITs2myhxFChySA9UF&amp;#43;Me9xdXDwk6YEGjFrBSBguaewsK1GuvK3lVhEO1IVcVeE28JuYPF03wP/0EECHvdLBYGXKjU3NtWQFdd8UYWwfLKuYIsF2TScwAwLPaBbxlCkuEZXMoymQCGssdLQKfY6D/0j6sLLAhuijKHYoNhCPRfH5Rt2dwWdB9sCzDeDcH8BvQMMo&amp;#43;YUGwYwtq9HFDCewzxQJ4CroFPSJuRngNIDChdWAEvi5IU

BMJCzfAv6DJ/w&amp;#43;AioAAcFnqCOhqJUIABAAagDCOTQBGgHqpKIlQSWR/SsCosWOPewhpmSFTbvocf0WXFm9OPxRAm/kePy5vDEDzXxh3J/8u537Aj/k3fV5ofSdi7metTlBCaha&amp;#43;Zn9e3y9mBokduH8gk&amp;#43;9lsWF0Bs9ydzp3SQdlwOlyHn8o5SslZOFRQMy9HzdgoOfOVi9Q5QRPF59BVWmvJAU0oMs3Xd8QLQ&amp;#43;/UX9axVWEK4gX4Cp5MrQ0BjusZ

rlu9zHYXFY73RnYal90A11McoC89CckJDg1ikA6Uq5l9Ep4ArA96B0xVktBaD&amp;#43;rXTRqgTevIEwKGFBYJxRrQ0xaV/R4WGAoKfcmvzJGIdoQ&amp;#43;HrsTnhJkBpKWiIsfmK0Ibh/iEs5DTsqimQUDLdu9UK3dYRzcE9yc9wzBypIapEBSFoDARx0wNw/WgC5IMhpKAAhZm6ASMBMAEwAKoAtgHqATNkF/w4AScIF2ym/FmDsCV6GGsDD6gUqQyDvf2bA6

h5pAIsg6Z9571rfBQCKfx57CWDBhQ8JHzR3OVUMVZ8xwO/vcupyQMDaBol2RHVg26EjnyCgzjV&amp;#43;Z0mvB8liGwlAvWdRfwyBDeBkBCfXEexvCBpQG4VNV2JggRNoVSSACBYuAOtQICtTSBgAb4AMnGYAPoAtgHa7SEDRLBMPfpAPINa&amp;#43;eECc11x/XmDJAJbAq/9ChkFgkn9rIJcPbsD0L25Oamc7mih4HrsxbwreBGVaHyfglWDVvWW&amp;#43;Qd9K3QJ3A

SsiTRRtPRdkV3m7IqDmQJ86IC1nYMV9abUWgRBSWPVZBjurRzsk9xJbXGUkqRxwAGkZ2AJqL2lWXVJoa3lPVGgEc2gZslxxf79&amp;#43;uVHgmOlIVSgAEEBhfl&amp;#43;uMjdiAAVLIxBGpUiJDhlH9XxRPBCj92FwfGkkmm43CscJAORAshCD4PbA3j9OwNQvWhCKf0EDbIcBF0QyWHxcCyS2L/dnZnphLv0mHynAlh8fIKmZbxNqC3zPAKCVZxmOQjtef2Gvc

FAN3yszLch01FE5ZzcduwKQ/h8QXEEfLt0oOxZ3dFdJpzdgi4csSG/KVzBLgOPZIoFaIzqXAuFghSDZbq08U3ELFphscwvoE5VQniGjHvcd8T1PanElZE3deadLz0&amp;#43;sI99dTgF4UOkoRBa3fMFnNE2abF5PdC5LSwUEM2NkIPwypz/vMNdXgJMQm7caTmTAQS5HNSEAOYB4f2ToZwA2AEala4BMu1wAOigkFg9bdmC3EMcuD&amp;#43;1yx3Y/PNc&amp;#43;YL8Q8

yCAkKFgoJDZnzrfCn93d1n7QTMBwKiEMZBWt2l6LotHEy3QOdUjGRBPFTcPSzhhP8w5wKPvTn9MkOyPG2DzpUvnCT5pHxsAlVEGQPlyKs8&amp;#43;ZzZA1i94/iGvHZhQbVUXCrIpi3pQulDiO103SpDqUN3pQ/1IALyg8R0NZy2Ff&amp;#43;C15h2sc&amp;#43;AyunQnDIoIWCj2YKhNQX6TJ2QkFxZ4DbhUKQO2B2hNZFgTVMk8EEpuJv4B6TC/al5igSjAxGsISGZhO

1RsUG1JVdopaDgoXm1fC3P0bXE9RUv0OKVcpmy5Q&amp;#43;x9OnktUE5eyEMxXQ0Us1bKSyAIJQ7VRkYerRDXbyxseD90bXFxkH1eVa4lDi5kLMNPklUvWoxXJgqqa1k6ui&amp;#43;ICVFCexhCKbAX4GXYRi5j3mMQ0EULd1&amp;#43;wJRBwVSAWdxI&amp;#43;gEkAfQAxKg3UEEBcqyqASOs4zTY3BS4QcziYYVMxAOIQst9SEP3g/5Ckr22/OQDozxzedK9UZwvg3eU2sGHwd

mkte05pS5ReCX&amp;#43;IYgtpb0GLT7kiNDhhSGI34MOpQvd5omSPdR8oMDGnPn9rny6vYoNIoP6vUOBpBxjgK4sqoIQArUlIhA4aS/RtTCZPMCoyRl9Re&amp;#43;Y6w0khS2gwBAswVXgRkxYgTARbMRywUp0t1TAEaDdX4GjCLdVoBE4aSP9vP0m4ZwlsDgfxEG4AKjazeYUkRhaXHD8KySN/Vwd1xGUAXVBGgCqgZOhQsV1QYIkbcQBHcEBidnygRGlmYPzHN

dtq/kE8B0Rj/0DPcnAvkLP/HB8L/z&amp;#43;QgWC0QMCQi355AND/HsCkY0bfVfRL2gbXST9bEEYgFYdEkMEJZWCfFDhhPEgZ0Mn9HFDAOweXGWlKWQgKW/hy/3gA0Ucnbxnwf4JDoj5oaupN0DskbCNXuDnPOx4ruB/4WO8mnkGsVlACTj6bPfR9fw6/YeDZIJOQnZkKAEm0X4ARgHDrIBYoH2CgdoAqoB0PI5lKbzXg/skl4Td/F0sDIJIwq4AGwPrQp

EDYLyowmosq3zv/YWCH/3E3Cn9EH27Q6E0i4ikKOn0WELiEf7xa6g4QvjC34G15WZV5wM4fZT8TALIhGk1t0NAPJqdKkyqQ7W8a90Kw9kcMoLQYZOZPzRL3eE8oV0HNShtXnz5AhrDYZDuSXVU0D1qQuvcXwNupNuwgnAeOEeA9ZCgUfJt8LGRhHx0C4Tg6RdpNYGejIAQXcH3gcbx4Qn0NTlA8BkwlYbBS4x9VYkZUWCJuBfAH3CvaKIQKqjC&amp;#43;B

3R/MAlkWO95IXNkNsRFPSamZpcjykawOngqzTOENyZigM14ZewRWQgEVwE2aCG4XqMBaEWEJttYGXeMNVkApgCVeONmsCEnLzBrHEX7bwh&amp;#43;SGgQ/2sRgCEAD64/DXqAUjNQf0rkCkAGgC&amp;#43;yGqBWNyLHZ30YclKLbmCYrxIQ3xCm0Ooww&amp;#43;DW0OPgrsC5nx7AqxNPjw/5FupEsC7fOmNTvwYIOR1tTAKvV50ir28g5koFI1g0QTC7GWy9N5cmd2P7A

a92UOUfAcVdSh27RKCgyzvATdC7wB5zOR80T3avTodCxiXpa9Z3kDQ7CCB/AIN1Ohsk1AgKB/hAClv4J81qsIFA3qdmz2OxH&amp;#43;CLqGIdCYt10TH8Utg7G2Nwx58SUIrgPwwG8DS4B3C0IHlFDJN/zUUfdrClB1&amp;#43;fNgVeZBd&amp;#43;Faxp9FIyadUD3BEgi/xGQj2wQXcxeBkNHcsgaEpuYy8n8Dy0LmRhJy&amp;#43;ggCoiaAXgCWRd11bmOktHdHBCAY8SsDH0b

zIesFr0WmpfmnaKAL9fyBchOEZ1uBUvWXEGy3Jie4Ik&amp;#43;kbCTCDLICKwLvt5zymwfEhNhA8wAzBqy2USaJ8S2TEhMlBDaEOzLp1iXB8LK7D9BgfQnbUmAlW4X4w&amp;#43;QU80HnkqJFHMSKNpZDd9J3QbC35kZDdVqXMKbhpqNktDHZpfuGhbH&amp;#43;BDC1j1KfAMaG71Eex3mGKzbUx4SC47Kg52UEnETXh9ujzAeqYHogUncGhBBlUlcexn/W64eEIQe1qXL

kNnun3whs0EPBaTH9p/Q0X7FEhWQ1abDpsTOTk7Lg5x7EhaAPQkHRhCctwT2R28Cq5y50u3SucYMKfHDhEQQCQETAAgFgoAfQB2yV1IDNliAFpgSWVw/2wQ/hk&amp;#43;Tn6QLV9Ih28w8AEvEO&amp;#43;Qmw9G0NSxILDKEKcPUn9gkNJw9C8V2yiwhNtn0RdJajl8tXdUGPQjKTHQjBtkkLZw4Vda9h4Qzn1sUJpA/0s6Cxn9ZOYYVwZQt3txdGHNFkD5u0q9O

592gms6ARC2UOpHPzc8kNZHXIw8oJaCbXDiHXYbSRDzu11yJLRtJGn0KfBeiwAZQrpwzmifMYFRzHDDF2YAPBDOQo1gJXz1cDwhUFW8POUD4HuOIJ4KBGLJUbNpZHJqZhgDc2&amp;#43;GbdpXoxJkGKlSgNymVooLhQvRLq5QGQvwQe0UEDfgOXd/glkXaLRlbVR4LgJFhG&amp;#43;GBaQbRWsdKKV9V2XgC70SxAeIBXgUF0vTC3BqIGU&amp;#43;QAU9XXoqNzBZIF7BM

88YQnKIoRggEBp5eIF00PIlIH9A6C2AGAAVX03qfyB4YwZAZXwQQHqgWKRyoFo8OOln7VoI&amp;#43;wgMZxkRT38kTV3gyjD8cI4ImjDAULow9tDlKTsgvgCBCPb9CfAIN2LRcrF2MIpwf7ApsE2fZFDQj1U3Qpk67GAaeQiJ/S5wi2CawV9fdRducIYvXmNDYJX9IdctiyU5B58wIABePzolOSefGR9dYMi6AJFTyDs3ZjB28SN1Yc1S/3anc/Z1HkMmB

2DqwXYrLT9dCL5wsACPcPfne2tW2gh4cYCvLDTvR/BL6GWcSeJnqXs0XV5k0P0kN2QbujVteW9X4OeRd1BZ7XOsGgI3c2VXGmR/sH80I3Mx4w&amp;#43;4D9MSsD3jMCp9ALAZZjZu917gZx1q9GJOdSR1BW&amp;#43;PS&amp;#43;AxLA0LGExz42UMFFhPHEhiaJ19y1NZcqMW9XWwJft1QVwg&amp;#43;jY/HHBaDEITMEbLXPR6NhxGUyEjoml4VwshZGvwE21G1EPgdUEgbDHPI

eA5y3xhba813h1kdRIkOADke6ZT5FmsJFRL0FsHapsJ7BoCbyxclzW5G1Cx8BT0Rwg1hy5IWnkovhywV5hu4SgwiOkuvzoAmOl9AHKgZQB4pCSAEEB2yQBwdNEYABERKqBlAHqgXUgbUBb6RDU3f2kqVr4T92xwvV88fwOI9gil5WCwkTdqEJIfU&amp;#43;ClU2dEMZcSNUaRCxEM8TV2B4RaHwH9V4i97xH9HndTsgxQxW8MkI1go/sCWV9fH5xQoNYvP

is0j0RPS2CREP3yAMtlF3MA0ki9Jh1vcicRr3s/DFdZr1GHISIaESxcZmF/V1uEZDxAWw5IPAMTOU4w94wNIECbE2kf&amp;#43;GFxEyAIKFIAsVQJ2DX0c4RB9ybbehgeZEoIOPVh0ORiOUMT2UkKcbgF4HOMWbJcgKwubswNoXuTGChEsDZ4CSA&amp;#43;T3A8LFll7D8tGoxsnTGIwH9a71&amp;#43;wQ0BkwHKgVqEPeTEqdmZugABwIYAF1DKhQQQqCI93VH9VBHKVf

pAFdVLzNa09BBLfGIdoL1HnPHC&amp;#43;yLDbTgjq3yHIk&amp;#43;CGMPQvDHMI/wXYVzA1QTaGfBDS7mo1R0lLvySQ679TDAr5KL8rGUxQhcCssJAAwe4er178GE8MBSKw5Mxo5hK4LOY8bQfWQvAs5gOrZdIW/CzOPMxsoPukHrZJ8S/AYT4TZ06odIN82jyDKLkRdBN6Od8jECEBe5tHwAIQG/hI7G9KT31oqMKDDq5EqLzwTUNoqOESIgJoqMIhZDZBxS7uE

h0V4E0bdXIPzitKSaA8qMjsQiEipnSovPBPENiuD85wqN2Aaqix3GESBUVf2A2GM6I8zGzGfIN122qorOY&amp;#43;3S6owiF2qMZHRNpcBQgAjnRKqKL3CMQRmiGDSKlmry0mUSF4FWL8Mw9Vq2L8PZN&amp;#43;fxN0LtU2/B4bIfxFonmo4fwzqDb&amp;#43;AoMHVWaaWthNkmiA/oRtzX6ESLpfD0L&amp;#43;FWkOgi86O5JPKUEBGT5cuCXST4Nx3E&amp;#43;DV8lPgyaaUGQWmm68D

84nnANKIMwJ0na2AQEnnAEBbrwcBSDMHAVPgzyDYUphPmFKJXJBbhqaQW5FokFueUUnqKdw8SRYgxRkY8CcZB62PXRACg10TwDEzG7tJzoZcKqwz58&amp;#43;fyhIw58md1BI&amp;#43;hsn5yGot&amp;#43;dB3Uc/ZmEtJBckEhMjFUitax4fdF2vS3Jl7BQQeJpFSM9HXEhcBnxiUks5I3o2KSEcaj8UEKUG9Ab0AaN9B2m2AssiBn5XGHgMI0AMPsxvvxyjIn59uFWEB

v8ifFrDGmQ9DSiEW6IOkBdaQWj1zDS3AlwYEBJfSPYtNXHsGbBJDlnA67wy1ESZfIotPm3XS/RkfDUVUlca/jj2BDx9Hy2AwyBD2GDTO1ElgT90EjQBSBDDdE41TVW2LNUWaGuohM4gPDL1bEgR4HgpFWRmRWQZV2kwPFc5VYxFhDcMMiBXWUChMOFCZjxoeWierABEEi1KZEqwN7h840hifplLaCeGXrgywzwDVpkUsHvvTMo8aGJoGgIUQlD7U

058UBQbarRmS21kAWgBUkOvX/CWDxvgGtRJZE1gGOMeeD8efD5UsGeA9uBm1EoKa&amp;#43;xeaGffaBQjzBNFG/AftlZQZMkOGHl1TDd8A32uGaw8uST0PgVtrzAQKQ91rF0VF&amp;#43;AfqGQUXzllt2zJIuCpwAxgja9RQUMQzlJoE1cLJmglQVK0BfJ/fT80CdgamAoYY4IIa1PsasQxvELlNK03AUNoK4guWxB8L29pbRxxIDIkohQEHYkMEAzwpLRZQIaTH

Ldrc1G9GE4ooxhSUWh4sGrsANEV3VVcNWBkznmwoJxpyw/9Ow49TxxTd2lrlFcLKEQ91XimGKl/LSQgmeYtWUZbRjt5R3HLI90l8QkKNdgHmlpPce1F9EgpTWQZ2CHmLgZNQ0BlIZtf3G0FA2gHaVe4AhlxUmnQq5UVNgoueW8bRWHEH/CK3BfDO3J7aA2lT4sRBhleWsRsmRR8ZYpgKkJcdcwCNhuER0x/gioVYpE2eX0kIE8V2mereUdR/2CoE

slYdWDJTLdvmGCoCOit6PhCJXhUmj90EfdAwhj0Smh2SL05fIjw8BW4G4R9rnxhDDRq9HMWI0cjmm3&amp;#43;ampRQS6MRg8urnogShUD/hxIPX9tYD0xfbB5HXlBT8Ftrh0Q54gS70yzCbJHIAvcK6CcVAFDQEYdx2L0WVsbOwJCA2hnCzrDYOdQpg2zMHtrvD2RCawTJUh8YmRoU2j2dfplnCwpSeMb1Rm6US1buDenFfRhGEpqKsRWeD5iN0kuiKcKO

QszRxHpCHCXh2YAa3FiAHprYgAYAFKga1B2gAoAJIBV6jHhFIt8ACHlPDCyq1GKBxgX3EDSRWpY&amp;#43;DKvYyDxKICww4j&amp;#43;yOkokLCgUPowjtCl73bzcFCYGyVrO4kdd1L5Bwk6zWeqJuZHKiT/UE9WfWhoCZEiAW&amp;#43;IqfMW7QqQpdCWUMTMQRCBcKyPMzcSvHzGeyVsgzRPKSB/oXcAmOBVcNDgfGjnYDHSTZIx0gyDSKirwM0bdljKrGCDFYNnYG8ZW

toWmk40cRDSuAwKRENE2jr8Ad5ONCGDTAptGwZDRNpGBTzwfYNKrEOLPPAIgOBDHGQB3nyyXRs68GzGbSZhEm0mHoMcZC7uU0oNhlrabxkgZHBDXoNCIlK4RYN5/CfA1ndOsO3FKgQeuH21U&amp;#43;AgilB4BhhyLh3MChjeuBQOf9o4Ui4tB&amp;#43;B8EGaPHYJ5yhDOH7gdrwcceowJUnObEsQXokeCMNjUqnx&amp;#43;RPdMsAVHXnhnKwPgHOjuNg/9ewsYTCp5e

aRYaHWfKkj/LWUFDN0NoRAgynEQCSgQLwk0eAjol9d0UlXwLiATQObEQboYPA5tX7wpvRpQZBRB4HBrEM4iV3r0C7Zd82JkRZivTT&amp;#43;YdXdtyyL7FcMGE1ctVQdmSAPRQ7YdH1PgFrB9JBg3L4RL9B0MD2QDpxFkdKFCsFsBLeY0YUhOEEJ1aH1HEfVfuF0he7MO4Ob3JMoi1X1HIeBBxD0gVyAFGMpdQ0lNwxRCZpk4EAdkGdA7iGWvDp15rCO4A

RhdmKJCev9XHHwY8eMbunQQL4tb0lB4ZwgG/kj/dkZLVkAopAR6bSjKBwhlIWWcE/wbrHsBeIo91jeRRsIQ2SGyaWJ89EokeDpV8BrYuDNTrFUrWMZ/uCymKQYfJQJ4UEh3MALUYY9RinRUeEhX2UebIfMDkOoAo5CM0ImI37A2yRprYQBi5B5AFiVr4F4uCBxyoFLWPsCUf1frXmxWyI7IDedqDD93MotRKPP/X5CAWKko44iqENCwmyDwsNHIw

VoMCwpwwYUpoOX&amp;#43;bv06cN36eipPSWSwydDN8BDeLFixi3wNSRtRRWXTCncryJGaDZI2C3FKKuBFkgyDN54TGxqiOIDfXyL/Cxcl/FCRbYBQuLraLR9EgKi4s0w7CW07RFMYfjVAw6CPhQnw7whZIDRYVCgQYmtNYlACtRZIOg9Sl1ZkAw4vExBOMoCQEDa9T&amp;#43;NxOGffFlJVrz8eLsEyuTxIAHhl1QOQDd5dZFlZSQJ1uH63MV5DJFug9Td4vw5cW

NjR4BNsAqpOONn3GSDCyNMQm/45gEA4UwAXgCc1Q0B6YFKgWbkBlzJsSxD/x2k4gsc4hXbOZeiqdSEoo3wiEJ5ghtCJKOqLQFjNOK4I2SiScJBQvTieAAIrQzjd5TVgIwZEthISB9tHEx3FXV0mcNkzKQjdKL2QYl8EF0Motcjj73fg0FdeZwpHI2Mmz3NrSK4eUKsA9MsNCPWIQz9fAMZo6VVID1mJYZpEVxRXYRDSWUcbQICwIAVpMmjL712LO

BUooMzhBfx7AJJIxMwCHXDgIwiS4ByQynjQkSJ4zMsceP4SJIwamiH8JnjZWKZogo9RhxSwS9JL9Choe0kw2K6KPtgTrky/fgUnZFckBx9kgFLlSm5cRj2nZIBYYl9RVfsL5mewoOljmxbYtc4muQfdZ/B6eUC&amp;#43;RyZmGgZ8RmBwhUQsO&amp;#43;wywxm4KFC6GB8IT&amp;#43;gw/TRVSbBIPBRoap01bQa6Va9eTXrEUewgWH3KWwZzr1hiBrpRd196TEh5MPQEK

6syE3FSd7UFcTaYadVq3lFBbLobPB&amp;#43;IM/QDMBl4VCx2s1y/SQ99rHZIZmh9ITJoZBcxChLECBkzV2GPJg8b8D1dcvQH8M&amp;#43;2Z7ppjUWyIY1taDlI79DoeicUMtQMXG6Aj8pmZDn4WuCoIKM&amp;#43;JEgAGn55eClwECcfILRdGSzgqnEJZCFIODch4OgwkeCzMJjpGCZ4cFVlJEAL6wQAMHB6ACl8CeEqgABycCsXmKwHTWUmP3oI6jg6M0wfX5iqu1Mg/

mCjiMJw2QDicJ4Ii7jedSp2TK8OSG9mbv1Udw1rEmEDhDkqJWDWcOfghtji0Ts4vBsQALLBTXVesUvnFHiEBUFHHtxnSjmCenj&amp;#43;4mzCDZIM8B&amp;#43;cLagdlQ9TPd8DojHGOPCiexcgb7pwtAtRHuxR7Wy0Mqpj4w5iW/AxNhJbGyFQP08tZ5FWRhi0ViYGDxVuW7wpmQwyeUMX&amp;#43;yxZc5ZDQPjgsdNeSHiwZj8iTiGwbdBAiiKYr8DKKPeAgRN9ACqAa

1BK&amp;#43;hBAeHBGgG6AAI5BfluQ0vYdPUKgLGkXEJTAXmlI&amp;#43;HxpaECsH3Iwjj82CKO4jTjD&amp;#43;I7A04jUrzBY&amp;#43;Z95ayuI2lVOeOAyaelCh30ZFLA/mG0AnjCn&amp;#43;M4QsWgvmnKve79KrxMo6zcWp2anf4i7n1qNWdd/NxzgCXDSWKQFeKCxcIn8ALMy/zWGOOU7CKcXfcZDZAcBOwoqsG1NabJ4GNp5F31Kn2&amp;#43;PLLAVQOSpGYo&amp;#43;gWTKFUDlPVP0DSBcDl0Ve

ChDpxDRSLBMvzMgcbAARjRfN9oPC2ZIQcoGXxCpb8pbCyvXant8yPfVMbjR&amp;#43;Jv&amp;#43;b20OABqAK5DjMCviELEYAAKFUjM4ACmtZUs9/37JVWtxoHPKZp4/dy7Ilb9ccP&amp;#43;YySiT2xO4mSjtOJoQ3giKf37vfQTch1iVSDoeuzlg0qYe2OorSwTdAJSQujYWNW5jdciAePPIoHjnv0A7Ync4FUBIjBhUGGE&amp;#43;Hyl4gMcXLdd3eiwqQrQL/Ul4JRVGaAlca

eY&amp;#43;GD8FIwNSrgL0DARQ2K&amp;#43;YclxKBAbggYFHxSUMb2ZKnWw/GY8TMJaEoB8x&amp;#43;OZOX4ADSDnAJgBnABo3EEAqbAjFEaJl&amp;#43;J4pNdtvSME8C&amp;#43;B0lnxoaiBg0nRISkTlvyhzHsi1OPmEkfsgWMHI5YThyPkoin9oG3j3NVNvFRCIk78ei3r43rALBKPJKwSUsKMgASi3&amp;#43;NN7EwDzexjaA8gKRLSo6kTowBeEoLdEgPdJJQwieT/IRWiZ90wIw38R&amp;#43;JREm

/4C1nlCHkBbgS8xM&amp;#43;B2gEycHzEtgElCIp4gR02I0iR8ELLpJjpphLpE2YS9&amp;#43;MCw47iNBNow1AFQWPOI2M9Y2zj3Gtdch1m2ajVGVXiww&amp;#43;QN2ghSKzjQrHF1NpjVyK9fYyjjAI/45htt/XuEr&amp;#43;C16SfnMniMj0PI&amp;#43;59IoJKQl1N/oRJ4xpp6PWz/L2NskxKyFE9IeJ6nD5cEePpo1HizAP1w2q8LCN5AzNhPg18ZdwS0eL5/bzdSGySgp2DbyPqQh

ID3MDcWSi0mI0ihJvCeXxWMdXcdvBOwIYCUSDlteeAqfDOES1EOxGa3A7wAYiLcEzF14DVtBODo8ya5b6Myt0toPmwzeQHEaMJQqQtHD9Jb0FL4rpAv4CKoEFgSiLLnDz4yZlejaxxVGJGzJfUgqAwQNzksLimwH4gheQfwSgJQeGujBCx99HBsKuo&amp;#43;GjsfMp8ZsJesGPZ14CDooLA4qHnwempmwwPaeYpjJHSdZydpEkCKeDIiJGbLdnwl6OVZT

pARZC&amp;#43;IHCxgU2uUJzBm9QEaBT1qXw/AgKZl7UuOax8WmAxOUbMg6JvwddZmZB19dTojmKS7XVBDQC/&amp;#43;O/5xIHqAZwA/2Fw6dP0hgENARRAAcD6VEYTHmWeNUiR9IOiSKK8h50bA/V894MZEtZdmRKD/NtDtBJ9E9K8IQI2ErUxeUAK5TqVuiz67Ez53hW4w4USjhJkIkQ0FP3sEpT8ExKcE2ajTMyJQ22CB7mf2Bk1/M18ZGKDRc1FjU7EGxIOxU

3CdbxGaWWlbcO4wAqChhAtwnP8NHzVVdA9GPT5QuW532gqKd6w3tgKAqti8LR9kM2Fm&amp;#43;NXEqnEJIA648CgXvRxlWh8gWD3gEVJESFuOaXiv3AV4WJjfelEtNBAYlUSpTbJttUCwNHh8BhAQR2RxrC00HrhQE0YCUjJYThOvLpAEe0GyUMC5SMf7D6tgEFxOTpBENwaI/ZBf&amp;#43;CjzKUElk0xIY5Qudwnw5oicXB4iDx4g6KlxRUNBZQzObbMxHjU7F

xxXzBjnLgSswP9rLN8qgDmI4BZBpjZsUqBcAHNbZgBp2DoUZbkD9xTAXAsvMN9bSyJLj2UEn5DVBKarBYSPRJOIr0SziMI1dK8sEN0kxshvqQ0FexNcLyzxeeiTbH/BR/iLJOf4zrJDa3SQ/7jZ0ORdM8j9nyHXBgt1uzRPBwC10LLwFcCH8ilwomT/oU8DZcd8/wUfDOpPvlufTHj6mitVcYghbgpY7&amp;#43;UXANCDGljQ4DW7B/JPJPGIYmSJ/Ai46

ASXYLgOO5prHD/0aWhJWzXsP8h84yVA6S1VdxeEfJswRKB1Ld5dz0QobbVY0NCoWycP003o1fAFxPxmC4xGgNRWbndgcI7Ddk91L2V/aV08BGXKJdhkJQhiOl58BE14Jco7jjsFCbJuuh/vHO0Wk1M1LhVcAgFQKzBWNkeiGcM87VHECoo7FSvudqVR8BBoTowmWnHMC/xlKJ&amp;#43;4PRJIAw4KERjOIj6dX7x/4EhIVFJjeIgEUz478NrbMo9SXWrCI

0jraBdDOWiAdhvPbcIh&amp;#43;ILIzMChnX9rTQAhAHxMIWAPsiMQLlQXgHYDDuVdSFS7S4i1uLXbYCcUwGAaCO1DINP/RST6RO&amp;#43;k0WtVJMWE4FitBN2/HQSewOV7SFiuROgdNbg2jGMEgdCQ4SrDA9cUWJRQpcj2rg5giUSRBybtFQiWr3R5NE9jF2C48YhFcK3Q1OpzG0gRcvAHzjCDXsSyT1eE7R8EBE9yZBRXZCvmZ98ZBmyEyAQjLWffGmZJyK3Ka

9oV6JlkdzRQziO8Z98gEHeFVKZ8PEkFXuY1Yj6PX4tnmAMKGHQXhH&amp;#43;IKgCRuO448YjqKIqAL954gBBAEYA9Ij60XKsAJjJg1YjR2w4AOj9uKJk40qj3mJa&amp;#43;SPhdiOxjPzCTIMH7ffj3RIBQrTiQWMBks515nxn7cJCDlwO8QIUxMxISMzjxhWXYdLNIxL0o22gTZE5wkUUXBNYBOf1FzWqTPdCZMKr/Fr0fPmPEq7CRxg4k1mYE11S7AHB2gDAcD

dQyAGBAMMVJoDgARHAQh0kkj2JcPXX4049hezrQ/bj/MNdE9TjfpJYU07jWRLkoyeT0L0YHGeSAxLwkYn5NyXf/BFiMOGu6fYS3Lne4lnCEZOsEyX9JFPrtWE8CTyOfJEiopPBIg0pTYJLgb85YpLAlMfB5dT&amp;#43;YIgQZDXeEJsIUUgAEVdoYynkNSYDTWTIEW9BF2LZxaY1NaGmMRGD7WQmVMuTmhIrk1y9WZniAVxJCABfPU1txJJuQloBMACBAR

oBCADjpAzjyFILHKm51&amp;#43;PpvKSwuYP2IhkS1BKcUltCj&amp;#43;O4I4FCRyLP4rIdq1zynSpgCRgGbJM9B0JNMHngXCl6WBcjtnw3kiGIqbm3kvhDC9zWSasY0kR34edd9&amp;#43;FDMH5wPnEulfcjrY1ywqAT1xxgEgXg&amp;#43;shWAiqTqgPnYbJjcBjscHFxdI2WuCmFTxQ3osoD7HG/KciD6tDXwZGg/ej30V5g/UgHoo98rq3ICG0UABCOwYkIODX1HbuBVQRxIA

2hE6K&amp;#43;VbUTRuKaU2N8Y6QTyCwAF/0/LNk4ZWnwAfQBGgHKgRHBuPGbOLGlbRJxIdFVhU00TAeSXRMYUt0T1BOcUpYS2FM0koGSl7x5TRt87FWUNexNYkN9qY90XI1EUr7ioaGBRWMThjkywuyTNdXnQ1E99COFAopCIIE8pHVSqHVlw4rDsSPrEnWCQZGSUvFiAul4vL3V&amp;#43;4gzweaI/YyVnZ&amp;#43;cWC0F/VF1IukGHRRYj5Py4Lahhmk9UpUTb&amp;#43;wnrF

Pt7iAV4HGC3CgXPM0xKagFGJeBhUEGAu&amp;#43;wPhBTgnAQMbCPEqUjPR2h0Zz4TsD/xDsR8XmWENVweGER&amp;#43;ROCAuxnE1S1fchcgG2we2hcFKrc9ZDF4MIFlHXgknFdc4LGBJsZdIAt9IB5/hkx4AUY&amp;#43;yBxxUK0HhCimJm1fk3TjCU0tgh6yZeA7cmgUfsRpQxe44HYUiJ3gL7ZMuNBGbrkU5ym4dx1XjD7MBFCIgTLUAV05tkeMW4J7zyaE/q0SVO6/S

Gl4cHpAJdsqoBikblRlACqARRA6bH&amp;#43;9aGdRVOoIhFBg7lnQd5CFoAFrWkTdS25U341eVNmUqZ8icIWU70ThVPmfVsdQZNtUfYQ1uF7zEhI74L1Wf5Z5BTlU0PAhLVTKJVSzznjEzGSgSPGvJDTnJOBIxlDl0zSU0oxO/VrEM01gUgKtd8UA5A/uZPUzgl7GENFA&amp;#43;I0Umk5Yi2d4buV8ADmAOoBkRWToUgAZX3BAJ&amp;#43;s5iKBHIvMasUTFQyC6FLsUh

hT31McUpkTR5JZEwVSJ5K0kpe9kJ0bfJGSHGMWpFyCj5VPLGLAx5Xhk6cCUkL5QWwTTlMXAi557JPovbvwYeUCE6njcZNRIwsS0eVLgfeSCeLufPahlVQp4jT8MNJqQ5&amp;#43;ULAKYdaHjU4Ec4uh1rcMGnfnDmxL4LFNRKaLghA2MElOQ0g&amp;#43;S7n3pAtWMsNPTDblJEBCoGB3lB9GAoB2RGunK/No9BXi/Yj5gBXFnMamhoBFY2BKE1TRZkVLDgOlUtL

IpsZm3VGQVEnTlkLthasBQgxb0jlT/0NXcxzE/vDhgkSFbEH5ZsmMiwZeZDhCD2YcQf2n0kaXizElgtdLRB4DnLLHgLzwt9bEJkKHICVrowRDT6RsIDRzJID0cRb2HdHDYrfVdHfBjsmxSpSx5NRWj0fL8NIFQoZQxPhnX0CjkGvzQk/wUsUmeYFd4JmVObBiTGcOcJWNT&amp;#43;SAOQEFpomzdIgm5jHzBIG1lgDCvY9DdWkzWpDAjLTwzA45C9RPXEA

oVZ/0tbEoV4gHhjboB2gGUAV3gF1GToZMBd9xX4yPl4OVJE2STqOF2I3GcVOIow6ZSfpKE0v6TWFPHkkP93FIp/HKcvFLWU3ukARKACOLCrESBpFWjtKMOElTSZCLZ4L4iUZKxQjcjM/239YADm7WMIxc075yawk6lzY1hqLZIfNN5jZWM11wHXR84Fx0/gju1za1J3IF5XlIUUr3CQ30AQs5pKkU/I/HtuYmG4THg6YGGwL8jesAd9J2RqS3ZI5

kI/hJOwSm1itOpQaMIv&amp;#43;Uj9f4YaGDPsIUhqNjdkHopnxWLKIVEMijAtQhBY1VUVUiT0eDBfSLReSAJhRXFrc0StHcpHTE8Vf0YFm2yBIYo66jUtYQDTxjOwHoYEsHBw/6ghsG6sJwg3fSuWI6TK5JeHG1tkwGl&amp;#43;JOkc6RGABdRZZR8AcV965yXnYZTiRNsE8YTBAJbkKIcplKHko18CHwJ9dSTj&amp;#43;MWU9kTLuKpnCP8ghRqRBtdBFNf0Dm0PCmg0j

4jbMUPvP7jGdIuEqCExdMUIwFc2hzJI5mjRhwpIycA2aUpoX7hULGG4olS0FKoo2p9fsFKgfQA9GHqAbABpBEkAHkBhOKMYa1AqdiSAca11hI7kvnsk6zLcXSDSxw/tJ0TX1IO4uYSZlMx0/lSx5IBkoVSOFJ7A4vTCdIiQjeYEeFEXEiRQxPaGWydmgT709Fj2EyiUnB0jnz500wiZx3whTYsnlPjgT6EsbTZ4hz9Rh0NdVBt2W2S/D9JbeWHKQ

b0nuxcuR/satBj8DQs3jFgZSjZe9KJOX&amp;#43;BwyKepKBBKNMhpEM02ABqAamwxBGycU4EQlkfrGoBr6xCAFsiixyPHQNJ8aQRA1HSVBMO4jHSR5Kx0lxTRNNx08TT5n0pvbhSqHwd4/wo4DSlUrwhOUADYJTcDlJT/Z/i1eHp01jVcDUlEkACcsJcEmEjSkNywwkibN27ErVTxdK8k1kCexNsMk28MZO1UldFQtPDjDrcvi0oyGWC7HjSZCAwJcRkSC

Wh2REPwbJtdT0W2M0wT9Ch&amp;#43;RBjKcXqzX/R&amp;#43;UApIY3JniHkFEG9bIUEFY10jtPZ8TnhgCNG4G7SYJNYmSGJgUneacrBl4FpkK&amp;#43;gHIFK5C09ZYR3Un7T8Pxv&amp;#43;KoBsAENAIwB4cEf&amp;#43;ZSIngCGAeqAPXTzzExgzkMinTjTpAwdEj&amp;#43;0Icy5Ux/SHFJUksHcJDIFUnHTyVSWUxXsJtBXvboYgTxEItkVgi1&amp;#43;bMAzu8PR4SAyBZxSMUsEJ3zSyRdCPKWCk3

YzJZ1X9BEiQeKZA1i813yckmlCJHzcbZEi6tVkUxkDqd0GvDituK3bE01UwSKsXf/ip9PZ42a9kZQoEGLROOzM0YbAblnnwVPDJvQgoK0N8wwLnKWRElSL0IeAftgiKJIIy4NZIQxYfpjNA5Vd0X1ZoI9VNa20LdlI8EE1TaYpg9CFhPPj&amp;#43;X0fMVe0xrhd&amp;#43;bctj3AfcPv9auQUjBqSfq20pJ9VUN02wLCphgJEnJTDyGEr&amp;#43;OPjqpMfjPzBtrBZoP

W1/ZU&amp;#43;IcJiUH2VcJbYfLjpfVCxDpO3U&amp;#43;2091JjpbxJsAF1IP9hUaW8gHgCsQClCGOhDQH54XP1K0Oi&amp;#43;Gno3mXg1HfiB&amp;#43;wE04Yzp71f0kTTxjLBNZvSz&amp;#43;KrXf0SidNVgcMdZJzp9UcDPLGIA3iDljNhIK9k1jOuEmmjLAJs05lCXJMPkxQk8eML/OUlw4Fw7O0ofVMCpXUc7JCe8N&amp;#43;j7R3x8KW1rhDF4yNMn3E20/ltEsC4GY1Cl&amp;#43;zE2Y2hyaEtzD

KNpgXswVaxN4jQETrBxNi1ZMjJzIVT05pSaTgEROAA4ABbAemxOgDK&amp;#43;dlhelzAxWbRiAFGAXP0i2SCjbjTGCLL5BST6FL&amp;#43;YoYzn9PEM00yG9J/U9hTSfXmfDtkbuOhNUeBstwi9MDT9GUZaMWQqdPMkmnTtDL3&amp;#43;T0zQeMA7Si8ZfT1wxXRyHRcMisogwjjKfGpMKFZDRmgZxmeWE9ggRFSwe2gHBT8UFBSV9O&amp;#43;0njiMFIkATzFSABBAUqA6VFvrC

1t2gEkAURBrUCeBOQAb1JL0sqtEzVJE2sChKRqravTRDOHkkYyxzPD3DSSxNL/UnsCyFJ/0g5dUfhFoOFDN&amp;#43;kdLGrRf2LMkkxkRROs46&amp;#43;ZPX2VUh79UNNTEhySYlOHXIdd1P0IbL59iWQPMg7sSsJxImUU10zOMusTqLO1g54zeY1EQ3LC1wMFw/cyPBJFA7Wd&amp;#43;ZKkQjfxrjn5PH4596mK0KCguBUsUNbSZSN/9KWR/hABEQVx7ggECOJiKtAFdQ

cNMgVy0N3MRL2EYN&amp;#43;jLDkRlI6IGKEijTCwKXVuMD1QLxR&amp;#43;CTpCSqiFoX4ZSqmb&amp;#43;S0NOAhggpbcPaIAqLGh7aFh&amp;#43;NSMgpkfVWBAj9DBlCHU72Ms5GLiftTRaWDRowkebHUU5aP/cEGhVzHuFAUjfmC4g&amp;#43;C0GlIqMt8z19IqAJeDOgGwAeHBUCF&amp;#43;AYp4Rl1cNQ0BaJWpsCFjXMJr2Isc4UjR9bvp&amp;#43;jMHM3fieVME00cy5lM0E9/TULM/09C9Y9zn7D

/ldUJMgZ2UteyhkxE0D7lu6YtFlNOkI7QyNt3g0lm5ENIz/YTCpROB4q2tHDImOUai/TM6nJiyWLI7dXyTavCF0xsSDyP6nXJDOUK50n/oMj2PMvdxL7FYkqNVthwGTIBAjpw2sVJkCE2Y2OBdicS5SJ&amp;#43;SEsAWeawlzWXGuAhIMyI4KNnIy1EB4LXiOChD4NISnJwxUE0CGsnTIrq4vCL5hVeAfIzfYvBBPaQx3MkYHuHN5UijBzAw0IzDvayRE3

dSiyJv&amp;#43;c0E3bh5AfQA&amp;#43;gGTABsl6AHKgeIB1Dzo8ZgBseg8PcCy&amp;#43;GWQWbuSBnyuAQQzOVKasw0zMzSSnY19hNPHMs7iT&amp;#43;MmM&amp;#43;gdtxBuqUzEes1csIAzh9CijScDqdKmszhCpBkUEjTTHBOrxX19gAN4strCAtNnfPKDryL1g25SvNPowSBg3niG1EDAgMHYLSdc/iPJYjzT11y1vKX1Pe0i4ietDbnxCKVxLcA38ZZw14Cn2SxRq1EgQEAQWxg3MN

uwPsS5SEnwhUA/o2XECAzD0ZhgrfSo4&amp;#43;mFwWkRMjo8Y&amp;#43;NGwNVwL&amp;#43;log9oj3rDaMIgYaZT0kfD5PVAfjL0Jp4yXYXtCcZXvTeaRLxWaMf5pB9X&amp;#43;GM2khsExoUzR7ZF6wJLB&amp;#43;xEZdOspWNll5EEIC52qUiHwpUksvdr9cbOH40zDftOQMTJwOmAZsdRgaIAalfyAbmXXUYQRIsIv0pmzg7lLhNnZ4QP7kzmzIJxWXMM8Q91GMt/TW0V/U7qyKfwZsz

CyFDMeiFco9GRe5Eg5F2lVrSazPuJg0/fR7aVmstxF5rOpA6oR7YPBdIk8aLx39KyUGLK2rYqCrDM0I0SyvpF/4kMt8WML&amp;#43;a4zdrLBUWnNLjNBqXdCK/33Q73CKiJH1QSCTYSd0wQ5U9BEhMOcmsjOaIE9zBL0xK6yU&amp;#43;i/vJTDeUEzvB0USw2eEOyYe4FJQHYpjbVQbA&amp;#43;BuxmPo7XchDnsKd9cUKLo7IKE/NAdUfxx2pIQ8TV5jmynVQAkVpOlhU

5ZjNBMgKrlurHmEGroRWUngBbN6DJjpbPM/1RGiIBx51GwAM8RwQDjoEjNxwH/PaqyEjiLzDBAqlSDdOCyn9LEMxCz2rM9ErezJzPMTYWyPj0A0rGBYWWSYpM8RrNWkZwhDfWuo10tZbMvsj4ijvHIshDSVVKosh/pwHIIbG8imr0xPDWynjJELNE8uLOVnV&amp;#43;y7AP34IYRnniaiSaJZZ3tUnQiPjLQM/Wdaw0UrcpF&amp;#43;rEJ&amp;#43;Bg9zEhpkI5og&amp;#43;jVgY

7h&amp;#43;eWBCdOc3DkOyUz5rWXQ/FHF7OUIRXx0UBBxwCxxw8EsnDkMtkw0HZ3RpfzQoP/EYKwyKWtRvhFybKcArMEBUs7UAAllQ/6g2TwcOCUFNSLKMhIUAYxlMm/5oOVwAcQSeAFNcKqBSACBVcS5Sel&amp;#43;APoAhBHJ6OnUmP16GWKcohz24nHDBjJas40zwz0Mc/6TjHI/0qcyyHyjAQW9pIUc7ezxBFJJkJ&amp;#43;B3jDdMksQSKnSwoyjPHIWs6RTskJmOA

xcwXTMMgX8FxwEs1ocEnL5/c58zb11s5i9duzyQ8pDAHJTaXFiLkgc0pwyq9y2sisSzrN9Ml3t/NKOs&amp;#43;zdPlzAgZHiVi2rEyHkIzNWJIgZJ8C3sOyQlHTC/CylbLJOJRXjHFAsrJNiM9UbEG0Nf1wzOUG8nli3KeBz0ZWfaDcpLVheYPwVrdOnTU8tpbm2zWFhawjTOauU3c2HKadNNVjNzfzlcEFqRIl1e0MRrHBByeQRIf4gIN2lkNpgv73UtO

&amp;#43;Yjykotdd48pWepLsR3kTZQEGyp3kRfVpg3/GeYZYprZFyKd6wNkUilMjZdvQAjCJ9m&amp;#43;NG9VfBXuHdyS&amp;#43;i/FUusJ/E&amp;#43;kJPo9aRkhO&amp;#43;oYfg&amp;#43;BQrjChUo/BctHz8XdGAo1r9l9K&amp;#43;0vGzKjON/NwcowGA5foBJoEuYlAkv2HqgHYB0QDhw8npdIKY/TB8JVHixDmy&amp;#43;NKHM45yRzIMcr9T5lIFspvS8dL041iBMr3wlepTpegeI/EhxsBCYteS3iNRQy

EgNXw&amp;#43;cofT77PH0n0ymL3m7bwSyO07xVI8LVNvkh1iJtgTUlnwP9Bi3LfQ13T80CrodZDsnUGw4KGfGXjF/qGbEENMSahhYBNzyjOlMgmz1xDtbeqAozXqgV25GKBKgcez8AHEkxf8&amp;#43;gC7QmeyjYTGEjsgt2yF7cCcX1KQrI5yjTOrck0yznOx0zqzpDLQsq60eIEWlKgpVKOLuB4i8e3x8YI9NDJZ/FLDniG/hBnTh3KZ01i8ZFKbE7nTlqMHNE

Fyh13dUqCFYeUB4/Fz4nOic&amp;#43;WdIuDtvc&amp;#43;l1Z22M7FzqLPMIlJS6POsMtzNUDLvIt2DHP14JFV4N7VaPYmRRUKApFZsC50/oFp16ak7g2iCA2AVePHsHtmsKNmRaeRhYxTZdMLRsfkg/yIDYc9IsXBPFT1l8BEgQTtzzCjMHEdT2UnHVWojUqiD2SFg6S2qddmVQfgCbIFtwo1HEV5gMZm4iIbAo70PsMlpV/j5GSRyb/k6AXpT4cAZAGyBmAFhwH

y8LWxeAVNcki2nbetYhWA/c6tD2pDTrAfIDTJXs&amp;#43;K9WwOv/JCy57wnMy5zTHNt&amp;#43;FSAbqmg41sIBq3y1fzBAdilvQq9M93CU5Dy4q23MxqcvTJAAi&amp;#43;9/BO/WSBF10zRctEjJxWncmsTi/xFjPFzYlPL3X&amp;#43;yMuEgYKJNcIVnc6qDXYPJPcctA9XcObOzrUQ/xTwEbrLRhCHglDBOEAvQvhF0YUmh&amp;#43;Xk&amp;#43;CYdplnDICFyRG7FMHT1Q/e3yZW4wELRRiX

ISA6SLlNFJjUNGAvL9a7EVcY116agSpY5sbI1JCL3JgViaSbuAHPMys09zxuPXEGABOgDvrYWps03KgOYAGQG6AcqBn3hqAaB4N1H0iDqFvWBkE0iRFankE4NJ79N/c&amp;#43;xSq3P0cwDza3I6si5yurKuc8DzVuPkMoTNaaDHwUFZ/FNLuA8TFviIs6YUSLKjEwhBGsFK8q4SfHMyyW4yzYMCcuAzzb0HNTsSzP1CEt4S0XCKEuWQpXGh0Ol0/3CU9c

E4ZJ2gTS&amp;#43;hWZAuzZR0b0NgoIYo5xnlg6LBNMV07KszSVJv&amp;#43;Ejd9ABeAMS5F6iqgeHBc1n8gIQARgAQAQI5A60MPWHSVBA3nJj8ofP9cGHzdHOHMxHzTnOR8oxzaCW3s9HzwHVUgFfpHfQ1AiWy1pRTOOvRifIqHDczOEPlXdn9PnMos75yJ9LH0nohLKLyQ4PyMXPQ0n&amp;#43;yXv0moG&amp;#43;cbYzck1q8AtJFKXdNLVMOs44z7jNs04Jz2QNjlamSSXLYFY

HhF2g0SQlICVL&amp;#43;LK9dnBTLg/kEVUPesPlAXbOwtXDxWfExxX4wYPyXoy1Z5sAq4y99Uqjf0OwkuiLJIesJeYgihYl1vjOhoCtx68KBEa7gOI2jAgZjDMDBYM1ldy1Bs2fUEKiaZCHYqyn/af1k2QlBGR8xKaAKwVPRv&amp;#43;xfgb/hpaFn1MXiluHUrO9wUrTm6OXzpnPXEQgB&amp;#43;ahLAGHAhgGQw8sAXgALQigB4gHqAEPk9BNfclQQgPHeY2s1e5L7Mp

eyK3Oas/9zLfPXsxLyrINcU87ihbLS8iSTZzOudfo0oRCTPG/iaSWnrLho1zOIsorzrOJdpdxy5rK&amp;#43;ch&amp;#43;zLhJa8ntw9zMfsott4XNAAokiJ9OxPG4S6cyM3NHki9wush&amp;#43;TUPGvQLLA1uB/4O31gRgWsPmw1BBVAxs170M9zYrpQrSGTDlI09G5IBmQRaMp5Z3QkaG&amp;#43;6Zf4DaE/oFshTsx6RKgouUkVxO&amp;#43;x3qCMfZ3RamwX7Gn5z/LPc5AxugAZAU

5kzGFKgdoA2KKz2bgM6PEW5avp25PUc5B94zQ7IFX5Irz6M83yEfIQspHzif0kM80zUcyynL0YluR7RPv1ECJEXWxyR03xIRNjUApJ89AKyfOBwuRcbJKMArxzuSSw8w3ChENqwtWds4WSPW4T6ZNMolA9&amp;#43;tUDM4Szj5PyQ9055FKgcxRTtxSxGb4Zg/GXYSycvNArDA94Pyl8VWoFr9DubDtT6gSoRLlwcJRzxbUxMe3ZQJcSpSO5hU7SO1MFYX

DxoeCTM35gDbVHgQ1kLpw1gAZFzFHx&amp;#43;Mo8zsGiVPCML8GHLZ7x4PE&amp;#43;seIoOSDc8iWUhgF1QZwAoAA1GPQK3bligUgB8AGToX4lgcD3sqwL5LlAlTbiC/SJwYLUT&amp;#43;UcCoALnAqt81wKxjJA8iYzLTMV7K&amp;#43;AqkkNpL4xS&amp;#43;WetDGgcYlWwV5zSSGtONDycApHcv4i4gvOMwtgfSkPkuFz2mmN1erCS4BJPe1i&amp;#43;vO0WCQLaSFiBPngWDyQEKQYEMwdHe

fARBTZoLgoqhL3oSrilXTf8Issw50HwhGy7qXL0eFsCpkVSXA4Ya2e8tT1tAupUFql6gH/YRoAYaSSAKAA/2GI/YEAogAuYjOkft04JJj9BKRrQ59SBzIACrmzdnWD3ItcByP5s8ALBbLeC&amp;#43;gcXMETBJcoNXHXvGcjrMHeiGWz1zLls5DzE2Mp87&amp;#43;DqfPVvU0L/ERAcuxcFiToC2EtYbM4CSmpP/Dw0kcxXAXW8jlw6cmqC0/A1ijWC5AxaKSSAX

Uh9Gj/YPABwQBBAfyAdgDHCFoAEpCLAXp8i2Wjc0G5u&amp;#43;l40w5z4fPuC2vSif0IfJOJG9Lt81Lz6Jjv8xkUwDCbNJ7lYcl79GYwcgUBCk65jQqWstzSar3iCqELCxlEwyUUx/DNw4qD1rIbdc0LRmh2Mut0OUImOHzpcImGCfTTR13YszFzHYB1VDKC3KMrC/JD2wv&amp;#43;eQljz&amp;#43;35Ar6QpH1Y8vsT75IkgZK0D7Dq09mVd5FjVDANZ2FAZDJSFpKKqQ

7hJNiPcAslf4CSIi00WoNbhItRbulyXL3Ry1EYGHMkAKWUnPvDFm3us62lDaDGA8QVHsQHU2viJeAnYGLt2eD01QiVwOlOJFqTreTaC0fRHCMX8mEJ70KVkAUgT8E2grkhSDxqMXFYISBjnOCMdbWl8wmtZvMRULbNgKlWwetUh2KQXJH5L0XVePvBhvXQuPpM4tCv8SND/CxWwgpkK3GRhb6gGaCm9SggqaHeaPpCtAte85AwSlQBAlSI1wUd4S

OtzQXBAVOhS&amp;#43;j/YAnSzgvxgKS1BPH8wTvpBDI&amp;#43;kgYykwu5suULebI3ss0yXgotMxtzedU7MntETDgkXFHdOlnYjarchRLQC73zkPKF4LAK77NBCjDyjn3sk8Pzf4PwCpncqeLs0yFybIrOpasLqkK7E2wy6J1w82vdPcPeUzLo8oXckHaMuEwGklCpoMiKwcti9fUs5XwthzHnsWRUj7lJkD5p3dEZabmESsDu2cJ11sNW4ZngsX15SEzRirQlxD

rjHFBxQUWR5yEt0yQpGWgNyZ8ZnGJ&amp;#43;4z&amp;#43;Z/71X07gT/ayqAY4AqgFZUQCt4gCjyTABocCo3Gep33Uk06ginI0ki0EcicBP3RWZhDK&amp;#43;k&amp;#43;CyUwrbAoDy3AtUijwK&amp;#43;bzCaIYAuKP3s7HyIJWGImP99GWw2SOTSwszXX7i4xIsikfSGfLzMPj41hlzE&amp;#43;AzRY2I8gcKwICHFVDtQuMqggoLZdIm2fmhSTmjCe5FIM12HG/QKeCwteCkw9EW&amp;#43;AGcNOmMjF

1oYfBqHANinLU3gFTDbpkz1YiDAGh0FP4IsETenLgJJrmZCqZzWQo4qZwBCAEwAR0ANgpaAOABfgCQHSaYFIiqAf90aax&amp;#43;3bGkOyAGi1CYdHJ/cwNs/3IUiy/cQAsmi54LUfNA8neym3LIXCxy4hB/MG7wh0zWlR3Im6kBChQVywo/45azJFh3M70yw/OcAxyLNP0j8rFyTVMLYd85dHiEsnrzDzT5kt5SBZIIGIuDLZLr1VLB&amp;#43;Avo2McQNXna5L

5gWInx&amp;#43;Hoi0uMl3enJtYsMpfkExsz&amp;#43;rQgNpYicYsE4SZX&amp;#43;6G2SWGFwQCKzFUhCoPgVYWDqwX&amp;#43;B9uA8ghV0fHiq3O7MQ9PmsOKldk3PgeJ52ItaE9cR6YIAsqQREcD/YcDgioGTACjdrW3ygcqA&amp;#43;gGeYokTC6Q2wSSKS3IDPN6SNajuC6mK7j1pi63zznNt8kxyp&amp;#43;2zCpQCYAtgbL2LGzQbXIAzzaB00F0sL7InQ8IKjxn5i1nTNYMOGdEjVrPZzR

FzT&amp;#43;0w0&amp;#43;2zMVyg6PeA/SSquDsQwx3jU0ctvUWFNZjI1t3MWJYExylYEql17jCvQEL8A82mPaSDaouOkl4dugBaAZOhYY2TobxIeQGtQOYB4cAk4xSIf2B8gF1tGbNCvASidnNOPDJY2TEas6ULYvMnvNez5QrUk5CyMwvLizwLHanTZX0Z2AgJ4RakHiMtkPuwQaR7cxcjhhgXyVsFb7IkJdDy9ou8c0299otPksgLKIWIdagLevOgc&amp;#43;JlVDUvoX

lBoI3BlQ3JMNEZgfwpn32vwJ/EuUgqRbIDgWDtIqb1d429C0qEDUDmAaFFE6UfrSQAP81YoJYAmVH8gehDzFMzyfWRJIuoXFMhdiP/8xML&amp;#43;NMLiqe9HgrTCipZg/1eC9SL3gqk4rHzC&amp;#43;TLLdLTVovy1doiRDkBCimhahyiC/PdA/LwCisLhYpAA4G0hcxFiw8ymUPWIWADIgx5wm0LOMKPsS/iXhCgUMmZ4SAi0MN4vmC&amp;#43;4WaNLI3iQ82To&amp;#43;jy0N

pMv8KC&amp;#43;Tvi02wnsRvzQ9Cc85ADAbMVkX3IPmCKBcPBnzMTc3uzkRKqM9cRxuFFCTQID1OIANN8agD9tQqzrUERwJIBIHT4S&amp;#43;S5&amp;#43;sP6i3AdP1GLfAuLZQppiz&amp;#43;K&amp;#43;bO/i5Ly0fKzCrwLCkuripWt4&amp;#43;igYoazADMGrGKyyPkBChNUO4pXfKUT4BQs3ZyLo7HRcjvwnNKy4I8yh4vZ3ZxZ3ND8s56KIXx&amp;#43;7PAIStLdkNpztaB38CfJ98A66eHgO1RqE0

65XHj7IS8YGEqONboBcAHh/BvsKyKJMV/kagHBAGABugCEAEKc8xwzipmzpEXm/CLzP1CnlctyxEsrc5MK4C1TC&amp;#43;vS6kvrczMKK4q8C8WDFooHA2o8VHTgNAILGZ238bdBPfJlvYyKMAo14MyL4Et2itGSusTNrEKD5cNrCg3Do/IlivxySWM83Nq94SM3NTu4CvTWLbyLySMxXV8ZEfCU8uFgpXV7Pcbono1&amp;#43;8arcBjh/gStJav3m3CYxfZJleK

QJa4VVBQYpo4OtkePi0twkC4E5ZL36LADCjxIW8ufgzHCGItFgkLD14yDN6fmlgyIQa6KFhXeAhsCq/ZVJw4v7sgFVOgH8gOB9sAFIAA8RMABB/ToBSoFiWbY9DQHhwKTixIvKcVlSeoTkkk/9Kktg9RSK69JUDRUKpDLkSmQzrnPPg8FLJYNZCGv90iVGVF7lqSG99N7jRq17cjeS&amp;#43;gp0SjLCA/NwC8zNLQvpzZzignLTE2sTaL1yg5FyMuCWWV

nz6AusmU8y&amp;#43;Il04OQLXiHo2ffEYq2OaangUzmbCY9gOuKGjXMzo1ldi6XjvHH06AA9JILkPKUyWQo4i0qF1wSGAXmBwQFUiNN82oHygYI5ViMwAYgB9fOeSo2FiuPbOBEsVLgUEt1L8YyLimpLlIu9S9wL5e1miu1ohgF4SlpK1U3Z4Q8YdhOWpLd4h5kBCzARIgoTShwTVVK00w/sBKwcMyWLU4E4&amp;#43;UpNOR1Kw9qcbQsc/BkhkeHvojho8unO9T

FwhgTGBJuocSEIDdTCVty3sAdS2UBoYLTz&amp;#43;4yPYW4wPSWOS3lpIHBToHYAcgEERM2J/IFzHXVA3UkaARep2oV5TNvVSRNK7L9yohxfi75LAAokSj&amp;#43;KlItAC9ML6ksZi&amp;#43;3ym3LCQ1ZSBF3PXeIp52M4HSO58tTJcFbUo0tZnMIKxFL&amp;#43;EgwDdEsAA5WzVbJ0XDkdKZN7i9YgCsKc3QcKDrOWVUWMDVKuM559eY0I8niz1VOwKfNLouJTKErRHFBGCh

mRDvCKoHT4C4Ih2MBj0II2NbScF8UNDYUFbzIAw3FZgCKWwY/NH0j30U7CeeWHaRa4&amp;#43;4wSkxDESeE/wkwEMtzy/XMkMXCe4LEgi9Sa5U14GTwFSL8Cxf2QEV7F8ZkrMrtLEYp7SjipNABqeToBcRJToVu9OWHqAKqAkgGByJKQuA3J6cnxJIvSJagwt&amp;#43;Nki5eyEp0NfP5KJopLi4DyGYt9SsDyHfLBQpRLJYP71Qlw7iMe4lQz/UCWBXaNXnKWcU

4Txx2Ey69KBK2bC8Yl4yx5wvn8UxOY8kADlSRn9eApwBJ6xLWyrVNos/DzR3JZ87h0IDxCg&amp;#43;rURLLQS41T0/Kj8hDsiXLYvER82IAtVSZoiIlawxnzF0SMMjMRpMoeEscKHShhcqtgU4Uxo55TF0S6888DwoM0yh2ySOMYOOlAUqW9s&amp;#43;goGiU&amp;#43;1HsZFhACwBSENd1WSsE4FkzazF&amp;#43;NAfGhoc7JuIXAQuXcf/Cttc45&amp;#43;WzpgKoDcN22gpowgGhurD

DdqX2E2Mwc8EESpEQLFoOdwCBCn/Dv8MIUkwPyKBEZRHmgEZRV8PhyjLuB0ED&amp;#43;EfgI6Dir0J5sjaEm3ZyyAph7sPhyifA14MpSvTQOHIEQ/aWXwEHCL3ws7KQYUt0S4waMiBiGTCM5uDhA4/Jsp2Csk7vdNIRpoRLTIBFIk2boCAkJmFOCOYlusQWjXrBJC9mEj1RkC7owA0W1oFBdesnwEY&amp;#43;ZuS34aKi5lCxSs3eZTTxQUCfDXDhKwDxKDvVIA1

G9n738KL7osoRhIQcNNeHIiiZzrNXAHZJLkDEF&amp;#43;dSCRYHygdIU83NYlG&amp;#43;J6gBGAOaAEAGu42&amp;#43;KVBHfSQjCQ3kW/D&amp;#43;0vku7It9SKMo2/BLy6Ys3ssuKUvJBS/&amp;#43;KX3Oayy&amp;#43;D2cnTbAdEAlKSEZKzEpN6y/E5&amp;#43;ksCgvzSyvOw8/mM8oNtVL7KZ9KHy&amp;#43;8j2d1W4WewlvO/FBGLya31SjiongWIAXUh6VAdBKB8qoCqAGABgQMIAClh8oFo/ArK8/Xm/H

lZ5qgaspdKoJ0kS4uKngorymmlgUr/iiyoNgpuqCooMhJ&amp;#43;C8nSenVHLXrKPZAvS/3yr0piCxc1TyPp8gzdOwsXZf0yn5xWy3WC/GRqwydzB8vZ3L4wMoQG4JdzrR0gXTmNqJFOEC0NfyLeOYIiRrBhZAMIQ7Jk2HrBgLD/A3PIHdEogCiM&amp;#43;nVc7BDLA6E8SZMAs/VIABp9nAGwAf8ZfgFn/NqpnAGcABkAzFOoIwPYisq3gj5Lu&amp;#43;jKy1&amp;#43;KKsvW/e

LyKENqSpLygUt/irdKahgBHX0Zg/FvdV3zy&amp;#43;SV4Ry09QqMig0LrON00Kgs9DKVvSyLlsq1g6po/nJmOKlDpYrlw1sLUgoZHMWK7IvOiwlLS9z0KqWL5MtMSwLTWvJsKw7KkQrqQu&amp;#43;Sgt3oqbrl1Bm4YDsMTIF3wEJcK7ADYy91qphbU5lyAMMRoYkY8oTl5CF8qHJief5oE&amp;#43;3JXVHZ3HEuFIhEbZAFIeS1BUF87MHx6eUCi3ZjKEXgYgVy/5yZSY

Cg6UFS&amp;#43;DsRfehEaeIoCqGG6OhotjHDY97Z3aXx&amp;#43;HWQHDjfwmDIrfX6RWPZlO2vcVVJjFhxsmqLXzPQUnKyJADahRFEsxxYoyUIA&amp;#43;SSAAkxmAHKgDgAj4unkh1KFoBdLeb9xlPKS7vpREqLyqmKqkpXSqjLy8pUiurK1Ir9S8DzycNZi9mDgWH&amp;#43;YWTSnTPISdKkAQhfyxLBO8pZ0ruKn5x00uwr0j1eMyFygCoeM17K6vJsMolKlzQAc2TK/JJtsu

TKvIsiRAFzXNOXQw28IpPNjMEqV3BBKpUlxQOmSt2Cbqwr0bQoaxAU1ecwl7n0GTHhW1VakntpKkUK5Hw8dSW1A6bSh9TU2NHZTTB71EflWQlpoLgYUmNhvEmheyEDYcHhT7li&amp;#43;V2jW5hirPhw2xAQsJyQ54CZoZrJAnTgTMoxO4TAuJEgHaVcqNXhXylgzfWKfiDfvOeAv9BQivvQr2Sqi4cNHC0IGTVtK4MSjIBpZDUFXPGCDjCAMIGwylMcvH

uzy5OTc2DCdAsG/GABv3m/zcEAFMmTAEaIeQCbkl4BlDzBQmYqhPDC8rYjH1NISPuSj8tXs0vKBCrXSwFKlQobc3YqHfP4IwNLL4Os&amp;#43;GPYcLwKNB8wmiUgSw5ToEsvCieUlbKGywvdv8ra88Fz4/LODY3UjNNOYQmSy8FQSnMrz5LywxMwAg1XHfP9yOxl03yLyytTJeLB/wwtNR9i49H5SSupGsHdYSQUM1KDCHcwY4wFIPVMgNzNHAWgFy0CrZ

XgcXDMcLUEt7kGMQ8Yi5Va6FNCTPgunEgQ91kHtGfAQLFpce9FUWHleQCM/9EvSdE4lkRIK37AIJlbvDRgYaUIARHBA&amp;#43;WTAKoAUiwBwbABVwRfcx0qdcvYK&amp;#43;qyP7W4KsjKZQvdS6pKNipqyqaLtipmiwT9r8vbkuvLd5Rqkl3pu/VOK32p6Ezg0XrKUE2uKxayRdOTE7/iLEqUy1Fy3jPSgiHjpqCR4glzIyywSwoKe&amp;#43;SJqZ35MZQF5ba5jFl7gK

HFZWRVuakqCXWKKg9VZ5nuIUGgNuJNpb1zkfH5eOUMhGh3gcP0bByjKvGDIWhKIsxIJ2E3KioBOgFwAGVoWgDtSVAgNIg4ATAAtgEahIHBWAKf3LPKcpC2Cd5iFv2SGM3yKYv3bH5KS8v4K68EfSqEKv0rL8tEK50R4CAn2Yyt/ZKe5eh9xyzYmaMqtDM4Qqcs/fKHc9FKhMJ&amp;#43;cmP4MxP7CvJDSaJfs&amp;#43;wq4FQcKjrCUQoAQ8k9Wkz3sT4TetMR&amp;#43;L

wFX7iAMErALOXaKOToAjM1ucNF3NFJIe6IatI6bc2in9Bsyz7ST3O7SiOLkDBngZmxZ1DYAZgA/2CqgHOkxETYAJIAD4vwAXY9yelJId5ihySJwRm8PSri88hDVKuoymRKULLoyxpL/4sUovdKFnDnKV5Jb4JWeH7CujhMqpDylCvhiMCqrItuKvDza8XAK0X8Uv2Bscwpt2GCIxLCBUD9JaCUDCXs0F3QzBN8KTirns2wAAS4eQGzRcDVH/NwAc

0FugC2AP9geQAQAKqBrSyKS/GB41kIwjmCipCY6A5yVivkitYqT8tXSuqrZVh/iqvKr8rmiiFjvyqhZDfE7zGxDYgEYUrQ0MFgG9F6ynaM38ssqxNKwQumLS&amp;#43;cdzT1s1sK0GAnChGrjrMo8slCN/XYvMDAoKqcqx4rGLKzE&amp;#43;HjsaqTUcR9PkElKfOZnMzs4Ymq7OG7yuaIWAWLEo1SLjLMzE6zTDOa8ljyqUun09ndnHWWqo0CEP1nMU/Ql9T4g2

VtjCkLibmhm/mzogAR2LQtoFNC9XQ7sUq5oNgyUzbhxw1xhc8UBIDluRrJiovgCnUVqS1ylU1dbJ1MkQQ9DZEU9Z2c70Os7M8s9k2gZY9U1fWeVDvpiXDZQW7wi&amp;#43;wOiQwotICoSEsRoRNn0KIRGQnw&amp;#43;O4wQ1XseQe0feLHMcK1XmA9ZBkgBLU3uAPRDx2LpEnggPEUC65pvdn9QgHFMmxYYdhVoWAy4sq5oGMNy7m0UUqgoEgM9UujyieoagCTZN

slEcGQICgBc1hcSA&amp;#43;KQQAT9CgBmkskq&amp;#43;8RhwPbOQqlwCy43VM1vEKbA3siAPKkSgFL1Kp9SnYqGsqbcoZTgytMRYVBRzE8M9jLS0hX7KEhksDhkxDzeMKUK77hwap2iyGr1CoMSyfTF6sxqn4qH8h1vOsKBczDMhMsaAoY82btnnjmWRyl7KrT88XNlVQoCjGrQkWOrXlDYSoSAlmjo1IrUuV4LpynAC4DXHiVbKbC0tgT1echZW3Zfc20Awlu6F

CD3kjYEhDJBSAnw6cq1SpMfahikqh87W5oj0SEaf4QQRKvDGuqTaVQbFuoUqXxCq5VX2w1Ig&amp;#43;NWX0fk/H5gsrSkhOrwRN6yHl0EVkdIoAR5txKI1C5A3NrKYRdmiLQQbuyuiqTc7Kyp/1ys/yB5wXYATBDGJR2AOwAU3yqAb3hsuwrAg3ypKunpN382&amp;#43;g7Istyqqvfir0raqs2K9dLpos3Sj8q5opvivuroTTXYF6wf7mLuQGqEogL0A&amp;#43;sEUvHQm

vkyfPaKQTLL0tskz/KGr15nWPymr2QMk4yREJ5kz&amp;#43;yFMsa8lMqXjIfSxGRrKI&amp;#43;fRHimR3yC6TC7oum1UYC&amp;#43;/2bEFGwJ4phYCBlr7Btk6QZlXiHYQ9gcSsRxAkZEQlyY&amp;#43;dhoSHApfaFey3XE0oSmuLbsa64QzhQsWPTBzF28dYdFUkq5MJUj8EH0Z4hmYXC0f9pzL0XjUBB69Wn0B7hgsCCtDqSeeEYqeLLp8uzqpLLJACb4XZk/MT4q3VAqoAoAA

m9ViJtKtUgtnIdmNsivcQ6&amp;#43;E/87yvuq8RLHqsoyz1KZUy2KyvKGkury6/Kzqtaqo2xqVwLlBtdnrWD2MF8eMq8gvjL5VO69ayTjGuiC/RK/iOdjDryYjBpDX&amp;#43;QlHHT&amp;#43;CIw7mpvAk2yQQ1z87cVUw07&amp;#43;LKYajDYYP&amp;#43;NXWLQgq9D/&amp;#43;GWRdqMTJWx&amp;#43;be8jrCpodRVJ2jAsb6MHZPO1HojHZCIZInk1qvQAZYjGCtEyOmxqTFSFfQBsAAsAAgA2AElaL

ZzgRwW&amp;#43;R&amp;#43;La9kyWZYqZhNWKx8r1irmaiWtZGrfK&amp;#43;RrsQLEKzPLlGuudME4MBAI&amp;#43;R7jfgrngGphdGo&amp;#43;41uKxFJN5WeqKLI/ys5r75V5nIUl0ZOcaxjzaatYs4R9obRQq/hIeohdwwRsRGzlat7LRGwzEUsYR0jHffhJqLxLGbhsTdFv4TqjCvUTabLIPzi1wvPAr&amp;#43;G8ZBVqadG84VJEVGyhDFVrR3EGoPR4eoixDK/hUrkGoS29nKMLweNQCbW84A

m1ssjQ7HqI0OyXpNDsH&amp;#43;EmaEh0TspLaROYvOki8O1jHCrncuA5wLl/4UkDGTP&amp;#43;GH7oCkXKmKCJ3Eq4g0mg8EFzxBrob/DwyEawhaERrLdBMlS9i4O8KE1XgLEgslOxQXSNW4UBYZUCcVDyEi7NlO27aTBkvmCCC1&amp;#43;AbaS7ghroVhGvsZE0fuiwDQeBbLOIS5W46uJIEfAyfcLlq4pEL7gI2f4h3YvUtDbDkANEOBvjKLRWBdFDO2oIo&amp;#43;/w/4z1ij

RVU&amp;#43;y5cguNM9SYuTOV48IVBRwg5qqD8VPVVePnYC90DuiXYHTQgWHNwF2Z7MB69W9BVozDIzvh/kUK5LgJ3DmVdX8wt1WayXy1sTRzjH3j9LR8PQiNzeXaBFjIPHGMjAqp1oy0SaojtZAnsCZi7zA0jZDx6ansmVYQkowSIYyB9dOiM7bVlKL1JD2RZZC01D1QD4GmkwRV04xQoaHh1biZ&amp;#43;bspA4UizK65tmxHaMsokZLJoBlBocXpyoUNEWogAb

xI7611QPSJQjho3M1sjABbAYgBrUHqgUgAtgBaqquqebDH3OdLOzVeku4B&amp;#43;VlIyqZqlKpmaqRrWlWnnMALO6vfK&amp;#43;lrtKs5E7xTrPAAaUQIeu07NUu4uDWqFXqqp6rJ84ix40vfykxrhWrWstnSLyPBCpcCn52Z8o7LoXLC4kzSAnO5k&amp;#43;j0vOtM0mk1aeJpNXzr95Iic6FzLbLGSprUNVMzS2JNceI4s&amp;#43;Go80uzStNLoSt7y&amp;#43;SRLCO8MFvwEalCRR

TKXGuRq2Ds9spbC&amp;#43;mqiWLHcxJy2PPJPF5YMTgvcYbMNZBquFbAS&amp;#43;QcIG8xQAlgQeD8nuCKbDewx2GrCUeliXA1XAaNkUjYgnSFyGG7GZPQSJOJcOEJI/z2jAs5eBg92IYLaikUhMWhcNMtwW0CbgkZqMXg14nrCdFRdsAFSVCgakQe6N5zhUAoqQ7p0Dm6sbRr5sEQlbddQl1HY/ldSlLAuFFgZ7CJiRjYu6khoV4UwsHB6GnkW93ZIdSVPyAiwc

L1QCXxiTmgmigh&amp;#43;Qmpi7P2CGvQYsDccSop0YjV4D4wb832aSQ9/&amp;#43;B7bBrTrcp5IcvR8Iy40vGIr8AOEB4QJXkiyz7VqmSApfcSb3VGwEozACLVcTmgKS3shTF5LvPRiHnhm1Qu6pboqtFzU4tVb0HjTCPLrDXjHVprNPTgADRgwhniAPEA/1SSANPLDgul&amp;#43;LEBv9MdKqbAHGDbcqnUT90/tEaLWCLGiqrKy8pfK&amp;#43;mLFmsaq5Zq5or9EvqzBhW&amp;#43;pE

i0RFwbi0tUsVkMi0IKkUrs6tLZBqo0K3191bOJSi59zbP2iiFyHepgMiwzcj3STfWyeH1K67kkRkoZ3DNLdCI/siCqqvKXqpxrB11sSh7CsXGfalFhz9EoqdmgsXze4bWiNIDeIZCL/6rNDXTExbR6TbdpVhBqwZ5oGj2sLW6oUow5SlLMVeE2yTx1TiUPSfcUQnV&amp;#43;aagRnNECyFTZCewFIBHxxzCMJJrN51VFSHZKRwxuvQp9dzGfaKcQPITIEH

Qz7GNuTM1d1iQc0VkI2HxRTN5gItG24YDLL8F46v9gjAHRAJV99ABgWYbAfvN1QRIk2gHM2ArLcEO9YWSqD8tdShSqR53IyzTqVKu06x49dOo3S5EcFGu3SnSSmWtgbZxV9UjYwwasfiB3DPZqrv15a&amp;#43;VS/UwOlQwC9EqTS6izveqXTSTK&amp;#43;8pTS67K7erg7WxLUvlaYPvJtQIR8ByE9ihCXcy9eXwo5M0Mj1yiBY5wJSJYcqmheOutQU386&amp;#43;x48d

NF/1R2ASaYGQB9FFoBSMyUayXr4WPGEzH9t4L7MmqilBLki6ZqKWqeq58qz8oWai/KRCqv6sQqQZNv6mxNu7ET/aXpHS3IuPmgMthbi/RqxFKoSF5kEytMa0GprNPcilwSKUszE4ArrnkpSgjyCCjLKlWLKXFcgGF9PVypaAlJkZSxIQV5Q0waKTGzvOSUrG4hrrzpmaa5wLkWRe8ZcN0tRHMNuUFRTVFoe8HqbXjqb9WolELEWWHqgBoA5wDrOH

EAeAEByArLRQrLcUmK/UEEMsjCGBo06pgbZmv&amp;#43;Sr1LfSr06ulrYd20q6eTvqup9FXdjTkHpcvkRBkZCV5zseEwfKQbnOtiCmKpOHWK6wWdGavxqtajLDP86mjz8ZNt6vJD70qzSwPqX0vs00g130sxXW/Mry2SzcoiB2F4PGb12cln8jz4IegT/JOCg9mqxIEgPlDF5O5VxLXmkaNYFQVQQYNMgi1pUXlxNvBT0Idp&amp;#43;uAQCHQyDXkgklLNo8MlxX

swvlgZaeiIFvCgELbVJzw56q7d59xTc9cRS&amp;#43;j6AdoA2AF1QMmCEABAcSQBMAHwIH7zdsDwy86rQwFd/EIaxmtWcPOL3xFh8ymKHquiGrTrYtUD/eIaL&amp;#43;oE/AzrFuS4UpjKsLPLa9kqRwJWecTZAdlyGifBjmsc605rf&amp;#43;u4LUsFJdMhdKcLD9mey80pCkMi4Vbs1UWsakjy1stYvEobsUpTSsyjVsros0Aqvir5/cRD3n0zUU6y3GoOyirqFwucKo

5oGUGYc58YUtF&amp;#43;Yb2jAAn7VUK1xjTq6Fbhi/MC0G5su4F5o&amp;#43;dhp8LCmZnhE5y&amp;#43;YN8oKWmjOIXhlilQOH6wfu3TxTpyA6qnDG3LkWF&amp;#43;ER0VuIwOiGrRoOpKxe&amp;#43;jBXHnLZ5h2rjZQGQ1KXw1TXojVkow8EdDWGGr0Tb02cqLSZUMJUhdmehjB7BmXH29B4CBSIL8UItoikoya1BPHY9zJnJaaq4bkDHhwZQBbmSLAhkASABAcJIB8oFFCUgAagENSw

0Aq4rk64pwhGHeYvPLrgqY6UlrnRPJa5dLmBqpaygcaWvV6&amp;#43;rKmYo0izxTUhtgbahEtBqPSnLyrHmkzXIbtbUt60Ab8Ut/y8oaV0NhCifxjotOYBxqq8C5kqvA42rcq7BKe&amp;#43;WnKv4w&amp;#43;SH2QWVsDNQT0&amp;#43;bgqjCu8ld1gWlhOVa4yij64PlACMtUvPbV0mo7wvd5AOhhONbxgxvOGrAjdRO56m10RLnoANgBEcAZAQ0A2KIk4jgASbMIAHgBM6SMAU

SLBGvvEY8LSROoGz9QT9wrGh/SQRurGmIbqstYG&amp;#43;sb2BveqrSrFuRWUm0yIkJaYcl9S&amp;#43;VASpz8erF7G/UbtosFapzqcRpt7Xh8U0q5AunjzFw9UqZKJLPsIjyr75KHmZ4IWpMNkOSNn6V3MMmYOOsqMXEgYfBgYm8adRL7s&amp;#43;8aaKL/YegBoJmPUzhls6Vm0F4AqoGTAKGcGQEIGkqqr9PB8/fL2pD93YZ8vjR8QvRyHgtPy6RLXqtoyxsb6Mo0is

CyeBtyHZhgvqHYHB0sxlXyvZPcbOtJ88QbcRn7G9zqs/1&amp;#43;ctHlHUwRXVxqMME3TBCrXDH96rXUGaJNg&amp;#43;GrR0mWxGmqedJlw&amp;#43;Fd7erl9LGq2hqmnB/Ao&amp;#43;OjjG5R4mIi0JXhBbUVNU4Cw5L24TbMvCOAjPXZeCS5DDBEXZhMVFhUyLTG4E7hKYTloY4x09A8FMBj8GPmsHaN3JFM0GoSVaNfGSeMXEthfOBBsIOpQB8cyuRmsd1lFUkn&amp;#43;dmRxsDAU/

Htn1zkFRK1vmHHsIRhULWjWJ2RekVRLNtsgsGTKavQctLcGhAghgBBATBClj3ZUXAA/2Dh/DcFsAB/dJ5KkVRUEWFhpetr2SvS&amp;#43;zITC9Tqj&amp;#43;tBGk/rwRtv/NgazrWVC&amp;#43;RLVQoA0gyboHUMKMK82hnA0rqAh7D4YkIKvfMUKuzrQjNsmnizB4mKG4GaxqoG8wlIEA3njNxLFRv7EVyRymp9nYmQsnMHBRHgNmKny2ns&amp;#43;JoF&amp;#43;CgBeF3fdMSB3eBBAH

Dpn3K0AQH1kwG35adL9pu365nIrGmoMDxDJmrJayCbj8ugmlXrYJshGuRrL&amp;#43;phG/tLxekRIKf46YwAq71gBaO3c15y/YIc6iGqhWsImkPy6c0q88ACJ0gGncswmPKImo4zIuA84lPzBMAGS3ILb5zWGCTKJWpO7CWl/7LZZEKadrMUGhmrApvcm8&amp;#43;qYk0i6YR1bP37itvwApJCRaz89ZrUfWWaQ/I/2FBgqzweykFcbQvfTVbBbmhbIbvQ29CVoD

ZEpQTZlP3oU1MxQM&amp;#43;40OufI5HgPkRggoP1MDjXE3x0G7GfwI4JRimWY1FhJwGF4SdgW9CZcM0N4sHdM6wp96GykquDYCNHEA2d&amp;#43;XFb634trMFRvdPop6Xgo8bgYtDqbKWgQLEPHD/QH/FcBVuZvCje4ICh1W26PC&amp;#43;x7okZgWbSINl2zZ8VZ7Db3WKUEEHV/O6Mvyko2cAjD3iH&amp;#43;R3JykUXwusMC71W8jKLexHWEQzKzFi1oFUdm1N0YT3RhD18Kq

cSUAP2wfxireLHLFdhbhTpGam1zDHQqOhND/MFeTz8NIHmkANix6uhWT9C&amp;#43;&amp;#43;rLJZpq0ZoTG6lQ1RmUARwB&amp;#43;qjMAK&amp;#43;IAcDLIuYByoDwISsiJKo/8qSrXkueqBSb3SD77A/qxKPOmqCawRujda6a4Jtum/0ru6o0ignTWxqVrbRlEsybygnzW0o9igWbzBIBmpBLcUPIWkwq/iP/61NLV6tAc0ddwpsAQ9khZQ1V0k3kLry1ShCDrtWl41UF0vx65A

XdOisOQ7oq19OYaiQA6QApYMIAAcjn4hp9ivnwAbrBRpnaAVeCAJp5sSGhpeqIBY6aARsthCRrKsp5s2sadOpoy4QqEJs4G7SrW9LWatcBg7xwQXLUSElAS6NYyE3kK03rfprEU7acv&amp;#43;qEy6I9pBtPWWQaE/PBCvYs3ioC0ipM6AsZaP3popgdFZssvuCAMf2kDtRYPPx8frC2HSPrth0xICFJdTjICWMbI8q56z&amp;#43;b3eVYUN10bNgI6eP0&amp;#43;gHUPR

gBkwFKgRHB9AF2m8tNq6ukDcYTbBLBHD&amp;#43;1bFPvKt&amp;#43;LtFo9S2Ib5mrQWlHNEhpUpFozMr0mQTChFzM36BuKmkXIo7lqwlLN6xxaj2jIWooaY/md6li9pFJXqk&amp;#43;qgtLrxW3YyZLc6w2byurLbVPyMuAHy42aahvmJA2bOvPd6xdwbnjoC7fFYbL55DpAxzHHzQ2Lbujhi2r93hje9GiJ1avsgLZxkINjCnR8&amp;#43;xiMvdHhXoK85Rwg/yH5QKb1gDF6RV

WJ0pXuCP4JDvEYyCvRU5NNZa&amp;#43;5DEloKVD9fHUs5E&amp;#43;ZwEB4HKrplyPz1MCiA5r385tRF2jbEL&amp;#43;NrarShFZLxYhDZT7pC9XywY15nBTpmAEgDiSzqtJbgf3UAIYBocOUAD7zM5EfiKHD/bRaAH7z9JsvKo3yy3H7nLIk&amp;#43;zJASGLzeCt9/fxCZGuZm2lrWZqSGxbk5DPhGqh8aXVstdrKDTB5mxwJR5rfvAWb96AFajxz56sQSr3qIQrpG5BKM/OpGk

dcTorw8tMqXirK65mr3irqGpZaUNIJSkADmHSFHOwyN0z/yqTLdloxqgqCbbyFA6XTboorK3ex21S0w34wwGL7DY7SiqiOaUV4BGHL0G/BjLWixMrlMKHk/BTsjHSggo6MheC66VYKyuXKzGbhMvKhOedgFwyva3e4mQpnUuNyRw0toNZF3Vx/8DWhQdU54Bstb3UirHtpK4N6yTK0PWBS0xdTBgPK0ThV4q3X89oEA9kOCYIy8mPcjaRpgevo6q

WgQQmpLQJ5BYgwQOuivYNBCUrd8iPE4Lq5O0sRExJL8bMSy3lo4HwrkGTrhEQjC&amp;#43;IB/3WYAJdQwwGwAb4AtnLL0xpIykrQcR0StFr4KmqrT&amp;#43;tnvc/qWZuhGsVahgD2XJ6ajbBHMNCpkz036bZTIdF9zJLDLJoOaq&amp;#43;zA4UH0ueqRZqhqyhazEsA2oPqe6xKyVdD6LN0KkmSFxzNKbsTIQzR5C&amp;#43;TUKu8ajfwuAgibBkLL5q8tdyQd8FJfMXindBrrF

yQZjCRGboDUbCltQPKQ9LNeCCod81uAqCCG2IIKldguXzgTIp8sygiKRPRoaEHtP5pe6N469gMjECUiNUhg&amp;#43;T/YXAAV4GcANcEQQAuY3dLCxszyVkJVFtdKlpJY&amp;#43;AiG8rLgd0kay6aUFssg/RaNKo4GtmbrTJ16taENQVCLbsc2RXS0Z19X&amp;#43;p0o9/rv1qW4dh8Tmp/6gDa5ZvNrdYyVHBTSnVr2vKv2O4SpMOfA9yq2936wVfColxAY&amp;#43;MkJ7XA4j

WrKFXbUSZtzvJ1Q84RuZBtA0zk4SEACSi0uxyayXjrWVi5OFgBSoFvrcEAPbWdiegByRAoAVGkTFvE2&amp;#43;S4VPNJErlay0W76QvLaZsYGpBalNvYzCEaO6qhGrECb1pnMg4qncHskVlr/yuWpHbBBrmVWuPTB3L/WgiarNq7rEgLe3Bt6haiaTQRC2AzpWr4sxrDLmutsgQtGFoG891h5rGjow70Fo2e1GrQ3OXDhcFTicpDnDkhlDAJCg8cQTAF43

RVAfDQoG&amp;#43;w1FTS3OSs&amp;#43;5l1OGlABFq44oRa6opeHeoB6gCp2DRgM/XEQUdL46FZrMWooAGwANgD8WuDuap9PmLXheBbVOJr05XrvSpeqxh43qqWaj6rt0owsnBbAxPrEBFJS&amp;#43;Xemhgh0Aw5iOxafppcc9FixxEkGkEL1VoxSxer1MshCkwi5BoqGpWL1Bsks97UFr1NzHUKtDTq4ww0X4DCmAEKgBGUokp8ElXN07ibiVMNKnAjqVHBAVlh/2Dc1A

HBlIhNS8tYl&amp;#43;uYASDE8Fy2cxxyKltZs1b5j1oB2tHSgdp0WxpbqWuFWhsau6qbG94LerIhQynDx83dRE5dy&amp;#43;UoEXR0BZox8UZbJHzInDeqbnE61ffhZVWuUmcLT6W1s5Py1P0OimgLsZOYwRAyIGE50iaIuPhvkpq9f2GUGomr98ki68AChfwoW/QqdVrci81apstnGnyKNBuFG/8M3iEG6P&amp;#43;qD1QRoRGwZ0CMEy&amp;#43;ji52NOXboP3wGuUeKReAkGs

hLRjAl1Bnrn3yO4QAJzTQIAnqa5tjKMJlxcE1U1YRgQDF0WSgNG4UfogSBW2pfKGktYtPtoOYb0QWWEcFp&amp;#43;Yj3xJClm9WymEP1mjwf8R0NPcrpQKuj4qAc0UT1ZvCwRXAYsQuCoJiq5eSfFPgVqsWtkbiFmYTrDYaC6Sy/cUd0PsLA3ResQqvPamgNApVwQA2t9xjXdRARBWEyZVGao8spWwOgS5Am0TNkC0L/YZQAfB3t4Bp9ZuSbk8/THSqcId

5ifdxgsqIdfMJ4KhTb6lqfK3Raz&amp;#43;tU2hIbRVraW8BaYdq1MHl8UQjJ0/LU4Wq/hAWav3AsqrrbsRp62sxqVP3K8hoaA&amp;#43;qZqg6LysOKTNybrCoMIpkd8urs2mVqhqt9fX3aRtrD2zZam3VWWygU7bKomsITPVpoKYwlGQoC5R8L18F73Zyx9kTX8nR91YB6zK&amp;#43;h&amp;#43;Cia/EBiGSPdDAudRAmW0ypzt8H2CE7hzzBrLE2xAIy2cW6Zhz1WNLvBm1vLcH

mqGpK7KMupL4HhCSKU6fmcIEExoPPvgAAR2tx00ZIp4IMVcY6IsaEcOSQVDvDXsAgI2RimwpV0fmHuTTeLjMLnWjnb0F1&amp;#43;wFoB3vJFCAHB9AH8gLT0oVWYAXMdrAEIAP9hWbC2c/BCmPwEot41xGtl2kQy1JvGixmbNJrB27SbVdt0m94K97PgO9ot8FXXGaFKh6Ukg/Ir0DpUWuBLWOUGytxaPesHGoWLQ9sXNeg6Zlrw86mjfnmBc0cbJlrNWp

kajcMtmy3DaWReanvlRuEjsy/RvLKneK0U9OQx3azzflL9Zcc9lxJwlQ68SNFMnJfzB1K28cPQITPvVZ&amp;#43;S9o0mMIAQdzDp4XDYgqrHtJ2zWUCPcwbhAGjl5XS1z2gOyS7Vgeg8SkLlmJNBM3SBZyy0tW/bUlqNK6lRr4hbAe4ooAAc1ISrMAAoAAPk9GBBAK5lTUFbOWHImPzKvG6qT/yBGxSrEFvpm5BaKttQW5Xb4Joh2xCbzjRXvRrpShw4HZ

vL5&amp;#43;HeINCoBZqVBY3agBv8TbWzumg2SDXQdyP6EHciHg2ThWqJXKqj2snaqihdmJYQQ4Oq6OW4PMHChHft4eHdi/7VqQme2WsqcKnNJBq08KjC/cW0GUCPYGbr6AnKfd0lakRT09&amp;#43;a79q&amp;#43;Ojio88zuQoSrOgCLAnYBSAAz9TQAYcCqAKqAmCvf8x0qCBFUWv4bHiPjCk9aBVubQ1Xrz8vQWzSqjFs0AbrAqkmf0IJ9/qvKxTRr&amp;#43;KP4nJFDJCMGWh

xb5VMt0zA78JuwOhervEWVVScUxMMPA&amp;#43;CrkuorMC7L8MF78Utgetkjscz9feozEUPyq2DN2ksZYeOL8LOZpqKNa3t5GqA/OOUUVWPzOngEyGm&amp;#43;DA28mNBE1ErhS2CZO6lL2d2myM&amp;#43;z5sF4jY&amp;#43;ipgWiigYxQxm1NGyR82unmJkyympg8BtTNeFh1a5QM53mbBC1n7mJrC9w5BUsxIqTmxmCUmrl34E4VJcp0tADRdax7WRUtVWQLvUeObfBMnVZSY

vaiS0StOzLq6IWzX1Ftmn&amp;#43;Ec2TWumJQDlAupr0xWzAg1LXefkER6KXYeVtN2i/gdhwgaGKI2yEl2ieiqup&amp;#43;rDL0NTpuZQBpPnh2UiK6EG9kpm0tZwV&amp;#43;uhsKPANW2mOwbKpJITDipU7Pjs52o40OAAZAPGaeQF1IYgBugG6AO4oeAH1QKxCNGkemx0qrH1rqnoyUyD6hESiRnzl2pXqFdpgmnI7m6XB2jXrIdpqGWmBMrw9Y/mbcc0GrQqKj7M/Wo

Zb5VJ28X9bgzss20M6/&amp;#43;uTK1wTwk05zS2bW/HXZLi9yuHn8a29XJSele4rMg239evAlZuEwA4VaWPtUqljQZsXCuChqSO1ZFXdV2Nvjf4KWv1h4fVd&amp;#43;yBwER7yA5p2jNxx85UF4U5sgGmFNYslpGNA4n6gF2D97OXd7xRtiyDLY1JW8&amp;#43;2rLRyiq6ngL8WmMCLTpT1Byq0jU9F3wQ/yV9DgEmYwAwPo4rtrw0xOySFNPmtgoMrQzc18O/UrGlICOz

NCKgCGqGoBdAsSkYaYQQDpUZjS8lAGAHLLGWpIuqBaKzXeShIY8RStOit8bTqZmqrar1pq2lSlNICqSZtrksAnlSL06fx7IbKVrOoOE/UL0dpRSJi5UUrqO1xbChuARRZbgNvskrVajyMxSh1afYHTUN54nZr6HVGr2RskmXerjJidW8cKgSvK4WWKRHUpGm0LxtJty0/CrFiPKbATcesaJOl01Xhzo6NZhULseOeBlfQBTRxKz0LS2BSM47KwyS

2S8PCdzZZiXvEq5KqYA6MYiTIDnCEnU0NZFvRpnXmQnu2XaMf81&amp;#43;mlPMNTyZBHonK0T0yz1K7I3jDZIB7gBIH&amp;#43;aUu966gREreLrtp3ipLtqJToo5gAGaz5C3iTOhOhjfQBjNE8Uki6x5TbIhq6R6qiHU6aStqiGsraz1qumlTb6qqYunSamqosqSMBfRhD4UHZnIPlWjLiTUI0M307CvP4uq&amp;#43;yGj2cWizb6jtmusk6dsuosncjCRtwOvVaiAodmy

s9ORtMXMlDyZTfswnQrbxAwb59CdHOykkaoStt2kjtdbqNg7f1VMpWssCABtuFwiQc3bpZqz4z2PMCinwV&amp;#43;eG0OZ3p5tye4fsNC8L5GSn4Cymj7Xvi3jGZtWnL6YkoINyFhQxKS0owvojfmZoZnasP0dbViMlpfTr07zGcIX5MQw2xU0Ggg/EVSYV4&amp;#43;DsuEULav1wXWP/xCmKHsceqESUpXGwlfOUtNGux9/KP8rU9KJJhIAbrLtiAm5xwJxFO1Z

NrbxlvmFkgJyyHjSLLPrCxIJ/QEWEnwS7bUFJJutPSku3iAQHIGIAqhKoBk6BviKoBEcGBAkBar9TR1cno6rMIwu517AtoG4rbKxrpmz0rytpSnVE72rpFW69aursx8yVbsfIZ/JANu/V6W4FbctFec&amp;#43;BBc22x2/9bRLuA2ymqf8piMH6FqPONWmYZXVM&amp;#43;eOz9mgh0bfzi7buJQm26AHp2u3ZJ4HqrCnxa4ITmymz8mrydu//KwIDUGj1bo9pXxS

hEzhCHgUXhBowOwlBBfVqAJdCx/G2pXD8o2MrGNWGTTbC29GwEfFT12bV0FqsjnHI13WDoyYsMjzA8YvHhoIuAMMLB/jErcDIEyaC&amp;#43;1ImgGfAfjbbNozLlNVsJYKhj4xNtpYjHxAn51hFxobrMdzxAzIFYgnA4ejEabRVdmUWRkaDm4RBNEeu1oI6wuy32jClaVTt5aFmt2ZmUiM&amp;#43;t&amp;#43;BF1QBAA2ABCxV3ddSHV8haLHSvNwKtMlqK6lSZT0jtGiz

I7gduka206bppaWmA7c&amp;#43;R0gF06u3IcIJM9Edo8Yaf4AjPfuvxtSTtsioDbCdpMAq/IFxysao2bcsK86kArF8wNW1ocKaKsKtWdHKtKGgR9VrvGS8SzlYpZOiDJPMH3gINElYies3LM4UkPHKGzW7H8wPU5oOhM5SIRYU3kNcEt7RDYhObDSyycwPqS0hIlZYmZNNCApBXK3gnec01ETMAxUaQZ8JIaKE4QaNl8ceXLZCv/4FVkp8CEaHEy0eGCcO

ycarii0BrjsKqfvdzlVbhR&amp;#43;EjS2du3iue7WZn0ADPN4gDgAIaojAAlCXwBAgD7AAHA/AGcAOraIFvvEQQIisvNOmTaZLHAmuHzStqRO8&amp;#43;6p50gO/m68jv06sVbjMEASicR8wuHqn1sP/wcUTXgHCFPQ0a6FCvGu&amp;#43;fUTuCSe6MwinpWuykbfFuC0&amp;#43;WbPNINuvazHjKtW8caaLMZGv&amp;#43;7LVsi4f9YLngmWu1aeRqcK2/s1uA9XA8cmxGmCj5ghUFXKz

rpYTJGsNowW/1WG0K13C0u1Xu70X13jCsNYEGlifBjE4PEeqJswRF5cVUEx8Xajf&amp;#43;rd8B5ILmRtuAh4VtR1K2EmD4x5ypxUyxQ94nLs46DQylzvIpcjxq6sOPDKDzKi5b1EqrjGj&amp;#43;aLHsDoXAgyniqUa1Bf2R0gIKckRWdSdLbyoFVfJRbinCx4Tx7Tj2TNZq6zIIJw0HbGLqhe1pawnupVRt8hgRGmvE7kG3QuT3RUdsRS/06FbofZXF6afKBtL

FKUnsXNCajdYKLe1W66fJD66&amp;#43;rFwrlo4KzeyBKxUjJGfGN4hGzpgqw43PCpXDfgKNYiWmPjL0R5pxyqZrpUFBG6xlBeOtY0hmAYJgI6PUQKACYZFsBQYyUcvoAHW13uwQCPMJgWtmz4sTk2kA7A9zAOylrFdrrGtE77TvU2mF6G31MW6mBdoLylezxQEr7IQiiWklEG8&amp;#43;UyfNdHVVbsApx26yqx1xxq3WCklP2s1lDXIpK69W6TVv6O14qido7Eq

zdO7ilmo67PBPaOtWc9rotCwl6zCIUGrxk/nhpkntwIuige1cDZiw0yw&amp;#43;qwIAcil27QuJb8IfxwgLku92b0zOLu3U55sAKtNLjqcIlqrdi8SGiwX/gYAhxzV4wno2IZVOTdLLvMu1dZm1emAdV5Xk7aMNT60pL0BEq/amXc9iJ0uQDCYG8A02K0SXg/FD1kNUdrCiB0V4Qapy4mpCoOS2SM7QxA3Mi5bGzbiH2JISdRDpFoWVcqUHZSXDqT8A7Ky

eAHSVyAmzx56MLvEBjV&amp;#43;ihUrZsnFnDKTtjPp3CXRCCOysYgX7wXcBnYSEgZvGg6F7EylNY2s4aNFVza8FoKYgYiq3iMty8/I&amp;#43;BkpT&amp;#43;u2Q1fjO20s1cEwwm8GGDheHoawRbGGp6KkRb0AAm0B5CDTuIAFgCPBy8xFwAGQF8AOSJd7uEa/ijzTrl6&amp;#43;E7D&amp;#43;ofK7m7BVqCe5pb&amp;#43;P06usJ7kf2KOsxaqpnwW9c41dkPcUCh03r0aq96xFPq0SsUChtFmn

2Atssfegt6YKuD22kdWwuysGXDT7wOMwb6ujpVnQXTurzoC47SU9B5eowpIsp30ZuaJZNLk&amp;#43;pdyEvazIIiI1KXY6PqfjLrUJrolqqpXVWLwWElcPth4TnWk0kg/uDA8OKhZHrFyqOi3JCpIifD1ku1SQP14eCYRJC7rtxny3louKkBAdp9wHGcAXUhKbC8NSsiQQA4pO4pd7tEazeD0lnK7D5CpQtqW/laWrsjeoVar7pV26F6urt3/A97ttHJdJ

caqSU6WMZFE0yM25xyTNo&amp;#43;IzARcC16&amp;#43;nA6IHJiqTo6g9veMrMTgHviPUkaNrLAKu58wXLQ0ilCCnurBDmShC1tW3VTCusdWhJTzroB4PK8w1iki0PRLWXOsecxNPKt4kyyzhF1tPV1iRlaTTtQsSBvmyLRf9FfmfqxlmIwlOF5K6maKRZEHhH74qeACtGqbCGJn72jWL2QyBgwyTLcPwzYYw5UQDAZIY6NbokkCWCoEzy70AzRVr36sB0LeXBBSV

&amp;#43;BB7Hv8KrQmpP7gtpYtto&amp;#43;On770ZokAQqzclWYAKZ0WVuAY4gBz1OzkCqAeopy2/GBV2ALfDgr4WR5WtTrObsROs&amp;#43;6ebuU2o&amp;#43;CY3tCeuaVhesYWadUrLTUopy4leO&amp;#43;Ed&amp;#43;7/9Jze3NobdrgevW6y3tVmiLqggxZ&amp;#43;9YhXVqjO3q89LucKzbIyFXV08zBcXifxWdhCeTj1JwtdyhRoX&amp;#43;A&amp;#43;DqSCUq5vuvD4XRVg/GcsX0N14F9kCQ1vuGAlDJrLntnu6

szIaRXUG0AhACpMYHSHQUNIavoCqxYlEzZQvKLzfSqwLw8Qjm6T7pBegv6Kvrauy9br7pq&amp;#43;sv6Fovq&amp;#43;9pAp4hQZL8Eu9LMgHT4SfrGusn70WPkSTEbhZu62n&amp;#43;7mjvNrW7KUXMAG/4rUzt1mtLrUy1fe81TM/Nfs55501AuUoD7gCq8zO2bddC1ugrqWDtG&amp;#43;rGqaXvJHM1TYri7&amp;#43;n2AJEPwdAgHpcIc3S&amp;#43;rcXM9upJzAEJ0tUFbzUUHEd3RdeM6QM

sza9A32keBIQgsmpZpf9A7jJKKMWiNeZQ56cnI28rAYTFO2Vsq2pvgi3TLWtoxfasJysCrsFJ0A2BswY&amp;#43;iPegpSArQYmtYe5/FjeKeipoFtm0WMAtQZ8K0csCo0KVxGEhN/bK4Oe69Y1T92clsrBmIOJtIKftw40kg4VgQpMo99ZLewz9x8rRzvYaxXMAy5eNijtjO4KMCVhFl3EBNbLlaYHzQFgJMxa4daYWfFYIiSm1HMDA7WdrQCGpEJyuxs2

XzvvsuG516I8n42igAZ&amp;#43;Il8fKAoACTpFoBNAEuKUjpgLLE2756ebEHg2urBU21fKIcV3qR&amp;#43;0A7T1tf&amp;#43;hi7FGQFu/I6hbrCaJIAWYvvWzzIPknZdfHzhHiDulOcBlrluzN7yfsgU2o6OxR&amp;#43;IqRTpvqWuwbbHJO5G5kaISP3k2D6Khpjlfv7ZKzHwOwHy9G8Ox/1MJUtzT&amp;#43;T9RxQqf3txI3G8PpzY3KPwRW0dTN5GXT6aGAuJRqS4toBwKCZ9AirWK

pRmACgmZMAYAGzReOhKdhGBx0qWGALfVm64&amp;#43;AcC3x7Fev8eui7sjvbq9/6Mftjesv6CxtGB3/7/mD4JAn6XuXlI2Gz37sEORv7F0jHCkIw/irxegErfFrPqyobHAIZ&amp;#43;3bLKQdBK9nTAZFxSy2aD6okHbxbEgtosjxa6LJtCw7dxmR7gc9Lq6lNkelAiXRKwFLjfOWOEIy90JovO&amp;#43;6lTRUOiBbZ3EswEMldou0vTUPBMNCVZFChH2LSaOfbbMXI6&amp;#43;

OzFyiokKzRS0pSbMDJ7HJFUYlxlgrvTa&amp;#43;CzctDkrSybBLsWPGZBUlWwOJo7aRgqYk4j7AcqMOd8ygwpXwpRyyJuvw6DSqYakmDiQAOqmAAbXD8AeZ0NDwIXFsAGgHjoP9gGQHtSwN7M8gtcoQCD7tXhT5Dw3qYUvlS0fpRB9E7mLsQmoaYervZ&amp;#43;d/wOlj67QRy3/z4u&amp;#43;YHwAdcBYkHSAs1mhB7LZqfS7sSRspIBxAGTcPQB/a7ynqIdVv6ORog&amp;#43;n

967GtsMhJzptvvkhwF14DH&amp;#43;4CpXmjU00Xh6uIXUguEwOIrcGu72ZR7LO0ddaJNqtWhv&amp;#43;BcjQwoJ7E&amp;#43;imFh1gPimJcNIBFM&amp;#43;XsdZyyFBu8U5uEJuFODE01p5SVwu7E7Mcx6ULt5ae4aYBzERNiUYACqAZZzWyRGAP0KnmJZsetZRlP4o6EGLD35WTMGP1Jf0nMGoDuq20WCwnsUS&amp;#43;&amp;#43;6BwLoaLpbQ/Abiu&amp;#43;xe7qIBS96yPS6&amp;#43;kXglbqxGkS6NVt62k

b7xiTsqpE8mhtfyFyatZrfSit7lRJPDbejK7GpcScGatEReNvCC6PXwImhYBB90O0Nm1IjfKHEs439umGFRpJZ4DCxA83vBwI6KgBAmFudAsR8NBkBOqk&amp;#43;JGeBtYT/YcEA&amp;#43;Qr/Botk66rZ2NOtH/ogm5/7qqp6B5EGIIY6uqCGy/srqzEGGCEB0S5a2hgeIw9xis0JB5JrOtuEulW6&amp;#43;vrb&amp;#43;1zrP3tZ&amp;#43;6l6Y/IvWGE9hweVE9oE9uqscCYphnuO04

DpnMGmNB9li7PMEmYpeOrqUC/6dIDDFYzYJ&amp;#43;O6AcYriqyuKXN9qCIIa4yJPMEDdDMG4QdUmi3z1Jueq8CHIXoMWjE7HTu8NGy5VrEVU4u5OsushWa5eaTQhgQdwAfDAKa7lgexYjjl83sIOpncFlvFi8bb2oah4iWl0nsQPHW7mDqeK4X0wnPtW7IKbQr/DGEgKsBijNEzd2nAQU7dWaA7EXC5kOrE9c9qe2iR6jrNVmSUnNtUJID6g0dg2eTqai

qN7gm0ON4tSerJQTJy&amp;#43;jDj2GmhTyhd&amp;#43;1tjtoPq4uEhYBAu/bKYZD1465MBLxGUAIEl0ehYowp5RExkQJIBlAF1IGiV61nfc&amp;#43;wgvHqpmyO0Moebq9HTsoZYG3oGm2TCw8n89OOKrFfpOUgG6XEGxhTIOHCxvpozerF7TgcElKn6YAcXNdYHZCXJByA9iAaqiZv6iRvJh/mNBASeaq2z9bosK7W7mXqzErcC6FudWjLq4DzZhzYgMDwoh2SsCnWedP

Tlx5tu1EPxIBXdYIm4flkmgoAxtC2V4XlJw&amp;#43;AVkfg09zHPmJTzde2&amp;#43;YJt7hAuvwe76WbTaPEgRiTjDwjriIYJ7aGGDFvQtikcx3JBB6Cj7FkvkFVcZsBCaMHITOFTZQUY9w42qCuvQS1qbUjlxXtkNNEtiWpl466hRDQEUg5MAozQ5mJ3EC9iKVV10WiwMhiEH74v4oxd7NtA/tIF7gRo0hxTbC/pROvm6tJvyh/MHCoYaBn/64hDsY9R6YPJ6Lc

FhuiJABzF6wAYmuvNrawZGiWnz3OGlm28g9jP2rKgHovAo82IKjVvvAhg6P3swB2obv3qHGxyG5rq7hn2An7Kc4gnbgjCIhEY64Dl3wU31RBSgy9YRypgOSwU6g&amp;#43;icO5hZXcgDRSARPlu4YDKEkTPRsWi06cgWq5bhCUCBCVkpcWyD9Py0ksAW1MAM/jDrSlTF0piVexbN2kWR2TGz8PDEKKuZUWimqtdydW1lxAiRLfsgXWwYsLg7GKQZm6LjJS

wVftU1kNXMF1l460gB9j2YAJIB4cGA4PY9r6ydeboB1fFEEQj8ft0ULQjC8/UPujRbHpmYIz6T4QayhrI6QdtyhlOG1NsMWmEakgEYylCasLJc&amp;#43;2f7MhrZFYBAF8nfu4i4y4bZB7i89b1cMeAGoqhM/S26q4faCThH9Hm39WkazCppe4arxWrMK9yHZK2fTZRVzQIXYeUDQ4WShGAIq9FWjdKFQpSnrVe42skBxV1lmbW6AlVl7MGlZGoTvzs2G&amp;#43;

2T7TTunSUH5guOCeUrz8HhCVcrV&amp;#43;nFc79xJbyqE3BlXawqMfct9Hqr0OQKhIfyuiQBylFIAOkBSoCIAWUI3wYqUO08651xMetYuoToIqOHnuR5Wkr6EFrK&amp;#43;0F7E4Yvu5OHcjtThwW7NertaO5jxei1WL/QsRx6LF9p3bLoRgCU8JrVW7&amp;#43;7cIc9MF&amp;#43;cDCrHCoAp1cJahiibpLqGO3v6Wwdcm9R5ggyS6S2864ZGCBuGhfpJeybasntYByrrFwsc/K

fzP0u8IaPx4KXcfcZBS73SfXUw94CGCgOQk1MwpdMpjXu&amp;#43;smpgno27EQ/yaklqmbLoGI0hEU8cXNEx4TX8n2UcI44Ifm1&amp;#43;e0cREFHOEX5onuxmKF4QCBHUvaU8cEGfOrEqONm5fCw0PrCtkDsNGsDpaSZl6nVBSVxHeOIF&amp;#43;a1BdUCRnWH8dgDukzepjjRGADgBAHHB06AK0/vhgFpIPMIWKkQxNnXBhpSSW6uACnKHKvu3ekJ6b7rCe2vLYIclgp

YFSfnUoqxaVngu2oRc6EfhCWsGQBqghJl6wPs5JSNrACpuirxrODrvKA7xuxCVXcwo/52ZoerlN7SMVDGIH2qX0yJiPHRD8Uqd6tJxcXjrsu2UAeiipwnTfE0BQED6EoYB6ADwAAN7SZpykdCNJIvIuuJhMHx/rGman/q5umJGtIbiG9H68waSRli7nRFDNMussaCP8RlVQEova6axMYY6&amp;#43;9CGvuKxfb4E8YaKRjYy7YOcm&amp;#43;karEtOuxqI4zuZHW

Vqkuu2y7iydluku855eoZZGsSztlthkJSY0gtFwwTVwzNKTMaJr5MA&amp;#43;0OALmovA6jyE5S2u0MyaYaiDBD64QtEHAba8ZJZehNr7hkQzXKk151RYUK0eCkenDX7s7xwqpT5YJSbEIPpqxGrUcp84GU1zU/AQ5r/gE7bEbMHEFGwWAllcVPpGWhBoI3THxSP0CcpnvqwpGE414A8snhpe2OE9AQJhBtUtTDiesIP&amp;#43;EJ4Rd01eMlp871&amp;#43;8NXK3pzmeq

yRweE7c7FZyXVIA05EgEGxXP6kYVszVS/iyDmPLDkgg5DgZKvrHJlQDC0dTTD6zbLR0eHGGqplRsnYgj4xG&amp;#43;oJCJMz1aCRObdrGW34NGE4VxsLm93pAVNZyonF0ZR5QV/R3gdcwMXE4tpbASxCE6SrOZMBSwPuS&amp;#43;RMSbJgAGoGWCuhR7uTmdhxiEQCBJTUh4F7dUZf&amp;#43;1q6YYdJVOGGQkIRh6ezM4eNEJz7cOvmMwa62bI7mSzUMXvsWrF7CXG3Bp

YHqtQMM6yKBtpLehWbL53xG/uJxB37iA1Vx3wOup8AKuBmieUpT6qdUpTk2gmzCb554ul/kBS6QMC2ob554PplnJkNDgcCpIbAFrzbUFPR8otpqffoADzUHABlKeCV4HCD0cpTOArRJBnz1Xho4RBu6bHq9MQnsWmQI6tc8uBMtEYCu&amp;#43;4slfs0xWxYiIw/EknhDWUChKHggS33wU/RaLkK6afCbNByZB9ictFJSaCNH3HiBicQnJHusVmhXrC9Gs

e1HZxgDFlsflhktAKLdRovRzCo8Bn4YABoVEy6sbewfpnskeC4QEaMYd91cAEyqynZ/IB4AEM1uU2YAfAAfLy9PAjGZJKek0iQD/0U4&amp;#43;LEalrOm6JHKMdR&amp;#43;9FHDUZ3eohGYXv2KwyHbEEhYU0RFqWW&amp;#43;HXsYsGJQKqHJ6qsmx1GCQh6&amp;#43;r&amp;#43;7oAddR3gtfJrHCvrF5uzah&amp;#43;sGrQpi60ZL3Gse&amp;#43;XMqTAL7h&amp;#43;bt6fpNm5kCqXoD22wD5Yvyevo6iytKe9

sH6YeGnLsHkbUF&amp;#43;jjQWkeKQ5TGVZ1YLOS6YHsYB8CqMHtBdYX9gmQM/FpGoukd6jLhZPkMx18CxAe1xWNjBSooihjj0Ziv0Cy6NIDwyZ7hxdVWg7g5TrClcG9iD5ndkCVkr3wR8TzA&amp;#43;m065K8rt1xemQ7Cud24hNHwdYsVQ66MeXOm86nH3UFH3awpSxBRSvTQkzOzjAm4Ky3FO3x1kihP0FFpqm1GjFyAKMgqKPwG36NGKGTsEaH9XEAk4JI1oA

rHPHgTvDUo2S33YIAwCEyrwsm1ovtvdA75/8Jv8H8KxVF4JMbhqUj96Zc94WnmnT3Y2eGO8FgLzLLBq&amp;#43;x1uxnUa9MMPhgZ8I5UjPOJcFsRfvwsgDZTzAWKfQAIuIjGguR0FbXMwDw7R8HJoRAIhcQ1Krqx3OXMUDLBdHRuJUsVXw0ZiaFJw/sKBh8HA6A4AYaY5gF2ADdR6a3QgD9gi6qgAU0h6AAws9x6OYPX4wCHPkpAh1qya3Lf&amp;#43;nSGP/r0hv

CsIEaRhobNLVmJA/Tb6gJd8ysGeMf9RfrKAAJmuuyHfHIkuj&amp;#43;CSkffesob8XvBc5NGFYpEQnJ6TDIGhzuGPion0&amp;#43;JTPeoRxlmHWggrh4HHD8cfSquHW/Ej2&amp;#43;s63YNqMRJV2fHdDNGF4eF6sNkghRn8IiCMFYhKaxzLZQLqe09i8IsGyU7d59Rv8J/C//Br4k/Asuh1Sbp0mOwUwtsQh6v2TIO9IYmb&amp;#43;RAjIItqezOM1ikQEQNl3jCsDOPCCQnhoR

rpdkxq0MUr2Ih3wO8wDNr3MAgY4wNWyfDYnWQMwSx5Yvn7IXUle4LBIa/x83WydXjr4cCUQUsieAAZAVMdRZkRwZwBviXBAKAALNjBSiEHYUcaSU48cZ2AOzoG13u6BqjHtIbyhwhGCoeIRr8rcUcGFF8w9RSCVCsUYnvZgKDyuBjdM0ks0kNUK84TcdqzCS&amp;#43;cTqApGo&amp;#43;rcRope0TGewcaOkD6J9Mye3968nv4Rzn7KkdH01NG8Do7BkkGtYxtCl

9I8LQjOeroP0haKJzHcLQEtWBRqLkKA270SeF00Kdh7ZMwhh5pJeEwlYgDNQIOOymh3mANypGIbNCxrZwk78ru8h9SQDAEiZnqxbpBoDbCQ&amp;#43;Ae4C4RtZFiBYTZJCkjDErF8FXWhxZkvgiIGcYayn0B8W2kwEHhxBKrqovi&amp;#43;/w6gwYETNcE6Tlz0/yB5UbXBAtFKCs3UOYBMAGTAcxzGgeKcPwzJItQRonAlJukJibG6lrkJ6bHu8cUJ6A6sUbL&amp;#43;8

ZdGMfGFe2gIDC2awat0PD&amp;#43;7AwmRaOnx7/rbIep&amp;#43;09YaFt2rEaqFx23fOkH&amp;#43;wfBQF7G06kQ2plG2fIYC0tQ&amp;#43;bFx8WLANUMvoakp0QsMWNf4i&amp;#43;w&amp;#43;SKNi6GDNNF6yPmAJ7M7oEMlkKclaCgewI4SH3EZ8ASd68AHYAoSqOLAQAQTrURWpstRykwfkufgbjIh5IdJYcZ1jhhE7Jsc0h&amp;#43;QmDUdzBubHlCZhe2TqlsfPoDXhAThEXLvS6SzxIJn8dsa/Ww

plvzDn2F1HTCePqkwChkrgq9wnBoYlJjqGrsazhderSYdErOwmzQr7Br96OfqtW7&amp;#43;zDVPNg9Lq0j3OugSJfjCPMC/MCNOMYu6kPizTPFshIb2AIoPZTNEUzBSE2GNAQe&amp;#43;Z07LHsSi4UqROMSFgzugR8FYCwLk01bYdsaEUQ58Y1aJDVU0NT4Bre0tLN4EtWZKFhiN1ze91n4yXmYb1iSH2Qb/lEBH&amp;#43;7ZJbOeoj&amp;#43;&amp;#43;/bfsHgIPwdBBE3EOeDSAG6Af

cqGQEAcCgAQQfrWeDV1&amp;#43;JXhV/VkNQ7xk5yNJoUJghGdic/&amp;#43;/vGvqrUJntCe5kYTDCdlqW8IlYRZgczPPknaAyeiIWasDpwh4UnrCZ7hlLxuEcphlDAa4aA7TUnd8cuyizdzDLpekPa4AfFpBziN13YO74mWDlC7cbw/hDcwdV4zw1Ls401/VVEeJFkQyQC2tkhjxjldFxMK2Pp4Zoop1LI&amp;#43;jkZtrDcK9uxN0HJcEIrPQguIJ&amp;#43;FgqArEZkgqSHTBb

WAXV2XsUsy&amp;#43;/0oSk7B3UDWzC/Bw4Jm6CO7d/oS&amp;#43;4RbgwfQAfQBIcAbMiuRewBaAcsAjUpDC1/NT9J/2okn8YGaB0km0waR0jBYqydbqmsm6SZ7x1EHS/v7x3uqDiaA8fYRsJvtmTrLL/RMSC4n5rEgBwcmbifxh4XSGAfwhwHGpWr7img7zCp9RzEjk5hDMwVVhwo2WkiGQtO5h/QkrSL6Bdpswm3TnLYIOAoXieMo222r1EyBtMFVR0cRiEoEFA

1dHdN/Sbbhd41ViR&amp;#43;8uDp73BnLZXtbOgCkLk1lenk9ZzGfRGf6o50VeGj7p9DkVVypfI3vwKwNZvEL22MdkSbvGtMmKgGwAVAdpQjV85B4/Dj&amp;#43;RqDl6bD4qqAA2Vtwpstw1S2hO10qovLIxuOGKMZpJzYnqMcbzHTj4Yd51VJwbpi3QcGSNJTV2RrJpkW7J5P8&amp;#43;qqjEkdgRQXyRu97CkeHJr3rplqG&amp;#43;0GoxsocJ7YHXdo&amp;#43;JsLr18dI8zHG2BRhxM

DI2iIsJA9GKaG1SUNDPR3DI44rYNFMGBtVCUBag4ZEraOVDBv5WfksnYZE30h&amp;#43;IEVthnKgqAER/K1Lwh16UltTJooHyViGARHBJWgMaLAxpfH0YfKB/IAY3X4AfvKqsuKnnPFtE/&amp;#43;l1uUPypFHB5Nouhpb6LtrJhJGlCbTh4hHVmvq2oWQICPWxpeT8tRxQNdyeSdlunsn5bv5Jqd0ByZsh2fHbidze&amp;#43;a6YjEFi7uHOQcXqxzNZMaaiH5w0/iAek

ncomQW&amp;#43;3BrqfF3tRltINjPRNKpqdq&amp;#43;YFUEBo1KwR7ym/IXgCn4wEsc&amp;#43;2GIRNggQnvjrvH54fz4rwfvTPhhqQk46zvQvK146vu94gHBAFslmABnUZMBCRHePAWZGVIoAEEAHSvup5nJkMSsUzvobgv5gEinUUehhr6no3sSRgYHkkdYuxlqDiezDXHLHTJX7IGmTJq4xtHbi4f1zTb6aqfMi&amp;#43;97fiP2iyb7BVVRptkcSAq1VLqcAce7B0gHQcavq9

cmC0qvTL9wMgIyU0fdQN354V5IT0nGck2kUivo2T&amp;#43;qeSrV42XhAwkM0AckAMI4erxNwOnlk5TF3iBoCN5a&amp;#43;2Dbs7WQ1cwsUTXdkyYuGlEm3EfQAGABkRXoADnsOAD/YIBYfEnqM7oByTGHgLQJ61nLFFWmVLl2IsckFesyhpwLcEcCerYm6ycgh2yCy/sSh&amp;#43;rbvhBjJYXVN&amp;#43;k6yvzbzuBN6q2mxBsdRm2lzNuwhzinjseq4HvLkacLewiHGht0Iz

MrRHzRPZoa8kMuxvqGBjuyClZaN8aLRtzaLiHybYSZm2IMtDoqGXhshJyDhnrIOQeM5yP6uCK0FeDGyPptH7iijMbg5sDRWCWhz1zPojaRWSCwDU09cVlMWIGKn4ebRvJtlEcZgH9CIZR6yDQpzKxW4bbAb4KLxsumfkYkAcqBNfMxAB&amp;#43;16AEkhlcJgxVbvcqB/7Df2pBH91u7k8sn2pCGfbVH1IbSphOH9UaaWjFHqvr7xzqskgHf82imcXA&amp;#43;oU

NLEmk9O3ZBUKFT0He9eSehpvsntYopR0/GJ/AnCjIN8/2N1GKpJShXFQlCtgdOlRUmfCZsJ6za24aHXYl6B4eG&amp;#43;7RnfFsLbKb6YceVm&amp;#43;s8uqZUmYJkBfuVJ1g75fX9pxIDZjUa24zQNaHEnU9FXWIxGMbhLjrYhKesWfBHh8SFe2Efo76htszW4Rlx6/MXGER6xDuE7MBLYI34aYAlUWlwRb7oIek38vbBTkQrUbvUjohvMr1cZ8CCtI7BEcqyms

yQpvIWEeHhIlqDYpW4McsB8FzkqqfmwfOiL/GCFLjY4YhvamgpKkTZkZxQBIBd43Wl1p02MdAQ1cqM1KbIZJy0dbPDlnDGKUlpuDmgktTYohEBsAVJYyiIECii/Kd4mgKmJAGVGJu84cEnqV9gFgCSAYgAQjkxizoBcxyQRugadnLCRujMXmT5WroHrToyp7Wm&amp;#43;gZL&amp;#43;3Yn&amp;#43;8fP0o2mreRBxZN7nuPzYofkLiZwEeqGBMZ3k9kHNCpj&amp;#43;A/GukYI88

xn0yoXHWNGr6fnGyUDMV3jm27w/wJtGmL5JWUeODCi/517MMKYRmbJQfTKW9qmq0xjpXI9yI0bRNiaa2dbAwcS&amp;#43;&amp;#43;CmIAAZAOAAoRVKgZgAaWHv&amp;#43;JJweAz4atii&amp;#43;gCDKx0qjBskikGHCtuqWjWmoYYgOi9aKKaNRvWmTUadOozrbTP6QdGYSBDp9LvSZPLBsu1GeWsXpmDT&amp;#43;6lrNIUmH3umWYmHeMH7yqs8e/oUyjWbT6clJsSmmjrIB3inqDp1Zx

2mAXSslYeGKCeRIZxmSUFvfUEZy0uqUmHZUnQZIg3I3AV&amp;#43;YeUNDcghgooEuNnYaQ2RCDz8unVD2HIYYZx8zfsOS6FMDDX2O00dagQsOYc8&amp;#43;CivXB2rD3ku6ux5t/BfaX3on4Xhgwbp1OhWhw95kI0s7MVI03sIOb5H3zPQAdLbGyPVhamyQQGeKPJ4AcGtQKABNADeuehldmbnsiK9mWZ5WjoG1ieR&amp;#43;iN6D&amp;#43;Kjei5ndacx&amp;#43;sJ7tes12y&amp;#43;CctJkC0

sG0YcY7eCh2volZzr6l6a2CIxrV6YRprim2/poW8lDiDuGy6oaj6YtWoc0RHyXZ6UnFyaLaeUnOweHG4PqTbsD6lVUREa7PVp0AcUvdT0dt2BrWulAYm0IEz4INDjmwCCg5bkWguJ0csfSfFd4NXgMkTBBCuRoS4NonZAkcZYpd4FBoVftW0p3KSCSLGS/MANEb2ZFh9M4ypji&amp;#43;q7bYKZu2pLt4H0laZwBiTBGANgAnNSWcidQjMHqgQUIm8cVpu

ER3mOkRbQQ1af7MzBHIhvz&amp;#43;9KmW2fwR76n6yY4Z6PckgBv62im7pn5cvTa2MZiaURoD9Qnx62n/gmazfjH9DI&amp;#43;ZxfGyvQt6QmiJkvAKUiH/MxJZQ9ndOQNy5&amp;#43;4Q81P0Uq1f4H5GjsIMaBS0QOQDkaydVytvrA1ZPRVjDrQk7Nneip1QYQmGYDIUbDDZRktSjKQWgHjoT8sKVl2ZzRyNSwousGHEfsbZk5mUfso5mbH6ScxRhsnOGe4Gg4mZEhieL

Qmw0rRh5pskfguJ08oy4dDRzDzfGSR4lM6V2f4ScMsjWcxadztC9EApWNTYU1VSe1kBGEt9TK1rsOj/QJcEBB7mNnFGalIa&amp;#43;gIM5QxmfmIOcKwZ/ymDqYkAEEA7cSrOSQA4AF&amp;#43;8kQBywKh9YgBQORBwEpbJlxpvZFjNuMWeZTqOdnLoBtm8/upJ5hnaSdYZ2bGPOdo5sh8f3TLrJtxmoJHx1jmkTWJfBj7LaaxhrjmzmjhpgpGjsfqpnjlL5xmLd

GqP&amp;#43;Kex6oQ5wrg&amp;#43;lpG5MZoB4jBzucrhsl7qAcIBt1G9GeSexmHIXIex8NGEAb3x4D6BwZEQ6/HWavY87j13CV/TffpkvR8SnwhZm3sefYoyiKuBv7wJkCXDYBK9Dhy472l2/NrraCTDkA9nQ2ccBhZbMVl6Ak/YlPDNhEX0MqMVElMtCys0w2buNNVSRltkXODiyicwT3Rm8KmNNzB&amp;#43;kyKjMUbicu6KOCSKaD2KIiQdjCa47zliEGyIirm5maq5y

UBgQY18eIByoFaAc1sOABTzB2JaRDYoeN7eoqorUknWgZdS&amp;#43;tnWWf7p89bKtvc59hmR6f7xuEayEalWtdztEpWfFftpAqEHTjnJWZhp0rcwueah&amp;#43;ySCDpEx/bLqvOZkpzbn0p3A5hHrsYl06RmFCQnJlXQpyeNutHHmsIJpmSm/nxpSrLA&amp;#43;4LFUMuUlXgqMGrBt3Nhy2L4O&amp;#43;Fe4JLBpgXUs1zRBuhqYwbJNfuH4U71HhF9kR5VQejzp&amp;#43;DRtLTsVS

7sntKrEJbgbw3uEWBLJuCnYI&amp;#43;xFcQqIlvQdvDAsI7qBmNsrNTsrAXNZl6h1K1VkNdogGk42tilfgHqgWmAeQBgALMaggAqhOABh4S2AOYA7qeVRrrneaR2cw9bpdqiHY&amp;#43;7GGfI5kbmzmfIp7Ynh6d043KmWxubJ6E1&amp;#43;sEF4DecPToKNfXl&amp;#43;6JW5&amp;#43;1Gaob0gQ&amp;#43;wWkllZ/VnYAcA7MUn00qlJ/Wa2wbIhzqHN2egqvimweInC42zlVRappg1O7nap1

UnrALe5u/mOQOWWs&amp;#43;mrCYEp1fHQBdUZtUmfJPPpxzSpvoOWuDQ&amp;#43;ukRYGPUIa1p4E8MjlF3&amp;#43;BFhrvO2KSw7J2guJT45Uvl9q6nDDohWpEPpV4zUC0L5l2C8tNyE50FusRJsdaF6zQUEw&amp;#43;2KEwpE5pzGeoMD3jGReacGt7GG6YGwfqDO1X8S4tGsRI8wWaBSBcfdXrHw64&amp;#43;YSD0722AQb8FCMm6wayj&amp;#43;MPxRaaELvHcV1sE4GMCKbAQVoZkhDvHsjM

TYSAnUKZtoA0QhIIAlpRvsrYIjEykO6HEs0t0xQEz59oQUdD8peOpgAJvo80xngEB8Rqkx1OozMYpeAFDGXMLw53dhJIp7k4jLaBtWJobn1idOZ1znB6eo5tfmcqcV7CsiRPygob3LUYYW54kJhQX7HSGnyqds6vSiBrk/u4wnUZLlZ0fSl8cf5pUnn&amp;#43;d9p8ibIBejOog65MfFjJn6hwqOYGoWYBft5m2NkgoVZ1mGfacmS1oXDrvc3G0LaSC6k4

7cYMgdJZrA9Xm6y9BA7qwyUjewjlR7GdMllKI55eadoZWkaJZFFkZPjALBU5o7GTAW&amp;#43;fNGyD3RhDsaZ3DIRUq5oG&amp;#43;z3EqhoQ/CUSGswD7CAI3RcfSRCaAu9KUiceBLEJvDzZOFktmVi9BH61JklgSEYWfUL8HOJFGhBWAWkbsQS6dvG3nmS8fy&amp;#43;OAB4cHygfIV4CAoAMXmiDB5AbAAj4rwAIwBstrmJ6wL3MI7IV35uVvQR30JXqeLy4/rYkfBej

lnV&amp;#43;d0hjXnOGf0mg4nhcSzjSxbN&amp;#43;kEZmST13PFZv07J8ZZac3nTse8J6cnnCYF03sKgXUig904fEVvSzi9SwVhq&amp;#43;cLWXoEvUN8BeIsJfIo&amp;#43;CmMNPZE/WWqKmSN4CKdqv3QyrgIBc5pw0PnYP5pYKAcIC&amp;#43;A7fXtoJmgkes0p6hK3bxXDPxRu7t&amp;#43;U09leXzBw61Dk&amp;#43;aeBuoroUOt5eEtb3QPEnfMnBaRBHpSaIDAmPUgG50o6eHB/jugR8npbuAcYS

WhXStwLWTbIkcB296nwDs3evRaCRd7xokW6OcemnzmzIFRWftmFudBaQVtaRbmByfG5yrLhj2n5UU6FskHz8Zp&amp;#43;mgLHeaVwl7Lc2nBo&amp;#43;MRBEkjsZqisvBaDLLxPGtc2kFn8&amp;#43;1hEYqKOOzGjLfRgKAIOIbhKUhcFAkYZimwsEcZKFUHVOL5AWF0VG9x8iKPgZdjPeI1cNbB4w22F9royimdQ4gzi/MlSU7DPdMim&amp;#43;mJLky2wB/CIxvw&amp;#43;OzArQKqE5

6H7eHfBrYBmCrgAG5KbWwoAeV8W5VvrdOK9ppykbcTjIm1Mc07fgSN8cbGwhabZrMHP1KiFnWmfqeNRgsHU/pZJkz4eGHYxLN0ZyPiaLC1C4e4xrjm&amp;#43;BjeZvjmzlIE50XSNssqFwR1ecxrwHqIlcmWYHrZM2jSC73nsywdum81wHu6R3kasDyFQHiEdAfZlDgIIP3hIZzBELFSkh6ssXAGPeDYzID5GEdgb5uhIDgH2YmvVGmI6np7sAS1Htg6mg

aMmIcYq7yw1RwsW89Jn7iVSZDxSod2plMni8dRJ9ABiP2/sMhRiTHKgI0AIZ3qAZgAn3jtBM5ifRa0J&amp;#43;ygMefMPPUyGGfIxxfn13prG8MWIXqHpwkX1&amp;#43;biF7Bat&amp;#43;a0ZUDwp6XsTSW6qDk5QbbGMhdRYydNWGG4OIM7NuZDO9emGwdQBlGmnec6oIKWdbLXZmIw2NGo8kyY0HoICgzH0xN5&amp;#43;4lyv7OJohkHl2bQ&amp;#43;pqn58dnZ7MIVZpNKP04/eZvvO

NhYWSOwRMpR1TVccGm8Ny9B9&amp;#43;Z05To&amp;#43;kz6KUn/gWmg1ri8tDlJWwi2F2y7z0qhoOx9oBHTUuSdrdMFePb0&amp;#43;W3cFEZthTLy5&amp;#43;vRIIkFlSgyy&amp;#43;Z7EPkjHRyckEejuDly/INnujS1uH7LdZE3Vb6xA9QA5qVkDtJT6KoxtDAsB8hEj8F2sZXgITlIEQoFhIwm9VVz2eGTqptx1Ut465OhmCupYeoAKAAVR5Og5gHBASBx5BDgASaBrmO0lotkc4O0c/

frHOdfF5znm2eYUqjmvxZo56MWpucRFo2mKSq79SYGGfVB8M3AZboK8qGmqwZ23OkreObUKvyX/X3&amp;#43;Z63nWNDE5toXxsojRwmXzEvIhuxmJ6zQ2ZiCKKtcIlfEDDWAEINYUVSEFvehMmw4mn2KzEZ6sG00rUKeO/TEAcOEcq8nCVISSvFm4KYETSIkWwGY3OABdUHkEU&amp;#43;LyoESkVPKZamwAHkB&amp;#43;saRF4pLxCZiaeXmWTHLGpXmAnpV5y&amp;#43;61ecxAy

bmrrXl8PBJEBN3GaJ6eiwGTCyHjedHZqVnV63Yp&amp;#43;Gmh3waO&amp;#43;haZSZS621bavJQBrE81COi6uDByxLgwCdy8zEui&amp;#43;jBw2rIOpR8tWdTgHAHrEpd6k5IHM3i5q/E&amp;#43;IgkKGfET8WUC7gVctBmsIQI51XBg3CjnrE9Ub1zD4FvzA2R0QRvzPR7IU02zEw5USAagzrB9jHnLDxLAihr&amp;#43;P5NGym1gUuMpToR1MbMwBEnR/H4N8HGAm/xbdO&amp;#43;ROcrHcmL8x

Hw02zzMkDcXQyi0AAQ&amp;#43;bBGsae6XzLg50m7WZjxm80FOgHZYMWZSCPnBToB32G6APgTqNx9F6sDvSCCFuJghopSpqknwhZc5kGW3Oc5ZhknfqZheiVbteex86Eg/ez35z/c1pUt0&amp;#43;aCDCbQ2K4mXFvtl0t70pb4RsWMaAuAF3emhKafe01SgcZKF9ySrn1VvYATaLL2BgLTwuoFF4tHLQwXwzuEa6LjkjYI55jTOUl4e4DdI0T7cI3sOTAMXQw9yU

08WUkqwQFpK1EpQEVI94HO1boi7ZOeOGrdCmUxeV46rzzGzJA0CBDvVfLMeYiJ5Y7pR7ovoHp1nCPVc3jqdgB4AzAAhgA0ARIlQiRikOwBJMn4DLDofRa9BXSX4NXA9QyDDJdSp4yWNiciFzKmwGwgClULbfjgQo2WzRz&amp;#43;qghapgZm8dn5n5YntWsGB4mBcgg6PbpyCxNHuHSvkz4ncHsR7evUCbmQRcDwKtJWAv3ZWHsATG/xvgn53cZFufCGQh

f4v/Rgpvon8WYETTxGRfne81Y86QHaAHRhyoBaAdL7lAGeKYYTqCN64&amp;#43;8XrMH4lRXmsRarGvVHRuaV28bn1easl&amp;#43;gceQqd89sFFagGu5F6NnDVc5&amp;#43;9wJYXpq2X&amp;#43;SYPcsuGeof7h5KXnbqGhtYG2jp/57o7qwTZGpkG0zFAPFcnj8bnZhTkd2ZFJvdmCJcFFvBVAn3bso5p50oWuXbAq7EXYlCk9r3uJDmIMoRDJ0WQon0O3GcTnhGpmQiSM6N1zH

M4gSBR28BBKXA5ivex0mqQ47dcoUlw2tgo7ojMGbawWwQEGL0HFzBx&amp;#43;dtquiLVckXhL1Tf8F/Q35mlNWbcXYafvJxR85UdkSyBPHj05pL6IAGrWDKsYAEZUuqU&amp;#43;gG94cgjiABMU81LGgEsCxWn42EE8FD84QPJigGWdUaUViIXj5c/Fttnvxe5ZgsGvnp4ZqLswECKnYqmdPJ&amp;#43;sMqn3JcN7RLR0uRMV8UU6cyQhYc0SnpBQDcCVchqFie5uvMAFk

mWACv9RsbbpwvyTBb6HPh26H&amp;#43;B/Jgeu9x5VCxTo7S1i&amp;#43;R54uow4FKtQh6JwrpqEn/tEMaYWAqayGCp7W7pe2EDqwi0cYnhS7MN&amp;#43;GOxQRysakhfh6bY7iDQQYelR3Twoyam5ri4gJdp/zBemkfUU8f9BnK6srOCVquS2AzPEKoB6bpFpsH0WgGJm4fmLfzsAH0WfhpiaXrmyxoElF8WcVeG5kyWGZrwRk&amp;#43;XIxcopq5nOGeh22yX2/T/Ao4nOxv02m

XgSZC9BaqG0HVYYXiEpGZTSj6V95K6VnGSRcPilxcd8/1rF5EL6xctDFKLa5p&amp;#43;FUtLvR2locPAUaGMFx9xf6VGsEMNavwQ8IuE4ilqmywbFqdvwTiFfZ3&amp;#43;vDkh/CnsfXjrSbyXbW4aZIGP0ulQPvKHIPPYQQOIu1FW1&amp;#43;O9IWRXADqPuzWXEQaTVglXYYeypujHcqY12qFjch2JhLUakz06yjK1BGHnp1bmTedoDNmRnUcOx3yXtueF0upGCWMtmi

wmkBVsavv6neyxI35n&amp;#43;odapxkHNGY1Jvn7ImRFV3KWigtaYMW0LlmrlvJq3tTpLOzQFR2&amp;#43;a&amp;#43;hgu1f8tEoj2HEHq9uDUyT2wUWSKkXL0B2lHmzQoCuXgKGB2VloMrSaIrCkZI3W2yuifCn30M7Uyrmg6Aerlujhy0mQQEcf8tcF4gFKgXVAyoT60LiTkwHrx5OhNwAl67dX71LGQG8q&amp;#43;zMG5uNXD5eBl7MHk1YslqMX8lc0VuA7M1YMEppEXyYeZh

n0H8AgQ/ZS3JfXk6BL1LVf4j9WhyYKF6izFruGCScbcZYvxnNKbGdgqlyGy93dmvCCp1s0xOFMy8MerRARb1xTTGmWZtyqJwk7vYMbaoDi8wEjxvfNo5pxCr2QCe2nmOTCdxlkjHnmkkvmZiun6oDaqEvY1AGCACgB46HwATABZwiNSuABJAE&amp;#43;GpJW5ONVl/57he1CFhTW3xdAhtqyVNeiFyyXYhYKVoo6tNf3S4HogqFzVhbnhpP/JZ&amp;#43;WZ&amp;#43;oxlk

wmrNeaVx7nhldQe9Rm2wuu5n/YCoNOSXwDSypwe6p6HdBI0BHgrIUdkVuZ/PwNh7fA&amp;#43;Dv5QNLi0235QR9itgikVXp10TNQpeAiq7DWjOu7KXkFeTdBtBTAo3jryoBkAHJVrAFjyEYAZ/0M9fgQ/s1MAFFWJ&amp;#43;fk66RXd1al2sPw6egUVg&amp;#43;Xqtc7xlwLVFYbHO6aAyoRh2YnSRagQOgZxP0SaQAHQBE2x5&amp;#43;XKbnqV/GWWRZpZIr0aUfGoJHjt03owL

Dtkjx7Cmf1CatMZlWdt8fA1wBXyAYg1v7HBMHd52TACoMwVXv6DgY2WwtGsxOC6lwSNlSz/Wl6/AOjll5Jx6tfwSeB/gr6cjClhI1vmyJbPtmXdKBAbO3k7Qj1IVmscJjJKeYBnOsRujFWAnQWQnQT6hIhnIQuabEFosHMVIEQ5uC3QCi4iCZmZGIVHOzcwOBTuZAMG0Qp&amp;#43;22JkVrofLUOTVcb1LzeMftau4Mrg69JZ4CBIQixGwmlK8ng&amp;#43;6hJCH

o9b8BWadiTkOPsslPsHOTM0RfaEmUJmSt5V4ozdWcjfPxd&amp;#43;/tjlJwcYthifZBAQdHhsilKI46CqmAYCO8wjlDMGIsN4miJXJPCeidg5oJWhZf9rHN8GbEGE8qB2gAjAPgTnABBwHYBOgERweOgagAVpz7WixtbFXSXQhuFwYjnFBOOZ2Qm8VeU1k9WaMbPV1YS9OOMQLD0v33rEZhCsQWaXNlVkdfmBPrX8hav5r/KvSnVmz2WAhPPkycavdtGV2

BXaCZOyUNSDHW8LUZtT3WJKdmmJnoYPPxwBtO1cp&amp;#43;7ucSbwwfkU2KW69R0YpV460qBMMM3ET15PLzlGHKq7IFqAPQAgfIKyotzd1bCRh2ZEUexVhfn41eUV/FXQddv3H8XHTv4gRhYhjws&amp;#43;ebmylc8sfMNq7GR1tsnrIZ8lyzXV9d7h6sY8SLhqibaQzDaRumGSdd5F6tXwnJ8m2AX&amp;#43;LI5B8PatGY3Z4HlPMyBc5kDOVZKgxKWedfoCDCxWuTvRK

X9qMmm4GC5h/oakuOW3oiifeVK41LOaBGyLaeT50oqwSa00ETtrvCbhUgn6YQrEbvQUuUepJzHXaWOja7hU7L/0PmX1WSGsWbAVQXSpC4hGuMCi8l127EL18zB6flWBPfMKOoswNlcAlaQqQhl1/uwsG7wdyggXEyB7/Gfow4kBRkfxXeQC5NKMZbXGyuJQYqNeOrmAMSo7igV&amp;#43;FsA8kvzAcEBMADjirRp6oHjoUQnFaZDklJWiMuo4KLzgxZouh

EGPqaRBlfnVNdTVzzno9wUgMus3WFa26QqdU2w6yUHn5fbwxkWApcHh03bXOO10bNGZyZmGYkbLdtkx5Rncj2tgz7KBK3hxgg2XYyQ&amp;#43;yXDEXUQ&amp;#43;&amp;#43;ZJHcMmN93D3Zp6A0/NXcF2wPpzTsC&amp;#43;RPp1gWEOsUuXSuPZyatLemMCy6tQZhydDEoL4ihlOrpDmJfQV13RBoM9B8khzllv1kvDx40WyN/DdIDZVNGDX2mc0NtaYdac/Pr0SZlmwMEw2kqEnK

cBHDhuid&amp;#43;Mq1NrEH66inwUQkAwKnRF4EBqjjqdiocpU&amp;#43;ywGiJYlfP0ANgBsBrBwBAAQQB4AYgACuzoUe2UwfNsUCOH/YUfFpjpD1YKN49XYDdkS4lWEDcVl0kXpyomAhHaV&amp;#43;20a84nLZYdR62X&amp;#43;CjLVremsZdoW9Gm3CYbV&amp;#43;Nrr6c/IZL1/WX7ghFg&amp;#43;yxW&amp;#43;18w44zrDaGhbZnqMN7V51KwGwuQIHDNxP0UK9mwIfKBBpm88wQB93oGxtdHMjesUn

x6IDaMlqA2h9Y/F8k2GqvgNmEaaSA5m&amp;#43;BTF5JIkB4ixuDfcZuKxGdRlqYccXuX14fSv1Ye5zo6mWWMZ54r3ibpRmBX&amp;#43;TZYqs8pOIBcgWbNwbB/hkit1dn9u3W4/4z2yAiUtUivwODGF9Ma63jrOWCxNnNEQQGmIvoBc3OY3boAOABbAQxoOKBKqkZqftfRVLunc/qq1oGX3xbAhurWwZZiF89XFe12ACfZxLzVca/jiqc8VLGsDCeAHaCXMZY9Nh

ZYQpZqR92Nxi3G&amp;#43;026jbsfNEDAWiGGiSATYalCct4muDafZG7wkWTOWd&amp;#43;89ChqHLIptWUlemK7NtWplfba2jDeu96wVr26AuV0zzxcloFT/aQvTacMsgXTlA/A7QeOJ/gLlxtcO3DJ2oKuyMVRATjoY3jr2n3oAB574cHFAG3FoVRqMG4Eb9XiARm7FacXwP0Xb8GkiunpKSdK&amp;#43;xTXqzdq1kfWsqZWE0/jGzel5gGmPzqWcfXn8tRquBq0qlefVm

pXaA1mF9k27sdYvPGqBxo5VlgFrIuwl8YkaDYgFkVqcQ0sJsvBazyZkyg2nAIYt8Ygocaui&amp;#43;s8ZtcZRuxXlXBd0DyZfNaSfLVIU2MKNdBl3uEKqLV6Vtm0N5eAUuTz5sQo0yhbGEmgayyV&amp;#43;mwpryzl/K9D/ZAntXHqW1sGyStQ&amp;#43;6jW8veR4A01&amp;#43;4EJQTBECmnhDkAYaG76xhdz7OzRlXnOJMNUlDFChcKLeOrYAzdQrNjpoUEXpZU4pPw0bcVbJP

EClZYuqlX5dJY43PAcMReLZEk2wxc&amp;#43;poo36tbU1xrXbfjUgFSVMsCJdNRKdUyN&amp;#43;7rquzYOQDbnaqa25gbXMHrSl39Xl8a5G9VnRtuYLEcLkcfjRsia00bSC2OAeqe3FOD9xPSGsc0HfyGQc2EQm1TXBnfB4ikpoW7orirunaHhOwVXiT4Wb2XroumoeUG9J9&amp;#43;Yceu2EqhqPGK0Sf3QPhF46&amp;#43;IATmWll/QAFTLQuyQBpiJTzKs5M5Gy1kqq&amp;#43;n29IZ

1KNUb6hEXse6Yhh&amp;#43;XbSTYHp003&amp;#43;gY7ZuaVn4CNlz4tgEr0159tLq0n&amp;#43;DK3VjLdNhBK&amp;#43;zfsJ/K2I/ns13P9iLcDRjHWR0iTEHINYzpN0HqJsHp4tubXoLC9IxKI9sEB5oa3vfkNdafQnGLHsBbNhUAIEprlAUQr5tW0DhZNpDLjdBdcpt3HfSXx4GGCS2t460tYpIEGEowAhgHqpczZM9NToURXWWBKqqKcZFfhR5DlYQYNNxRWjTaPl4fWLrcuZ0

o2yH0BVX0ZCzPuZ0yb8tTkrYkJRGeM1mNLTNYKbHs3&amp;#43;tfwNu7mzewrViQc6aNNW8FzqhtqF363vsZaGjo3W4eWu8UmaFqv4Ce53vksIq27UutA1yagp32i53qIbQo7Wu87YtMfLW7V4NEmRrywoogVHNLTmJK55j5FlCpzbUFgevXYgjUa0KibhdGVSw3i5VyFBSFdJHbAHPos&amp;#43;GwXYziVZcl9UnVdDZBTBDl9DVIEh2dcWLlIuD0w8ZiKKiO3QG

uxsPVKbRLADpqmw5fVl7Gs7Wnm9aCXsTeBd9sIVoQWaZymVoy1vuh0tWng/6TyRkvWZ7qnl656aTmzpeigAJkNARoAjApYDdihjGHqgYpbB5RKq4mKtQELfP1AT9x/bAfXz9wTV5E64keL&amp;#43;9tm0QbwrF4pFnzayNvzi7nlWiJcuuK7N6xZGjeXJ7pW33uQeinWfzW8kkDW8yuvkreqoNtsVyG2KUCHYT2QI9Bj1Nz9nC1qeorM0BN0tm9D14lDu0

xHw5y&amp;#43;4K7s/cKzi0EZkFNcXX/wbRTGuSCU&amp;#43;XRh0GEI9cZ7ZRmh3DjCh5cJP/hGADoBs9heACzZ/2D4V0myNfAntiHzuy3RVRm9KtcgN2C2ata7x3m3V7aopzqstgG/&amp;#43;lrWsCyPwMCWHrd2hQCJ/PlpVkzWfINaZzs1L&amp;#43;dWBxerLefAPWYkJMKDljMQeonLBeNR3Voht6iaU5UAQzndzoVcBOw2RdxskHmIKtA050LKXEvLiPz56Ounmg82k931NB

3Q73Cf0f2kn8Fn60M16ABNAO102UzmAAwKbW0Em39hCSY71zPINvXRVopISsoVmO6rAZcH17m2TTfOZ09WkLcgC&amp;#43;iYLQRXvPLRAnzp9R0s70OuEVMWUZZ4x5rIsrftpuqncrbRpwZKdbwowZ4ndNKQFJnXA&amp;#43;rZ1vo6M0dpBhmTY5RNtksT5B2zEmJNwNs0BWKWYzvDgcsElHCVyc1iPsvYt&amp;#43;c3H7YKm6WhcgJSXO6dMBm0pVScQ7dZSA2kiXVISq

5UQWCsulsJzt1vap&amp;#43;kfj2WuFyAHaWtkWQKoJNXiYZHsZSBCevi9xuH4N60eSBGYiDYPrBECb3NLweTKRmRWaHwRBqTFcUjIs5o&amp;#43;UCwpCXL3ZAQ8IPHfFSuApdpofBcKVzH0JsHYb5g9L1paN8CDKQT7Dcb15kWcUjjAlcFl&amp;#43;DnWZlzHRihbko&amp;#43;3WjwwNXrOT/NsAHIUFoAw4cVpqjXnHcpm/dWwrayWY63kUchh5XnebpXtolWrrfXtjEHaKeROL

2llDJa&amp;#43;xXEM/uZN0/mKjH&amp;#43;gnA3src/VhJ2V8aoW14mfrf&amp;#43;xuAG38htjX2X/&amp;#43;bytuc39uZ2B2jyqDcOMslKOXe4tusW0KslA7qCDJAJXSB2nxXIyA3XmMj3YQy0i4WLUPfFDTT6uWbIHct517LAA9FcgDs69vFd6HGI9Enx63j1oXy28kT0oyn1XFARmUkNFjnKN5p7mCFS6sxvVJ3o&amp;#43;d3iSpKqEspSq6lQwwHaAOYAeAE4pcI7jjSE11GlH/mvc7

gbf9t9PLoYs/sxFk6bcjYyOnBGtZfRd79SqHbTVso3/LcY5iZEVhzhlo&amp;#43;U0zxa44dm6Ra457CM5bZX13h2/iPx2ppXUno4N7sToFbVnILidbeM0&amp;#43;&amp;#43;2pHYFdA4wqmsz7YC7/oi6ck4c/hCTMnJyj3NfGBHgYKh2bZiMmBKlBDx524QFNSLNeOoqUGjwPbhbAbAAoACup4xBoVXuGpIA&amp;#43;&amp;#43;YvKmF3d8q6GWhnhcBP3OfZ57ZDPJfmVFZ8d0fW/HY0Vg

J2YIavlyFDcYUDhZh2tJTeLYRh0heRlzIXdsalZ90dvJcpdvA3c3eGV&amp;#43;g3nIYSC4q3GDs1t3sGZ3MD6yzTTookdgV2kNoF4AhkfhbyfaYFDaTVeafyxL3qzHCc9zGu7TbAmI2zphAN&amp;#43;Q0fFVrBYSHsgGoFiwyHVKhJoawmQe13HXuVOoEWKgAs9X9g4lmYALxJChSSALFrMQGZOATXitYGxrmJ0VYPwWTXEXf3lmC2gderJtFGELbUV8HXMFsbNg

yGDieLeah7UDfxO5ox4qRJd4tXtsG&amp;#43;dCzW16Y&amp;#43;t7631gedpsAWj8b5VgAW2frC6/o2Epcdu5elLubqIRB7Bokp1ui25ybItzxa6atotr97MeVM98AXoNeBZwV2CBldtr4xDNBmMCVJ8YjDymTSLpwZpiVwXdH7mK3jIBWAIvCCQ7eqx2ARvFWtkHoaHNBgNXsYhzr3zH31DCkcIaIUH3DeMUNk1sCqc7/ENehX1YyExXEuFtKpZIUE807TmcSkGH

NUfb1witwEjRX8fePpIuQuiRdo&amp;#43;nPsc/1T2aCBxal5YLAmAjfEKiYsHVLcdtcjOUFWCWcR/IYAAfKMC5MA5AGIIsFV85EZUJIAHHq2cndWp7ek2pSb5&amp;#43;cNNsh3gdbbq6K26zYa1hs36BwTXLD0OoIkgZIW0Da6gX9qqsXTdtMWuOf/YidmoAapdhW30pa51l92v5Zye7Mr2lbEQ3xlPIrSd5kDZ/RBx1sGrPYvpl72qdfJ10KaBVb31wM2H7bvKc

9N0flZkZby&amp;#43;LSiI9ZMN3iUhXpiDhEV3E6ddtRQsDVI&amp;#43;CkFE6SNSpwr1Bz3ifgC5OLBD3Pnk9rI4LmXsCxaurg9yPEIIbHN9X&amp;#43;r2V1c7UrFtJA919qDjxnnweoFuuAFEojXVvEAjDK16eDmSnPmktfnWp12OKkwADigCkuD5aeDbnpYDfGKXUkRwakx29ZvFo48CvpiaQXt1ZZZZjJXT7oo5mA3t3cQttkT7pvitgNKDiYw3Ug59A3J0yyRl9XYd6

W3OHfO9e924nZytk72kafu5k7GSDdVjaxm9bfb&amp;#43;2wqqDvV0LLr3e1FVgPQFKzBy/&amp;#43;ALYtMxbLcJcUzprUNAQlhEeqSLp3YJGsI2UDzp/5tJoLJIeFpUmxxOdnJZEk0oqSCAwdyu/onIcKbpnYBb4iMAYgB/y3ygVIUCktm5PoBXxq&amp;#43;ek06sDSnof8E9nL7Mis3SHfY90inOPcodzF217ZodjOH6HZM68Tg7zcYpwatXDtaA8T20WKh2BqYy4ZMSp

hH4apygrl3&amp;#43;lZkJPeToXKt56kH6XY3p/pWGle&amp;#43;9ptW57lomm1kgVaDCGOSt1RJxz2QyadQtW9MfHHvRoGs&amp;#43;sEhfEGV/7dzw8iDvsSCu0GJIrT9Y/Hx/uCFvCe1CHvlxTrBsAitkVdhcVHeoFARqsW2KE/4se3a9gRN5fHoAKoBOgBZWOjwien1QDHUtgF1IHu92gFmJ3/bStZEeFpJYTrL9iK2N3qitsbndZZFgiGWrrS2AUhGtNuztRyAgUzk0s

t4ZyMQU11nO/Y8lo5oPtJsDa4mp2c5N87HpvoCmkAXXuaYNmTRiHUHN7VV4Zkk526l/mnGm&amp;#43;JoptL7DUNkfOwfdDrilVwDc3yyXzGCjSXXCCZsWyKFNaBZkSC1p2CBnWZnktb55iAB&amp;#43;wH8gavozyv8gLkKT4otQXVB/odd4QkRWziBzKe3ftZIBKVR3HcrNzx2lNe8d&amp;#43;b3CVfBl9TWAnaayxv3TcGbUJTy6Ywbio7gCaFHQq926VbCPWgM6ypXpo

73H3eiU&amp;#43;VmOTb03Jo3RsopNL7GuVZq8hcmQNomOJRntbJvIZ557VR5uZ3aDGbv5x2DHYNSdqFzNgZaVoz3vOukUv/m&amp;#43;wpAV/rVCxe5drZboPtcZf5yS4GAAlnW1GZLgZrx5/E8J8YgihYn8LIKggLgVIFmqkfQKFCW3YwDNuf2viceWATsGcos8wES1t0LcZWR0n0&amp;#43;4W9wp9HimGD9R8QMkW8xvC1BEG2kkevtNgYij9C5GHI19o3mzOHaKNbvyo

9hfZB7Fpg8l9ItV7tVOkWBxLFIOnLSpGDM14C80I/mC4VX6c1zJ8BmmnMoIuT6jcxRWZceWYO2p&amp;#43;qHEaqSx7srvYS9ULF8VX3ZczjR5oOjzxlK0Zca8sey0AKGEPF3VTBnteI90UAIJ9RsBfwoqaCLtkeZ/DJ&amp;#43;SO6wQOnV5aiC8LHrqIxU6Kcna5IJKqmHaRpFoUJUoil0JAqChL&amp;#43;5oBG55ZVksymMkVUHNyiuuPT67xZ8mN1yZxhZ8FCL8EBPZq

dpLqweFt3L5y0Ecrk6KqjUakDw/5zWaRGwhkIWq1RrRm12sPCN/hZ4mhQPCPbtad1IwwoaMw0BDgquZcqA9qo7M7rAHktbOMq8p6FVrUe8ohzDdvx6I3aPV863Ffe49jBa1duW9nFHD3clgg4JTrETFzb2OyFs0EsHiA/pV/ZA/diItzazGRtIttwn4k1sM12WKhZi54aHza0UwQoOcg&amp;#43;AKji3YcZ5drB6GnY4OxdTgKCCwLkja0Y4KLcoQTfD4M

ChmuLylUh7F8BchIFgKZmkCSwcEGyQlekKIKG7MAudwlXW4RARHHjSIyDHK3mZxGHx89E2puebp9ElNjPpmXDCdL4xeOsIAeHBmWBB9V24PvL/YbAawfX8gDgA2AEq&amp;#43;JVGxfZ5sDVw/RaFIZj2VOsDiAHW2ParN8h2QddtDsHX7Q4KO5b2mMJx&amp;#43;lmlAjaCixF7n1ufbWjIIhN29qJ39vcZiI&amp;#43;2AFZrCsb6AkWYDqoWr7aTUAsqPJtZzNVnIw7KDu

gP12aA1&amp;#43;LqPsZkypAyUw43JxUEo6OIls4Qno1AzctT/C0cNn3ZwCZGbe8ZiKIoEfupsC1oVeSzwKKmBImJnFcdkF4R2RF/qriN2npW4P4RzvXloX7V&amp;#43;eU1C/y1Xym&amp;#43;NgiQMGJKKUHg4Vm/nP4ICyzr5bcxzOykl0unKudVD9ABECC2AIp5/IEhAVih5or6AbHpm72p2eqEjQ8rQwrp0VWx/BAPTJaQDnJWUA9ox8fXedT60ET9ieV&amp;#43;i3OG&amp;#43;u12yd

5aQlOjSqBKDfYQuhhG&amp;#43;lZlJ1lWw0dDDuNGA0aQl5zW/7JZV&amp;#43;7Kt2Zlmy33vaaFV7v7Pee6CYsXXCarYBA9eg5s9oDIhDgmRKPnvCw7NdCD452t1iDYr30vwInhthzMjfDblhCGZuDxn8EzvapSMCbrgm7x84ebqb53oLHzV9FppEZIPGV04Q93ovNiuIFoKOuZcV3To8bgh7GHKE2hnkR7DNArm1CxClyRxpJI4&amp;#43;BQEykebH0mVeAWq68pMXFDN8

FqtRIFlxP2vVZeHWyAoRQdeaGkVwTgAFAh7gXiADoASlHnD0pbFw7m/LoZWbaRe/rns/tI5&amp;#43;TbzA7gtih3dw7gNyk2LTcWx6HWMYJFG3SKT7OawYyyDCb6jIS7cDZk96l2Qg5HfctWgpYc2sDXnBMc2/&amp;#43;7LCo&amp;#43;9j93Ojtyet928g&amp;#43;s9wD3QN0jWJpDgTLPuJNDTZAkhbomEzkxUZzlz3FfIj1RT8MtkQgn7eI4tVfo&amp;#43;SGqphARHapUxNrANjTIjf

RZIffdI2KM7DlT1w6C0GuJkABoxQYxcEAw39aGmdoA1&amp;#43;paAAHA5tCtBb91n/nfiSFV/XcVpjARlw434v1A&amp;#43;9ZId6b3K/c1p9lnVedPlibm0A/AdASOqkiM&amp;#43;QiLk3d2hMKUbokid693eyah2EUO3rasq033rU20Kmf1fZfM0gcVd9b6Omq3K3dTDpCoxkQhlSjj6rXWS&amp;#43;Zkxwwq9soC6Iks5NOD0tAMgFshzeOE9eGE5aoxU&amp;#43;FJqsVwQVM2moHjoJ

RB8oBz2KtYoABF&amp;#43;X9kskB5AILF8Wp2AfGhbLS0pBKSqhTeAbQAoNmnxHdoqlUaAOVtS9DSBc6x/wRJal4BfthyiDkhOYwtD7BG&amp;#43;6cjdov7o3dr96h2yjdUJ50PL4Mv9cxJVa3uIpy4J7BT2mWygQFDFDr7ymA9LM4dKfuk9ygPZPdrgbQBFXuDaWsoouk2ARIBFK35oXlAbiK2GNOOqykBxAKYKcS/AJIBB49hYTCgZUKnYJyj8Ayw/GYpzURCow

CA4gBlkZEgGExqwVjBl487bOFJJTXGojiAt46yKzpAIyg3SNOP6mNWGzctY5jPjh0dd9qWq&amp;#43;kE044/KJWg85rXgDnNc47kVT7U3vRLAEvBl48&amp;#43;RO&amp;#43;YvqDa6SjBv44UrTOPBuJLwWBOM45xiLOOH&amp;#43;AjAYOihNnRcEtREE/TjgvQUE8G4nVSo45MxkCiV/pwTtXg8E4u&amp;#43;nOHmMEFgJGU/vG&amp;#43;YDa4DPyQTihPhxh8ozYBtIHxoUngWxUluLDsmE44el

hOHlwYgfAND/EbsjePvTl4T&amp;#43;BOqE92SOyAMZUkRz1R5MLH8cyA1aFuCax1oE82AViBzRQSKbg4HMB2oKOP/gpw2HzlidxUgROOjMWCFbKTikyjj2ZtAKQQuEZM8zCMTjorJUlC7PiAN0kAT9In/hFXYcspbE6jjiixDZFpxT92B7jfjldgP4&amp;#43;PGVqhnIDdpdRji4VBYeYhEgC8xwYwXhGYquDBaYGlBT2zQ5zeMeYg4gDRtohBWfCwCVqhIwEHj/

sQ/3CAjXS7oxDTjgdNz3F3j5dJjMGp5BZ5xdXK6QvBl4/HwV&amp;#43;AcANWo3RAo4/KZltGMoV/d2/Z0k51ijcS96BOTDyjkwEHj1sq3AVfR1K5EgGwnFZiNih1xPMx&amp;#43;IDzjpQzbMUPgZkNDcdN2fVllk&amp;#43;J5tZO9WQ2T1ZPE7xWTrZPMb1gga&amp;#43;AO4EgFFgKvqFAwEaBc46GCtc6sBLUgHCAMoHAAFCBPgDrMpkA/IG4AbKBoAHuATIAiPa9IVYAGACpg7

JwGqzhAHAggU4hAiAB&amp;#43;l0oKx6BY6wyAJkBObdRAUFORABCQSFPAHGUk1VQ4U/BT7IBEU8QQ&amp;#43;LzUU4RT6sB9AGhT8kVsU4hT3FP8U51ln5OwU5xTjIAGjJoJQlP0U9xT3VAiORpT8eDcU/4E7IBrUBtAOkAKlTJT&amp;#43;FOiU4yAFlOoADTGowBnZi5TtFOmU4yAO2JelPE1x4A2YEXIMMUwmEZTxFPnk7QeJjTgQBtiEIA6lnlT3FOWwDxAZVO2AFVT3

ABfsApAFVPYU/JTnlP9AB1TigBcls&amp;#43;KC6BYU&amp;#43;YAE1KoQGeubbQz4CrCAiRhZDm2/PBOQDtT&amp;#43;kA9lF5msiBS9u9y8e0fk7/GgwBXk7jAAgBQxT&amp;#43;ANwtzEkooDVPKU8lW8FDYU&amp;#43;xAEgABU6FTwoBikiTT6sA3QnOUVNPE0&amp;#43;nhNgB&amp;#43;0C1T3ABNAGCAe5Q009FWb7BUOZI/J2039twAAAAKMCnicHHgBtPqAGrofAMAAEoOQGHDjSJIoFjQLAx0QDrT3

Zgw/H&amp;#43;AQdPm08Lo9tPo05NT7IASU9xJ&amp;#43;4pEwGTxYzxhw9dATxHw0BDTj4AsgELT4tPuADbjyqgIpCv8zdOSOkqoMSpPk7QALdOVQFzkWcAuoC3T6NOxFYQAcd3Y/rEqfcQ804QAAtOi0&amp;#43;sMT4Bx3Y3yp4amKVzcNABvsD/edpq8QA5AfpdAQAMAS1OuoDfl5gRuLmEJxgABaihARAxwAC4ETSwO8GAAdKAQAHSgIAA==&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/drawings/drawing-2025-01-05-05.54.32.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/drawings/drawing-2025-01-05-05.54.32.excalidraw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p>
&lt;h2 id="drawing">Drawing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm&amp;#43;gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFABYyJE9VGEYwGgQAbQBdcnQoKABlALA&amp;#43;UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>N4IgLgngDgpiBcIYA8DGBDANgSwCYCd0B3EAGhADcZ8BnbAewDsEAmcm&amp;#43;gV31TkQAswYKDXgB6MQHNsYfpwBGAOlT0AtmIBeNCtlQbs6RmPry6uA4wC0KDDgLFLUTJ2lH8MTDHQ0YNMWHRJMRZFAHZFABYyJE9VGEYwGgQAbQBdcnQoKABlALA&amp;#43;UEl8PGzsDT5GTkxMch0YIgAhdFQAayKuRlwAYXpMenwEEABiADMx8ZAAX0mgA&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/drawings/drawing-2025-01-13-00.26.22.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/drawings/drawing-2025-01-13-00.26.22.excalidraw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠== You can decompress Drawing data with the command palette: &amp;lsquo;Decompress current Excalidraw file&amp;rsquo;. For more info check in plugin settings under &amp;lsquo;Saving&amp;rsquo;&lt;/p>
&lt;h1 id="excalidraw-data">Excalidraw Data&lt;/h1>
&lt;h2 id="text-elements">Text Elements&lt;/h2>
&lt;p>%%&lt;/p>
&lt;h2 id="drawing">Drawing&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQBWGjoghH0EDihmbgBtcDBQMBKIEm4IADYAaxgAJQAWAE5mZg4ARwArAEFKo3a6gH0eOuwoVJLIWEQKgDNAhE8qflLM%0a%0abmceJKaVyBhuAEYdiAoSdW4&amp;#43;QshJBEJlaXOj62Vg7gAGI&amp;#43;YoUjZqhABhNj4NikCoAYn2CAhEImpU0uGw1WU3yEHGIAKBIIkX2szDguEC2RhkFmhHw&amp;#43;AAyrAXhJBB4iRBPt9fgB1U6SN7JD5fH4ISkwanoWnlI7Iu4ccK5NCHS4QNh47BqPZS17vGVI4RwACSxElqDyAF0jvNcJltdwOEIyUdCKisBVcDx6cjUeLWubLfgPghFtwABxNJLxfYAZl9%0a%0alSOjBY7C4aHDMsjrE4ADlOGIDkl9oGeAHg6rJmVmAARdJQH1oWYEMJHTTCVEAUWCmWyuotVplQjgxFwpeIB3iwcqlQDlVewYa&amp;#43;wu&amp;#43;aIHGq7rbU7YCLLqAr&amp;#43;CrMrgbBtOXylzABUmJTzh9ee8Ne4Ph42OxKzn2Z5vl8m173YA2D4vr7vN7f98P58PJ9b2lQ8wFPf9LgA0o4ECVoRHCXcT20fYVVQlV9maV59n2SoJxvV5tFeJpMyaVCeH2eJiIaJJ%0a%0afRAyZjyPQjxySMd4kHJIkgaX1gx4Bo4xPSCPkIfRLW7BAAAVYOYeDuFXdcp1CKAAX0fQ1B7cSt0JNAgO/PdwJKfVCgAXxWYpSnKCR4gATT&amp;#43;UikyaSoAAk4AAcWITRHNwapnE6AAhAB5OB6WmcR0Hmb0lnpNY0GcXM6N2dZNknUoTmIM4pQaI5rlue4pUeDhnlChiGW5X50WBMEoUhJBq3hRFnTRQEKqxcgOFxfEsnGI1SQpKlQoZQFhRlRkeVZNL%0a%0a2TQAiki5JleT6iohV7EVhDFCUDiOOV4UVA4VSOdUO21XUDSNchTV7NBW09GUbWIO0JFwYMnVrYhXRbD0vWXTj4niHhNiaX0IyYRMY1QeJAajZNU1CjCft9DjKmSyBCCLEtlzkhBq2ehsMk6t751KDsux7PsByHJIRxYpJiunWcLvemUgSXc6V0rDGN00ndtM/UCGKPD9AK/RG&amp;#43;f/R9X3i4XJigkogLAfiBJF7nD2wn99IM0XQLwsWz0EjcpPgo69%0a%0aOQtDUIw0jsNwoWCJ4V4eH9Cdcxo4N9lIppLeQ5pmiHX14j462GmDNj8OQ73Xa4hp4hVSpKPiAHDZQoMth4MdHYDmPMr0nX81YET8DEySJRk8tWaOXPPmU1SZEWDTt0QyZNaVyDjNM67mYgcTlHiTQkgAGX0TRZh8Dh8AAFQaWYAClh&amp;#43;HpNC2C&amp;#43;B&amp;#43;vCxZyGWGVotQDYmm2GUlXX3j4uONkDjlq4bjucYMvywq3hmnlysxdBwWq6FaoRfbUTvipsTa%0a%0avECS6mUSTJHyAUA06Q3xZIfSanJhqlTmvyfqi0np&amp;#43;EkK9daMpNoKlgDtYq&amp;#43;0tQ6nyFLCAxozpziuvmG6d10C4AaIgl0a06b4wEBFbgSQ97kQzMVBM0Zzj704ZDDgaZYw8QRhHG21oUbBGJkXNcbN8w1hRMQbGTZOaoEukcQmYlmYUVJsOV4gZN4lxtLTFR9MFxM1ksXdm24DYCx5irfmkwZa6R5vY6WYs7EKxsYeaar5VZgClvuV8W9nEeIcWLcW%0a%0av4XEBNArHDWkSZbp1AkkOJbjAnJNsWLHgaTDxCzACGLJkxj4lDySE1xGtea5N8f4mWytXzxHyUU8JSSSlRMPGDV8DR6lgGDD&amp;#43;Jpkt1ZXnCXU5pjiElK0qf0583iNZ/klpnaCetYK10YihY2WFMLm3rvRZCuYGivGaGOW2EcgxJyDpmKOtsLmBleNxf03S45sV2WxJoXEcI0SaAOU5mZ9i&amp;#43;lov2Z5TQgy&amp;#43;i4kHV4lR/ZU2&amp;#43;pUAO/tdmgpBeRW2VMK%0a%0aIBiTr9ByIKVS5l0f9CcEdKj&amp;#43;gzG0pCoKeJEXxTwCOcVaJBK2RRIMbF/QUsDMxb6pz/rvNDEOEcNsHKiMNtbH2yLKLcTBVC95pywz4qdt8scwZgwsQpacjMm9Xl7IRpmXRRLaVypJSxf6CMoVMtObmX0o4WGcXDkCzihSCIThDFTMM1s4bUt4qczVWx&amp;#43;y8SShOMMIL7agsNeHXZYLfSKozn04awlRKlnznBQI5jpEl0UuXNSVcOZLLfFMuuMy/FN0%0a%0aKGZJGrdMAUAoMPfALlNQAA0ADSdZNQNFssGQgAA1YYvkACKc8ZgSEXpFI4a9YrXKODvDYmYjipXSrwY&amp;#43;UhT65VQHc/MTwBTFRGmVJq98ICPyqvSOEr8GofxajiH&amp;#43;nV6QAN6nAhag0lrQNmmNSdU0wGwOAQg5aSCUF5TQfKbaypsHIlwUdAhRCEBmnoaQ8yto14QFwCkV9tC3SgY&amp;#43;poic44xy6NGZAXhIMYmlEwymfhoUBwcTDHDdDBZiwSLRhY2R%0a%0aWNGy4xIWozsGiSaDh0SOCiBiZz0YZouX4zN0ZHE3FYjNMtynjMVs&amp;#43;cJYnPGTAXfLCN0mGk/jvJ062SnMnDNfK6r8wYVNZufDpiC8n5kF0WVzJCKzjamywjhTZyzVlrLNjZt2WKna8UZUGHCwZnlBydqC9CuEOJetdkHW2yKvrOwDQjEFlRybh0HDhOGzyPnhrVpGnOecFmhX4wzZNBgK7qXTWZyYmwbyxUbiUEy&amp;#43;aW4VEcu28kzhfKdHEggAAsvE%0a%0aegIZm08GbdWlrAAxAEXaF4LD7avRKP1h2JXDuOiBqAMJZVnefObxUl1FUfQeh&amp;#43;VVn4yl3fVZ6G3oCtXar/U9PUgHwKvfSVdCA70TVQA&amp;#43;m9PJzuXtATKUUyC6FzY2l&amp;#43;zBP69p/sOvgk6JpgPM1UddCD9pKg0Jep98HWcmFSk4qGLMPtwbAwOLJjDQNox4YEct95PAwXZlI8jcjCBJEs0TTtmjONmxcfzOoynWiWPk1BXxLVkAaYM9KIzXjCb5LQQ5%0a%0atY0J6TglGdKVePTEtUsKbfJzko6mJctOfNhgpnTnAK7AE0DXWOilSdF0rH8OuNOJJ/JUTphSumdOl2AJXsvDfPnQyUAzyvHG296QZOZkAYImYQkVuzqyrMbLdvHBo1sVSYXDxHdjcdnZOo4u895PyjX8uthhBG3EIWsXFlbZHGZU5cUBUTkLuyML&amp;#43;3tr8ho/s1dgWDg5H5xz5VAp9v2Y14dNi5l4oGU1zzpcEVBQGeI5N/T9i70C3PhFUNm2eXDc%0a%0a2Kp&amp;#43;/4W9wyKNucY2ZYFzI3nuWVKpuINXLSeo9zOGl57wyFXm5kNbpWzo5JJD6ErXUTidZBiYGqC1gAWjwIEMBx7MiG3MCNsvFFIlHDJNjFL9GrgfONOcHpjOjlEtojFBgVMuutuupVE/DVDtnVG/I1BiJ/EdseoSN1IAvNDSJdo&amp;#43;rdhyHAdds9uQa9vmO9u&amp;#43;l9p&amp;#43;ltL9str&amp;#43;hqIDtpIBqdKDjzkjJDvdPEDDswfDqUGEMuNhACjxGbFAZhjtOjrj%0a%0alDNwDFs8r9N9FAWTqjHxlRrCLTkonjGBpAEzlIf2KziOOxJzhANzghtxmYlIoLj7sLsJj4u4m7ikrEqboeHrnbp0rXn4d4XXFbjmn4hMorr4QbpLsVrblESrors7mBCppEdrBLhAL7nGv7kfuZvZsHk5m6rxKhFchRKak7DSsstRPKs3pxLRGCgOLXlbFxDFpRBOFhFsKbG7NmMipvK7DxNmORMPqXkCpsBRK8N9K7BcqctRElkKkTtyjFiCl9DU%0a%0afiqbMPv2GASlmEWltGhJBvo4VvlzjvvlmmjXAHnbnrqrOfmAJViUAWmUK3LAH1s4MPL6N0BwBwJ0DwN3MwLMAAKpWSVDtDdztrDwAE9pAGUAgEQFo7byJQlYygTp3ZIHZRnwHBIGrbXyPZrr4ESBbrVQ7o4H7roGHrfwdTEH/xnZkGCgUFYk3azYPZZwwJ0HUkMGlBMGfb7zoLfocH/ZcF4I8HA7EJ2FkJCGUK&amp;#43;iiFw4mISGI5zYOqJZd5KGcB&amp;#43;i%0a%0aKkcB47Qwj4Ja4Sk7iIU6UbU7UbyKKJ0bCkEyMbM7mFkyWGhrTq2HGIMI2E8Z6lOHpEuFnEibuEO7RG3g5L25bFy4vigQdJBHek/hDIeGgQBljIa45ITjRk/ixmGaenpGZYi6B6WbrL5FxyhjvKeybw2yjhwwK62pipjgAo0QIxUwOxKop6kRmo/R8TO62ohi5iArhaar&amp;#43;jRY9HOp8TewRw4pL5pHZw7GxrSTxr7FJplx5Z74H5LY6RCwJle4X5VZ%0a%0aX4VDYD4B1BCDjySCYDMD4Djwf4IDjz7BCBNCSAf4tbdyEBglhQQkrz5gDoUpY4QAjq/T7yInpgLYIGY6XyoG0kHZ4nbayKEn7bEnoBfzHYnokHnrPo0mMm3r0lQJwVPZUkgJDSMErQfbwYsH5hcnsErK8kHT8l6i8Eg4gZ2nGFlCilQZNASlYXiGMJSFhhbAqgwn5gKFSjyE458L46ebUQsIBxaE6mU7ZYGn1i0b04mkmFmlmHaJs5BiDgcZGL0U%0a%0aOkOFU7OmCYSXZGO5Hgel&amp;#43;naVgRKahFVJuGCydK&amp;#43;FlbBmyxKau6enxFgABHKaWXlFFKdJa6e56VelgCJG&amp;#43;ga7hIm7hlXiJEoQa627BWWXOCJH&amp;#43;W2WOJ&amp;#43;VmU/g&amp;#43;VOXxWdIoRJWJkeXJl&amp;#43;6pl14WZoR5EWxupB4Zn5WGxjFQpebsq1k0T&amp;#43;jOVWwUpwzqo/IYRAr/T97aBE4DFE7so&amp;#43;wjjeb8rUTYRUzjieoxy94haji/Qeo2zkrNCtWmxRwhg2Y9lUx%0a%0abCfJ7Lh6PlOzexRwcSfJOwx55kOTWyIrGqz5cQAqbBvLD6h4ArERbBhjfKjhoYNFtXlnOzfKuwIxeZrIhbCqOrUQ/TD5fU2ovWFlQqjg/R7I&amp;#43;xabEpD5ArjihpAq3J7IDlJlDlr67F&amp;#43;6b4TlKRTmVz76FZaX643gJWLnXGX7mStxNCDCDAIBJhJi&amp;#43;S4D7lfFWQWDMiVo8DiTkjjzXmEK3lQm7wsLgG7whgzYwFoBPkolzorYoFrZ/mgWbpbZYFAV%0a%0a7ogU4lgWEFkl/z5hnrMmoXXpIXgJi33aIUSFMkoUvpvYYXMGck/Y7z4VqgA5EXHT/x8FkXKXkKQa4DdC0VGGIZYLYRcQ3IqmqEqlqnphCLjWhhiLk7CV6GQByJiV07KLKWmGaIWk6L9jjiKUCEqX87jmWKaVATuk&amp;#43;Jxkl3hUpHhU5JxGOJV2pFJkZGjlZFAS2q5FFW2bZV7JAoBzLW8oNmzUXLXL&amp;#43;i6JZh2xuxYSkqwrfJsLfScQ1XL5o0ZaY350%0a%0aKSTm7540zkZqRky5XE3FFDVYSCYCYANC4C&amp;#43;Qf6DB/C/FQB9bVB/B9aajiRCBQA8DOBGA829rAH9pTakYvm2bQH3qEToSfmomQImw/my0G3/Dy0AVK2wjAXyIHbgVEFa2lA63m2wWm3wVG0MkYPIUXr0FoVslW0cnfZsF227QO18kAaCn8GSWUW3Se2&amp;#43;Q&amp;#43;052SHMzkQYQDWbCcUQwgxPm4YqFSi/SbUz3FTaEUa6H6n6GGniXJ1SlSVEwyUWFjEZg%0a%0a2mGI5185OkHEulCZukmXi7RU&amp;#43;IANYQqyGNGXL4N36wZot2FWObFVybpUL3r5L1qWaOlw41r0FanGE116gMlXoTlZk3LkU0VAwDDxJDNohjxAICzAUAf6EAwANDlrNrdAwC&amp;#43;j&amp;#43;Rv182f0QFR2wkQHzYImzb7yS1LbS1XyTRoFq0K2YEEkq3wPy2IOa2nakF4MskEMCAwJUGQI0Fm3NN62IKrRYU22kNYIEX/pA4u2kVg6yN0MUJQZ/BMO0MsNomyF%0a%0ad15NsVcUgykZ8P4bnDkS0SCUx0aOYxSNJ2&amp;#43;3tjSVp2yUjhPL7y2nKXqPiPqWulePF16MeV2VOJ2NvMxW6VXHpXmOmZeNWPpk2Pt0D5D3NDeyBgDhJzNEo32Or6L2ZFY05ar3HH42eM6S57&amp;#43;O713EWToC1bXCkD7BQB1CFjdBWRhAuTYCVouTdCkCaD4DpMRQf1jYxTOxQEvnV6i2TopUyhFPfkygYllNy0VPQPVN7a1MVP1MnZQW60W0QMdPG1dO%0a%0azRyvoOQDskDMkMYJkOcGEVUPjNCnkXWhUW4Czywaw50VTOLNoCkTzUxbfLB1SjlEMDrNh1SjOwWxEQiNCWHM07HOGE52p3MaWmD1GMMyqO0P3PIv5gaXKJF26OfPGURnhKOUBX6aGUa6JGpv6MRmhUhU/hBlpu3iJFhk5tXgxnV2eFKxGXhFeXxmVtm6vgk1luTC242VfPtI/O1s5LvjhUpu&amp;#43;lJvltdvibAQ/gDu1sfPFZ11/MpmWNGzWPWa2NbL%0a%0aXIXIao8S0RbBypj3ey6J7wAq1GI3PWZi7KhjXIxZyrWrUQhYYQcSUz9EVnR4hYBwBhvKmoNnvIsRPsz2bVE6ezIYXFtXvVyqURESvlgrBb3IAoUSHLh4ThE6zV8RT0cTsvoSOqfLHuZjI57WUTAolX6qQFD7fQTWtVESZhOxcQsRvXd1FnIQRMwr5lQpApqHGrWqjgUQhgUeArGq0SdVESep7PA2jjqoxad2ArUTd5wsEIOMY1IvL3b6ovTkE2Ys%0a%0a3j2473k2FrBMdZ/BWSYClgcBsA8DtqdDKDBjKDYDYB1iH1MtLyQmZPrzfLWEvkZjct3aFOLawFgOYkQP/mK3iu4EIMa0ysUlNMwWsltOYP/3Ku4OhetMQAau6iDPavDMUN6tjPa2u2TP2ke32h1jzNGvDQykdEsRsTZNrPcPcDWFbP462zWYUpRbXQ&amp;#43;sPOaMJ0KLSOnOM7nPBs6L&amp;#43;imrZ2RuOlNcCZPPxti6Ju1vlKFsts6VhKdLlLfK&amp;#43;VjuTcdv%0a%0aJtjvuW/MEL/NN1xyt0gudEUrNlRxgp8fkQBwhZJxbDPJQox5uax7mZhgqo7IkQ4TV4AdjGeoF7WpJbsSSdCTpaOOyfOPY0prr1KfH7iybDYvqf3GfwwCFjDztz&amp;#43;SzAwBJDiR1gf5QCECdBGD6DxDNqvDWejb3nrAetC0bDQ0pSzbkRANzo1KLoy1ec4PYnNSbZVMvwSvvx1OBeQXBfQUXZhclQRd3bYPhfRd8&amp;#43;xfxeoI4W23Jf5g4LcHEXUNu1TP%0a%0aZf3R9Z5fKXWuoD/QxwYS8TTrsVzbOtVfQz4qPU0RUzR06HRuSOJ0Bu0NBtSjp1s7vJgp9f5emJ52A8F1xsjsGVl1Ftvgxm67xkLdayWVB&amp;#43;WUhGdLOW5LJVzfR8h&amp;#43;WVtsqbm6zfG5p9iwNvZLxk1u&amp;#43;&amp;#43;hW59y68tlLJVa4W6WUOuvhrdmOztnFAu5Vt2h6ypMpYS6KFkbFITkQve8TjHsIQshYZjcQQuJa7KBb9/XL/Ifv&amp;#43;wIzNBncyF3V6qhquycR%0a%0asoXWgrtGUT4qDFxzjj&amp;#43;x7XvIxxUwoq7UkqhxrIj5yqfLji6JRwuzhxUST6ZgA2kwQq6LAetXkQ9G8T&amp;#43;zETER7OdFDjHsXeSjciJqhCxw0RiZKNzAaho6d4Aw/sNhnxGszypTk5KR/rRGog2x5K8KUlN9F2TOpnYP0UFvPQRb/dG61vQ4gpxB4Ys9wFfLxJD0CYacJAdQYgJUDqDNpQg/kDgP5E0CYAOA3cBoECUqDYArORwEKIAWZa2dWW9nVlDk%0a%0a13jTZ8mRtWnqUH5ZI5POwrbzlA185s9/OnPI9A01lZoN&amp;#43;e12RVsLwF6i8Xs4vIhpq1YJJc/sKXUZgKQNY0N3e4GehvaBcjq8rWMpZOAf0Y6Os5slXV1vw14CgpW8I4EvA1wOaDc/WtvY0i4LkZMZHelzPjlnXDacZ&amp;#43;uqlESkLm0bPME29EUuq80Hb0Rh2cuCugH1iKW4Sh&amp;#43;lK3Nm2W5eIM24fRPgH0nYlA1uE7XwmFWaEdD22RQ6bhrCW69Cuk8Z%0a%0aHobWy1ydCpu9ldPmlQ2419AW87YFou1BZtUyUbHJ7hWU77XsdeAcMjqGDxQAoxqYxJ2AjCwhL8KUMg8zPDT7xHceIHEPiK92HxYQY4REMMAfx&amp;#43;Q1Up8VMNVKRFtj/J&amp;#43;wW/YlNhEf6UcuievHfiCmaDHIbYWeavCSmBooQCUuyT2EtS5ZxxTU4xYDjWWHBjUic&amp;#43;AtEbhGA4Ad08vKDPNHmPbL844VMQRtmSJyURO&amp;#43;JHX6OHB/YsJXY2ENaj922Lo0%0a%0aRyhcL3ivTcZosN6ZxWvFFTU4MDoeEgP4FAA/yORCwuAWYMPEGBQBfizIFrIQHHhwB/IjkBmpqAJ4ssiebLKOKTxGIudFCfLdzmgF&amp;#43;hqD7s5TZnpU23TaCiSUrLnuSW1qUkem8rRnnSSwYm0RevwVVvzwl4fopeQzOwbL0dr6t0uEzHOir0oSORPB9pTXkx12TEQIhZXDHFKH15BDtmGULzJYSHDakoh5AiAC1yNKaUU6nXJIRYRWQGi0hSlKZlGz%0a%0ak7OEchI3E8FUM8otCkildH8CMN97tioqdQ4oWLDL4B9yk1sDPqBF&amp;#43;hjilYfYwYXNyHETC5u3YuXHNyz51wphAfSKq5XjLjtfeARYpLMjSKbcsqdfE2A3wKoLCQ817RMUvx&amp;#43;QsIF8IWEcKPmHzkxICV3GAYng&amp;#43;qH9CyJRJ9iHCaJ9Fdk2YckR30hqhp&amp;#43;ievPZkBNpTgoqqKoX6J3QDBupQ0cpY4d8nN6h4A6NyWDmOHDiBgH&amp;#43;zsINJsGogUdPYs1U%0a%0aMI3h9g8dXyLCGjhx1GKbxxwFZLYCR3kpMUImH/cPHPUHIkCZOZAhsTYSOKKdqBh4WvHuNzRLlbi&amp;#43;9dAGwDrB9ZlAfwdoC1n0DjxMACAJIO2isgNBvgvxJIHAGcA6jJBeo6Qd/ThKkZ3yAjanktiUGQAhWVokVjaLFb2jVaNo6VtzxdEhcxe&amp;#43;tD0SYO9FmDfRhgywW&amp;#43;mIY2DuS9tUMZQzS4oMMuUYk1tqPNZiEvBjFM9ncM2brNuARvTMfjlDAwdg%0a%0a0lvMRoWOLFtdA25YgIZcxQihY3edzAboWNjZZUXmY3HsT6WD6vg5x/Y0dqknL458bcnUyygEWnG1sY&amp;#43;zbMSfXVmHN15h9fXbkqmdiHURi3yK7kOjjgORCMiNGVFCmdj3iPYnwvZCskojop&amp;#43;U9KClB3mRzyV/YZ3UcDdRA4gD6y6HI6pxEvYFl2&amp;#43;&amp;#43;QriX9x4ncishFAvkYJMPxARnKzbEURJJXI0hyQdYIwO2mYCaghAw8eIHgHaBsA/gzsFtGCn0%0a%0al3lVgxPZzrINHRQEzJ86CySHUFb091BHonzqz2wI1MOejovQUFzcm88LBnkn0Z6Mi6Po/RAU/pgly1YhTyGYU1Lo4IjGGt3aJrbmnFMlLxjCucHb5N8lDT&amp;#43;CMx3DN1nNiTjYQ6uSBURrqWiGiVWuJzIqfIwuaVjh6cBW5nWKql8SaprhUbo9OaGSYCh2SJqYkitmHgWp63ATCNO24LsLxJVOGDV3Qi8VrSNHL1sPldhQjn2MI17tXiSycQfU3EYf%0a%0aCRnZFZxuJXIscjyPk4fSqBX04/HrjnF/S96AM9AMyE6D&amp;#43;Rx4SYPrHACaB/BSAzIYMH1k6CVBNAdQVQHWGbRIz&amp;#43;ad4EWujL17GjVBpor8k60tEroYERMu0STPZ54FnJTo5BsSFdExdaZvk&amp;#43;mULx8m0F/JE8gMdhVKC4UdWIzeXs7R5nOC&amp;#43;Zbg&amp;#43;6NWjjEUVNe5sQGpqX8G0CcMGU0KK&amp;#43;PxRRx9mVvPiQVPVn29ipLOS0ubHJgVT9ZmQuOlo0Lq&amp;#43;9RM%0a%0ayVVsXZXCTbj/SOSUtq1PlzDDfKMZQaYMLvBBU&amp;#43;pPYpuRrDAWwKi&amp;#43;SsAYROxCIF99KsUetqH1AgIKlxa4&amp;#43;cVuMnF1w2hiC&amp;#43;MjAvG5ULp2MwzKnOxyoniJpWZVCP9HQjDgk8NE55GMVdjCpN4HqW7rShzDYQWypEIMHsnf6jgHYTwxvCOADhwiU8bEPjiUWmJCKKi/FLFCwjdlg1BOVVP4ZC0EYkRnq49ByKyI5wWwfYY4fCBiheFER92rfHMlTxKo%0a%0a9lCiCccmLITbzbdeyxIq6hHNHBKoHI44DPGoTnxjE2U8s7vi&amp;#43;IZGncFp8qfdvu29hooIOdjKTjHL2Lxz3pwPDxsnJbE0Dfpeaf6UEwkAtp9gbAKAI5D6wRwEATQRyMGF8j6ByQ4kKyPQDR71y7Ojc/eC&amp;#43;ViX5gsZaCk&amp;#43;B3PnQlNfyGg0VloP7k6DyZpJSmSgzHkeSrs7TBClFz8lui1WcXKwazOCl4UOZpQOXk7RIq8zleJrbuHvL9poAN2pECfB%0a%0awlSnmj0p0s4IWcnML2Kb5eUu&amp;#43;QYTiFljNZXXcmHBzDZTgI28Q3Or6xjbDdf5ACmuuCsFhNCJh7Y7BZ5XCRwq7KEfdcZCsDJqYupX4DBXnyUwUK5ctuCKp0izaIr4kXYwlalRRUzck&amp;#43;eCyPqGUqGaZNxmKhlRGWoU7ilMhC/Sg5VxUcqx2/hclRMN3FcrPKu49lUKrHbEqm2YquhQ7IYW18xpzCxYaHhHAj8VQm8ZqjHlOTrEGRuAi7ko0JF8dcBS%0a%0aNIiYRNOntFcIZisYmGBREd92GTseVNotiyVEJUZKBGogKHByo4RxEyiDcOv6lVuOlhFCLimDlCclUt0vVBxC9WnsaJiNKFHcLWo4QYswNDQiRDdXhzXk3EUvENSjhESYYcqd4ed0Q5WpN45VcmNwrP7NALq2woiI2UIh69BwNsTYERHdXyC8lLagca2sYjXJgOAKFdjsjgGzVicKoHjj3nTyEjrYzKCqk1WeST4vUn1bql5gzCsjnqY6u/oGEBQB%0a%0awk4V7LMjxyzU0QI8RE72Sd3E6mwkONEOFJsTSXPTY5WWL&amp;#43;a42yUnFclkwWvORHoFFLGB6AGALgFeCaB20zyToNWkqDkgjAlaJMNWlmDVo/g2nXAO0qkHOAEJzcq1RTyNrOsVBc2adDZO7mzRe5&amp;#43;JRyZKyHkUzXJsy9yTTIWWC9qCjMueX00wqbKgxtgnkvYLXkHLN5Ry7eZQhaynKCuZhcvD/3q6piuE5o65fcqzGoB3MFMM9WQka75T3lpYqZg7%0a%0axKmVj2qSBPWfaXrGZLv5PvIhf7xhXmzOxmm8BVvRcqWV4&amp;#43;llDoRiq8IB8rcK4koDUPFWNtChtbXwouJwWxVy6pClzWLEFV2U5uHmmWB0O82V9IFNKjJHSumRSrdYMquYUwvQininZ54zMjkWdlxbaUkLLYIOHDwex08NEm/iGCrU4QSczwqYoCPLxAoxiWiHCCCl5TZhp&amp;#43;ByX/tWq2mD5q8O08PDxFPkdqk4OsiGsIjEXwpSilMTlD/zLKvdyY7C%0a%0a0YrmDgEDhJ81yfsNhB9g9l6JqzWlFd0/6DhOU41MaqnBDBooE1H/KRRPhGK2qr5PSpLcREf6Woctfy2lGwtdg5hvoU2niCCidg94A1Axbqv2H7zEDL1GSt6fxMoE5LZye4QpNhBfUZzil6AbScwErQUAEA1c6tMoCSCDB9gjkZkNS0IDMhNQewUQfPHEE2dkZkAAdLtPzDdLrCfS4qChvRL4zbJoy&amp;#43;yeMuVoDyAu&amp;#43;G50YRupn4MJ5xgpZeRtWX&amp;#43;i%0a%0aNlkvJedLxDG7KwxEU4kFFNobRioMSYdjQjmXA/IxUyOATWmNBih1ghK6nor1XE0Fi3l/rD5TJqflO9LF&amp;#43;iGsWowNmqajZOjE2TLj03abhxqKnwtbsfUNCA&amp;#43;MfXtvuOGnhbRpkWhzAqrdTjheILVKFNotBQP8vM8cGiDNR1S0Qpi5yfbQ7F7x8piUDI7suxGbyRYo5EhdJU4y&amp;#43;23rcav2jNM5Sd1DScWkkiAH8DgAcBXgxaYMIWE0DVAoALkdoAgC%0a%0asjs0jAdYWYIywx3dobyEgnHRAAHQPSEoEBZtYhsnTIkzRvAJ8uhutEboHJEyh0XhumUEbR5RG5nSRtGhs7aSTM&amp;#43;eVzsDE87gxdGzmQ4IV5OCleWXE1mk0FmWthZnG0OWWTl18blsiuoTdmXzJCJcpysyTZruk32lZNz84cBODzLvzlNRur7SbtyFm6OxZs23SGV02wKckjmtsTkhZX&amp;#43;kEVWKxA/GRFXvMgFwCpzWOx6HV9XdMW8aZ7rjza9vYRwm%0a%0a/n2o1VSp6q71BtZd2vb/QTu71YrUcKXVJwh6f0e6pdwf44pR61ecDo3lOS2wEaRwj6j/pMURZbpMWHvEOGO2Wx3tw5T7TeoElJy/tAyFTjZXTm4tW4rwdUZoBgDdxNQnQYgCcG&amp;#43;L0AmgRgX0O0F6C5A29w2TvQ3OIiGiTkCgydFARQ2/1x9dkyfdTtgakzB5G6FyQzoX1M6WmLOxZV6OWVPp5lr6FmdzsgDLyZe/O8KdzMimRiRdJrcSBLulJSF5%0a%0aUhA4jEgQN5jp4w58zHOHk&amp;#43;FB1Iht81TffLt6Aqv9uujbT8n/0UUVNQB0FRprs0NTSVOm0CHbJoWZ84qlK8zd1KGP9HAtPR0zT4TJVh8A&amp;#43;PbGzUbi/BzG219UpcSY2MYmxQtMbR2fFti1Ls0yBBl2RcOIjCJhiDnRqjtpD3D0dk1E22JNIpR3HSIQeiYp8kpHwd3kjwx7eVufE3isIxw/ot7IeHhw2Oa1XlLHuXY/I8Bg6gYrREzBHs2OMcTxc0Qc%0a%0agKU48EWO4y8Jv4pbdq5qPVFCniz4TFiPRFhNtQAnPc&amp;#43;IKegQGnoB4Z6lD2e2VT42JR&amp;#43;NndBezORAF9BQBqgao7ALBs0DV5q09AYMLdEGC/FMAogaDYZM1zGT&amp;#43;9SBPpcPsGX9LkCpTCnYTM0HEyadky2fRBUCOEI5lxGygqvogbr7KN1tNmdst1b7715KRw5cfpY1QZO0Z&amp;#43;9rlkc0SbxpDKEaxUUfK7mT3TwMGWc7EJQMSUx5kCTRrtiEf6KKdR0q%0a%0afEupgArKpn8iRo2J/ntHljOC2Y/mygMTsAisB95jHxQXpniFem23Gge&amp;#43;a1IU&amp;#43;lfAY6BEzMywYDGx4zJkSPFyqotLC7Y/scS3LI2EuicfihCGrhqJUxOHVDhAcg3a3THfFhCRHoPcbxUe0iOKGkZFnThE064nMxDuGhw8BZ3YfuMQbxE5oOSqECfDCup&amp;#43;x3h7OULNmWm2FFOJqNSk7xNU2Z73G96lQ8VhvDqHClwOt9dABRCzA6w7QceNgFIDEBu4%0a%0alQfAM8j&amp;#43;CqiQZMDKYJjvBJ2GOlve58nCSJ0FNp0KGuAh4cp1eHVTPh2nboLn1anUGHO2LqzvCPs7x5RpoKTRvZlmmGNivTLhRVF24A6gmRhiqw1lRs4xNZ8j08Jvv08U4Ye1P3S8tf3Bm1ZNRz5YkLk0vzU4zrJTc0cANfzgDzYpY6bImGNSxjls8vpbomGFGIymB&amp;#43;FTUM0uAKahOBg8VsYu0JbdjdeTvl60jweK5UZWtPNmB4gd4kJ7Z5AaiMmr%0a%0aMjiIX1SAlMVtjjbQ20KS5fCk7UURnx&amp;#43;/cwm9qenyH09ihn7beYzTWWrwj58Sc&amp;#43;bFHoBCApAFyFAErRNB/IHYQsMwGrRQB&amp;#43;448CgC1mDDto7TMoMQRBex0NzKIjh0yfBZxmem6eipjDbfBVN9y1TM&amp;#43;/w8PMabBHemepgi2voo3RGqNsR2ULzt32JGuZB&amp;#43;jeUfuosmtyQ9FhkDKSm3wTIJ2ONi1w29PBDaImKH4d63V1VGpNMjT/TrojPJ4mjJcKS3%0a%0aGbU21S8h5u2Bb4V6OULBjEwjoTpZli7jFjimdqQHyQXCTqzPuQy3sflUHGLteiVVWqhIgzan2VVAMDciJxr8WLjEPXmexfZjE9kWI/lGdOhZjhX5nEAM8sjqJmqs8Civ5KFfPMfaIr1168/yNB5Kw9cBShK5oYqDVAGg/kJIL5FeDtBQZw8ZkFEz6wf4KAMAKyIpKshimUZEBadE52KhYzXDI&amp;#43;snc1Yn0YF2r6F9U11fp0jztTi&amp;#43;kI8vsNoMzBru%0a%0aFjfYFOsGkXTTq8/ZZReik2ncAoJe08w0K7wCzFxqr07fs2vKEhNQabMn/oqOvLDr7&amp;#43;462GdOuVjg54l6Mx/M96tGmxYKtM50YWM2yJMFs&amp;#43;S&amp;#43;AtUvgKgqExuuADYyq1nGFO3Qg02ZBstnsqrIxtYBOZTizQ8M2mCRRDuH4pq1RI47eGvBTspatsqSoidyzCUj5t29X7uFapORXE5tJrxtLhzQaHC9rwckGzXEjVBiAwYOoC1lIDkhNAzaegIWA4Ck%0a%0aAWs/kQYOLdx3rAL&amp;#43;8GmWwUzgJuHrCyF5U2MrQvx04GZMjU0gx6uGn&amp;#43;r&amp;#43;tg00NctrG3qN2&amp;#43;2jaFMmvmnGNs141tbd&amp;#43;KLWExVllVDxtYvy6LRLt7iqFGl2UiWEisoM37ZDMB2GMXyisS/PLWKaw7AB2M48yjuJmk7sCtO4ZuhXgKKhiVOOypft1qW/5llLXO9arattE7JQQs9pgC3gH3NZZpWE9blxjC/N0SVzQH16nBbWkUx8Yx1OLPiPokJZqR9M%0a%0aOlXZ3ZV7uvKksMUfRaLhGEbYf7Em27D5pORItU1tczfDN1xKYrRqmYij4Bwqu5dsttG3DExwveRoy4vupN8cOveIc1Y&amp;#43;TGcR2cMIgGqHj2TyoBU4s3/aUamKD9KtlKOVI6gA5vUKYIqMjo9WrUECQHAAp4V6yieVU2i5a7/mGnMyMdyy1KdjqRB2rb9lFAYfszHCJwo5jUOsmamau&amp;#43;icpPkCNn6JsBnqAohwIKJJTh036t4X29w82O8hwgMpRU5P%0a%0aDtTCI8WJ4FUrycm/C0pt93qbNJ6K2cSFiM2Amr6pKxAGDCah2g4kJoPoFmCSBSA3QFrC5FDSdBqgmQceA0GUDb3u9iULpYlFK6D67s1hNw1AVPt0ysNgFVW51YIIa277z9hVvqY9H32X7MRrfXEfGuf3IAey8MZaaY3WmZmuAOuXbYWaFdu&amp;#43;&amp;#43;/UE&amp;#43;tfAdSytrQm040cgRjwODrX26o1rpOuoORLP&amp;#43;liB2QN0ZCI70lto/pRodW6KH7D5NvgqTNtj%0a%0awkyBrAxI&amp;#43;ZcEKyF&amp;#43;uf&amp;#43;aMd&amp;#43;t5nBhoC6R7bM4eTBuXnlXwvQ7RUx28V6KqldpmEdO41Xt4Cs81JIeDCPc6d5h/q9yTyv6hYsGV3ZVCoDDcD8jiLbndBsdrZ8O0xGvDAH5wj/HAda5CGFDTD51LWyE7gDTOqiK8RS6nCNZi&amp;#43;TzUkxiarjWBzxRMpLHFRV2KGgc6CMYURj5dm5Zdij4nUJ3ExTY56qFlNzYsjFCd2xs7tq7N4mxb4zMUwmI4ZeCp8M&amp;#43;%0a%0a8Zl5ZUH1GOH8Nd6uzkOYYPzOjZVSkTpt6hMy3ajJMUiHI&amp;#43;N7MCHGfbZOjtVEcFE1SThUQTV9Rf19RHCF12qXuA8esqkOQ/VN4PurouOFVWEikTXmP2DbCJNwx3&amp;#43;8Jtyz8bKKp5gJR1biH49DB8Ux6ZZc9l64izlVZDYVzkQobmdRX0WD61oTeAwhA7mbNIQgIWBgCaBK0UARwHAF&amp;#43;J1A2ALkNrM2nEjtFrnA6SU3ILguKDkNI&amp;#43;lrQqZGVn2qdF9o%0a%0asVfb8M/OsLmtnC0RYfvTyIjwL9Cq/dGvxG&amp;#43;dULgXckaF2pHAVNF//Mi8BUHzltZyMcNi9v0E2XWgmzixDU3MRwX9sda6yS9DMoPhL3&amp;#43;n5SlqgISXLrODzRjJejsdGUDirnl&amp;#43;OIFdgA&amp;#43;H8xmRzMepWWeXr4CjoV9brbCuJhoVSzVZUc&amp;#43;kOBHEwoKma8rPxluHRnpWAgZwVBVAvbYsYSF/ea7iczPYsYX57bEdDYvgC&amp;#43;MmZ&amp;#43;ldJemVSsZL0TVNfJUk%0a%0aDmdw8TneMvKPbXhdq2EkvBpvIOIqHQ96BIkVnJvHTljvpnSYlZ4nUtyIYs2S4tvcfkve0y15fDgEDArp7uN6ZbORvCLS/FKxRqu0XWwXYNsddiRwBQIwAUsioMEHsG1hwqXo&amp;#43;b2P15BSQpGUSEqt39eWTQdbLu7N7rZYSeAS&amp;#43;IzRP2Jniqe6IVpGj3Zg/2CXV4MweAzlE4fMxrE33U1Ldue7GpbeuIdVUp2Cnf7bb/QInMGqU7O7TeqiM2/6AOC8%0a%0aV3urtMqYrd64WJZlv&amp;#43;Lb0OD8MpSLFcwDsDnLdPw4VvUlPdn91TedI03Ppd576&amp;#43;gtA&amp;#43;F7EPMATUORHaAwBMA9ACgPEDYAIBJAsoyoKQHDwYeKuho1N5AFlsNWAhXcpW7iW8OX3fDdOqj388Nu62p5ZGg27R5BcjWwXY1nfZC4gDQvBdvNbj1vIReVpAH3gz2BPjceYvb9BH43pjjlI7Jp0Ss&amp;#43;T86UU/IOzm5L1T7hEW/WFNP9hOl9dd0/4P7rfRtl%0a%0a32yocW6dXE7RpCZ/GHgK5u3nhh0Ugy&amp;#43;5JfPQr/oZn&amp;#43;rbZ/H1EryYFF9KGp9LKiRBLzLCtzheZYWuGBVa8bp1mVHjZoyzsaWGHC&amp;#43;F&amp;#43;KH5cVtAFxK3LcxUFI&amp;#43;Qx8d87j1EUCTUUlSTvkbj1QCc2WYpexQ8twglLjZzFWWj2CNyHxjbKpTVytZRAOu39b5bBatezKaRmBYikj63YLS1HAJhReYuIyWYx9B0aryLTz1Y4xxDUOGI1Dqacdp17MdQb94T%0a%0aYv7xmxBqEryH0RPCuEH6gFkuWoIz0SU2mebTOvdpebUm/7gKJeMCuMs7MmIOhAAcAmoNgCVAgwOPB1gHAL6AIe4kH1jqARhhwD0A1QCCA2GWOoTwS2vAI4aYys2M84j6zrG86TyHzqBZkeCvphaam1HjqZL6dHur5P2KvsNbGmWyivL0aFtofpUWf9gi5i2/HhrwykXqLeJD0/gnco4uPFOzhnS31D7Z8WiDgJakugdt771G9rCozpCgKi0b0ueD%0a%0aoy4QGb4CZrhUiRFq65sPSBrhW4hfjgpa4LDhGRa4HgaF7F&amp;#43;zujOx4G&amp;#43;dg2Z52UEogKqqdTsyjpqFIqUYx43/KeyioLHD7BVUY7tHBXMu1A9QieMcEOARyeiiqgMS0cFtKteekOSYr4MzggH92d6gB60&amp;#43;ECv9oM&amp;#43;LJpsBQA7aEkBKiWPPEB1Am4MGBagswGwBsA3QFc40BlVnQE72bLI4ZwEWMqRiIW0vp4bK22GtPpOS6tkr4GCogbSTeSDHv86E%0a%0aMzHjr6seE1ux5JG01rC6/2EONbYf4FvlITIcQPvb43K7FpA6qkwQtPyZ0trHJ7AqNvIYFKeXvip6mBg4Jg4WBMZkH64OCZrYGGe8KnYG10xmjH6&amp;#43;8DmqI50CJfq4GyOYWta5u6RXiZYD4KKNrxjuFjo8g0SLCP1S4obEMPiZ4OIQ5x3UDyBD5eYUTtmAOQAYA3jCIV2t7IDgRwsm6lGFqKxTyWF6vAGvSVQVnoLOXjM7hn4T5mB7oA2AO0DVA9AM%0a%0aoCFgQgK8C/EzgC5DI4moDhDVAkgEYAwY5VuBYd6VVnZyOccJNOhYyeHoMpIW5Oi1ZM8qFirby&amp;#43;GFlMp8Byvpr4AuA1iIE2hWwaC6Ly4Lnr47K&amp;#43;wVNYWmXHlaZzW1tlBqKBCUkhgB6C&amp;#43;NcFsWPrrb5QOzCB5hHGbIUjAIOxLkdYOmCQuaSlSZMLrJYOkltp5DcNgZ5RMuWmpCEgKPKo4FdGzQrbjJ&amp;#43;EZFbhp&amp;#43;J&amp;#43;MWEwqiRMa7PgyKnmEghiXtMYKW%0a%0ahYQHzQhEIa&amp;#43;D6WLukiH4GBdqiHIQm5sHLD4TWjxzewKAnojKKuEChAj0D/GVS/8nqIiJ9kl/EdRjEgJpIbV4E2u0TWwOqDSFEYM/KUGHhDJuNReWOvDIYNkJih3goc07q9ruq0WF67EQzwiijneixEorMUBAnZb/Cy7BxLXIVaqGjuqbIuerk&amp;#43;iLJUF/uA9ryFAQeuPFYrOiVniwQATQGuRgaw8FZB9YpAB/hCClaH1jdwHAPsC&amp;#43;QygNUDWGaoe3%0a%0aq80kFlIKxWpQE5xvkzAZL5hhhHuAzEepofMEdWiwZR5WhKwQ6F0y6wYRZRGWvuIGm2kgXvoUWMgVbYIumgOcHMwhAoU7O2vGkqSNWYDu7Y8UAzi7Dyo&amp;#43;1pUbxh/tomEQA4ZpWL9g4SjS6WBV1oCHqawIfp7&amp;#43;eBDrH75h&amp;#43;lFy65&amp;#43;BrpI702&amp;#43;fqn5SuRSGWEmuGsM4G2yHnuAohEA7LX4WMCjiiHKO8qLXYDmdWmch7c3jh7Cgo6AoGDv8zFFhATUS%0a%0acC2RLqxOC8I0iC1KahrWplp9zNa8UbmTv886s8J&amp;#43;YWIUcYSoWKCVrN4pvD9CzUzqviiN4yONfKvcqKC3z2sz7P&amp;#43;FFkchhT6zOVPvM41BGaADqqcgoYXqzAmoPoCkAoocvYsC2AL5DZgQgMyDkg3cNgClowvnJF96u8LmCtyqGjRH7w7AddicBfnN84kkbETzyMeXkoC50yJ0eqyb6zobr4f2boQb4cehwV6FwuPoQi7YA4kQcDUhjeNmA36skVL5%0a%0a3BMsh9TyK3sLxZu&amp;#43;zXAmEayXwaVJsQFvPpH/BrwfGbGROYXYHtiLngiqGu9njHz2eVkmH6&amp;#43;82MREjl85SLUKDCWuC5624dYS7jwh7YXyqp2VnhMJjCqMb4R&amp;#43;BgCnq4IhmxsEFN&amp;#43;zZgOEccH/NVRRBS3p0QBwwHCGjEYbOEur1q1sCGjUSN7F5hKofEAt7SEFKPqhhhAAYliD0XEJDSbAA/suwviE4Moy6qANH6iHILZFKgCUw/uAHTmuKHBy&amp;#43;y1K%0a%0aJ2TgcisdNoh6n3rShEY3dNN5Da/TrPwhgUcP46Dq1KImr7&amp;#43;0KPJShYdsCFj0SvliaivUY9FmqooPZIOoCKZQdJxXqhYtT7KGMVqfgNBGARHC4ALWIMB1gSYJWj8m/kLgHtoUAGwC&amp;#43;g1QC5CzAXAEMEahIwTc5oAuyIaIyxzhq5wk6&amp;#43;HoaGK2swbL6keu2GrasRt9uxE8RtoY/ZAumwZdHbB10bsH6&amp;#43;hvpx7G&amp;#43;3oXIGe0RtnBiaRB8udKNqsnncFH%0a%0awHFuqSCG1IWtZkYakV/Ie&amp;#43;mkdpEvyGUWmF/B4dvDE3Wxsu2o4xBYU2F1S5kVCF2BFmml4J2cIfSp2R6uN0aHg3gXFaeR0BvGQuRq4mLDuRKXjZ6DCIRC55eBuXkDYd0BXr47j0dan46nayjvhLlecMGvwT43soSYT4N1OwpyxW/mHEJwV2i1RuoKOI8Jkozpi2Tbmn1LRA8QCcAlEaq9qIBL7cJBkGh0GQaH348QORqe6l4hyIBK42zQOoo9e57k%0a%0aEoE&amp;#43;PxstohOXrp1rxRNmPcKSGK7HUTjUa4RihTmi3rhD&amp;#43;Y6hAnEXmXIWBHVByAUBAK4wooNEsmP6kmDMAGkpqDKA48M2i/EMAHWCQeDQLlbksGRjXEkRmoVIJDuBOvc5URSGjRHDK9Ee85tWTEV84sRh0QPHHRY8ZPJcRGvkPGOh2vpPEQud0TPGPRc8c9ELx9oFwENQ8UhfqaIpqM8LUobtr9G0RDvuaKnsVasiZq6h8Qp7gxj8iYGlS4ck&amp;#43;QB&amp;#43;%0a%0aHvNfEh&amp;#43;JkRy7oGdgSmz2e5lOTGme1lO/G3gafpyq8qqrrQ52BWuOAklAWuCAmzJlMXTEFs4yYGRwJ7McDahBdrtlTyorioyjO8K1PygBqVECnhqEyYmdx/I4iXiGrahyZ2Y3Ux/koy12Y1FPQd4HOOtQUc94knB4oNmGWSduiapco5kOyeU6dm7/HmSGomqO9RTqq7jvzpBuJtLqKKETtCxJK3KLeydkbRFagJq1/vjpyWYBnAGdRoEd1FIBdNnb%0a%0ap7gk3KPYsmH&amp;#43;B/i/4&amp;#43;wJWivAvkA0CEA9SoWDVA8QJ0CaAygOJBoey0agA0QTcc6x9KNEWwFGhMvizxmh3ARaE32&amp;#43;gtEmrBw8fR7cRuprxEkW79mRbm2MLk9HHBIpNbazA70QIxakUHKRD&amp;#43;CgQpJ7QwvRM0Q5BLwSrJvBJYp74dcjSZWIkYUZpfHYOAITp4MuSMY/Ep&amp;#43;1uN/ElAlfh6kgexDmLA&amp;#43;poBs7BrJvYSEEe6WyVbBeq7ZqyKoY2EECihxG%0a%0a2p8LfRO7IOAwCEsRIZsM5MEODwk5mPxRw0j4oCZeYDRB1EgR&amp;#43;iQSngRvUbXzAepiUzaF6iLnUDdA7aH1iDA4kGlYUAbAM0oBg48M4DMATQLbZERthl4mGS&amp;#43;wvBp8p9Vu3LAMf0U1ZEeISefaipvcQdHq0vzoPHypMqcIGjx0qYkl8RSqWbZSBqqRknqprggi6DBL9svH22FwaRwWWKUmxZOx4YfcFCaIAg&amp;#43;7tE&amp;#43;YrUnu&amp;#43;9SbUZB2L8rPjmBtYk6n%0a%0atJrqZ5rIxaMV6mx8KrmZrUOlkfCrmUWMVmwDJeMS54BE8yUMI/WjYW5FMOuSGn4IqAyd5TDJpngnztI&amp;#43;GdbIEx1MYML9KgrsRmQJ/UoAlUZQWqzE1mdfvl7N&amp;#43;oeNxB2OukRLFnUb8sU612MIj8bdUgtFmQh6UcHshf8&amp;#43;IlrGtmKxAPwzUK7P95EGXrD1RJQ4nN15Nk5ZM04bs3lrenbJMUYFaIiyxP/62oTWnrweY5alS6zUlIkGCveGYGcLkRFR%0a%0aK3xnsdXGhhZSnyDdSROp7kNR72AItCYk4L3IU5VEJHHsjj8XsHiYOcPidrHAcKQaurUJzccSiJwtyHDakcr2vGl4cA4CcJwcyKbcLla8pP&amp;#43;HTh5hFE6nubsuLIc4N1LVoho1/gopnSy1H6i3It4naoMiPVI2QlppAmWkuMPUUYl7gzlAuT56UPHBF1gvoJIDMgHAEYANKckg0DNotwNUDVozaDADMgxAO0Bcp8soaL8ZvSgUwS0&amp;#43;Hq85CpXcSKlh%0a%0aJ5oX3GRJkqVTIXRsSWdGTyB2QvKJcyqXulG&amp;#43;QGIemCE1tuyD&amp;#43;h&amp;#43;STszyU0LPkY3Ba0v9HBCl0phywS5qW/pIOJ8Z&amp;#43;k/6LVA6m/pGYc6lZhQIW6mmRkOQ3CR&amp;#43;LYdH4EZ/qRZ5qWbDq2FiwTMdUi0KiOUrDo5d1hhnx&amp;#43;AycuIOR9lIa445/Dry5qW4SIGlKwMZHBkIq3YUEGhpHMf2Et&amp;#43;/Tmqg38AWACgIayyOuxkw5mYyL1kddn9CyEQuS&amp;#43;z0ST7A%0a%0aWogO7XqaiJqndBSG4mU6hm5KoK3h94KKxbrgld0tUcP5&amp;#43;w4/t4zmodRLWRCc0Jg0Sk&amp;#43;y7EHoF41eNXjcQNXEgkRwPwuG4gCaMuZgHShqGwjNAxBgIYjujKBWp9&amp;#43;XOUXb4S/0IPymK2ZPCgzhHeHVksU5arokVBTWUDw8hlaV4zYxokmSkYB8HpWjMgzANUDYAcAHWDxAlhuXJJAuAB/gjwFAFvYeJ79AZL0BKEFLZwkY6YoJTB&amp;#43;HttHrZKFnMGfO%0a%0a22YumHYy6VKkcRh2XaEbp3eadkmmAkV/ZCRM1rIEnBCLleT3Z&amp;#43;8jKTaKzBg853pBwCUn3pPFKiihOMcD9n8WVqf9m2plpOngOO/yo6mg5/6dmGAZ7qRpbIxZQjCrghIriy6eeUflAmvxkGea7VhtnosmJ&amp;#43;tKrDlI58OcXyNCbng/koZyduUhU52aB/mBB9CozkbJ4acV71mUBVzHh4JGAHnjqvyBQZJi7KExIoYiqoSieuLyBhDj0NEk8pvCx2mY%0a%0aEP8LEMBwgChQcnhz&amp;#43;MWKGiYC3sYQJRO5yLib7uJ/lKgV257GOp5kLRHdpY2N7Ptytk&amp;#43;ZHpmAcm4c0S7aw9COnWqXFl3RWW7qmWRsoQ&amp;#43;LN6qxhRLhwXCxJgNTUorOa9xoiQ2kxzsIjeFizfupaXHKIBFaa1nVsN4KWzJ5L5p0DAauAPQCYAlaIIAIR9kPEC/EiLvoCagDYHNnz5MFhAQwxS2YoJy2cpqRg7RPcqEmt5YqTtlLpywV3kJJnEUdmzym%0a%0a6ePFOhZ2bumCR0gaPkiRntJ0Dapy2DmorsJ8rwzFGyoOdJAxG&amp;#43;QYFb5EMcmEWEY6m24H5IOVp5g53vLdagGLnrgq35emj2xwZyrgHxa4eesnadFyVESrJUebOXy&amp;#43;ESGXjHAF3qcMZLJtGWAVyODGf5GIJbqCeZhw/1OWoxBMNG9zEGU0isgIctRJnT4ST4ulnDuoYOVSeo8suW73IgJiPRdeC6tUnCKNBW7nh4UiT8aXi30d0TXypqDmm&amp;#43;uAzmTD%0a%0aPcpvC8goCtyHKhlEqWuhAkcdjiHo/QoPhcgpBUeZyFGF3ITebx5xicB4DRtaSybKAskqqT9AE8OJCag3cM2jtAvkJIBsAlaJUDdw&amp;#43;PGXkZMZEdwW&amp;#43;JWTBMEFM&amp;#43;oZOmCpncc3ndx86eR6K&amp;#43;R0ftkxJ&amp;#43;FiPHnRMSQPkSBCRu6Hf2ltmkbW2s4FPlnK86CsQbsoDgvnpi28UsyDqjWmUXqRf2ZUUKMu&amp;#43;aRykYrSbziGRLqSflPx98Z0kfx1nhH4jGVp%0a%0aWpb4qWMY7pYxvRVjF2lyVJfn9FbYWpZVm5fDkiYZj1oMWgFaljhl0ZgNuskIJTGSGph4OKPih94hIj8onc3at8jwCiavFiWZHrCfxwCY1B3h5ZxyAyhFO1qjFGKxpBWGC5g&amp;#43;KCE5mwsApyg&amp;#43;wE5jk7o2vENsKfURahqqAmFEk04cQNwlE5XiV&amp;#43;j7ChC3Cvu7xqr3ucWiJtqEliwcNIb2RrIVBXO4fUG7ONRYpHalfIicSSm1rMixaQYWNZiJQYlx%0a%0a5phXXDO4aAV1mtwxAC1iYAdYOPAtYjkBwCSAnQEmD9AzaNUCGcaOp0B0W1JaRGGSETI4Y4eQ&amp;#43;m3FymjeWyUMRLeVwELpESVEU8ljOgdn8lsqfEmrpW6Yqkuht0eRbpFRwWPkapCLq3qnpFrCvHKB9sFHgbxMkSDDWZEnpoGhQqZRNQ2&amp;#43;B8b7aal7wdammkO&amp;#43;cOAIofhbzjphDRcfkQ5p&amp;#43;VDnvM1&amp;#43;cjntF/&amp;#43;TaWAFPSQ2HJ2crtl7LJkyc1KGukxQ%0a%0a578uSlnXCoxzmr9a&amp;#43;ByVAER2yvkQCzIhSxX2GbJ0BSoEnJ3sY9RcWpePYp1E2iohzLu&amp;#43;lShB&amp;#43;yuIYIqllaeDKjdU9ilmUhZyNlPQumNeExQ/BY1JvCABrCUCLVlvrmqibUaGFNK7Mwbj6ilGsEoVEbFvrr2oF4AimCgTefVNIRoi4xCNTiFvlXVSxVV&amp;#43;qqpDlTEMnDPIK3l8hESsARyF4pMeSiwmFRKUUi14acmYkYBvxDwAs0hAH8C4A&amp;#43;wANjF6%0a%0aXWE3qP0FAN0BPlA6bQG6ileXmUURU2P4k8sR9vh6slM6RwFhFAFVyW8BUSbyWJFPeQKXHZQpVdEpFQ&amp;#43;WKUj5iFZkX2g&amp;#43;gDkW5aUYUD7&amp;#43;C4nuUnCauAvKj4megaDFHMWpQ0mQx1RXSi/B9RYH7MViMaxVdJjiNBnoZfRaRndFTnr9XgKDpclQcVydkAoauXlDZGyw6GaTkAJ5Od/mSunYURk9FwlQ7rI1EGQjlI1olZ/GSVN&amp;#43;WhkgZOEE5G5I0NQX%0a%0a7xkRNXT5cOQNal7BlWdgsU2ualbmnHuyWaRzTe3utew7qV7ocijEddq/y0iJRGDQI07wuo4USzVGDR2qEVfa43acafByZ4G7NFgwwnmONq&amp;#43;YNISbl9C2KQPhgoXsTSEWwFjplG2odlv2ZNEbEGZVOwEqEPj2wIbs9m&amp;#43;5tqDuwI&amp;#43;3EA8aVk4eAVp1qoPkqoHcAhhGrfQxQQM7YxutYSi7qDEif5paKAv8jxRyWkNoOVplnHF8QxXFByewkbsyJ1En%0a%0aycxQ1Whyd9DSxpKOwpjE11ExT7IcWF9SJZTuT1QZ4vWiO6BwLimM5bebyKj76FFNgiXXqm5ciXblRSPOQChGJRgFQAFAN3AwAzAC5CTZ&amp;#43;wPPbNoh5fEB30gwPoDiQfoT1XDBfVaMGoa1eVkx1Wigm5yDKqmHjK/ls6SR6clPAZaFzVoFXyVhGS1QkX95q1YPmil90QcGehB6UhVHpntNXFoVeSdPlSEtrF5g5BL2aGGGphFdwBYoG6udaXV18cfH%0a%0aalWsrvl0iF1s9UWpCMc0V3xOKXDUZ2v8dA18uMORSrgZ4CiTGEZ5bCg2TIKyVeCk1YAL0VYNvRUhljCuGWX4Sqf&amp;#43;TRm41KNWAkhpNNapXhl6lbAXoJxXMhjkQkhjFgHhwEv8gYS7RFtKcZX3lP4wsiPhNRiZmmWOpjuPwahLP&amp;#43;F2it65G02it4&amp;#43;V3OTuH2qG6v1QdlWCUw2dU&amp;#43;yK6ZDE0cLeICKuBTo6&amp;#43;utTlxbcZneDrVtUM9GChT8BAjVx5q5T%0a%0aj2QQiR8rvww&amp;#43;ZUcSZFpInrLWjgREixCzej4VM5FVhhXXXlphieVXa4wHtBHoBL5s2jmGLkHACDASQEICVASYFkDXlVkO0DxA3QM4AUA3VfmAVWtcVPX1xc2L1zwaT5H0orZQRTMHslm2eEWAVuGksEgVQRmBV71EFfaGxF6yhPFrVJ9Wknn1V2ZfU3ZCLmwB7VV/ItQOVBFXb4v179TawB0fCjGFkV&amp;#43;gRRUVFt1VUWANGAsA1tJoDTfGm6EDa0W9%0a%0aJJnt9W1ssGWg1ml8Kl6W/WOSEQ1k52NXfmUZvvDTlE5gOlTV5eixTQ05OtrA8JHUJRC&amp;#43;z98InDFFrEU1OI3I2RGCrrOuO/CdJY2F1MoxyxlqBkFXFR1EWqplLEFChKoYqP6pT09as96JY3BnY7gmPKdvxxQljSagwm44SVRqFqxHMRdeuEKuU11xVRuUBNW5UE3zkI9tVUvmgwMGAUAmoIsAl6dgHACzAxAHACVolaB/i4Aj&amp;#43;EIBzZsjT4VyCjJU%0a%0abSBFk6QR4hFmGlNX7RQFR3nRF81d3ngV66YKULVwpfxHtND0Z03C6PHiaxBQMpRxqaI1EvJnymBRhoEKRoUN&amp;#43;y/QGwj/WrNf9fM06ltFV5bA5hupmFNFt8dimQNM4vfnh&amp;#43;71R6lIZOSP/H3mFDb/kawpzdnxo5NzZG2htWfuG3U5NzS57BtBNeJW24WDe4EYNkwCG1TFf&amp;#43;cpVbcYaUo57c7fnBxnUV2p0RvG0huCZ2wjub67UhwWewofiXdnXgOw%0a%0aOyfQZakhKM5hrsWiFOa3UQYD9TZaWjdzVJKo6mfxfIJwmSiHayyOE7rsA1DwpVqSqOdx2Okivt5YtOTs065BsqNaQk4Gqt7AcSVZSO6ppaaVDR5BblvCJi1PXiCY3Cv0A1FfhE/lfKDUX/G&amp;#43;yOZFIrSKcKQPqUQ2&amp;#43;DbiSiXpoapCz1Za5S9JUtzWYSlCSxKVGRMm&amp;#43;5RUA8&amp;#43;nQNyaSA3QAk3NonQNgG&amp;#43;QhYJUAIAU0aqFZN6oZ4l1xa8G9SOGuoQU%0a%0ayymUrWPpN5f5RyVbZERe3kBG/AdrZ9WawfEXdMh9a03H1bHqfUehP9t03TMntLNlGtkupohewTHCJwnyonhGENxA4FPxX8GpUfHvpQlgs20VRwi0mMVIDdVIAZppT60TswNT9Vn5NulxW1sZDtaXwNf1V2EE1sbSrXZt7LnXAE51GS/GzFEwtAn7N2DXHwBBpNAzlUNtDUW0nUQcZATVeejcjasQWap7kh6TErPxzuGpLrxoiT7Iiippd1N3zaKT%0a%0a7F8ho21yFTBRwd7aZapaETImVmqDxsDR9EIqDo03cbTobDUi1yFPzxROInpFIQmjrhB/IEseRyTaQcMGiD0/RKSF1lNHCCUhVDItrwBKfVHgJl4o/tPyBgO3s2QHINwpvwrmQERyJ&amp;#43;NycS1lBNZGVVWt1L5vgD6AzAM4BCAecXy0Mpiop0CFgzaHUD&amp;#43;QfwJqBnBz5UOn0BY6rykbRXdvARStHcRNW7RcrThrX2NTdvV1Nu9aRqdMcqYIEKpJtjun%0a%0arVHHeKXCRkpQi7UBt9ULL31adEvwPC13Qby3pwzeJ35Nt1GTDrR9rb9mUV2&amp;#43;XdW75iPsp2H5TFas0dJ0Oc/H&amp;#43;kn1Qm1E91QnYEx8MlX624xuYUg2o1NMU2wQ1tzay72ReNdhm0xXkQGXgKilU52YZ5SFg1kZFSC51htv1kn5CVWXpQ4S9cxYiEedhbao6&amp;#43;uUSg8YbaNePcXI2/4X44lcV3MjibC5jWijAiZxucl1kNmMoo6onROTAxR4KLCgqq1m%0a%0aRl1X8eiCsQ5iYcKXgeVneKQk/8MYaZZ8Ka1FuyYC4KABy2qcNudTZpZ1Hl04iI4U8Ktd3tYOGLefaglhbUgjQPgeopZNOW2WoYBNq2NLvMIgpBmeLVoH8cHN9Gd4YqIqq2WZZBIrEYWeNey/hJZdBwBwpHIb29mVbURjI0ILfLIWqg4IOAEtTuXPg/KFMG8brs8KJVSKxDyKQV&amp;#43;O8JZS3&amp;#43;NIHWVVgdZNc5EZxVhTwC/EPdS0FJAfwJgDtA2ANWj&amp;#43;%0a%0aQ&amp;#43;gLSyFgnQH1gAOp3Xh07MxUJyzitk6AhYj69XqUAytrVnOlUdVTc939xe2TvULVqrZ92QV33Ux7JFbHXsEA9m1WqncdNFoRFMeZ6Si7LgAqAS6Rm6gSqXi0iTkNSqR5FbJ0aR/9d8r0J/bbDFXx&amp;#43;Pep245LniOIme4lQipYNcrmn5OBLnlbhjgYNfKiUNfkbTWPNwimxANqrfSWp9E/fIyjT8nDAIrX8PmN7qfh91I6gtaLbZJ1TSuQVBzYSpeD%0a%0a1Qlcfsi2Q29utQGh0o6NrgX517IcBHrlE/bHkN1QTYUhUDkHaKJwRhYOJCVojkA0DiQcACk2fq7aGwCYAvxEIDkgLkH1hJgCgRPU5NFedPWbmovtKaU8W0WU0UdFTdNWb1EqTMpvdr/Q01qty1Rq1H1Ipex0dNXHdtX3Qmtrkng9spSRDjapBdeny6S&amp;#43;T6Y0ihtS&amp;#43;01JiA3UnIDTrQA20VGAj&amp;#43;nutjRSComlOA&amp;#43;hmtFils0I5ISGe2LiVsKrgPTF%0a%0aQ0u500D1DZzHKOHNeurSGfwgNXTt4iqmUhwq6rUULar2tE7wCiQSYo/Ik7QtQH8x7sblTd0ctHnAd6g7TbT9fvDn46DqznBGDAdQI5DEAvoH8C&amp;#43;g7aIQDiQNsOSDDwQgO2g8AMAI5BQAjDIf25Na8G4PNyV/eL6zYxtROlzozitOnBJk1Xf2VNM1VvXP9QQyq0hD7/U01QVSRUkltNUQzq0xDwPZ7RCt/HY6bcAsKDpUSym8eLSWtCPYCK2tZKC7%0a%0a5xhSAzdUfpNFc&amp;#43;LH&amp;#43;/vip0rNanZUMtF2zTZ0TJcDeg2k9t4OZ0SVmDWDWa4WbcWy8j&amp;#43;MRjWINgwk4EQ1DQ9ZGf5kxhKNTseNQTX2eIxYKPGddPV/FGd0roa4kDXPYMK&amp;#43;EObXbgc9OnSFpY51nfHZFIMyW&amp;#43;CYxJo3eChU5owIO5I5o8vVkNWmmMINDmMWKMo57niL1o19oyDWAJ&amp;#43;bfX4BR6Ep41F4c7slnh6ccKKh4tVLml1MN2ItByUikLOuxI2P%0a%0aXnEF/CRaTDBrtCvV3gACjHHLFcobKKUQvcyHLqjz52VElVjh&amp;#43;EqagQ&amp;#43;IarVF7wyGGRzNtutW5aSdU5k1oBY5WkGi4SGNoeoTa93KWSsIJaiGAC1NsA7FPuI5qsXGoIaBbk78nrjhxOqfCsMTnulRO/wzhp7Pv66RqcMxkeVZRvUTlqh3tlSAmHEpmATUPKO05xQAEjn1Qmr3O31Uhg/C3gYCF4&amp;#43;MTTaWXS7wzD12o7BdEnjWAHbcuzCxhBoyGH5b%0a%0abcfuuVSHCONrNRV5b3kcgQD0cAi1KMHHCQbuWE4Qt4ICtsMTg65&amp;#43;mRCxkoNbjf7XJ5mM1qMSFMHBKUQpEiHCNq1El6rgmEqISG7MhElmnOwhItGWABhyKUQJ92gHFBUQ4QgPweuvzS201chGBzglapBT5gRMnaudWesDhljY/B9BobWJY/oC3Y4izWgt5r8uJmP0zdfEinGD2QEInnolMEUKEQA7WHWC4AgwPEBCAbEHADVo2APsDacOcsKaVoAs%0a%0ak4O4dLw&amp;#43;cDr58Gh&amp;#43;Wuco1XKZoa5HWvWMRwI/4MvdYI1ra9W7onEW956rSx3f9kQ7/3RDEpfq3W29ADkXnIUnVM2w9eI8vnQwETnoisGMnfkNkj8nc62Ujn/hgN/pWA/SMbNRowKMkKplAjWoNIlTxWDCgNRRk1TpDQG09GHpeApHNV&amp;#43;fT2EOHUxOylh6GUG1dT2KqZ3VTko4I4v53FbCFUxmNSyO2RXQq0OdT7ox0XAJNzUhmhUAyZ9b8jHWW0Pg%0a%0aFsvUzkaVA4eF1dqQ4OzjHIF7vAWEmFeHmrhyFE9kOhC/sfCYQ&amp;#43;vBpAS9d1qjCyYoH7MByhCKAvMP&amp;#43;wI1EGDEQ5wtqiWEk4wHkjhKE4RA6FlBSIh&amp;#43;yW4aHBxQr5EiZWKzEji2gcE&amp;#43;OsLPenZnO7E4xwo12oijIX7p7sXFgLHjUj4vCLoQMAjXgLeAWKmmyo06gxIicOyY6gncT7JNowiFeHGnWYZ3BC1lSqdb7JPTPxTdrHaYcHvBNEAPtihvUlKB%0a%0avx12MJjDAoz7vf52mWRaS3xJ48St9x9Ugsbbk1utrA2SsDJM&amp;#43;yyHIQSmAJeoIdY7CXK06pOEqqscTkE7jVsMcLns7CI2rRlSk6oOzdoHYB6TCNAppNhNazoMBJgUADODKAfQXAB1AVaAjpFyrwMQCSAcPFynwctVhtHuZygvLbeDnk/&amp;#43;Xyt1TU/2BD/k/U0fdSrF9062YgTBU3R52WkX7pXTbEOUIXegkPn6EPRiM0GPKEvlpSMA3Nhd4L7NXaZT%0a%0ab6QUPkjmPbRUeoj1WUMvV4Dd62bNdgW6WkZKdmK609YrtZpmUWzcZoDFdzfAnHiu04V501WyGIrd0UIlol693A6eo9EFsOWMaZBEEFH1UN7SyIeuJjc7kY2htURxnInZBwM5gock&amp;#43;LtRgHUnEqTc3ZsN0l9YXP1rOaksyC&amp;#43;gRg8yCHDhJf5DWTswL5DX0Yc&amp;#43;4m2T5eV3qvD&amp;#43;uvSVyC89Tyz15bk4nOAj69ff0gjAQ/PoZz73SvrBTYQ6FNwjP/dP%0a%0aGIjUU6b6e0awGiMMWFXN7oNRaQ3b6FFRqaoQFkN/mmOxhRLqSPo9KA2g60Vuiss2GlHrRUMsVGna0V7NbmhGQmjPbCaN6WTnUTGNTMmLhlYNMZPZ76aNo6maejsCitPUDKlZ53y9yNnry1q8StgV5qrVNINpa5qrWT75vrslVuYsMFdRexocYSE9EaKR666I&amp;#43;lfAIMJmvYmUwC8tX7qIcOqGCI8F93uwrNO7jQwUHjnyXap9kvqiVS98K3m94NaC%0a%0aKI7NAdag6VWBNmw1WHuzn83BHMgdQMyDOAjkHWAaArwB/i&amp;#43;gfWP/Ow8WAPQD6Ad2ZAs0lhkiWWi&amp;#43;w1a5wlNk6RA7/DDPEnOUd3k&amp;#43;Km&amp;#43;T6czR7NNb/dnMf9ucz91v2sFYXPD5CFQAOlzUGOjpg9lc0kN/UU9P9BHVyUz6aeuXRKTCtzYMe3M5TRQ8&amp;#43;K1RNzDSP8L5Q9kJCLVQzA0HN3Sbp2gJbFT5r/VwoziqGuPI2BlXg2o3aWkxSmFg34qAycny%0a%0avLBfoa7vLuo7WwV&amp;#43;uGaMnU9cuI7ocjjutqOC9d4FT1fgsKymwcjeMbIs09/U4XxAFwvfqPkNGsD5EGWoZQvN0NzGfLI7I0uX2TZg60nfzwFzIn8gJOi0khITUD7haq5jVZeCaLSZqKwvZUSJpRw/Qas/JQwCiNmaiRdvuv3xJQqXV7HSTN7aHH0GNsC9xwclqtwNleREGzjm8GLi20Q0VEIQKB0KKHl0d9uKDkY0hreIe7o2ksZ&amp;#43;IC5ZZc&amp;#43;J1lRi%0a%0ag8bgigEjSG8J5jX4JHhqtcrW65vBnbCJYPbel36ZW7H74ASafXmpITF3FVFhwiNOtK5a6sdxA7&amp;#43;Z/sxMt8buTPQRu5CSV3vUAzqexbsuVT9QmopRL/4rEB5qmoQih02l11ESS8/NXmr867PtZHs1B0SA3cPQBAg&amp;#43;gNUAQgkqFZB48PdZWghABAVykmoTcQfZ15NEWR2r1qC15N&amp;#43;DPS2nNYL/SzCOLVjTX3nNNmrX93atZ9UiPRTCLq/SULS1suBP%0a%0ajsKKwvw9IMHaPyR&amp;#43;I4dydOBHq76/1cndroUjwiN9F8LXOEaXg5r1cItWdVyxCo3LkBsZ5Fh6NTCrV&amp;#43;vlAirKLzbbkh/rQVJs2U5GuKXxqL40zCpjFvU0&amp;#43;uQ1Uo9NOoZibXBuqLSG6JKbT8xR0M6LjftO0tEFEmqiQsAk7hLI4TDRHAKoPmPSgXcveGU5uqTXewxTS0ur9TlkPmDmSzDUaZdwfDnvU04Pu57BFj4iLCTcgJw8U1dqXh8uSRs9jg&amp;#43;G%0a%0af5urvMIn1yZ5mUEtmqUxLdS5qIaHyvhCdBmUT/QFeOSg0QaaaVSaEgbs8UP8KQTshR1tluCYXjcNtpnLUMat8Nk&amp;#43;03U7MvzLs7UEtCSeQy1rOPWb6DYAzaM2iVAaTY5DkgSQJ0C&amp;#43;g5St0CVoVkPsATy2TXZMuDeTbarjBG0ZK1zoJ9h5PDryc090Ueu2X0sCBIy2ulQjs61Ovzr4y6kWTLxc3q1kLFQJoAqgcU6Y6zeP0XhVwEJ1Xu1VE&amp;#43;Raj2b5%0a%0ahUoUOoDsbqHa49qnYbLYDDI5cuadPYg4HNCIo&amp;#43;FQVhoG6516aVuA0O1h6GX&amp;#43;tP5GnUyOrJIGSisajPo4xldDnROPQeurmGFgsNWa1DQc4z3EWqEiI/E8EHLwclytW1LFEdS8GiAldJxwCNoebV4FKONQD6Izj3hyoN/huw0TY9C/wB09qFDQkhO3ub2wc04aatxz3OeYqneHfbXMnUzWnsy5VtIq4uPb0a31qfJvMZeG3CF0hca&amp;#43;yFxA1nJLzs1P%0a%0a2uz4sBYWubcEZc51g9ABwANAbNL5DdAbAEYBlLnQLz7dAgwBQDZFzw9FtrwLA/BoeDAST8OWSwRclsPdQI6OuRFirbU3YLwQ1nOmCB9XOsRDWrQiNLrpC8xozMFW/sA5F03i3i3sdcytG7rPpikF/ILcy1vlFbWx3MKdz4jHBwadRb3NFT5y/1t1DyMW1NQNsyTBvM95U/G0419PpVM7l6MQMmOdQ09JVaLBbTtPErE4UyFe2mfaXVIQ51ThKoQa%0a%0afXLEddKWlfyVEZRLPR5dK5Vd7TUqGM9SEYVpFDRMoGUyV37j0KCbGmouKKHHg0UeNbX3cF3jCxBKtuZYTp4kmwTtlrxhWkuuzCuOMKWFazvQBCAFAI5DNoEoi1i4AkgMPB9YvoJgDezjkFZAWGpebUsvl9AYwlNxRTbNgJbQuygui7aC90sS7tHdaEDLkI0MvQjn/dBW/dhW/92RTQPSuuQYFW46DrrmvLwkp75ra9kZDSuibN2WhLq&amp;#43;k7L2Uxeu%0a%0adzXxi3IFTR&amp;#43;fbsPrFyyz1k9cBgtsLGUBxrAwHenXcuds&amp;#43;nQNPiL3I0hk1CaftpboxaoyTmArYlWDU1&amp;#43;BKxAVhlm22eIkH/KA&amp;#43;KI0nfKbA4SP1MKgRYxyAm7/Tei&amp;#43;ezw06IlNpRqZLU&amp;#43;LCZgWLPgRKHHNRLjdCpMO7PCM2gzUBg6q40Qco4nKRBvJOYj5hOolRDmBzE5eD5hYoNqlOqnFt/ivO2wu/IblbSO7gJMVkUYSUREc4uX36tEm1N7qOTua%0a%0aV8bJq61L6aNkpa7&amp;#43;7UtGg5sOFIe5boNaG4QN3DiQ3cDwB/AjkMoC4AQgLgAIAMABXF1gSQFZAnKXO9Asf1jcXztXdkvvuvWSIu6EVi7Kc4/0ZbE61lsMdOW8ft5bp&amp;#43;7CPbpF&amp;#43;4uucdqu/C637o4DkWuqQO3Qu/Rayw8Hm8TTieskjWU5wvtb3C18aveN60CogH/cxZ3Pr0B6&amp;#43;u/gGK2ZHep8fiaNzcWDSOItDmmJUjrbDzWQe5pcxA8JXU14kj4r%0a%0azA5moSp1L2yhgAcex&amp;#43;OpRhdtcDQNaEKJ8LjjLVNWoo4T7udVtEXrEN5gspCdISXs3MU4eU&amp;#43;k/Z3u1BvMKOI7DsEa3C4A3cHlYtYnQIzstYRcsGAIALkH8CVo&amp;#43;nCkxsasR/zSlkjhmvuKCNEVvvpHO&amp;#43;&amp;#43;Ls0d3ViulFH066EPy7&amp;#43;W4rsLryu&amp;#43;UfX7ZWxIAVb1CA/vKBVamwysi/gvUcpT3CE8gETIMWeu7Lf&amp;#43;5buZ4q0r0dWBwfn1slTSG3Mc1Tix7%0a%0aQPLHwimOpm191AHQ&amp;#43;NKg4TsObxO98elY9LUt1rOLKdTTiQHABQAcALkOJDto3QOuTkgpAJv3VopANKWL7Z3dPUn4&amp;#43;FS&amp;#43;Q3GLcfXOC7DwCvX3dmJyOuZH6W8BWvd0uxCNZzSBESf4nBWwXNFbG1VMsX1My5&amp;#43;o1HsWI7CKlu68qTvZuLoWX1k&amp;#43;8aevMwXwEIA/7HRxbu5TF3AR1AHePXSMO7wp&amp;#43;AcGaU04EQTT76wqMQHdlAEQLHhB9tOQFXnX1QCo%0a%0a3fF6pZq726Zb7ubuQ8Z/TrmImp3CzfP1SxYydcShj4BPtHhcoHlssOp6qwyku8iXxxmjktnWZ4cVANkAgB8tPANUD4A1QJUC4A0TUkDDwdQGjyFg5INDiInHSsf6GiBHsU00Rd3QCPb7Hp2lvclPp5Ov4ngywGfMdCu6x3hTxCyrsUnau57Sa7tJ1IQPigqLQY4jvAPVtFFhvCEqXjZRRmdZnczTmf7LOqkjY2Exy7esCLZy6AeO77U3DlAJyo5x%0a%0aVVnJnSRcA1PSYTEDJjulIsPL9mnAcSYYx3F4aj7QsCu4xs0wZ22dcuGtP1TEHaL2iutbAETfLb&amp;#43;WK6MX7FaJcvriNW51bTGG3L1YbxB8zlRxc7mhO42aZYop2wyGNHibUULCgLJKZyOLJBKSg3ZjS5KkagVWo1LsShXMknfFg9uh1N1qw0IxJ451qvqCVRtaKqs17cxdVIsTabieurW&amp;#43;wz&amp;#43;nhy0b7EB65Lehlx3SJwU6ocU&amp;#43;Ok0sOCGo457eMsJZ%0a%0alfFjTEExEexHIvpoi1lShTiE7coEWD4rl4lIbG6lZcWGl2rU6qKnBISfwuVpQclZG5YAS3Zq7J2q5jcnBeWDqNFjPs4st3M1bueO8ddRnxzS3pLQsC3XXE4AABBQYcAHACUgYkNwBmQ0ANcCZAFQEQCokKwAwCEACABQAM0Pk2CCzA21ztcwgEANgAiAv8JqClgjSu6epbhQPteHXnUMdcZAG12OvZHDOpdekAR1ydd9YuR&amp;#43;6JPXL1xkCUgsuybS%0a%0afX11ydc/X5gqfv/X2QDdf6AiHj&amp;#43;elAB189cA3GQIFCuhx4KDdQA4N31icAV9CaCkgO8FmjI3qN&amp;#43;jfkghAEYChQ&amp;#43;67jcnXw8FgBQARp7cAgwNhFEzIMpN99dRApAJTfPXbABQDXAuAJfUM3&amp;#43;gAQHEAdLN8Ds3IQACes3yMtzf83bN8PA4dDUHtfMA35oCD4A5vmgBvIy17LffAZIGLbi0n7BddGAfQbtVoAdxPQAEAmZwcBPm3N5DegD6ANLfLXSI%0a%0aCQAE3RN&amp;#43;cBI3Nt8QCUgCAEFBK31t6QAkALWGwC3QBAbgAMsrwfdEkAG2HcS&amp;#43;QgIK3CkAygHCAAAFAMTUAvAOxgJ3YMEqwAAlPSB1ACAMoCiQG6JHcx3bWvHf53o&amp;#43;u8Cp3EAKbcw3v8EDe/AgUBjycADphkkZ3toJ7cFQ01zKBZA/t8EDpnpAJmdHAa5IQBu3qAIhdHAHACDjcAg92giP004KFCIXpt3YAs7YwMwDkgw93ADe3vt8PcB3FqVBhjAh%0a%0aAIwDDwfQYyz63Vp3XEHXnwAYCS37enDGrNrjN0Bb3O93vckIxkOAA3EWtlkTAARkCABGQQAA">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>N4KAkARALgngDgUwgLgAQQQDwMYEMA2AlgCYBOuA7hADTgQBuCpAzoQPYB2KqATLZMzYBXUtiRoIACyhQ4zZAHoFAc0JRJQgEYA6bGwC2CgF7N6hbEcK4OCtptbErHALRY8RMpWdx8Q1TdIEfARcZgRmBShcZQUebQB2bQBWGjoghH0EDihmbgBtcDBQMBKIEm4IADYAaxgAJQAWAE5mZg4ARwArAEFKo3a6gH0eOuwoVJLIWEQKgDNAhE8qflLM

bmceJKaVyBhuAEYdiAoSdW4&amp;#43;QshJBEJlaXOj62Vg7gAGI&amp;#43;YoUjZqhABhNj4NikCoAYn2CAhEImpU0uGw1WU3yEHGIAKBIIkX2szDguEC2RhkFmhHw&amp;#43;AAyrAXhJBB4iRBPt9fgB1U6SN7JD5fH4ISkwanoWnlI7Iu4ccK5NCHS4QNh47BqPZS17vGVI4RwACSxElqDyAF0jvNcJltdwOEIyUdCKisBVcDx6cjUeLWubLfgPghFtwABxNJLxfYAZl9

lSOjBY7C4aHDMsjrE4ADlOGIDkl9oGeAHg6rJmVmAARdJQH1oWYEMJHTTCVEAUWCmWyuotVplQjgxFwpeIB3iwcqlQDlVewYa&amp;#43;wu&amp;#43;aIHGq7rbU7YCLLqAr&amp;#43;CrMrgbBtOXylzABUmJTzh9ee8Ne4Ph42OxKzn2Z5vl8m173YA2D4vr7vN7f98P58PJ9b2lQ8wFPf9LgA0o4ECVoRHCXcT20fYVVQlV9maV59n2SoJxvV5tFeJpMyaVCeH2eJiIaJJ

fRAyZjyPQjxySMd4kHJIkgaX1gx4Bo4xPSCPkIfRLW7BAAAVYOYeDuFXdcp1CKAAX0fQ1B7cSt0JNAgO/PdwJKfVCgAXxWYpSnKCR4gATT&amp;#43;UikyaSoAAk4AAcWITRHNwapnE6AAhAB5OB6WmcR0Hmb0lnpNY0GcXM6N2dZNknUoTmIM4pQaI5rlue4pUeDhnlChiGW5X50WBMEoUhJBq3hRFnTRQEKqxcgOFxfEsnGI1SQpKlQoZQFhRlRkeVZNL

2TQAiki5JleT6iohV7EVhDFCUDiOOV4UVA4VSOdUO21XUDSNchTV7NBW09GUbWIO0JFwYMnVrYhXRbD0vWXTj4niHhNiaX0IyYRMY1QeJAajZNU1CjCft9DjKmSyBCCLEtlzkhBq2ehsMk6t751KDsux7PsByHJIRxYpJiunWcLvemUgSXc6V0rDGN00ndtM/UCGKPD9AK/RG&amp;#43;f/R9X3i4XJigkogLAfiBJF7nD2wn99IM0XQLwsWz0EjcpPgo69

OQtDUIw0jsNwoWCJ4V4eH9Cdcxo4N9lIppLeQ5pmiHX14j462GmDNj8OQ73Xa4hp4hVSpKPiAHDZQoMth4MdHYDmPMr0nX81YET8DEySJRk8tWaOXPPmU1SZEWDTt0QyZNaVyDjNM67mYgcTlHiTQkgAGX0TRZh8Dh8AAFQaWYAClh&amp;#43;HpNC2C&amp;#43;B&amp;#43;vCxZyGWGVotQDYmm2GUlXX3j4uONkDjlq4bjucYMvywq3hmnlysxdBwWq6FaoRfbUTvipsTa

vECS6mUSTJHyAUA06Q3xZIfSanJhqlTmvyfqi0np&amp;#43;EkK9daMpNoKlgDtYq&amp;#43;0tQ6nyFLCAxozpziuvmG6d10C4AaIgl0a06b4wEBFbgSQ97kQzMVBM0Zzj704ZDDgaZYw8QRhHG21oUbBGJkXNcbN8w1hRMQbGTZOaoEukcQmYlmYUVJsOV4gZN4lxtLTFR9MFxM1ksXdm24DYCx5irfmkwZa6R5vY6WYs7EKxsYeaar5VZgClvuV8W9nEeIcWLcW

v4XEBNArHDWkSZbp1AkkOJbjAnJNsWLHgaTDxCzACGLJkxj4lDySE1xGtea5N8f4mWytXzxHyUU8JSSSlRMPGDV8DR6lgGDD&amp;#43;Jpkt1ZXnCXU5pjiElK0qf0583iNZ/klpnaCetYK10YihY2WFMLm3rvRZCuYGivGaGOW2EcgxJyDpmKOtsLmBleNxf03S45sV2WxJoXEcI0SaAOU5mZ9i&amp;#43;lov2Z5TQgy&amp;#43;i4kHV4lR/ZU2&amp;#43;pUAO/tdmgpBeRW2VMK

IBiTr9ByIKVS5l0f9CcEdKj&amp;#43;gzG0pCoKeJEXxTwCOcVaJBK2RRIMbF/QUsDMxb6pz/rvNDEOEcNsHKiMNtbH2yLKLcTBVC95pywz4qdt8scwZgwsQpacjMm9Xl7IRpmXRRLaVypJSxf6CMoVMtObmX0o4WGcXDkCzihSCIThDFTMM1s4bUt4qczVWx&amp;#43;y8SShOMMIL7agsNeHXZYLfSKozn04awlRKlnznBQI5jpEl0UuXNSVcOZLLfFMuuMy/FN0

KGZJGrdMAUAoMPfALlNQAA0ADSdZNQNFssGQgAA1YYvkACKc8ZgSEXpFI4a9YrXKODvDYmYjipXSrwY&amp;#43;UhT65VQHc/MTwBTFRGmVJq98ICPyqvSOEr8GofxajiH&amp;#43;nV6QAN6nAhag0lrQNmmNSdU0wGwOAQg5aSCUF5TQfKbaypsHIlwUdAhRCEBmnoaQ8yto14QFwCkV9tC3SgY&amp;#43;poic44xy6NGZAXhIMYmlEwymfhoUBwcTDHDdDBZiwSLRhY2R

WNGy4xIWozsGiSaDh0SOCiBiZz0YZouX4zN0ZHE3FYjNMtynjMVs&amp;#43;cJYnPGTAXfLCN0mGk/jvJ062SnMnDNfK6r8wYVNZufDpiC8n5kF0WVzJCKzjamywjhTZyzVlrLNjZt2WKna8UZUGHCwZnlBydqC9CuEOJetdkHW2yKvrOwDQjEFlRybh0HDhOGzyPnhrVpGnOecFmhX4wzZNBgK7qXTWZyYmwbyxUbiUEy&amp;#43;aW4VEcu28kzhfKdHEggAAsvE

egIZm08GbdWlrAAxAEXaF4LD7avRKP1h2JXDuOiBqAMJZVnefObxUl1FUfQeh&amp;#43;VVn4yl3fVZ6G3oCtXar/U9PUgHwKvfSVdCA70TVQA&amp;#43;m9PJzuXtATKUUyC6FzY2l&amp;#43;zBP69p/sOvgk6JpgPM1UddCD9pKg0Jep98HWcmFSk4qGLMPtwbAwOLJjDQNox4YEct95PAwXZlI8jcjCBJEs0TTtmjONmxcfzOoynWiWPk1BXxLVkAaYM9KIzXjCb5LQQ5

tY0J6TglGdKVePTEtUsKbfJzko6mJctOfNhgpnTnAK7AE0DXWOilSdF0rH8OuNOJJ/JUTphSumdOl2AJXsvDfPnQyUAzyvHG296QZOZkAYImYQkVuzqyrMbLdvHBo1sVSYXDxHdjcdnZOo4u895PyjX8uthhBG3EIWsXFlbZHGZU5cUBUTkLuyML&amp;#43;3tr8ho/s1dgWDg5H5xz5VAp9v2Y14dNi5l4oGU1zzpcEVBQGeI5N/T9i70C3PhFUNm2eXDc

2Kp&amp;#43;/4W9wyKNucY2ZYFzI3nuWVKpuINXLSeo9zOGl57wyFXm5kNbpWzo5JJD6ErXUTidZBiYGqC1gAWjwIEMBx7MiG3MCNsvFFIlHDJNjFL9GrgfONOcHpjOjlEtojFBgVMuutuupVE/DVDtnVG/I1BiJ/EdseoSN1IAvNDSJdo&amp;#43;rdhyHAdds9uQa9vmO9u&amp;#43;l9p&amp;#43;ltL9str&amp;#43;hqIDtpIBqdKDjzkjJDvdPEDDswfDqUGEMuNhACjxGbFAZhjtOjrj

lDNwDFs8r9N9FAWTqjHxlRrCLTkonjGBpAEzlIf2KziOOxJzhANzghtxmYlIoLj7sLsJj4u4m7ikrEqboeHrnbp0rXn4d4XXFbjmn4hMorr4QbpLsVrblESrors7mBCppEdrBLhAL7nGv7kfuZvZsHk5m6rxKhFchRKak7DSsstRPKs3pxLRGCgOLXlbFxDFpRBOFhFsKbG7NmMipvK7DxNmORMPqXkCpsBRK8N9K7BcqctRElkKkTtyjFiCl9DU

fiqbMPv2GASlmEWltGhJBvo4VvlzjvvlmmjXAHnbnrqrOfmAJViUAWmUK3LAH1s4MPL6N0BwBwJ0DwN3MwLMAAKpWSVDtDdztrDwAE9pAGUAgEQFo7byJQlYygTp3ZIHZRnwHBIGrbXyPZrr4ESBbrVQ7o4H7roGHrfwdTEH/xnZkGCgUFYk3azYPZZwwJ0HUkMGlBMGfb7zoLfocH/ZcF4I8HA7EJ2FkJCGUK&amp;#43;iiFw4mISGI5zYOqJZd5KGcB&amp;#43;i

KkcB47Qwj4Ja4Sk7iIU6UbU7UbyKKJ0bCkEyMbM7mFkyWGhrTq2HGIMI2E8Z6lOHpEuFnEibuEO7RG3g5L25bFy4vigQdJBHek/hDIeGgQBljIa45ITjRk/ixmGaenpGZYi6B6WbrL5FxyhjvKeybw2yjhwwK62pipjgAo0QIxUwOxKop6kRmo/R8TO62ohi5iArhaar&amp;#43;jRY9HOp8TewRw4pL5pHZw7GxrSTxr7FJplx5Z74H5LY6RCwJle4X5VZ

X4VDYD4B1BCDjySCYDMD4Djwf4IDjz7BCBNCSAf4tbdyEBglhQQkrz5gDoUpY4QAjq/T7yInpgLYIGY6XyoG0kHZ4nbayKEn7bEnoBfzHYnokHnrPo0mMm3r0lQJwVPZUkgJDSMErQfbwYsH5hcnsErK8kHT8l6i8Eg4gZ2nGFlCilQZNASlYXiGMJSFhhbAqgwn5gKFSjyE458L46ebUQsIBxaE6mU7ZYGn1i0b04mkmFmlmHaJs5BiDgcZGL0U

OkOFU7OmCYSXZGO5Hgel&amp;#43;naVgRKahFVJuGCydK&amp;#43;FlbBmyxKau6enxFgABHKaWXlFFKdJa6e56VelgCJG&amp;#43;ga7hIm7hlXiJEoQa627BWWXOCJH&amp;#43;W2WOJ&amp;#43;VmU/g&amp;#43;VOXxWdIoRJWJkeXJl&amp;#43;6pl14WZoR5EWxupB4Zn5WGxjFQpebsq1k0T&amp;#43;jOVWwUpwzqo/IYRAr/T97aBE4DFE7so&amp;#43;wjjeb8rUTYRUzjieoxy94haji/Qeo2zkrNCtWmxRwhg2Y9lUx

bCfJ7Lh6PlOzexRwcSfJOwx55kOTWyIrGqz5cQAqbBvLD6h4ArERbBhjfKjhoYNFtXlnOzfKuwIxeZrIhbCqOrUQ/TD5fU2ovWFlQqjg/R7I&amp;#43;xabEpD5ArjihpAq3J7IDlJlDlr67F&amp;#43;6b4TlKRTmVz76FZaX643gJWLnXGX7mStxNCDCDAIBJhJi&amp;#43;S4D7lfFWQWDMiVo8DiTkjjzXmEK3lQm7wsLgG7whgzYwFoBPkolzorYoFrZ/mgWbpbZYFAV

7ogU4lgWEFkl/z5hnrMmoXXpIXgJi33aIUSFMkoUvpvYYXMGck/Y7z4VqgA5EXHT/x8FkXKXkKQa4DdC0VGGIZYLYRcQ3IqmqEqlqnphCLjWhhiLk7CV6GQByJiV07KLKWmGaIWk6L9jjiKUCEqX87jmWKaVATuk&amp;#43;Jxkl3hUpHhU5JxGOJV2pFJkZGjlZFAS2q5FFW2bZV7JAoBzLW8oNmzUXLXL&amp;#43;i6JZh2xuxYSkqwrfJsLfScQ1XL5o0ZaY350

KSTm7540zkZqRky5XE3FFDVYSCYCYANC4C&amp;#43;Qf6DB/C/FQB9bVB/B9aajiRCBQA8DOBGA829rAH9pTakYvm2bQH3qEToSfmomQImw/my0G3/Dy0AVK2wjAXyIHbgVEFa2lA63m2wWm3wVG0MkYPIUXr0FoVslW0cnfZsF227QO18kAaCn8GSWUW3Se2&amp;#43;Q&amp;#43;052SHMzkQYQDWbCcUQwgxPm4YqFSi/SbUz3FTaEUa6H6n6GGniXJ1SlSVEwyUWFjEZg

2mGI5185OkHEulCZukmXi7RU&amp;#43;IANYQqyGNGXL4N36wZot2FWObFVybpUL3r5L1qWaOlw41r0FanGE116gMlXoTlZk3LkU0VAwDDxJDNohjxAICzAUAf6EAwANDlrNrdAwC&amp;#43;j&amp;#43;Rv182f0QFR2wkQHzYImzb7yS1LbS1XyTRoFq0K2YEEkq3wPy2IOa2nakF4MskEMCAwJUGQI0Fm3NN62IKrRYU22kNYIEX/pA4u2kVg6yN0MUJQZ/BMO0MsNomyF

d15NsVcUgykZ8P4bnDkS0SCUx0aOYxSNJ2&amp;#43;3tjSVp2yUjhPL7y2nKXqPiPqWulePF16MeV2VOJ2NvMxW6VXHpXmOmZeNWPpk2Pt0D5D3NDeyBgDhJzNEo32Or6L2ZFY05ar3HH42eM6S57&amp;#43;O713EWToC1bXCkD7BQB1CFjdBWRhAuTYCVouTdCkCaD4DpMRQf1jYxTOxQEvnV6i2TopUyhFPfkygYllNy0VPQPVN7a1MVP1MnZQW60W0QMdPG1dO

zRyvoOQDskDMkMYJkOcGEVUPjNCnkXWhUW4Czywaw50VTOLNoCkTzUxbfLB1SjlEMDrNh1SjOwWxEQiNCWHM07HOGE52p3MaWmD1GMMyqO0P3PIv5gaXKJF26OfPGURnhKOUBX6aGUa6JGpv6MRmhUhU/hBlpu3iJFhk5tXgxnV2eFKxGXhFeXxmVtm6vgk1luTC242VfPtI/O1s5LvjhUpu&amp;#43;lJvltdvibAQ/gDu1sfPFZ11/MpmWNGzWPWa2NbL

XIXIao8S0RbBypj3ey6J7wAq1GI3PWZi7KhjXIxZyrWrUQhYYQcSUz9EVnR4hYBwBhvKmoNnvIsRPsz2bVE6ezIYXFtXvVyqURESvlgrBb3IAoUSHLh4ThE6zV8RT0cTsvoSOqfLHuZjI57WUTAolX6qQFD7fQTWtVESZhOxcQsRvXd1FnIQRMwr5lQpApqHGrWqjgUQhgUeArGq0SdVESep7PA2jjqoxad2ArUTd5wsEIOMY1IvL3b6ovTkE2Ys

3j2473k2FrBMdZ/BWSYClgcBsA8DtqdDKDBjKDYDYB1iH1MtLyQmZPrzfLWEvkZjct3aFOLawFgOYkQP/mK3iu4EIMa0ysUlNMwWsltOYP/3Ku4OhetMQAau6iDPavDMUN6tjPa2u2TP2ke32h1jzNGvDQykdEsRsTZNrPcPcDWFbP462zWYUpRbXQ&amp;#43;sPOaMJ0KLSOnOM7nPBs6L&amp;#43;imrZ2RuOlNcCZPPxti6Ju1vlKFsts6VhKdLlLfK&amp;#43;VjuTcdv

JtjvuW/MEL/NN1xyt0gudEUrNlRxgp8fkQBwhZJxbDPJQox5uax7mZhgqo7IkQ4TV4AdjGeoF7WpJbsSSdCTpaOOyfOPY0prr1KfH7iybDYvqf3GfwwCFjDztz&amp;#43;SzAwBJDiR1gf5QCECdBGD6DxDNqvDWejb3nrAetC0bDQ0pSzbkRANzo1KLoy1ec4PYnNSbZVMvwSvvx1OBeQXBfQUXZhclQRd3bYPhfRd8&amp;#43;xfxeoI4W23Jf5g4LcHEXUNu1TP

Zf3R9Z5fKXWuoD/QxwYS8TTrsVzbOtVfQz4qPU0RUzR06HRuSOJ0Bu0NBtSjp1s7vJgp9f5emJ52A8F1xsjsGVl1Ftvgxm67xkLdayWVB&amp;#43;WUhGdLOW5LJVzfR8h&amp;#43;WVtsqbm6zfG5p9iwNvZLxk1u&amp;#43;&amp;#43;hW59y68tlLJVa4W6WUOuvhrdmOztnFAu5Vt2h6ypMpYS6KFkbFITkQve8TjHsIQshYZjcQQuJa7KBb9/XL/Ifv&amp;#43;wIzNBncyF3V6qhquycR

soXWgrtGUT4qDFxzjj&amp;#43;x7XvIxxUwoq7UkqhxrIj5yqfLji6JRwuzhxUST6ZgA2kwQq6LAetXkQ9G8T&amp;#43;zETER7OdFDjHsXeSjciJqhCxw0RiZKNzAaho6d4Aw/sNhnxGszypTk5KR/rRGog2x5K8KUlN9F2TOpnYP0UFvPQRb/dG61vQ4gpxB4Ys9wFfLxJD0CYacJAdQYgJUDqDNpQg/kDgP5E0CYAOA3cBoECUqDYArORwEKIAWZa2dWW9nVlDk

13jTZ8mRtWnqUH5ZI5POwrbzlA185s9/OnPI9A01lZoN&amp;#43;e12RVsLwF6i8Xs4vIhpq1YJJc/sKXUZgKQNY0N3e4GehvaBcjq8rWMpZOAf0Y6Os5slXV1vw14CgpW8I4EvA1wOaDc/WtvY0i4LkZMZHelzPjlnXDacZ&amp;#43;uqlESkLm0bPME29EUuq80Hb0Rh2cuCugH1iKW4Sh&amp;#43;lK3Nm2W5eIM24fRPgH0nYlA1uE7XwmFWaEdD22RQ6bhrCW69Cuk8Z

HobWy1ydCpu9ldPmlQ2419AW87YFou1BZtUyUbHJ7hWU77XsdeAcMjqGDxQAoxqYxJ2AjCwhL8KUMg8zPDT7xHceIHEPiK92HxYQY4REMMAfx&amp;#43;Q1Up8VMNVKRFtj/J&amp;#43;wW/YlNhEf6UcuievHfiCmaDHIbYWeavCSmBooQCUuyT2EtS5ZxxTU4xYDjWWHBjUic&amp;#43;AtEbhGA4Ad08vKDPNHmPbL844VMQRtmSJyURO&amp;#43;JHX6OHB/YsJXY2ENaj922Lo0

RyhcL3ivTcZosN6ZxWvFFTU4MDoeEgP4FAA/yORCwuAWYMPEGBQBfizIFrIQHHhwB/IjkBmpqAJ4ssiebLKOKTxGIudFCfLdzmgF&amp;#43;hqD7s5TZnpU23TaCiSUrLnuSW1qUkem8rRnnSSwYm0RevwVVvzwl4fopeQzOwbL0dr6t0uEzHOir0oSORPB9pTXkx12TEQIhZXDHFKH15BDtmGULzJYSHDakoh5AiAC1yNKaUU6nXJIRYRWQGi0hSlKZlGz

k7OEchI3E8FUM8otCkildH8CMN97tioqdQ4oWLDL4B9yk1sDPqBF&amp;#43;hjilYfYwYXNyHETC5u3YuXHNyz51wphAfSKq5XjLjtfeARYpLMjSKbcsqdfE2A3wKoLCQ817RMUvx&amp;#43;QsIF8IWEcKPmHzkxICV3GAYng&amp;#43;qH9CyJRJ9iHCaJ9Fdk2YckR30hqhp&amp;#43;ievPZkBNpTgoqqKoX6J3QDBupQ0cpY4d8nN6h4A6NyWDmOHDiBgH&amp;#43;zsINJsGogUdPYs1U

MI3h9g8dXyLCGjhx1GKbxxwFZLYCR3kpMUImH/cPHPUHIkCZOZAhsTYSOKKdqBh4WvHuNzRLlbi&amp;#43;9dAGwDrB9ZlAfwdoC1n0DjxMACAJIO2isgNBvgvxJIHAGcA6jJBeo6Qd/ThKkZ3yAjanktiUGQAhWVokVjaLFb2jVaNo6VtzxdEhcxe&amp;#43;tD0SYO9FmDfRhgywW&amp;#43;mIY2DuS9tUMZQzS4oMMuUYk1tqPNZiEvBjFM9ncM2brNuARvTMfjlDAwdg

0lvMRoWOLFtdA25YgIZcxQihY3edzAboWNjZZUXmY3HsT6WD6vg5x/Y0dqknL458bcnUyygEWnG1sY&amp;#43;zbMSfXVmHN15h9fXbkqmdiHURi3yK7kOjjgORCMiNGVFCmdj3iPYnwvZCskojop&amp;#43;U9KClB3mRzyV/YZ3UcDdRA4gD6y6HI6pxEvYFl2&amp;#43;&amp;#43;QriX9x4ncishFAvkYJMPxARnKzbEURJJXI0hyQdYIwO2mYCaghAw8eIHgHaBsA/gzsFtGCn0

l3lVgxPZzrINHRQEzJ86CySHUFb091BHonzqz2wI1MOejovQUFzcm88LBnkn0Z6Mi6Po/RAU/pgly1YhTyGYU1Lo4IjGGt3aJrbmnFMlLxjCucHb5N8lDT&amp;#43;CMx3DN1nNiTjYQ6uSBURrqWiGiVWuJzIqfIwuaVjh6cBW5nWKql8SaprhUbo9OaGSYCh2SJqYkitmHgWp63ATCNO24LsLxJVOGDV3Qi8VrSNHL1sPldhQjn2MI17tXiSycQfU3EYf

CRnZFZxuJXIscjyPk4fSqBX04/HrjnF/S96AM9AMyE6D&amp;#43;Rx4SYPrHACaB/BSAzIYMH1k6CVBNAdQVQHWGbRIz&amp;#43;ad4EWujL17GjVBpor8k60tEroYERMu0STPZ54FnJTo5BsSFdExdaZvk&amp;#43;mULx8m0F/JE8gMdhVKC4UdWIzeXs7R5nOC&amp;#43;Zbg&amp;#43;6NWjjEUVNe5sQGpqX8G0CcMGU0KK&amp;#43;PxRRx9mVvPiQVPVn29ipLOS0ubHJgVT9ZmQuOlo0Lq&amp;#43;9RM

yVVsXZXCTbj/SOSUtq1PlzDDfKMZQaYMLvBBU&amp;#43;pPYpuRrDAWwKi&amp;#43;SsAYROxCIF99KsUetqH1AgIKlxa4&amp;#43;cVuMnF1w2hiC&amp;#43;MjAvG5ULp2MwzKnOxyoniJpWZVCP9HQjDgk8NE55GMVdjCpN4HqW7rShzDYQWypEIMHsnf6jgHYTwxvCOADhwiU8bEPjiUWmJCKKi/FLFCwjdlg1BOVVP4ZC0EYkRnq49ByKyI5wWwfYY4fCBiheFER92rfHMlTxKo

9lCiCccmLITbzbdeyxIq6hHNHBKoHI44DPGoTnxjE2U8s7vi&amp;#43;IZGncFp8qfdvu29hooIOdjKTjHL2Lxz3pwPDxsnJbE0Dfpeaf6UEwkAtp9gbAKAI5D6wRwEATQRyMGF8j6ByQ4kKyPQDR71y7Ojc/eC&amp;#43;ViX5gsZaCk&amp;#43;B3PnQlNfyGg0VloP7k6DyZpJSmSgzHkeSrs7TBClFz8lui1WcXKwazOCl4UOZpQOXk7RIq8zleJrbuHvL9poAN2pECfB

wlSnmj0p0s4IWcnML2Kb5eUu&amp;#43;QYTiFljNZXXcmHBzDZTgI28Q3Or6xjbDdf5ACmuuCsFhNCJh7Y7BZ5XCRwq7KEfdcZCsDJqYupX4DBXnyUwUK5ctuCKp0izaIr4kXYwlalRRUzck&amp;#43;eCyPqGUqGaZNxmKhlRGWoU7ilMhC/Sg5VxUcqx2/hclRMN3FcrPKu49lUKrHbEqm2YquhQ7IYW18xpzCxYaHhHAj8VQm8ZqjHlOTrEGRuAi7ko0JF8dcBS

NIiYRNOntFcIZisYmGBREd92GTseVNotiyVEJUZKBGogKHByo4RxEyiDcOv6lVuOlhFCLimDlCclUt0vVBxC9WnsaJiNKFHcLWo4QYswNDQiRDdXhzXk3EUvENSjhESYYcqd4ed0Q5WpN45VcmNwrP7NALq2woiI2UIh69BwNsTYERHdXyC8lLagca2sYjXJgOAKFdjsjgGzVicKoHjj3nTyEjrYzKCqk1WeST4vUn1bql5gzCsjnqY6u/oGEBQB

wk4V7LMjxyzU0QI8RE72Sd3E6mwkONEOFJsTSXPTY5WWL&amp;#43;a42yUnFclkwWvORHoFFLGB6AGALgFeCaB20zyToNWkqDkgjAlaJMNWlmDVo/g2nXAO0qkHOAEJzcq1RTyNrOsVBc2adDZO7mzRe5&amp;#43;JRyZKyHkUzXJsy9yTTIWWC9qCjMueX00wqbKgxtgnkvYLXkHLN5Ry7eZQhaynKCuZhcvD/3q6piuE5o65fcqzGoB3MFMM9WQka75T3lpYqZg7

xKmVj2qSBPWfaXrGZLv5PvIhf7xhXmzOxmm8BVvRcqWV4&amp;#43;llDoRiq8IB8rcK4koDUPFWNtChtbXwouJwWxVy6pClzWLEFV2U5uHmmWB0O82V9IFNKjJHSumRSrdYMquYUwvQininZ54zMjkWdlxbaUkLLYIOHDwex08NEm/iGCrU4QSczwqYoCPLxAoxiWiHCCCl5TZhp&amp;#43;ByX/tWq2mD5q8O08PDxFPkdqk4OsiGsIjEXwpSilMTlD/zLKvdyY7C

0YrmDgEDhJ81yfsNhB9g9l6JqzWlFd0/6DhOU41MaqnBDBooE1H/KRRPhGK2qr5PSpLcREf6Woctfy2lGwtdg5hvoU2niCCidg94A1Axbqv2H7zEDL1GSt6fxMoE5LZye4QpNhBfUZzil6AbScwErQUAEA1c6tMoCSCDB9gjkZkNS0IDMhNQewUQfPHEE2dkZkAAdLtPzDdLrCfS4qChvRL4zbJoy&amp;#43;yeMuVoDyAu&amp;#43;G50YRupn4MJ5xgpZeRtWX&amp;#43;i

NlkvJedLxDG7KwxEU4kFFNobRioMSYdjQjmXA/IxUyOATWmNBih1ghK6nor1XE0Fi3l/rD5TJqflO9LF&amp;#43;iGsWowNmqajZOjE2TLj03abhxqKnwtbsfUNCA&amp;#43;MfXtvuOGnhbRpkWhzAqrdTjheILVKFNotBQP8vM8cGiDNR1S0Qpi5yfbQ7F7x8piUDI7suxGbyRYo5EhdJU4y&amp;#43;23rcav2jNM5Sd1DScWkkiAH8DgAcBXgxaYMIWE0DVAoALkdoAgC

sjs0jAdYWYIywx3dobyEgnHRAAHQPSEoEBZtYhsnTIkzRvAJ8uhutEboHJEyh0XhumUEbR5RG5nSRtGhs7aSTM&amp;#43;eVzsDE87gxdGzmQ4IV5OCleWXE1mk0FmWthZnG0OWWTl18blsiuoTdmXzJCJcpysyTZruk32lZNz84cBODzLvzlNRur7SbtyFm6OxZs23SGV02wKckjmtsTkhZX&amp;#43;kEVWKxA/GRFXvMgFwCpzWOx6HV9XdMW8aZ7rjza9vYRwm

/n2o1VSp6q71BtZd2vb/QTu71YrUcKXVJwh6f0e6pdwf44pR61ecDo3lOS2wEaRwj6j/pMURZbpMWHvEOGO2Wx3tw5T7TeoElJy/tAyFTjZXTm4tW4rwdUZoBgDdxNQnQYgCcG&amp;#43;L0AmgRgX0O0F6C5A29w2TvQ3OIiGiTkCgydFARQ2/1x9dkyfdTtgakzB5G6FyQzoX1M6WmLOxZV6OWVPp5lr6FmdzsgDLyZe/O8KdzMimRiRdJrcSBLulJSF5

UhA4jEgQN5jp4w58zHOHk&amp;#43;FB1Iht81TffLt6Aqv9uujbT8n/0UUVNQB0FRprs0NTSVOm0CHbJoWZ84qlK8zd1KGP9HAtPR0zT4TJVh8A&amp;#43;PbGzUbi/BzG219UpcSY2MYmxQtMbR2fFti1Ls0yBBl2RcOIjCJhiDnRqjtpD3D0dk1E22JNIpR3HSIQeiYp8kpHwd3kjwx7eVufE3isIxw/ot7IeHhw2Oa1XlLHuXY/I8Bg6gYrREzBHs2OMcTxc0Qc

gKU48EWO4y8Jv4pbdq5qPVFCniz4TFiPRFhNtQAnPc&amp;#43;IKegQGnoB4Z6lD2e2VT42JR&amp;#43;NndBezORAF9BQBqgao7ALBs0DV5q09AYMLdEGC/FMAogaDYZM1zGT&amp;#43;9SBPpcPsGX9LkCpTCnYTM0HEyadky2fRBUCOEI5lxGygqvogbr7KN1tNmdst1b7715KRw5cfpY1QZO0Z&amp;#43;9rlkc0SbxpDKEaxUUfK7mT3TwMGWc7EJQMSUx5kCTRrtiEf6KKdR0q

fEupgArKpn8iRo2J/ntHljOC2Y/mygMTsAisB95jHxQXpniFem23Gge&amp;#43;a1IU&amp;#43;lfAY6BEzMywYDGx4zJkSPFyqotLC7Y/scS3LI2EuicfihCGrhqJUxOHVDhAcg3a3THfFhCRHoPcbxUe0iOKGkZFnThE064nMxDuGhw8BZ3YfuMQbxE5oOSqECfDCup&amp;#43;x3h7OULNmWm2FFOJqNSk7xNU2Z73G96lQ8VhvDqHClwOt9dABRCzA6w7QceNgFIDEBu4

lQfAM8j&amp;#43;CqiQZMDKYJjvBJ2GOlve58nCSJ0FNp0KGuAh4cp1eHVTPh2nboLn1anUGHO2LqzvCPs7x5RpoKTRvZlmmGNivTLhRVF24A6gmRhiqw1lRs4xNZ8j08Jvv08U4Ye1P3S8tf3Bm1ZNRz5YkLk0vzU4zrJTc0cANfzgDzYpY6bImGNSxjls8vpbomGFGIymB&amp;#43;FTUM0uAKahOBg8VsYu0JbdjdeTvl60jweK5UZWtPNmB4gd4kJ7Z5AaiMmr

MjiIX1SAlMVtjjbQ20KS5fCk7UURnx&amp;#43;/cwm9qenyH09ihn7beYzTWWrwj58Sc&amp;#43;bFHoBCApAFyFAErRNB/IHYQsMwGrRQB&amp;#43;448CgC1mDDto7TMoMQRBex0NzKIjh0yfBZxmem6eipjDbfBVN9y1TM&amp;#43;/w8PMabBHemepgi2voo3RGqNsR2ULzt32JGuZB&amp;#43;jeUfuosmtyQ9FhkDKSm3wTIJ2ONi1w29PBDaImKH4d63V1VGpNMjT/TrojPJ4mjJcKS3

GbU21S8h5u2Bb4V6OULBjEwjoTpZli7jFjimdqQHyQXCTqzPuQy3sflUHGLteiVVWqhIgzan2VVAMDciJxr8WLjEPXmexfZjE9kWI/lGdOhZjhX5nEAM8sjqJmqs8Civ5KFfPMfaIr1168/yNB5Kw9cBShK5oYqDVAGg/kJIL5FeDtBQZw8ZkFEz6wf4KAMAKyIpKshimUZEBadE52KhYzXDI&amp;#43;snc1Yn0YF2r6F9U11fp0jztTi&amp;#43;kI8vsNoMzBru

FjfYFOsGkXTTq8/ZZReik2ncAoJe08w0K7wCzFxqr07fs2vKEhNQabMn/oqOvLDr7&amp;#43;462GdOuVjg54l6Mx/M96tGmxYKtM50YWM2yJMFs&amp;#43;S&amp;#43;AtUvgKgqExuuADYyq1nGFO3Qg02ZBstnsqrIxtYBOZTizQ8M2mCRRDuH4pq1RI47eGvBTspatsqSoidyzCUj5t29X7uFapORXE5tJrxtLhzQaHC9rwckGzXEjVBiAwYOoC1lIDkhNAzaegIWA4Ck

AWs/kQYOLdx3rAL&amp;#43;8GmWwUzgJuHrCyF5U2MrQvx04GZMjU0gx6uGn&amp;#43;r&amp;#43;tg00NctrG3qN2&amp;#43;2jaFMmvmnGNs141tbd&amp;#43;KLWExVllVDxtYvy6LRLt7iqFGl2UiWEisoM37ZDMB2GMXyisS/PLWKaw7AB2M48yjuJmk7sCtO4ZuhXgKKhiVOOypft1qW/5llLXO9arattE7JQQs9pgC3gH3NZZpWE9blxjC/N0SVzQH16nBbWkUx8Yx1OLPiPokJZqR9M

OlXZ3ZV7uvKksMUfRaLhGEbYf7Em27D5pORItU1tczfDN1xKYrRqmYij4Bwqu5dsttG3DExwveRoy4vupN8cOveIc1Y&amp;#43;TGcR2cMIgGqHj2TyoBU4s3/aUamKD9KtlKOVI6gA5vUKYIqMjo9WrUECQHAAp4V6yieVU2i5a7/mGnMyMdyy1KdjqRB2rb9lFAYfszHCJwo5jUOsmamau&amp;#43;icpPkCNn6JsBnqAohwIKJJTh036t4X29w82O8hwgMpRU5P

DtTCI8WJ4FUrycm/C0pt93qbNJ6K2cSFiM2Amr6pKxAGDCah2g4kJoPoFmCSBSA3QFrC5FDSdBqgmQceA0GUDb3u9iULpYlFK6D67s1hNw1AVPt0ysNgFVW51YIIa277z9hVvqY9H32X7MRrfXEfGuf3IAey8MZaaY3WmZmuAOuXbYWaFdu&amp;#43;&amp;#43;/UE&amp;#43;tfAdSytrQm040cgRjwODrX26o1rpOuoORLP&amp;#43;liB2QN0ZCI70lto/pRodW6KH7D5NvgqTNtj

wkyBrAxI&amp;#43;ZcEKyF&amp;#43;uf&amp;#43;aMd&amp;#43;t5nBhoC6R7bM4eTBuXnlXwvQ7RUx28V6KqldpmEdO41Xt4Cs81JIeDCPc6d5h/q9yTyv6hYsGV3ZVCoDDcD8jiLbndBsdrZ8O0xGvDAH5wj/HAda5CGFDTD51LWyE7gDTOqiK8RS6nCNZi&amp;#43;TzUkxiarjWBzxRMpLHFRV2KGgc6CMYURj5dm5Zdij4nUJ3ExTY56qFlNzYsjFCd2xs7tq7N4mxb4zMUwmI4ZeCp8M&amp;#43;

8Zl5ZUH1GOH8Nd6uzkOYYPzOjZVSkTpt6hMy3ajJMUiHI&amp;#43;N7MCHGfbZOjtVEcFE1SThUQTV9Rf19RHCF12qXuA8esqkOQ/VN4PurouOFVWEikTXmP2DbCJNwx3&amp;#43;8Jtyz8bKKp5gJR1biH49DB8Ux6ZZc9l64izlVZDYVzkQobmdRX0WD61oTeAwhA7mbNIQgIWBgCaBK0UARwHAF&amp;#43;J1A2ALkNrM2nEjtFrnA6SU3ILguKDkNI&amp;#43;lrQqZGVn2qdF9o

sVfb8M/OsLmtnC0RYfvTyIjwL9Cq/dGvxG&amp;#43;dULgXckaF2pHAVNF//Mi8BUHzltZyMcNi9v0E2XWgmzixDU3MRwX9sda6yS9DMoPhL3&amp;#43;n5SlqgISXLrODzRjJejsdGUDirnl&amp;#43;OIFdgA&amp;#43;H8xmRzMepWWeXr4CjoV9brbCuJhoVSzVZUc&amp;#43;kOBHEwoKma8rPxluHRnpWAgZwVBVAvbYsYSF/ea7iczPYsYX57bEdDYvgC&amp;#43;MmZ&amp;#43;ldJemVSsZL0TVNfJUk

Dmdw8TneMvKPbXhdq2EkvBpvIOIqHQ96BIkVnJvHTljvpnSYlZ4nUtyIYs2S4tvcfkve0y15fDgEDArp7uN6ZbORvCLS/FKxRqu0XWwXYNsddiRwBQIwAUsioMEHsG1hwqXo&amp;#43;b2P15BSQpGUSEqt39eWTQdbLu7N7rZYSeAS&amp;#43;IzRP2Jniqe6IVpGj3Zg/2CXV4MweAzlE4fMxrE33U1Ldue7GpbeuIdVUp2Cnf7bb/QInMGqU7O7TeqiM2/6AOC8

V3urtMqYrd64WJZlv&amp;#43;Lb0OD8MpSLFcwDsDnLdPw4VvUlPdn91TedI03Ppd576&amp;#43;gtA&amp;#43;F7EPMATUORHaAwBMA9ACgPEDYAIBJAsoyoKQHDwYeKuho1N5AFlsNWAhXcpW7iW8OX3fDdOqj388Nu62p5ZGg27R5BcjWwXY1nfZC4gDQvBdvNbj1vIReVpAH3gz2BPjceYvb9BH43pjjlI7Jp0Ss&amp;#43;T86UU/IOzm5L1T7hEW/WFNP9hOl9dd0/4P7rfRtl

32yocW6dXE7RpCZ/GHgK5u3nhh0Ugy&amp;#43;5JfPQr/oZn&amp;#43;rbZ/H1EryYFF9KGp9LKiRBLzLCtzheZYWuGBVa8bp1mVHjZoyzsaWGHC&amp;#43;F&amp;#43;KH5cVtAFxK3LcxUFI&amp;#43;Qx8d87j1EUCTUUlSTvkbj1QCc2WYpexQ8twglLjZzFWWj2CNyHxjbKpTVytZRAOu39b5bBatezKaRmBYikj63YLS1HAJhReYuIyWYx9B0aryLTz1Y4xxDUOGI1Dqacdp17MdQb94T

Yv7xmxBqEryH0RPCuEH6gFkuWoIz0SU2mebTOvdpebUm/7gKJeMCuMs7MmIOhAAcAmoNgCVAgwOPB1gHAL6AIe4kH1jqARhhwD0A1QCCA2GWOoTwS2vAI4aYys2M84j6zrG86TyHzqBZkeCvphaam1HjqZL6dHur5P2KvsNbGmWyivL0aFtofpUWf9gi5i2/HhrwykXqLeJD0/gnco4uPFOzhnS31D7Z8WiDgJakugdt771G9rCozpCgKi0b0ueD

oy4QGb4CZrhUiRFq65sPSBrhW4hfjgpa4LDhGRa4HgaF7F&amp;#43;zujOx4G&amp;#43;dg2Z52UEogKqqdTsyjpqFIqUYx43/KeyioLHD7BVUY7tHBXMu1A9QieMcEOARyeiiqgMS0cFtKteekOSYr4MzggH92d6gB60&amp;#43;ECv9oM&amp;#43;LJpsBQA7aEkBKiWPPEB1Am4MGBagswGwBsA3QFc40BlVnQE72bLI4ZwEWMqRiIW0vp4bK22GtPpOS6tkr4GCogbSTeSDHv86E

MzHjr6seE1ux5JG01rC6/2EONbYf4FvlITIcQPvb43K7FpA6qkwQtPyZ0trHJ7AqNvIYFKeXvip6mBg4Jg4WBMZkH64OCZrYGGe8KnYG10xmjH6&amp;#43;8DmqI50CJfq4GyOYWta5u6RXiZYD4KKNrxjuFjo8g0SLCP1S4obEMPiZ4OIQ5x3UDyBD5eYUTtmAOQAYA3jCIV2t7IDgRwsm6lGFqKxTyWF6vAGvSVQVnoLOXjM7hn4T5mB7oA2AO0DVA9AM

oCFgQgK8C/EzgC5DI4moDhDVAkgEYAwY5VuBYd6VVnZyOccJNOhYyeHoMpIW5Oi1ZM8qFirby&amp;#43;GFlMp8Byvpr4AuA1iIE2hWwaC6Ly4Lnr47K&amp;#43;wVNYWmXHlaZzW1tlBqKBCUkhgB6C&amp;#43;NcFsWPrrb5QOzCB5hHGbIUjAIOxLkdYOmCQuaSlSZMLrJYOkltp5DcNgZ5RMuWmpCEgKPKo4FdGzQrbjJ&amp;#43;EZFbhp&amp;#43;J&amp;#43;MWEwqiRMa7PgyKnmEghiXtMYKW

hYQHzQhEIa&amp;#43;D6WLukiH4GBdqiHIQm5sHLD4TWjxzewKAnojKKuEChAj0D/GVS/8nqIiJ9kl/EdRjEgJpIbV4E2u0TWwOqDSFEYM/KUGHhDJuNReWOvDIYNkJih3goc07q9ruq0WF67EQzwiijneixEorMUBAnZb/Cy7BxLXIVaqGjuqbIuerk&amp;#43;iLJUF/uA9ryFAQeuPFYrOiVniwQATQGuRgaw8FZB9YpAB/hCClaH1jdwHAPsC&amp;#43;QygNUDWGaoe3

q80kFlIKxWpQE5xvkzAZL5hhhHuAzEepofMEdWiwZR5WhKwQ6F0y6wYRZRGWvuIGm2kgXvoUWMgVbYIumgOcHMwhAoU7O2vGkqSNWYDu7Y8UAzi7Dyo&amp;#43;1pUbxh/tomEQA4ZpWL9g4SjS6WBV1oCHqawIfp7&amp;#43;eBDrH75h&amp;#43;lFy65&amp;#43;BrpI702&amp;#43;fqn5SuRSGWEmuGsM4G2yHnuAohEA7LX4WMCjiiHKO8qLXYDmdWmch7c3jh7Cgo6AoGDv8zFFhATUS

cC2RLqxOC8I0iC1KahrWplp9zNa8UbmTv886s8J&amp;#43;YWIUcYSoWKCVrN4pvD9CzUzqviiN4yONfKvcqKC3z2sz7P&amp;#43;FFkchhT6zOVPvM41BGaADqqcgoYXqzAmoPoCkAoocvYsC2AL5DZgQgMyDkg3cNgClowvnJF96u8LmCtyqGjRH7w7AddicBfnN84kkbETzyMeXkoC50yJ0eqyb6zobr4f2boQb4cehwV6FwuPoQi7YA4kQcDUhjeNmA36skVL5

3BMsh9TyK3sLxZu&amp;#43;zXAmEayXwaVJsQFvPpH/BrwfGbGROYXYHtiLngiqGu9njHz2eVkmH6&amp;#43;82MREjl85SLUKDCWuC5624dYS7jwh7YXyqp2VnhMJjCqMb4R&amp;#43;BgCnq4IhmxsEFN&amp;#43;zZgOEccH/NVRRBS3p0QBwwHCGjEYbOEur1q1sCGjUSN7F5hKofEAt7SEFKPqhhhAAYliD0XEJDSbAA/suwviE4Moy6qANH6iHILZFKgCUw/uAHTmuKHBy&amp;#43;y1K

J2TgcisdNoh6n3rShEY3dNN5Da/TrPwhgUcP46Dq1KImr7&amp;#43;0KPJShYdsCFj0SvliaivUY9FmqooPZIOoCKZQdJxXqhYtT7KGMVqfgNBGARHC4ALWIMB1gSYJWj8m/kLgHtoUAGwC&amp;#43;g1QC5CzAXAEMEahIwTc5oAuyIaIyxzhq5wk6&amp;#43;HoaGK2swbL6keu2GrasRt9uxE8RtoY/ZAumwZdHbB10bsH6&amp;#43;hvpx7G&amp;#43;3oXIGe0RtnBiaRB8udKNqsnncFH

wHFuqSCG1IWtZkYakV/Ie&amp;#43;mkdpEvyGUWmF/B4dvDE3Wxsu2o4xBYU2F1S5kVCF2BFmml4J2cIfSp2R6uN0aHg3gXFaeR0BvGQuRq4mLDuRKXjZ6DCIRC55eBuXkDYd0BXr47j0dan46nayjvhLlecMGvwT43soSYT4N1OwpyxW/mHEJwV2i1RuoKOI8Jkozpi2Tbmn1LRA8QCcAlEaq9qIBL7cJBkGh0GQaH348QORqe6l4hyIBK42zQOoo9e57k

EoE&amp;#43;PxstohOXrp1rxRNmPcKSGK7HUTjUa4RihTmi3rhD&amp;#43;Y6hAnEXmXIWBHVByAUBAK4wooNEsmP6kmDMAGkpqDKA48M2i/EMAHWCQeDQLlbksGRjXEkRmoVIJDuBOvc5URSGjRHDK9Ee85tWTEV84sRh0QPHHRY8ZPJcRGvkPGOh2vpPEQud0TPGPRc8c9ELx9oFwENQ8UhfqaIpqM8LUobtr9G0RDvuaKnsVasiZq6h8Qp7gxj8iYGlS4ck&amp;#43;QB&amp;#43;

HvNfEh&amp;#43;JkRy7oGdgSmz2e5lOTGme1lO/G3gafpyq8qqrrQ52BWuOAklAWuCAmzJlMXTEFs4yYGRwJ7McDahBdrtlTyorioyjO8K1PygBqVECnhqEyYmdx/I4iXiGrahyZ2Y3Ux/koy12Y1FPQd4HOOtQUc94knB4oNmGWSduiapco5kOyeU6dm7/HmSGomqO9RTqq7jvzpBuJtLqKKETtCxJK3KLeydkbRFagJq1/vjpyWYBnAGdRoEd1FIBdNnb

p7gk3KPYsmH&amp;#43;B/i/4&amp;#43;wJWivAvkA0CEA9SoWDVA8QJ0CaAygOJBoey0agA0QTcc6x9KNEWwFGhMvizxmh3ARaE32&amp;#43;gtEmrBw8fR7cRuprxEkW79mRbm2MLk9HHBIpNbazA70QIxakUHKRD&amp;#43;CgQpJ7QwvRM0Q5BLwSrJvBJYp74dcjSZWIkYUZpfHYOAITp4MuSMY/Ep&amp;#43;1uN/ElAlfh6kgexDmLA&amp;#43;poBs7BrJvYSEEe6WyVbBeq7ZqyKoY2EECihxG

2p8LfRO7IOAwCEsRIZsM5MEODwk5mPxRw0j4oCZeYDRB1EgR&amp;#43;iQSngRvUbXzAepiUzaF6iLnUDdA7aH1iDA4kGlYUAbAM0oBg48M4DMATQLbZERthl4mGS&amp;#43;wvBp8p9Vu3LAMf0U1ZEeISefaipvcQdHq0vzoPHypMqcIGjx0qYkl8RSqWbZSBqqRknqprggi6DBL9svH22FwaRwWWKUmxZOx4YfcFCaIAg&amp;#43;7tE&amp;#43;YrUnu&amp;#43;9SbUZB2L8rPjmBtYk6n

tJrqZ5rIxaMV6mx8KrmZrUOlkfCrmUWMVmwDJeMS54BE8yUMI/WjYW5FMOuSGn4IqAyd5TDJpngnztI&amp;#43;GdbIEx1MYML9KgrsRmQJ/UoAlUZQWqzE1mdfvl7N&amp;#43;oeNxB2OukRLFnUb8sU612MIj8bdUgtFmQh6UcHshf8&amp;#43;IlrGtmKxAPwzUK7P95EGXrD1RJQ4nN15Nk5ZM04bs3lrenbJMUYFaIiyxP/62oTWnrweY5alS6zUlIkGCveGYGcLkRFR

K3xnsdXGhhZSnyDdSROp7kNR72AItCYk4L3IU5VEJHHsjj8XsHiYOcPidrHAcKQaurUJzccSiJwtyHDakcr2vGl4cA4CcJwcyKbcLla8pP&amp;#43;HTh5hFE6nubsuLIc4N1LVoho1/gopnSy1H6i3It4naoMiPVI2QlppAmWkuMPUUYl7gzlAuT56UPHBF1gvoJIDMgHAEYANKckg0DNotwNUDVozaDADMgxAO0Bcp8soaL8ZvSgUwS0&amp;#43;Hq85CpXcSKlh

J5oX3GRJkqVTIXRsSWdGTyB2QvKJcyqXulG&amp;#43;QGIemCE1tuyD&amp;#43;h&amp;#43;STszyU0LPkY3Ba0v9HBCl0phywS5qW/pIOJ8Z&amp;#43;k/6LVA6m/pGYc6lZhQIW6mmRkOQ3CR&amp;#43;LYdH4EZ/qRZ5qWbDq2FiwTMdUi0KiOUrDo5d1hhnx&amp;#43;AycuIOR9lIa445/Dry5qW4SIGlKwMZHBkIq3YUEGhpHMf2Et&amp;#43;/Tmqg38AWACgIayyOuxkw5mYyL1kddn9CyEQuS&amp;#43;z0ST7A

WogO7XqaiJqndBSG4mU6hm5KoK3h94KKxbrgld0tUcP5&amp;#43;w4/t4zmodRLWRCc0Jg0Sk&amp;#43;y7EHoF41eNXjcQNXEgkRwPwuG4gCaMuZgHShqGwjNAxBgIYjujKBWp9&amp;#43;XOUXb4S/0IPymK2ZPCgzhHeHVksU5arokVBTWUDw8hlaV4zYxokmSkYB8HpWjMgzANUDYAcAHWDxAlhuXJJAuAB/gjwFAFvYeJ79AZL0BKEFLZwkY6YoJTB&amp;#43;HttHrZKFnMGfO

22YumHYy6VKkcRh2XaEbp3eadkmmAkV/ZCRM1rIEnBCLleT3Z&amp;#43;8jKTaKzBg853pBwCUn3pPFKiihOMcD9n8WVqf9m2plpOngOO/yo6mg5/6dmGAZ7qRpbIxZQjCrghIriy6eeUflAmvxkGea7VhtnosmJ&amp;#43;tKrDlI58OcXyNCbng/koZyduUhU52aB/mBB9CozkbJ4acV71mUBVzHh4JGAHnjqvyBQZJi7KExIoYiqoSieuLyBhDj0NEk8pvCx2mY

EP8LEMBwgChQcnhz&amp;#43;MWKGiYC3sYQJRO5yLib7uJ/lKgV257GOp5kLRHdpY2N7Ptytk&amp;#43;ZHpmAcm4c0S7aw9COnWqXFl3RWW7qmWRsoQ&amp;#43;LN6qxhRLhwXCxJgNTUorOa9xoiQ2kxzsIjeFizfupaXHKIBFaa1nVsN4KWzJ5L5p0DAauAPQCYAlaIIAIR9kPEC/EiLvoCagDYHNnz5MFhAQwxS2YoJy2cpqRg7RPcqEmt5YqTtlLpywV3kJJnEUdmzym

6ePFOhZ2bumCR0gaPkiRntJ0Dapy2DmorsJ8rwzFGyoOdJAxG&amp;#43;QYFb5EMcmEWEY6m24H5IOVp5g53vLdagGLnrgq35emj2xwZyrgHxa4eesnadFyVESrJUebOXy&amp;#43;ESGXjHAF3qcMZLJtGWAVyODGf5GIJbqCeZhw/1OWoxBMNG9zEGU0isgIctRJnT4ST4ulnDuoYOVSeo8suW73IgJiPRdeC6tUnCKNBW7nh4UiT8aXi30d0TXypqDmm&amp;#43;uAzmTD

PcpvC8goCtyHKhlEqWuhAkcdjiHo/QoPhcgpBUeZyFGF3ITebx5xicB4DRtaSybKAskqqT9AE8OJCag3cM2jtAvkJIBsAlaJUDdw&amp;#43;PGXkZMZEdwW&amp;#43;JWTBMEFM&amp;#43;oZOmCpncc3ndx86eR6K&amp;#43;R0ftkxJ&amp;#43;FiPHnRMSQPkSBCRu6Hf2ltmkbW2s4FPlnK86CsQbsoDgvnpi28UsyDqjWmUXqRf2ZUUKMu&amp;#43;aRykYrSbziGRLqSflPx98Z0kfx1nhH4jGVp

Wpb4qWMY7pYxvRVjF2lyVJfn9FbYWpZVm5fDkiYZj1oMWgFaljhl0ZgNuskIJTGSGph4OKPih94hIj8onc3at8jwCiavFiWZHrCfxwCY1B3h5ZxyAyhFO1qjFGKxpBWGC5g&amp;#43;KCE5mwsApyg&amp;#43;wE5jk7o2vENsKfURahqqAmFEk04cQNwlE5XiV&amp;#43;j7ChC3Cvu7xqr3ucWiJtqEliwcNIb2RrIVBXO4fUG7ONRYpHalfIicSSm1rMixaQYWNZiJQYlx

5phXXDO4aAV1mtwxAC1iYAdYOPAtYjkBwCSAnQEmD9AzaNUCGcaOp0B0W1JaRGGSETI4Y4eQ&amp;#43;m3FymjeWyUMRLeVwELpESVEU8ljOgdn8lsqfEmrpW6Yqkuht0eRbpFRwWPkapCLq3qnpFrCvHKB9sFHgbxMkSDDWZEnpoGhQqZRNQ2&amp;#43;B8b7aal7wdammkO&amp;#43;cOAIofhbzjphDRcfkQ5p&amp;#43;VDnvM1&amp;#43;cjntF/&amp;#43;TaWAFPSQ2HJ2crtl7LJkyc1KGukxQ

578uSlnXCoxzmr9a&amp;#43;ByVAER2yvkQCzIhSxX2GbJ0BSoEnJ3sY9RcWpePYp1E2iohzLu&amp;#43;lShB&amp;#43;yuIYIqllaeDKjdU9ilmUhZyNlPQumNeExQ/BY1JvCABrCUCLVlvrmqibUaGFNK7Mwbj6ilGsEoVEbFvrr2oF4AimCgTefVNIRoi4xCNTiFvlXVSxVV&amp;#43;qqpDlTEMnDPIK3l8hESsARyF4pMeSiwmFRKUUi14acmYkYBvxDwAs0hAH8C4A&amp;#43;wANjF6

XWE3qP0FAN0BPlA6bQG6ileXmUURU2P4k8sR9vh6slM6RwFhFAFVyW8BUSbyWJFPeQKXHZQpVdEpFQ&amp;#43;WKUj5iFZkX2g&amp;#43;gDkW5aUYUD7&amp;#43;C4nuUnCauAvKj4megaDFHMWpQ0mQx1RXSi/B9RYH7MViMaxVdJjiNBnoZfRaRndFTnr9XgKDpclQcVydkAoauXlDZGyw6GaTkAJ5Od/mSunYURk9FwlQ7rI1EGQjlI1olZ/GSVN&amp;#43;WhkgZOEE5G5I0NQX

7xkRNXT5cOQNal7BlWdgsU2ualbmnHuyWaRzTe3utew7qV7ocijEddq/y0iJRGDQI07wuo4USzVGDR2qEVfa43acafByZ4G7NFgwwnmONq&amp;#43;YNISbl9C2KQPhgoXsTSEWwFjplG2odlv2ZNEbEGZVOwEqEPj2wIbs9m&amp;#43;5tqDuwI&amp;#43;3EA8aVk4eAVp1qoPkqoHcAhhGrfQxQQM7YxutYSi7qDEif5paKAv8jxRyWkNoOVplnHF8QxXFByewkbsyJ1En

ycxQ1Whyd9DSxpKOwpjE11ExT7IcWF9SJZTuT1QZ4vWiO6BwLimM5bebyKj76FFNgiXXqm5ciXblRSPOQChGJRgFQAFAN3AwAzAC5CTZ&amp;#43;wPPbNoh5fEB30gwPoDiQfoT1XDBfVaMGoa1eVkx1Wigm5yDKqmHjK/ls6SR6clPAZaFzVoFXyVhGS1QkX95q1YPmil90QcGehB6UhVHpntNXFoVeSdPlSEtrF5g5BL2aGGGphFdwBYoG6udaXV18cfH

alWsrvl0iF1s9UWpCMc0V3xOKXDUZ2v8dA18uMORSrgZ4CiTGEZ5bCg2TIKyVeCk1YAL0VYNvRUhljCuGWX4Sqf&amp;#43;TRm41KNWAkhpNNapXhl6lbAXoJxXMhjkQkhjFgHhwEv8gYS7RFtKcZX3lP4wsiPhNRiZmmWOpjuPwahLP&amp;#43;F2it65G02it4&amp;#43;V3OTuH2qG6v1QdlWCUw2dU&amp;#43;yK6ZDE0cLeICKuBTo6&amp;#43;utTlxbcZneDrVtUM9GChT8BAjVx5q5T

j2QQiR8rvww&amp;#43;ZUcSZFpInrLWjgREixCzej4VM5FVhhXXXlphieVXa4wHtBHoBL5s2jmGLkHACDASQEICVASYFkDXlVkO0DxA3QM4AUA3VfmAVWtcVPX1xc2L1zwaT5H0orZQRTMHslm2eEWAVuGksEgVQRmBV71EFfaGxF6yhPFrVJ9Wknn1V2ZfU3ZCLmwB7VV/ItQOVBFXb4v179TawB0fCjGFkV&amp;#43;gRRUVFt1VUWANGAsA1tJoDTfGm6EDa0W9

JJnt9W1ssGWg1ml8Kl6W/WOSEQ1k52NXfmUZvvDTlE5gOlTV5eixTQ05OtrA8JHUJRC&amp;#43;z98InDFFrEU1OI3I2RGCrrOuO/CdJY2F1MoxyxlqBkFXFR1EWqplLEFChKoYqP6pT09as96JY3BnY7gmPKdvxxQljSagwm44SVRqFqxHMRdeuEKuU11xVRuUBNW5UE3zkI9tVUvmgwMGAUAmoIsAl6dgHACzAxAHACVolaB/i4Aj&amp;#43;EIBzZsjT4VyCjJU

bSBFk6QR4hFmGlNX7RQFR3nRF81d3ngV66YKULVwpfxHtND0Z03C6PHiaxBQMpRxqaI1EvJnymBRhoEKRoUN&amp;#43;y/QGwj/WrNf9fM06ltFV5bA5hupmFNFt8dimQNM4vfnh&amp;#43;71R6lIZOSP/H3mFDb/kawpzdnxo5NzZG2htWfuG3U5NzS57BtBNeJW24WDe4EYNkwCG1TFf&amp;#43;cpVbcYaUo57c7fnBxnUV2p0RvG0huCZ2wjub67UhwWewofiXdnXgOw

OyfQZakhKM5hrsWiFOa3UQYD9TZaWjdzVJKo6mfxfIJwmSiHayyOE7rsA1DwpVqSqOdx2Okivt5YtOTs065BsqNaQk4Gqt7AcSVZSO6ppaaVDR5BblvCJi1PXiCY3Cv0A1FfhE/lfKDUX/G&amp;#43;yOZFIrSKcKQPqUQ2&amp;#43;DbiSiXpoapCz1Za5S9JUtzWYSlCSxKVGRMm&amp;#43;5RUA8&amp;#43;nQNyaSA3QAk3NonQNgG&amp;#43;QhYJUAIAU0aqFZN6oZ4l1xa8G9SOGuoQU

yymUrWPpN5f5RyVbZERe3kBG/AdrZ9WawfEXdMh9a03H1bHqfUehP9t03TMntLNlGtkupohewTHCJwnyonhGENxA4FPxX8GpUfHvpQlgs20VRwi0mMVIDdVIAZppT60TswNT9Vn5NulxW1sZDtaXwNf1V2EE1sbSrXZt7LnXAE51GS/GzFEwtAn7N2DXHwBBpNAzlUNtDUW0nUQcZATVeejcjasQWap7kh6TErPxzuGpLrxoiT7Iiippd1N3zaKT

7F8ho21yFTBRwd7aZapaETImVmqDxsDR9EIqDo03cbTobDUi1yFPzxROInpFIQmjrhB/IEseRyTaQcMGiD0/RKSF1lNHCCUhVDItrwBKfVHgJl4o/tPyBgO3s2QHINwpvwrmQERyJ&amp;#43;NycS1lBNZGVVWt1L5vgD6AzAM4BCAecXy0Mpiop0CFgzaHUD&amp;#43;QfwJqBnBz5UOn0BY6rykbRXdvARStHcRNW7RcrThrX2NTdvV1Nu9aRqdMcqYIEKpJtjun

rVHHeKXCRkpQi7UBt9ULL31adEvwPC13Qby3pwzeJ35Nt1GTDrR9rb9mUV2&amp;#43;XdW75iPsp2H5TFas0dJ0Oc/H&amp;#43;kn1Qm1E91QnYEx8MlX624xuYUg2o1NMU2wQ1tzay72ReNdhm0xXkQGXgKilU52YZ5SFg1kZFSC51htv1kn5CVWXpQ4S9cxYiEedhbao6&amp;#43;uUSg8YbaNePcXI2/4X44lcV3MjibC5jWijAiZxucl1kNmMoo6onROTAxR4KLCgqq1m

Rl1X8eiCsQ5iYcKXgeVneKQk/8MYaZZ8Ka1FuyYC4KABy2qcNudTZpZ1Hl04iI4U8Ktd3tYOGLefaglhbUgjQPgeopZNOW2WoYBNq2NLvMIgpBmeLVoH8cHN9Gd4YqIqq2WZZBIrEYWeNey/hJZdBwBwpHIb29mVbURjI0ILfLIWqg4IOAEtTuXPg/KFMG8brs8KJVSKxDyKQV&amp;#43;O8JZS3&amp;#43;NIHWVVgdZNc5EZxVhTwC/EPdS0FJAfwJgDtA2ANWj&amp;#43;

Q&amp;#43;gLSyFgnQH1gAOp3Xh07MxUJyzitk6AhYj69XqUAytrVnOlUdVTc939xe2TvULVqrZ92QV33Ux7JFbHXsEA9m1WqncdNFoRFMeZ6Si7LgAqAS6Rm6gSqXi0iTkNSqR5FbJ0aR/9d8r0J/bbDFXx&amp;#43;Pep245LniOIme4lQipYNcrmn5OBLnlbhjgYNfKiUNfkbTWPNwimxANqrfSWp9E/fIyjT8nDAIrX8PmN7qfh91I6gtaLbZJ1TSuQVBzYSpeD

1Qlcfsi2Q29utQGh0o6NrgX517IcBHrlE/bHkN1QTYUhUDkHaKJwRhYOJCVojkA0DiQcACk2fq7aGwCYAvxEIDkgLkH1hJgCgRPU5NFedPWbmovtKaU8W0WU0UdFTdNWb1EqTMpvdr/Q01qty1Rq1H1Ipex0dNXHdtX3Qmtrkng9spSRDjapBdeny6S&amp;#43;T6Y0ihtS&amp;#43;01JiA3UnIDTrQA20VGAj&amp;#43;nutjRSComlOA&amp;#43;hmtFils0I5ISGe2LiVsKrgPTF

Q0u500D1DZzHKOHNeurSGfwgNXTt4iqmUhwq6rUULar2tE7wCiQSYo/Ik7QtQH8x7sblTd0ctHnAd6g7TbT9fvDn46DqznBGDAdQI5DEAvoH8C&amp;#43;g7aIQDiQNsOSDDwQgO2g8AMAI5BQAjDIf25Na8G4PNyV/eL6zYxtROlzozitOnBJk1Xf2VNM1VvXP9QQyq0hD7/U01QVSRUkltNUQzq0xDwPZ7RCt/HY6bcAsKDpUSym8eLSWtCPYCK2tZKC7

5xhSAzdUfpNFc&amp;#43;LH&amp;#43;/vip0rNanZUMtF2zTZ0TJcDeg2k9t4OZ0SVmDWDWa4WbcWy8j&amp;#43;MRjWINgwk4EQ1DQ9ZGf5kxhKNTseNQTX2eIxYKPGddPV/FGd0roa4kDXPYMK&amp;#43;EObXbgc9OnSFpY51nfHZFIMyW&amp;#43;CYxJo3eChU5owIO5I5o8vVkNWmmMINDmMWKMo57niL1o19oyDWAJ&amp;#43;bfX4BR6Ep41F4c7slnh6ccKKh4tVLml1MN2ItByUikLOuxI2P

XnEF/CRaTDBrtCvV3gACjHHLFcobKKUQvcyHLqjz52VElVjh&amp;#43;EqagQ&amp;#43;IarVF7wyGGRzNtutW5aSdU5k1oBY5WkGi4SGNoeoTa93KWSsIJaiGAC1NsA7FPuI5qsXGoIaBbk78nrjhxOqfCsMTnulRO/wzhp7Pv66RqcMxkeVZRvUTlqh3tlSAmHEpmATUPKO05xQAEjn1Qmr3O31Uhg/C3gYCF4&amp;#43;MTTaWXS7wzD12o7BdEnjWAHbcuzCxhBoyGH5b

bcfuuVSHCONrNRV5b3kcgQD0cAi1KMHHCQbuWE4Qt4ICtsMTg65&amp;#43;mRCxkoNbjf7XJ5mM1qMSFMHBKUQpEiHCNq1El6rgmEqISG7MhElmnOwhItGWABhyKUQJ92gHFBUQ4QgPweuvzS201chGBzglapBT5gRMnaudWesDhljY/B9BobWJY/oC3Y4izWgt5r8uJmP0zdfEinGD2QEInnolMEUKEQA7WHWC4AgwPEBCAbEHADVo2APsDacOcsKaVoAs

k4O4dLw&amp;#43;cDr58Gh&amp;#43;Wuco1XKZoa5HWvWMRwI/4MvdYI1ra9W7onEW956rSx3f9kQ7/3RDEpfq3W29ADkXnIUnVM2w9eI8vnQwETnoisGMnfkNkj8nc62Ujn/hgN/pWA/SMbNRowKMkKplAjWoNIlTxWDCgNRRk1TpDQG09GHpeApHNV&amp;#43;fT2EOHUxOylh6GUG1dT2KqZ3VTko4I4v53FbCFUxmNSyO2RXQq0OdT7ox0XAJNzUhmhUAyZ9b8jHWW0Pg

FsvUzkaVA4eF1dqQ4OzjHIF7vAWEmFeHmrhyFE9kOhC/sfCYQ&amp;#43;vBpAS9d1qjCyYoH7MByhCKAvMP&amp;#43;wI1EGDEQ5wtqiWEk4wHkjhKE4RA6FlBSIh&amp;#43;yW4aHBxQr5EiZWKzEji2gcE&amp;#43;OsLPenZnO7E4xwo12oijIX7p7sXFgLHjUj4vCLoQMAjXgLeAWKmmyo06gxIicOyY6gncT7JNowiFeHGnWYZ3BC1lSqdb7JPTPxTdrHaYcHvBNEAPtihvUlKB

vx12MJjDAoz7vf52mWRaS3xJ48St9x9Ugsbbk1utrA2SsDJM&amp;#43;yyHIQSmAJeoIdY7CXK06pOEqqscTkE7jVsMcLns7CI2rRlSk6oOzdoHYB6TCNAppNhNazoMBJgUADODKAfQXAB1AVaAjpFyrwMQCSAcPFynwctVhtHuZygvLbeDnk/&amp;#43;Xyt1TU/2BD/k/U0fdSrF9062YgTBU3R52WkX7pXTbEOUIXegkPn6EPRiM0GPKEvlpSMA3Nhd4L7NXaZT

b6QUPkjmPbRUeoj1WUMvV4Dd62bNdgW6WkZKdmK609YrtZpmUWzcZoDFdzfAnHiu04V501WyGIrd0UIlol693A6eo9EFsOWMaZBEEFH1UN7SyIeuJjc7kY2htURxnInZBwM5gock&amp;#43;LtRgHUnEqTc3ZsN0l9YXP1rOaksyC&amp;#43;gRg8yCHDhJf5DWTswL5DX0Yc&amp;#43;4m2T5eV3qvD&amp;#43;uvSVyC89Tyz15bk4nOAj69ff0gjAQ/PoZz73SvrBTYQ6FNwjP/dP

GIjUU6b6e0awGiMMWFXN7oNRaQ3b6FFRqaoQFkN/mmOxhRLqSPo9KA2g60Vuiss2GlHrRUMsVGna0V7NbmhGQmjPbCaN6WTnUTGNTMmLhlYNMZPZ76aNo6maejsCitPUDKlZ53y9yNnry1q8StgV5qrVNINpa5qrWT75vrslVuYsMFdRexocYSE9EaKR666I&amp;#43;lfAIMJmvYmUwC8tX7qIcOqGCI8F93uwrNO7jQwUHjnyXap9kvqiVS98K3m94NaC

KI7NAdag6VWBNmw1WHuzn83BHMgdQMyDOAjkHWAaArwB/i&amp;#43;gfWP/Ow8WAPQD6Ad2ZAs0lhkiWWi&amp;#43;w1a5wlNk6RA7/DDPEnOUd3k&amp;#43;Km&amp;#43;T6czR7NNb/dnMf9ucz91v2sFYXPD5CFQAOlzUGOjpg9lc0kN/UU9P9BHVyUz6aeuXRKTCtzYMe3M5TRQ8&amp;#43;K1RNzDSP8L5Q9kJCLVQzA0HN3Sbp2gJbFT5r/VwoziqGuPI2BlXg2o3aWkxSmFg34qAycny

vLBfoa7vLuo7WwV&amp;#43;uGaMnU9cuI7ocjjutqOC9d4FT1fgsKymwcjeMbIs09/U4XxAFwvfqPkNGsD5EGWoZQvN0NzGfLI7I0uX2TZg60nfzwFzIn8gJOi0khITUD7haq5jVZeCaLSZqKwvZUSJpRw/Qas/JQwCiNmaiRdvuv3xJQqXV7HSTN7aHH0GNsC9xwclqtwNleREGzjm8GLi20Q0VEIQKB0KKHl0d9uKDkY0hreIe7o2ksZ&amp;#43;IC5ZZc&amp;#43;J1lRi

g8bgigEjSG8J5jX4JHhqtcrW65vBnbCJYPbel36ZW7H74ASafXmpITF3FVFhwiNOtK5a6sdxA7&amp;#43;Z/sxMt8buTPQRu5CSV3vUAzqexbsuVT9QmopRL/4rEB5qmoQih02l11ESS8/NXmr867PtZHs1B0SA3cPQBAg&amp;#43;gNUAQgkqFZB48PdZWghABAVykmoTcQfZ15NEWR2r1qC15N&amp;#43;DPS2nNYL/SzCOLVjTX3nNNmrX93atZ9UiPRTCLq/SULS1suBP

jsKKwvw9IMHaPyR&amp;#43;I4dydOBHq76/1cndroUjwiN9F8LXOEaXg5r1cItWdVyxCo3LkBsZ5Fh6NTCrV&amp;#43;vlAirKLzbbkh/rQVJs2U5GuKXxqL40zCpjFvU0&amp;#43;uQ1Uo9NOoZibXBuqLSG6JKbT8xR0M6LjftO0tEFEmqiQsAk7hLI4TDRHAKoPmPSgXcveGU5uqTXewxTS0ur9TlkPmDmSzDUaZdwfDnvU04Pu57BFj4iLCTcgJw8U1dqXh8uSRs9jg&amp;#43;G

f5urvMIn1yZ5mUEtmqUxLdS5qIaHyvhCdBmUT/QFeOSg0QaaaVSaEgbs8UP8KQTshR1tluCYXjcNtpnLUMat8Nk&amp;#43;03U7MvzLs7UEtCSeQy1rOPWb6DYAzaM2iVAaTY5DkgSQJ0C&amp;#43;g5St0CVoVkPsATy2TXZMuDeTbarjBG0ZK1zoJ9h5PDryc090Ueu2X0sCBIy2ulQjs61Ovzr4y6kWTLxc3q1kLFQJoAqgcU6Y6zeP0XhVwEJ1Xu1VE&amp;#43;Raj2b5

hUoUOoDsbqHa49qnYbLYDDI5cuadPYg4HNCIo&amp;#43;FQVhoG6516aVuA0O1h6GX&amp;#43;tP5GnUyOrJIGSisajPo4xldDnROPQeurmGFgsNWa1DQc4z3EWqEiI/E8EHLwclytW1LFEdS8GiAldJxwCNoebV4FKONQD6Izj3hyoN/huw0TY9C/wB09qFDQkhO3ub2wc04aatxz3OeYqneHfbXMnUzWnsy5VtIq4uPb0a31qfJvMZeG3CF0hca&amp;#43;yFxA1nJLzs1P

2uz4sBYWubcEZc51g9ABwANAbNL5DdAbAEYBlLnQLz7dAgwBQDZFzw9FtrwLA/BoeDAST8OWSwRclsPdQI6OuRFirbU3YLwQ1nOmCB9XOsRDWrQiNLrpC8xozMFW/sA5F03i3i3sdcytG7rPpikF/ILcy1vlFbWx3MKdz4jHBwadRb3NFT5y/1t1DyMW1NQNsyTBvM95U/G0419PpVM7l6MQMmOdQ09JVaLBbTtPErE4UyFe2mfaXVIQ51ThKoQa

fXLEddKWlfyVEZRLPR5dK5Vd7TUqGM9SEYVpFDRMoGUyV37j0KCbGmouKKHHg0UeNbX3cF3jCxBKtuZYTp4kmwTtlrxhWkuuzCuOMKWFazvQBCAFAI5DNoEoi1i4AkgMPB9YvoJgDezjkFZAWGpebUsvl9AYwlNxRTbNgJbQuygui7aC90sS7tHdaEDLkI0MvQjn/dBW/dhW/92RTQPSuuQYFW46DrrmvLwkp75ra9kZDSuibN2WhLq&amp;#43;k7L2Uxeu

dzXxi3IFTR&amp;#43;fbsPrFyyz1k9cBgtsLGUBxrAwHenXcuds&amp;#43;nQNPiL3I0hk1CaftpboxaoyTmArYlWDU1&amp;#43;BKxAVhlm22eIkH/KA&amp;#43;KI0nfKbA4SP1MKgRYxyAm7/Tei&amp;#43;ezw06IlNpRqZLU&amp;#43;LCZgWLPgRKHHNRLjdCpMO7PCM2gzUBg6q40Qco4nKRBvJOYj5hOolRDmBzE5eD5hYoNqlOqnFt/ivO2wu/IblbSO7gJMVkUYSUREc4uX36tEm1N7qOTua

V8bJq61L6aNkpa7&amp;#43;7UtGg5sOFIe5boNaG4QN3DiQ3cDwB/AjkMoC4AQgLgAIAMABXF1gSQFZAnKXO9Asf1jcXztXdkvvuvWSIu6EVi7Kc4/0ZbE61lsMdOW8ft5bp&amp;#43;7CPbpF&amp;#43;4uucdqu/C637o4DkWuqQO3Qu/Rayw8Hm8TTieskjWU5wvtb3C18aveN60CogH/cxZ3Pr0B6&amp;#43;u/gGK2ZHep8fiaNzcWDSOItDmmJUjrbDzWQe5pcxA8JXU14kj4r

zA5moSp1L2yhgAcex&amp;#43;OpRhdtcDQNaEKJ8LjjLVNWoo4T7udVtEXrEN5gspCdISXs3MU4eU&amp;#43;k/Z3u1BvMKOI7DsEa3C4A3cHlYtYnQIzstYRcsGAIALkH8CVo&amp;#43;nCkxsasR/zSlkjhmvuKCNEVvvpHO&amp;#43;&amp;#43;Ls0d3ViulFH066EPy7&amp;#43;W4rsLryu&amp;#43;UfX7ZWxIAVb1CA/vKBVamwysi/gvUcpT3CE8gETIMWeu7Lf&amp;#43;5buZ4q0r0dWBwfn1slTSG3Mc1Tix7

QPLHwimOpm191AHQ&amp;#43;NKg4TsObxO98elY9LUt1rOLKdTTiQHABQAcALkOJDto3QOuTkgpAJv3VopANKWL7Z3dPUn4&amp;#43;FS&amp;#43;Q3GLcfXOC7DwCvX3dmJyOuZH6W8BWvd0uxCNZzSBESf4nBWwXNFbG1VMsX1My5&amp;#43;o1HsWI7CKlu68qTvZuLoWX1k&amp;#43;8aevMwXwEIA/7HRxbu5TF3AR1AHePXSMO7wp&amp;#43;AcGaU04EQTT76wqMQHdlAEQLHhB9tOQFXnX1QCo

3fF6pZq726Zb7ubuQ8Z/TrmImp3CzfP1SxYydcShj4BPtHhcoHlssOp6qwyku8iXxxmjktnWZ4cVANkAgB8tPANUD4A1QJUC4A0TUkDDwdQGjyFg5INDiInHSsf6GiBHsU00Rd3QCPb7Hp2lvclPp5Ov4ngywGfMdCu6x3hTxCyrsUnau57Sa7tJ1IQPigqLQY4jvAPVtFFhvCEqXjZRRmdZnczTmf7LOqkjY2Exy7esCLZy6AeO77U3DlAJyo5x

VVnJnSRcA1PSYTEDJjulIsPL9mnAcSYYx3F4aj7QsCu4xs0wZ22dcuGtP1TEHaL2iutbAETfLb&amp;#43;WK6MX7FaJcvriNW51bTGG3L1YbxB8zlRxc7mhO42aZYop2wyGNHibUULCgLJKZyOLJBKSg3ZjS5KkagVWo1LsShXMknfFg9uh1N1qw0IxJ451qvqCVRtaKqs17cxdVIsTabieurW&amp;#43;wz&amp;#43;nhy0b7EB65Lehlx3SJwU6ocU&amp;#43;Ok0sOCGo457eMsJZ

lfFjTEExEexHIvpoi1lShTiE7coEWD4rl4lIbG6lZcWGl2rU6qKnBISfwuVpQclZG5YAS3Zq7J2q5jcnBeWDqNFjPs4st3M1bueO8ddRnxzS3pLQsC3XXE4AABBQYcAHACUgYkNwBmQ0ANcCZAFQEQCokKwAwCEACABQAM0Pk2CCzA21ztcwgEANgAiAv8JqClgjSu6epbhQPteHXnUMdcZAG12OvZHDOpdekAR1ydd9YuR&amp;#43;6JPXL1xkCUgsuybS

fX11ydc/X5gqfv/X2QDdf6AiHj&amp;#43;elAB189cA3GQIFCuhx4KDdQA4N31icAV9CaCkgO8FmjI3qN&amp;#43;jfkghAEYChQ&amp;#43;67jcnXw8FgBQARp7cAgwNhFEzIMpN99dRApAJTfPXbABQDXAuAJfUM3&amp;#43;gAQHEAdLN8Ds3IQACes3yMtzf83bN8PA4dDUHtfMA35oCD4A5vmgBvIy17LffAZIGLbi0n7BddGAfQbtVoAdxPQAEAmZwcBPm3N5DegD6ANLfLXSI

CQAE3RN&amp;#43;cBI3Nt8QCUgCAEFBK31t6QAkALWGwC3QBAbgAMsrwfdEkAG2HcS&amp;#43;QgIK3CkAygHCAAAFAMTUAvAOxgJ3YMEqwAAlPSB1ACAMoCiQG6JHcx3bWvHf53o&amp;#43;u8Cp3EAKbcw3v8EDe/AgUBjycADphkkZ3toJ7cFQ01zKBZA/t8EDpnpAJmdHAa5IQBu3qAIhdHAHACDjcAg92giP004KFCIXpt3YAs7YwMwDkgw93ADe3vt8PcB3FqVBhjAh

AIwDDwfQYyz63Vp3XEHXnwAYCS37enDGrNrjN0Bb3O93vckIxkOAA3EWtlkTAARkCABGQQAA&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/excalidraw/test-draw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/excalidraw/test-draw/</guid><description>&lt;p>==⚠ Switch to EXCALIDRAW VIEW in the MORE OPTIONS menu of this document. ⚠==&lt;/p>
&lt;h1 id="text-elements">Text Elements&lt;/h1>
&lt;p>test ^oCvNRlev&lt;/p>
&lt;p>%%&lt;/p>
&lt;h1 id="drawing">Drawing&lt;/h1>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;excalidraw&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;source&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.20&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;elements&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nroZyQujbv9iv2D2vhY1e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;rectangle&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">-220.83200649819003&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">-319.43362024416933&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">221.35295467167836&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">63.16224397659352&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;angle&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;strokeColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#1e1e1e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;transparent&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;fillStyle&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;strokeWidth&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;strokeStyle&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;roughness&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;opacity&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;groupIds&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;frameId&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;roundness&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;seed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1981209730&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">202&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;versionNonce&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1518661086&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;isDeleted&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;boundElements&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>					&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;oCvNRlev&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>				}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;updated&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1707582367455&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;link&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;locked&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;oCvNRlev&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;x&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">-132.35550322240942&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;y&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">-300.35249825587255&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;width&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">44.39994812011719&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;height&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">25&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;angle&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;strokeColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#1e1e1e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;backgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;transparent&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;fillStyle&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;strokeWidth&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;strokeStyle&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;roughness&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;opacity&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;groupIds&amp;#34;&lt;/span>: [],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;frameId&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;roundness&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;seed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">682984926&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">229&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;versionNonce&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1705476638&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;isDeleted&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;boundElements&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;updated&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1707582367455&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;link&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;locked&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;text&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;rawText&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;fontSize&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;fontFamily&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;textAlign&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;center&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;verticalAlign&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;middle&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;baseline&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;containerId&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;nroZyQujbv9iv2D2vhY1e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;originalText&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;lineHeight&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1.25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;appState&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;theme&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;light&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;viewBackgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#ffffff&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemStrokeColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#1e1e1e&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemBackgroundColor&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;transparent&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemFillStyle&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemStrokeWidth&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemStrokeStyle&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;solid&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemRoughness&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemOpacity&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemFontFamily&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemFontSize&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemTextAlign&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;left&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemStartArrowhead&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemEndArrowhead&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;arrow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;scrollX&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">673.3706946916328&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;scrollY&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">662.1006991365945&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;zoom&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0.8823677415149205&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentItemRoundness&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;round&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;gridSize&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;gridColor&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;Bold&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#C9C9C9FF&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;Regular&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;#EDEDEDFF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;currentStrokeOptions&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;previousGridSize&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">null&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#f92672">&amp;#34;frameRendering&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;enabled&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;clip&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>			&lt;span style="color:#f92672">&amp;#34;outline&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f92672">&amp;#34;files&amp;#34;&lt;/span>: {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;p>%%&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/ipad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/ipad/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/jekyll-%EA%B8%B0%EB%B0%98-wiki-%EC%97%90%EC%84%9C-hugo-%EB%A1%9C-%EB%84%98%EC%96%B4%EA%B0%80%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/jekyll-%EA%B8%B0%EB%B0%98-wiki-%EC%97%90%EC%84%9C-hugo-%EB%A1%9C-%EB%84%98%EC%96%B4%EA%B0%80%EA%B8%B0/</guid><description>&lt;h2 id="이유">이유&lt;/h2>
&lt;ul>
&lt;li>jekyll 로 빌드하기 힘들다.
&lt;ul>
&lt;li>일단 내가 ruby 에 친숙하지 않아서, 에러 메시지가 나올때마다 좀 막막하다.&lt;/li>
&lt;li>솔직히 먼가 advanced 한 기능을 쓰지는 않기는하지만, 가끔씩 필요한 기능을 직접 만들고 싶다는 니즈가 있는데, jekyll 기반에서는 조금 어렵다고 판단했다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>github page 가 더이상 jeykll 을 강제하지 않는다.
&lt;ul>
&lt;li>이건 너무 구닥다리 이야기이기는 한데, 과거에는 github page 에서 공직적으로 지원하는 github page builder 가 jekyll 밖에 없었다.&lt;/li>
&lt;li>물론, 이건 지금도 비슷하긴 하지만, 이제는 github action 을 통해서 artifact 만 업로드하면 page 로 만들기 쉬워졌다.&lt;/li>
&lt;li>과거 hugo 에서 jekyll 로 넘어왔던 가장 큰 이유가 사라진것이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>더이상 컴퓨터로만 위키하지 않고, 모바일, ipad 로도 한다. 이건 내가 환경이 바뀌어서 그런건데, 길가면서도 메모하고 싶을때가 있고, 그렇다. 근데 이걸 하기에는 vimwiki 만을 고집하기는 어렵다. 그래서 obsidian 으로 넘어왔다.
&lt;ul>
&lt;li>이 과정 자체는 &lt;a href="https://clarit7.github.io/obsidian_sync_setting/">Obsidian github 동기화 세팅하기(iOS 자동화, 단축어 활용)&lt;/a> 를 많이 참조했다.&lt;/li>
&lt;li>vimwiki 의 단점이 image 업로드나 렌더링이 불편하다였는데 해당 부분이 자연스럽게 해소된게 있다.&lt;/li>
&lt;li>모바일에서는 &lt;a href="https://apps.apple.com/kr/app/ish-shell/id1436902243">iSH Shell&lt;/a> 을 사용해서 hugo 를 렌더링하고 본다.
&lt;ul>
&lt;li>이거 자세하게는 iSH shell 에서 mount 명령어를 사용해서 하는 방법으로 했는데, 뭔가







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="mount%20-t%20ios%20website%20/mnt">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mount -t ios website /mnt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
이런 류의 명령어를 쳤었다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="과정">과정&lt;/h2>
&lt;ul>
&lt;li>솔직히 막막하다&amp;hellip; 너무 커스텀을 많이 해두어서&amp;hellip;&lt;/li>
&lt;li>일단 hugo 에서 jekyll 로 넘어올때의 commit 을 봐보자.
&lt;ul>
&lt;li>&lt;a href="https://github.com/minuk-dev/minuk-dev.github.io/tree/5630fca1452dfaa97d1a25e4e9f91d50d2d58d56/src">https://github.com/minuk-dev/minuk-dev.github.io/tree/5630fca1452dfaa97d1a25e4e9f91d50d2d58d56/src&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>content 폴더 내에 wiki 를 넣고, layout 을 설정해주자&lt;/li>
&lt;li>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://minuk.dev/wiki/lectures/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/lectures/compiler/</guid><description>&lt;h3 id="---">&amp;mdash;&lt;/h3>
&lt;h2 id="parent---lectures">layout : wiki
title : 컴파일러 수업 정리
summary : 2022-1 컴파일러 수업 정리
date : 2022-03-25 22:26:53 +0900
lastmod : 2022-06-15 15:53:46 +0900
tags : [lecture]
draft : false
parent : lectures&lt;/h2>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;ul>
&lt;li>Programming Languages
&lt;ul>
&lt;li>Notations for describing computations to people and to machines&lt;/li>
&lt;li>All the software running on all the computers was written in some programming languages&lt;/li>
&lt;li>Before a program can be run, it first must be translated into a form in which it can be executed by a computer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Compilers
&lt;ul>
&lt;li>The software systems that do this translation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="the-move-to-higher-level-languages">The Move to Higher-Level Languages&lt;/h2>
&lt;ul>
&lt;li>The evolution of programming languages
&lt;ul>
&lt;li>Machine Languages : Machine instructions(= the patterns of 0&amp;rsquo;s and 1&amp;rsquo;s)&lt;/li>
&lt;li>Assembly Langues : &lt;code>ADD t1,t2&lt;/code>&lt;/li>
&lt;li>Higher-Level Lanagues : C, C++, Java, Python&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="using-high-level-languages-is-a-free-lunch">Using High-Level Languages is a Free Lunch?&lt;/h2>
&lt;ul>
&lt;li>No
&lt;ul>
&lt;li>How can a program written in some high-level language be executed by computer?
&lt;ul>
&lt;li>Language translation (additional process) is required&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="the-major-role-of-language-processors">The Major Role of Language Processors&lt;/h2>
&lt;ul>
&lt;li>Language Translation
&lt;ul>
&lt;li>Translates source code (e.g., C, C++, Java, Python, &amp;hellip;) into semantically-equivalent target code (e.g., Assembly / Machin languages)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Error Detection
&lt;ul>
&lt;li>Detects and reports any errors in the soruce program duting the translation process&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="two-representative-strategies">Two Representative Strategies&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>Compilation&lt;/th>
 &lt;th>Interpretation&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>What to translate&lt;/td>
 &lt;td>An entire source program&lt;/td>
 &lt;td>One statement of a source program&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>When to translate&lt;/td>
 &lt;td>Once before the program runs&lt;/td>
 &lt;td>Every time when the statement is executed&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Translation Result&lt;/td>
 &lt;td>A target program (equivalent to the source program)&lt;/td>
 &lt;td>Target code (equivalent to the statement)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Examples&lt;/td>
 &lt;td>C, C++&lt;/td>
 &lt;td>Javascript&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>Compilation:&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/lectures/signal_and_system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/lectures/signal_and_system/</guid><description>&lt;h1 id="---">&amp;mdash;&lt;/h1>
&lt;h2 id="parent---lectures">layout : wiki
title : 신호 및 시스템
summary : 2022-1학기 신호 및 시스템 공부
date : 2022-03-15 14:58:52 +0900
lastmod : 2022-06-05 19:08:16 +0900
tags : [lecture]
draft : false
parent : lectures&lt;/h2>
&lt;h1 id="week-1">Week 1&lt;/h1>
&lt;h2 id="1-1-자연상수와-오일러-등식">1-1 자연상수와 오일러 등식&lt;/h2>
&lt;h3 id="기본-자료">기본 자료&lt;/h3>
&lt;ol>
&lt;li>자연 상수(Euler&amp;rsquo;s number) e의 정의
$$ e = lim_{n-&amp;gt; \infty} ( 1 + \frac{1}{x})^n = 2.71828&amp;hellip;$$&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>사용 예:
&lt;ol>
&lt;li>$$\frac{d}{dx} (e^x) = e^x$$&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>지수함수 미분시, 자기 자신&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>$$y = log_e x = ln x \rightarrow y&amp;rsquo; = \frac{1}{x}$$&lt;/li>
&lt;li>$$ \int_{1}^e \frac{1}{x} dx = 1$$&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>정현파 (sinusoidal wave)&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>진폭 (amplitude), 주파수 (frequency), 위상 변이(phase shift)&lt;/li>
&lt;li>$$x(t) = A cos(2 \pi f_0 t + \phi) = A cos(w_0t + \phi)$$&lt;/li>
&lt;li>진폭 : 회전하는 원의 반지름 길이&lt;/li>
&lt;li>주파수 : 주기의 역수:
&lt;ul>
&lt;li>ex) 0.25 Hz는 4초에 1번 회전&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>각 (agnular, radian) 주파수 : $w = 2 \pi f$ (단위 : rad/s)
&lt;ul>
&lt;li>ex) $2\pi$ rad/s 는 1초에 원을 1번 회전&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>위상 변이 : 원 회전의 시작 위치
&lt;ul>
&lt;li>$$x(t) = A cos(w_0 t + \phi) = A cos(2 \pi f (t + \frac{\phi}{2 \pi f})) = A cos(2 \pi f (t - t_0))$$
&lt;ul>
&lt;li>$t_0$ : time delay&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>정현파의 표현 방법
&lt;ol>
&lt;li>시간 함수 : $Acos(2\pi f t + \phi)$&lt;/li>
&lt;li>회전 벡터: $(X, Y) = (A cos \phi, A sin \phi)$&lt;/li>
&lt;li>복소수 표현 : $(X, Y) = X + iY = A cos \phi + i A sin \phi$&lt;/li>
&lt;li>극좌표계 표현 : $A \angle \phi$&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>오일러 공식을 이용한다면 $A e^{i \phi}$ 또는 $A \angle \phi$&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="복소수-표현">복소수 표현&lt;/h3>
&lt;ul>
&lt;li>직각 좌표형 : $x + iy$ -&amp;gt; 직각 좌표계를 이용&lt;/li>
&lt;li>극(polar) 좌표형: $r \angle \theta$ -&amp;gt; 원점과의 거리와 가로축과의 각도로 표현&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="오일러-등식">오일러 등식&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Property 1.&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/macos-initialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/macos-initialization/</guid><description>&lt;h2 id="초기화-순서">초기화 순서&lt;/h2>
&lt;ul>
&lt;li>arc browser: &lt;a href="https://arc.net">https://arc.net&lt;/a>&lt;/li>
&lt;li>brew install: &lt;a href="https://brew.sh/ko/">https://brew.sh/ko/&lt;/a>&lt;/li>
&lt;li>iterm2: &lt;a href="https://iterm2.com/downloads.html">https://iterm2.com/downloads.html&lt;/a>&lt;/li>
&lt;li>obsidian: &lt;a href="https://obsidian.md">https://obsidian.md&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title/><link>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-3--%ED%8C%A9%ED%86%A0%EB%A6%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/modern-c++-design-pattern/chapter-3--%ED%8C%A9%ED%86%A0%EB%A6%AC/</guid><description>&lt;h1 id="---">&amp;mdash;&lt;/h1>
&lt;h2 id="parent---modern-c-design-pattern">layout : wiki
title : Modern C++ Design Pattern/Chatper 3. 팩토리
summary :
date : 2020-04-07 20:44:17 +0900
lastmod : 2020-09-26 23:15:49 +0900
tags :
parent : Modern C++ Design Pattern&lt;/h2>
&lt;h2 id="factory-class">Factory Class&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span> x, y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">friend&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PointFacotry&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Point(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> x(x), y(y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PointFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Point &lt;span style="color:#a6e22e">NewCartesian&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Point{x, y};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Point &lt;span style="color:#a6e22e">NewPolar&lt;/span>(&lt;span style="color:#66d9ef">float&lt;/span> r, flaot theta)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Point{r &lt;span style="color:#f92672">*&lt;/span> cos(theta), r &lt;span style="color:#f92672">*&lt;/span> sin (theta)};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="inner-factory">Inner Factory&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Point&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Point(&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">:&lt;/span> x(x), y(y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">PointFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PointFactory() {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Point NewCartesian (&lt;span style="color:#66d9ef">float&lt;/span> x, &lt;span style="color:#66d9ef">float&lt;/span> y)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {x, y};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> Point &lt;span style="color:#a6e22e">NewPolar&lt;/span> (&lt;span style="color:#66d9ef">float&lt;/span> r, &lt;span style="color:#66d9ef">float&lt;/span> theta)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> {r &lt;span style="color:#f92672">*&lt;/span> cos(theta), r &lt;span style="color:#f92672">*&lt;/span> sin (theta)};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">float&lt;/span> x, y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> pointFactory Factory;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="abstract-factory">Abstract Factory&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">HotDrink&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">virtual&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">prepare&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> volume) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Tea&lt;/span>&lt;span style="color:#f92672">:&lt;/span> HotDrink
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">prepare&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> volume) &lt;span style="color:#66d9ef">override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Take tea bag, boil water, pour&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> volume
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ml, add some lemon&amp;#34;&lt;/span> &lt;span style="color:#f92672">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DrinkFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">&amp;lt;&lt;/span>string, unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>HotDrinkFactory&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> hot_factories;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DrinkFactory()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hot_factories[&lt;span style="color:#e6db74">&amp;#34;coffee&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>CoffeeFactory&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hot_factories[&lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>TeaFactory&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>HotDrink&lt;span style="color:#f92672">&amp;gt;&lt;/span> make_drink(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> drink &lt;span style="color:#f92672">=&lt;/span> hot_factories[name] &lt;span style="color:#f92672">-&amp;gt;&lt;/span> make();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> drink&lt;span style="color:#f92672">-&amp;gt;&lt;/span>prepare(&lt;span style="color:#ae81ff">200&lt;/span>); &lt;span style="color:#75715e">// 200 must be changed other constant variable
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> drink;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="functional-factory">Functional Factory&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DrinkWithVolumeFactory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">&amp;lt;&lt;/span>string, function&lt;span style="color:#f92672">&amp;lt;&lt;/span>unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>HotDrink&lt;span style="color:#f92672">&amp;gt;&lt;/span>()&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> factories;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DrinkWithVolumeFactory()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> factories[&lt;span style="color:#e6db74">&amp;#34;tea&amp;#34;&lt;/span>]&lt;span style="color:#f92672">=&lt;/span> [] [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">auto&lt;/span> tea &lt;span style="color:#f92672">=&lt;/span> make_unique&lt;span style="color:#f92672">&amp;lt;&lt;/span>Tea&lt;span style="color:#f92672">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tea&lt;span style="color:#f92672">-&amp;gt;&lt;/span>prepare(&lt;span style="color:#ae81ff">200&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> tea;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">inline&lt;/span> unique_ptr&lt;span style="color:#f92672">&amp;lt;&lt;/span>HotDrink&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DrinkWithVolumeFactory&lt;span style="color:#f92672">::&lt;/span> make_drink(&lt;span style="color:#66d9ef">const&lt;/span> string&lt;span style="color:#f92672">&amp;amp;&lt;/span> name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> factories[name]();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>&amp;ldquo;Factory Method&amp;rdquo;, which is member function of creation type, create object and return it.&lt;/li>
&lt;li>Factory, which is a separate class, must know the way how to create object. So if a function that know it is called factory.&lt;/li>
&lt;li>Abstract Factory is abstract class which is super class that inherit implementation class. It is used in the situation that Factory must create multiple type Family, not only one type.&lt;/li>
&lt;li>Props
&lt;ul>
&lt;li>Factory can deny creation call. It is naturally failed to return &lt;code>nullptr&lt;/code>.&lt;/li>
&lt;li>It can be named with high readability. Constructor must be same name with class, but it can be allocate a name that present usage well.&lt;/li>
&lt;li>Only One Factory, Multiple type Object.&lt;/li>
&lt;li>Factory Pattern also supports polymorphism.&lt;/li>
&lt;li>Factory can be implemented with memory optimization like &amp;ldquo;caching&amp;rdquo;. It provide very atural code that can be applied &amp;ldquo;pooling&amp;rdquo; or &amp;ldquo;Singleton Pattern&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Factory and Builder is different : Factory create object at once. But Builder create with passing multiple stage that need stage information.&lt;/li>
&lt;/ul></description></item><item><title/><link>https://minuk.dev/wiki/test.excalidraw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/test.excalidraw/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/test/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/ucpc_2018_%EC%98%88%EC%84%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/ucpc_2018_%EC%98%88%EC%84%A0/</guid><description>&lt;h1 id="---">&amp;mdash;&lt;/h1>
&lt;h2 id="public---true">layout : wiki
title : UCPC 2018 예선
date : 2020-04-07 20:17:47 +0900
lastmod : 2022-03-26 03:37:02 +0900
tags : [algorithm]
toc : true
public : true&lt;/h2>
&lt;h2 id="boj15894---수학은-체육과목-입니다">boj15894 - 수학은 체육과목 입니다.&lt;/h2>
&lt;ul>
&lt;li>n*4를 출력하면 된다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20#include%20%3ciostream%3e%0a%20%20%20%20#define%20scl%28n%29%20scanf%28%22%25lld%22,%20&amp;amp;%28n%29%29%0a%20%20%20%20using%20lld%20=%20long%20long;%0a%20%20%20%20using%20namespace%20std;%0a%20%20%20%20int%20main%28%29%7b%0a%20%20%20%20%20%20lld%20n;%0a%20%20%20%20%20%20scl%28n%29;%0a%20%20%20%20%20%20printf%28%22%25lld%22,%204*n%29;%0a%20%20%20%20%20%20return%200;%0a%20%20%20%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define scl(n) scanf(&amp;#34;%lld&amp;#34;, &amp;amp;(n))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> lld &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lld n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> scl(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%lld&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#f92672">*&lt;/span>n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="boj15903---카드-합체-놀이">boj15903 - 카드 합체 놀이&lt;/h2>
&lt;ul>
&lt;li>현재 있는 세트에서 가장 작은 2개를 더해서 다음 세트에 넣는 구조이니 priority queue를 사용해서 문제를 해결할 수 있다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%20%20%20%20#include%20%3ciostream%3e%0a%20%20%20%20#include%20%3cqueue%3e%0a%20%20%20%20#include%20%3cvector%3e%0a%20%20%20%20#include%20%3calgorithm%3e%0a%20%20%20%20#define%20sci%28n%29%20scanf%28%22%25d%22,%20&amp;amp;%28n%29%29%0a%20%20%20%20using%20namespace%20std;%0a%20%20%20%20using%20lld%20=%20long%20long;%0a%0a%20%20%20%20int%20main%28%29%20%7b%0a%20%20%20%20%20%20int%20n,%20m;%0a%20%20%20%20%20%20sci%28n%29,%20sci%28m%29;%0a%20%20%20%20%20%20priority_queue%3cint,%20vector%3cint%3e,%20greater%3cint%3e%20%3e%20q;%0a%20%20%20%20%20%20for%28int%20i=0;i%3cn;i&amp;#43;&amp;#43;%29%7b%0a%20%20%20%20%20%20%20%20int%20t;%0a%20%20%20%20%20%20%20%20sci%28t%29;%0a%20%20%20%20%20%20%20%20q.push%28t%29;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20for%28int%20i=0;i%3cm;i&amp;#43;&amp;#43;%29%7b%0a%20%20%20%20%20%20%20%20int%20f%20=%20q.top%28%29;%20q.pop%28%29;%0a%20%20%20%20%20%20%20%20int%20s%20=%20q.top%28%29;%20q.pop%28%29;%0a%20%20%20%20%20%20%20%20q.push%28f&amp;#43;s%29;%20q.push%28f&amp;#43;s%29;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20lld%20result%20=%200;%0a%20%20%20%20%20%20while%20%28!q.empty%28%29%29%20%7b%0a%20%20%20%20%20%20%20%20result%20&amp;#43;=%20q.top%28%29;%20q.pop%28%29;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20printf%28%22%25lld%22,%20result%29;%0a%20%20%20%20%20%20return%200;%0a%20%20%20%20%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#include&lt;/span> &lt;span style="color:#75715e">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">#define sci(n) scanf(&amp;#34;%d&amp;#34;, &amp;amp;(n))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">using&lt;/span> &lt;span style="color:#66d9ef">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">using&lt;/span> lld &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span> &lt;span style="color:#66d9ef">long&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n, m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sci(n), sci(m);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priority_queue&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>, vector&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, greater&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>n;i&lt;span style="color:#f92672">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> t;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sci(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(t);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>;i&lt;span style="color:#f92672">&amp;lt;&lt;/span>m;i&lt;span style="color:#f92672">++&lt;/span>){
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> f &lt;span style="color:#f92672">=&lt;/span> q.top(); q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> s &lt;span style="color:#f92672">=&lt;/span> q.top(); q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(f&lt;span style="color:#f92672">+&lt;/span>s); q.push(f&lt;span style="color:#f92672">+&lt;/span>s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lld result &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>q.empty()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#f92672">+=&lt;/span> q.top(); q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> printf(&lt;span style="color:#e6db74">&amp;#34;%lld&amp;#34;&lt;/span>, result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h2 id="boj15902-split-and-merge">boj15902-Split and Merge&lt;/h2>
&lt;ul>
&lt;li>솔직히 해설을 봤는데도 잘 이해 못하고 넘어갔었다. 지금 다시 풀어봐야겠다. (19.09.19)&lt;/li>
&lt;/ul>
&lt;p>먼저 생각한건&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/%EB%8D%B0%EC%A4%91%EC%96%B4%EC%84%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/%EB%8D%B0%EC%A4%91%EC%96%B4%EC%84%A4/</guid><description>&lt;h2 id="2-장-데이터-모델과-질의-언어">2 장 데이터 모델과 질의 언어&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>관계형 모델과 문서모델&lt;/p>
&lt;ul>
&lt;li>관계형 모델의 장점 : 비지니스 데이터 처리 (트랜잭션, 일괄처리)&lt;/li>
&lt;li>NoSQL의 장점:
&lt;ul>
&lt;li>높은 쓰기 처리량(대규모 데이터셋에 유리)&lt;/li>
&lt;li>무료 오픈 소스 소프트웨어&lt;/li>
&lt;li>특수한 연산 지원&lt;/li>
&lt;li>동적이고 풍부한 표현력&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>다중 저장소 지속성 : 관계형 데이터베이스와 비관계형 데이터 스토어가 함께 사용되는 개념&lt;/li>
&lt;li>&lt;em>개인 생각&lt;/em> : Web과 REST API의 선호도 증가에 따라 개발자에게 친숙해진 영향도 있다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>객체 관계형 불일치&lt;/p>
&lt;ul>
&lt;li>임피던스 불일치(impedance mismatch)&lt;/li>
&lt;li>언제나 한번에 조회되는 것도 아니고, 중복제거 등 다양한 문제가 섞여있음.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>다대일과 다대다 관계&lt;/p></description></item><item><title/><link>https://minuk.dev/wiki/%EC%9D%98%EA%B2%AC-%EB%A9%94%EB%AA%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/%EC%9D%98%EA%B2%AC-%EB%A9%94%EB%AA%A8/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/%EC%A3%BC%EC%9E%A5-%EB%A9%94%EB%AA%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/%EC%A3%BC%EC%9E%A5-%EB%A9%94%EB%AA%A8/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/%ED%82%A4%EC%9B%8C%EB%93%9C-%EB%A9%94%EB%AA%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/%ED%82%A4%EC%9B%8C%EB%93%9C-%EB%A9%94%EB%AA%A8/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9/</guid><description/></item><item><title/><link>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-05-30/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/%ED%9A%8C%EA%B3%A0/2020-05-30/</guid><description/></item><item><title>tag page</title><link>https://minuk.dev/wiki/tags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://minuk.dev/wiki/tags/</guid><description>&lt;p>test&lt;/p></description></item></channel></rss>