<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fuse on</title><link>https://minuk.dev/tags/fuse/</link><description>Recent content in Fuse on</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Fri, 04 Sep 2020 20:15:45 +0900</lastBuildDate><atom:link href="https://minuk.dev/tags/fuse/index.xml" rel="self" type="application/rss+xml"/><item><title>Filesystem in Userspace</title><link>https://minuk.dev/wiki/fuse/</link><pubDate>Fri, 04 Sep 2020 20:06:36 +0900</pubDate><guid>https://minuk.dev/wiki/fuse/</guid><description>&lt;h2 id="계기">계기&lt;/h2>
&lt;ul>
&lt;li>알게된 이유는, 옆에서 오라큰 파일 시스템이라는 단어를 말했는데 &lt;code>?????&lt;/code> 이라고 느껴서, 공부해보자고 찾아보면서 시작됬다.&lt;/li>
&lt;/ul>
&lt;h2 id="기본-개념">기본 개념&lt;/h2>
&lt;ul>
&lt;li>파일시스템을 유저레벨에서 하고자 하는 경우 사용한다. 보통은 속도보다는 보호와 보안, 백업 등의 용도로 사용한다.&lt;/li>
&lt;li>application(user) -&amp;gt; glib(user) -&amp;gt; vfs(kernel) -&amp;gt; fuse module(kernel) -&amp;gt; glib(user) -&amp;gt; libfuse(user) -&amp;gt; user filesystem(user) -&amp;gt; &amp;hellip;&lt;/li>
&lt;li>위와 같은 순서로 진행된다. 그러면 성능은? 이라는 생각이 들어서 찾아보니, FAST'17에서 나온 &lt;code>To FUSE or Not to FUSE: Performance of User-Space File Systems&lt;/code> 라는 논문이 있다. 간단하게 읽어보니, User Space Filesystem 을 가볍게 구성하고 ext4로 파일을 저장하게 할때, 성능을 분석한 거다. 링크를 참조하자 : &lt;a href="https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf">https://www.usenix.org/system/files/conference/fast17/fast17-vangoor.pdf&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>