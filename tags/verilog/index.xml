<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Verilog on</title><link>https://minuk.dev/tags/verilog/</link><description>Recent content in Verilog on</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Wed, 01 Jul 2020 20:53:18 +0900</lastBuildDate><atom:link href="https://minuk.dev/tags/verilog/index.xml" rel="self" type="application/rss+xml"/><item><title>verilog (베릴로그)</title><link>https://minuk.dev/wiki/verilog/</link><pubDate>Thu, 25 Jun 2020 20:46:51 +0900</pubDate><guid>https://minuk.dev/wiki/verilog/</guid><description>&lt;h1 id="개요">개요&lt;/h1>
&lt;ul>
&lt;li>opennvm가 verilog가 짜져있어서 읽을수 있을 수준까지 공부하는게 목표&lt;/li>
&lt;/ul>
&lt;h2 id="출처">출처&lt;/h2>
&lt;ul>
&lt;li>기본 문법 : &lt;a href="https://blog.naver.com/PostView.nhn?blogId=kyj0833&amp;amp;logNo=221490972642&amp;amp;from=search&amp;amp;redirect=Log&amp;amp;widgetTypeCall=true&amp;amp;directAccess=false">https://blog.naver.com/PostView.nhn?blogId=kyj0833&amp;amp;logNo=221490972642&amp;amp;from=search&amp;amp;redirect=Log&amp;amp;widgetTypeCall=true&amp;amp;directAccess=false&lt;/a>&lt;/li>
&lt;li>리눅스에서 verilog 사용하기 : &lt;a href="https://www.sapphosound.com/archives/1894">https://www.sapphosound.com/archives/1894&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.asic-world.com/verilog/intro1.html#Design_Styles">http://www.asic-world.com/verilog/intro1.html#Design_Styles&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="기본-문법">기본 문법&lt;/h2>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20module_name%28port_list%29;%0a%0aport,%20reg,%20wire,%20parameter%20declaration%0asubmodule%20instance%0aprimitive%20gate%0aalways,%20initial%0aassign,%0afunciton,%20task%20declaration%0afunction,%20task%20definition%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> module_name(port_list);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port, &lt;span style="color:#66d9ef">reg&lt;/span>, &lt;span style="color:#66d9ef">wire&lt;/span>, &lt;span style="color:#66d9ef">parameter&lt;/span> declaration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>submodule instance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">primitive&lt;/span> gate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span>, &lt;span style="color:#66d9ef">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>funciton, &lt;span style="color:#66d9ef">task&lt;/span> declaration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span>, &lt;span style="color:#66d9ef">task&lt;/span> definition
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="hello-world">Hello World&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20main;%0a%20%20initial%0a%20%20begin%0a%20%20%20%20$display%28%22Hello%20World%22%29;%0a%20%20%20%20$finish;%0a%20%20end%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> main;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="d-flip-flop-code">D flip-flop Code&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20d_ff%20%28d,%20clk,%20q,%20q_bar%29;%0ainput%20d,%20clk;%0aoutput%20q,%20q_bar;%0awire%20d,%20clk;%0areg%20q,%20q_bar;%0a%0aalways%20@%20%28posedge%20clk%29%0a%0abegin%0a%20%20q%20%3c=%20d;%0a%20%20q_bar%20%3c=%20!d;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> d_ff (d, clk, q, q_bar);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> d, clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> q, q_bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> d, clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> q, q_bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q_bar &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="data-type-english">Data Type (English)&lt;/h3>
&lt;ul>
&lt;li>Hardware does have two kinds of drivers.&lt;/li>
&lt;li>A driver is a data type which can drive a load. Basically, in a physical circuit, a driver would be anything that electrons can move through/into.
&lt;ul>
&lt;li>Driver that can store a value (example: flip-flop).&lt;/li>
&lt;li>Driver that can not store value, but connects two points (example: wire).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The first type of driver is called a reg in Verilog (short for &amp;ldquo;register&amp;rdquo;). The Second data type is called a wire (for&amp;hellip; well, &amp;ldquo;wire&amp;rdquo;). You can refer to tidbits section to understand it better.&lt;/li>
&lt;/ul>
&lt;h3 id="data-type-한국어">Data Type (한국어)&lt;/h3>
&lt;ul>
&lt;li>하드웨어는 2가지 종류의 드라이버가 있으며, 기본적으로 물리적인 회로이며, 드라이버는 전자가 들어오거나 나갈수 있는 무엇이든 될 수 있다.
&lt;ul>
&lt;li>드라이버는 값을 저장할 수 있다. (예를 들어 플립플롯) -&amp;gt; reg(register의 준말)&lt;/li>
&lt;li>드라이버는 값을 저장하지 못하는 대신, 두 지점을 연결 시킬수 있다. (예를 들어 wire) -&amp;gt; wire&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="opertators">Opertators&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Operator Type&lt;/th>
 &lt;th>Operator Symbol&lt;/th>
 &lt;th>Operation Performed&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Arithmetic&lt;/td>
 &lt;td>&lt;code>*&lt;/code>&lt;/td>
 &lt;td>Multiply&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>/&lt;/code>&lt;/td>
 &lt;td>Division&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>+&lt;/code>&lt;/td>
 &lt;td>Add&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>-&lt;/code>&lt;/td>
 &lt;td>Subtract&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>%&lt;/code>&lt;/td>
 &lt;td>Modulus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>+&lt;/code>&lt;/td>
 &lt;td>Unary plus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>-&lt;/code>&lt;/td>
 &lt;td>Unary minus&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Logical&lt;/td>
 &lt;td>&lt;code>!&lt;/code>&lt;/td>
 &lt;td>Logical negation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;amp;&amp;amp;&lt;/code>&lt;/td>
 &lt;td>Logical and&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>`&lt;/td>
 &lt;td>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Greater than&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;lt;&lt;/code>&lt;/td>
 &lt;td>Less than&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;gt;=&lt;/code>&lt;/td>
 &lt;td>Greater than or equal&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;lt;=&lt;/code>&lt;/td>
 &lt;td>Less than or equal&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Equality&lt;/td>
 &lt;td>&lt;code>==&lt;/code>&lt;/td>
 &lt;td>Equality&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>!=&lt;/code>&lt;/td>
 &lt;td>inequality&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Reduction&lt;/td>
 &lt;td>&lt;code>~&lt;/code>&lt;/td>
 &lt;td>Bitwize negation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>~&amp;amp;&lt;/code>&lt;/td>
 &lt;td>nand&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>`&lt;/td>
 &lt;td>`&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>`~&lt;/td>
 &lt;td>`&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>^&lt;/code>&lt;/td>
 &lt;td>xor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>^~&lt;/code>&lt;/td>
 &lt;td>xnor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>~^&lt;/code>&lt;/td>
 &lt;td>xnor&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Shift&lt;/td>
 &lt;td>&lt;code>&amp;gt;&amp;gt;&lt;/code>&lt;/td>
 &lt;td>Right shift&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>&lt;/td>
 &lt;td>Left shift&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Concatenation&lt;/td>
 &lt;td>&lt;code>{}&lt;/code>&lt;/td>
 &lt;td>Concatenation&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Conditional&lt;/td>
 &lt;td>&lt;code>?&lt;/code>&lt;/td>
 &lt;td>conditional&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="control-statements">Control Statements&lt;/h3>
&lt;h3 id="if-else">If-else&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//%20begin%20and%20end%20act%20like%20curly%20braces%20in%20C/C&amp;#43;&amp;#43;.%0aif%20%28enable%20==%201%27b1%29%20begin%0a%20%20data%20=%2010;%20%20%20%20%20%20%20%20%20//%20Decimal%20assigned%0a%20%20address%20=%2016%27hDEAD;%20//%20Hexadecimal%0a%20%20wr_enable%20=%201%27b1;%20//%20Binary%0aend%20else%20begin%0a%20%20data%20=%2032%27b0;%0a%20%20wr_enable%20=%201%27b0;%0a%20%20address%20=%20address%20&amp;#43;1;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// begin and end act like curly braces in C/C++.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (enable &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#75715e">// Decimal assigned
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> address &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&amp;#39;hDEAD&lt;/span>; &lt;span style="color:#75715e">// Hexadecimal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> wr_enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>; &lt;span style="color:#75715e">// Binary
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wr_enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> address &lt;span style="color:#f92672">=&lt;/span> address &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="case">Case&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span>(address)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;It is 11:40PM&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;I am feeling sleepy&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;Let me skip this tutorial&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span> $display (&lt;span style="color:#e6db74">&amp;#34;Need to complete&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endcase&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="while">while&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="while%20%28free_time%29%20begin%0a%20%20$display%20%28%22Continue%20with%20webpage%20development%22%29;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">while&lt;/span> (free_time) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;Continue with webpage development&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="counter-example">Counter example&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> counter (clk, rst, enable, count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk, rst, enabl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk &lt;span style="color:#66d9ef">or&lt;/span> &lt;span style="color:#66d9ef">posedge&lt;/span> rst)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (rst) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> COUNT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (enable) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">disable&lt;/span> COUNT;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="for-loop">For loop&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="for%20%28i%20=%200;%20i%20%3c%2015;%20i%20=%20i%20&amp;#43;%201%29%20begin%0a%20%20$display%20%28%22Current%20value%20of%20i%20is%20%25d%22,%20i%29;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">15&lt;/span>; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;Current value of i is %d&amp;#34;&lt;/span>, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="repeat">Repeat&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="repeat%20%2816%29%20begin%0a%20%20$display%20%28%22Current%20value%20of%20i%20is%20%25d%22,%20i%29;%0a%20%20i%20=%20i%20&amp;#43;%201;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">repeat&lt;/span> (&lt;span style="color:#ae81ff">16&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;Current value of i is %d&amp;#34;&lt;/span>, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="initial-blocks">Initial Blocks&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="initial%20begin%0a%20%20clk%20=%200;%0a%20%20reset%20=%200;%0a%20%20req_0%20=%200;%0a%20%20req_1%20=%200;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req_0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req_1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="always-blocks">Always Blocks&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="always%20@%20%28a%20or%20b%20or%20sel%29%0abegin%0a%20%20y%20=%200;%0a%20%20if%20%28sel%20==%200%29%20begin%0a%20%20%20%20y%20=%20a;%0a%20%20end%20else%20begin%0a%20%20%20%20y%20=%20b;%0a%20%20end%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (a &lt;span style="color:#66d9ef">or&lt;/span> b &lt;span style="color:#66d9ef">or&lt;/span> sel)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (sel &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y &lt;span style="color:#f92672">=&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>?? 이건 근데 mux랑 똑같은거 아닌가? mux 만들어 놓고, initial block 에서 wire 연결 해두면 안되는 건가?&lt;/li>
&lt;li>always block의 쓰임을 잘 모르겠네, 어떻게 되는 거지?&lt;/li>
&lt;li>=&amp;gt; 주변에 있는 다른 분께 물어보니 같은 동작을 하는건 맞고, 실제 기판으로 나오는게 똑같으면 어떻게 코딩하든 상관 없다고 하심.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="always%20begin%0a%20%20#5%20clk%20=%20~clk;%0aend">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="assign-statement">Assign Statement&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> out &lt;span style="color:#f92672">=&lt;/span> (enable) &lt;span style="color:#f92672">?&lt;/span> data &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bz;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="assign%20out%20=%20data;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> out &lt;span style="color:#f92672">=&lt;/span> data;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="task-and-function">Task and Function&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> parity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> parity &lt;span style="color:#f92672">^&lt;/span> data[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endfunction&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>흠&amp;hellip; for을 도는건 delay 없이 도는 거니 위에 내용은 실제로 컴파일 되면 data의 모든 bit를 한번에 xor하는 결과가 나오는건가?&lt;/li>
&lt;li>그래서 한번 만들고 compile 해봤다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> parity (d, p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">output&lt;/span> &lt;span style="color:#66d9ef">reg&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">function&lt;/span> parity;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">integer&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i&lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parity &lt;span style="color:#f92672">=&lt;/span> parity &lt;span style="color:#f92672">^&lt;/span> data[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">endfunction&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">always&lt;/span> @ (d)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p &lt;span style="color:#f92672">=&lt;/span> parity(d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>아래는 컴파일 된걸 연 결과다&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#!%20/usr/bin/vvp%0a:ivl_version%20%2210.1%20%28stable%29%22;%0a:ivl_delay_selection%20%22TYPICAL%22;%0a:vpi_time_precision%20&amp;#43;%200;%0a:vpi_module%20%22system%22;%0a:vpi_module%20%22vhdl_sys%22;%0a:vpi_module%20%22v2005_math%22;%0a:vpi_module%20%22va_math%22;%0aS_0x56211aafb800%20.scope%20module,%20%22parity%22%20%22parity%22%202%201;%0a%20.timescale%200%200;%0a%20%20%20%20.port_info%200%20/INPUT%2032%20%22d%22%0a%20%20%20%20.port_info%201%20/OUTPUT%201%20%22p%22%0ao0x7f15420240a8%20.functor%20BUFZ%2032,%20C4%3czzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz%3e;%20HiZ%20drive%0av0x56211ab1be30_0%20.net%20%22d%22,%2031%200,%20o0x7f15420240a8;%20%200%20drivers%0av0x56211ab1bf30_0%20.var%20%22p%22,%200%200;%0aE_0x56211aac3cc0%20.event%20edge,%20v0x56211ab1be30_0;%0aS_0x56211aafb9c0%20.scope%20function,%20%22parity%22%20%22parity%22%202%205,%202%205%200,%20S_0x56211aafb800;%0a%20.timescale%200%200;%0av0x56211aafbbb0_0%20.var%20%22data%22,%2031%200;%0av0x56211ab1bcb0_0%20.var/i%20%22i%22,%2031%200;%0av0x56211ab1bd90_0%20.var%20%22parity%22,%200%200;%0aTD_parity.parity%20;%0a%20%20%20%20%25pushi/vec4%200,%200,%201;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bd90_0,%200,%201;%0a%20%20%20%20%25pushi/vec4%200,%200,%2032;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bcb0_0,%200,%2032;%0aT_0.0%20;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bcb0_0;%0a%20%20%20%20%25cmpi/s%2032,%200,%2032;%0a%20%20%20%20%25jmp/0xz%20T_0.1,%205;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bd90_0;%0a%20%20%20%20%25load/vec4%20v0x56211aafbbb0_0;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bcb0_0;%0a%20%20%20%20%25part/s%201;%0a%20%20%20%20%25xor;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bd90_0,%200,%201;%0a%20%20%20%20%25load/vec4%20v0x56211ab1bcb0_0;%0a%20%20%20%20%addi%201,%200,%2032;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bcb0_0,%200,%2032;%0a%20%20%20%20%25jmp%20T_0.0;%0aT_0.1%20;%0a%20%20%20%20%25end;%0a%20%20%20%20.scope%20S_0x56211aafb800;%0aT_1%20;%0a%20%20%20%20%25wait%20E_0x56211aac3cc0;%0a%20%20%20%20%25load/vec4%20v0x56211ab1be30_0;%0a%20%20%20%20%25store/vec4%20v0x56211aafbbb0_0,%200,%2032;%0a%20%20%20%20%25fork%20TD_parity.parity,%20S_0x56211aafb9c0;%0a%20%20%20%20%25join;%0a%20%20%20%20%25load/vec4%20%20v0x56211ab1bd90_0;%0a%20%20%20%20%25store/vec4%20v0x56211ab1bf30_0,%200,%201;%0a%20%20%20%20%25jmp%20T_1;%0a%20%20%20%20.thread%20T_1,%20$push;%0a#%20The%20file%20index%20is%20used%20to%20find%20the%20file%20name%20in%20the%20following%20table.%0a:file_names%203;%0a%20%20%20%20%22N/A%22;%0a%20%20%20%20%22%3cinteractive%3e%22;%0a%20%20%20%20%22parity.v%22;">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>#! /usr/bin/vvp
:ivl_version &amp;#34;10.1 (stable)&amp;#34;;
:ivl_delay_selection &amp;#34;TYPICAL&amp;#34;;
:vpi_time_precision &amp;#43; 0;
:vpi_module &amp;#34;system&amp;#34;;
:vpi_module &amp;#34;vhdl_sys&amp;#34;;
:vpi_module &amp;#34;v2005_math&amp;#34;;
:vpi_module &amp;#34;va_math&amp;#34;;
S_0x56211aafb800 .scope module, &amp;#34;parity&amp;#34; &amp;#34;parity&amp;#34; 2 1;
 .timescale 0 0;
 .port_info 0 /INPUT 32 &amp;#34;d&amp;#34;
 .port_info 1 /OUTPUT 1 &amp;#34;p&amp;#34;
o0x7f15420240a8 .functor BUFZ 32, C4&amp;lt;zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz&amp;gt;; HiZ drive
v0x56211ab1be30_0 .net &amp;#34;d&amp;#34;, 31 0, o0x7f15420240a8; 0 drivers
v0x56211ab1bf30_0 .var &amp;#34;p&amp;#34;, 0 0;
E_0x56211aac3cc0 .event edge, v0x56211ab1be30_0;
S_0x56211aafb9c0 .scope function, &amp;#34;parity&amp;#34; &amp;#34;parity&amp;#34; 2 5, 2 5 0, S_0x56211aafb800;
 .timescale 0 0;
v0x56211aafbbb0_0 .var &amp;#34;data&amp;#34;, 31 0;
v0x56211ab1bcb0_0 .var/i &amp;#34;i&amp;#34;, 31 0;
v0x56211ab1bd90_0 .var &amp;#34;parity&amp;#34;, 0 0;
TD_parity.parity ;
 %pushi/vec4 0, 0, 1;
 %store/vec4 v0x56211ab1bd90_0, 0, 1;
 %pushi/vec4 0, 0, 32;
 %store/vec4 v0x56211ab1bcb0_0, 0, 32;
T_0.0 ;
 %load/vec4 v0x56211ab1bcb0_0;
 %cmpi/s 32, 0, 32;
 %jmp/0xz T_0.1, 5;
 %load/vec4 v0x56211ab1bd90_0;
 %load/vec4 v0x56211aafbbb0_0;
 %load/vec4 v0x56211ab1bcb0_0;
 %part/s 1;
 %xor;
 %store/vec4 v0x56211ab1bd90_0, 0, 1;
 %load/vec4 v0x56211ab1bcb0_0;
 %addi 1, 0, 32;
 %store/vec4 v0x56211ab1bcb0_0, 0, 32;
 %jmp T_0.0;
T_0.1 ;
 %end;
 .scope S_0x56211aafb800;
T_1 ;
 %wait E_0x56211aac3cc0;
 %load/vec4 v0x56211ab1be30_0;
 %store/vec4 v0x56211aafbbb0_0, 0, 32;
 %fork TD_parity.parity, S_0x56211aafb9c0;
 %join;
 %load/vec4 v0x56211ab1bd90_0;
 %store/vec4 v0x56211ab1bf30_0, 0, 1;
 %jmp T_1;
 .thread T_1, $push;
# The file index is used to find the file name in the following table.
:file_names 3;
 &amp;#34;N/A&amp;#34;;
 &amp;#34;&amp;lt;interactive&amp;gt;&amp;#34;;
 &amp;#34;parity.v&amp;#34;;&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>읽어보면, 실제로 loop돌고 jump 하는 것처럼 보인다.&lt;/li>
&lt;li>생각해보면 그럴수 밖에 없는 것 같기도 하고, 만약 1번에 끝내길 바랬으면 다르게 짜야지 싶기도 해서&lt;/li>
&lt;/ul>
&lt;h3 id="task-benches">Task Benches&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20arbiter%20%28%0aclock,%0areset,%0areq_0,%0areq_1,%0agnt_0,%0agnt_1%0a%29;%0a%0ainput%20clock,%20reset,%20req_0,%20req_1;%0aoutput%20gnt_0,%20gnt_1;%0a%0areg%20gnt_0,%20gnt_1;%0a%0aalways%20@%20%28posedge%20clock%20or%20posedge%20reset%29%0a%0aif%20%28reset%29%20begin%0a%20%20gnt_0%20%3c=%200;%0a%20%20gnt_1%20%3c=%200;%0aend%20else%20if%20%28req_0%29%20begin%0a%20%20gnt_0%20%3c=%201;%0a%20%20gnt_1%20%3c=%200;%0aend%20else%20if%20%28req_1%29%20begin%0a%20%20gnt_0%20%3c=%200;%0a%20%20gnt_1%20%3c=%201;%0aend%0a%0aendmodule%0a//%20Testbench%20Code%20Goes%20here%0amodule%20arbiter_tb;%0a%0areg%20clock,%20reset,%20req0,%20req1;%0awire%20gnt0,%20gnt1;%0a%0ainitial%20begin%0a%20%20$monitor%20%28%22req0=%25b,req1=%25b,gnt0=%25b,gnt1=%25b%22,%20req0,%20req1,%20gnt0,%20gnt1%29;%0a%20%20clock%20=%200;%0a%20%20reset%20=%200;%0a%20%20req0%20=%200;%0a%20%20req1%20=%200;%0a%20%20#5%20reset%20=%201;%0a%20%20#15%20reset%20=%200;%0a%20%20#10%20req0%20=%201;%0a%20%20#10%20req0%20=%200;%0a%20%20#10%20req1%20=%201;%0a%20%20#10%20req1%20=%200;%0a%20%20#10%20%7breq0,%20req1%7d%20=%202%27b11;%0a%20%20#10%20%7breq0,%20req1%7d%20=%202%27b00;%0a%20%20#10%20$finish;%0aend%0a%0aalways%20begin%0a%20%20#5%20clock%20=%20!clock;%0aend%0a%0aarbiter%20U0%20%28%0a.clock%20%28clock%29,%0a.reset%20%28reset%29,%0a.req_0%20%28req0%29,%0a.req_1%20%28req1%29,%0a.gnt_0%20%28gnt0%29,%0a.gnt_1%20%28gnt1%29%0a%29;%0a%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> arbiter (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>req_0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>req_1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gnt_0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gnt_1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clock, reset, req_0, req_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> gnt_0, gnt_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> gnt_0, gnt_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clock &lt;span style="color:#66d9ef">or&lt;/span> &lt;span style="color:#66d9ef">posedge&lt;/span> reset)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (reset) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (req_0) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (req_1) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gnt_1 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Testbench Code Goes here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">module&lt;/span> arbiter_tb;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clock, reset, req0, req1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> gnt0, gnt1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor (&lt;span style="color:#e6db74">&amp;#34;req0=%b,req1=%b,gnt0=%b,gnt1=%b&amp;#34;&lt;/span>, req0, req1, gnt0, gnt1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> req1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">15&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req0 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> req1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> {req0, req1} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b11&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> {req0, req1} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b00&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arbiter U0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.clock (clock),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.reset (reset),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.req_0 (req0),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.req_1 (req1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.gnt_0 (gnt0),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.gnt_1 (gnt1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>처음에 initial block 에서 monitor로 변수 값 바뀔때 tracking 해주고, req0 = 0, req1 = 0 이 설정 되고, gnt는 설정이 안되서 0, 0, x, x 가 나오고 나머지는 다 delay 걸려서 실행 안되고 있고, arbiter 호출해준다.&lt;/li>
&lt;li>5 delays 뒤에 reset 이 1 이 되면서 gnt_0, gnt_1 이 되면서 0, 0, 0, 0 이 출력&lt;/li>
&lt;li>10 delays 뒤에 req0 가 1이 되면서, 1, 0, 0, 0&lt;/li>
&lt;li>그러면서 1, 0, 1, 0&lt;/li>
&lt;li>그 뒤 req0 이 0 되면서 0, 0, 1 , 0&lt;/li>
&lt;li>req1 이 1 이 되면서 0, 1, 1, 0&lt;/li>
&lt;li>그 직후 0, 1, 0, 1&lt;/li>
&lt;li>0, 0, 0, 1&lt;/li>
&lt;li>1, 1, 0, 1&lt;/li>
&lt;li>1, 1, 1, 0&lt;/li>
&lt;li>0, 0, 1, 0&lt;/li>
&lt;li>순으으로 나오게 된다.&lt;/li>
&lt;li>처음에는 reset 이 0 으로 바뀌는걸 못봐서 한참 삽질했다.&lt;/li>
&lt;/ul>
&lt;h3 id="counter-design">Counter Design&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="//-----%0a//%20Function%20:%20This%20is%20a%204%20bit%20up-counter%20with%0a//%20Synchronous%20active%20high%20reset%20and%0a//%20with%20active%20high%20enable%20signal%0a//-----%0amodule%20first_counter%20%28%0aclock,%0areset,%0aenable,%0acounter_out%0a%29;%0a%0ainput%20clock;%0ainput%20reset;%0ainput%20enable;%0a%0aoutput%20[3:0]%20counter_out;%0a%0awire%20clock;%0awire%20reset;%0awire%20enable;%0a%0areg%20[3:0]%20counter_out;%0a%0aalways%20@%20%28posedge%20clock%29%0abegin:%20COUNTER%20//%20Block%20Name%0a%20%20if%20%28reset%20==%201%27b1%29%20begin%0a%20%20%20%20counter_out%20%3c=%20#%204%27b0000;%0a%20%20end%0a%20%20%0a%20%20else%20if%20%28enable%20==%201%27b1%29%20begin%0a%20%20%20%20counter_out%20%3c=%20#1%20counter_out%20&amp;#43;%201;%0a%20%20end%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//-----
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Function : This is a 4 bit up-counter with
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Synchronous active high reset and
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// with active high enable signal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//-----
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">module&lt;/span> first_counter (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter_out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> reset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> reset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>&lt;span style="color:#f92672">:&lt;/span> COUNTER &lt;span style="color:#75715e">// Block Name
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (reset &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter_out &lt;span style="color:#f92672">&amp;lt;=&lt;/span> # &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b0000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (enable &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counter_out &lt;span style="color:#f92672">&amp;lt;=&lt;/span> #&lt;span style="color:#ae81ff">1&lt;/span> counter_out &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%60include%20%22first_counter.v%22%0amodule%20first_counter_tb%28%29;%0a//%20Declare%20inputs%20as%20regs%20and%20outputs%20as%20wires%0areg%20clock,%20reset,%20enable;%0awire%20[3:0]%20counter_out;%0a%0a//%20Initialize%20all%20variables%0a%0ainitial%20begin%0a%20%20$display%20%28%22time%5ct%20clk%20reset%20enable%20counter%22%29;%0a%20%20$monitor%20%28%22%25g%5ct%20%25b%20%25b%20%25b%20%25b%22%29;%0a%20%20%20%20$time,%20clock,%20reset,%20enable,%20counter_out;%0a%20%20%20%20%0a%20%20clock%20=%201;%0a%20%20reset%20=%200;%0a%20%20enable%20=%200;%0a%20%20#5%20reset%20=%201;%0a%20%20#10%20reset%20=%200;%0a%20%20#10%20enable%20=%201;%0a%20%20#100%20enable%20=%200;%0a%20%20#5%20$finish;%0aend%0a%0aalways%20begin%0a%20%20#5%20clock%20=%20~clock;%0aend%0a%0afirst_counter%20U_counter%20%28%0aclock,%0areset,%0aenable,%0acounter_out%0a%29;%0a%0aendmoudle">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;first_counter.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> first_counter_tb();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Declare inputs as regs and outputs as wires
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">reg&lt;/span> clock, reset, enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Initialize all variables
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display (&lt;span style="color:#e6db74">&amp;#34;time&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> clk reset enable counter&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor (&lt;span style="color:#e6db74">&amp;#34;%g&lt;/span>&lt;span style="color:#ae81ff">\t&lt;/span>&lt;span style="color:#e6db74"> %b %b %b %b&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $time, clock, reset, enable, counter_out;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">100&lt;/span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>first_counter U_counter (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reset,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter_out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>endmoudle&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>다른 module 을 부를때 `include 라는 문법을 쓰는걸 알게 되었다.&lt;/li>
&lt;li>나머진 예전에 배운 논리회로랑 똑같아서 스킵&lt;/li>
&lt;/ul>
&lt;h3 id="comments">Comments&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20This%20is%20a%0a%20%20Multi%20line%20comment%0a%20%20example%20*/%0amodule%20addbit%20%28%0aa,%0ab,%0aci,%0asum,%0aco%29;%0a%0ainput%20a;%0ainput%20b;%0ainput%20ci;%0aoutput%20sum;%0aoutput%20co;%0awire%20a;%0awire%20b;%0awire%20ci;%0awire%20sum;%0awire%20co;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* This is a
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> Multi line comment
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> example */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> addbit (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sum,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>co);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="numbers-in-verilog">Numbers in Verilog&lt;/h3>
&lt;h4 id="integer-number">Integer Number&lt;/h4>
&lt;ul>
&lt;li>Syntax : &lt;!-- raw HTML omitted -->&amp;rsquo;&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->;&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Integer&lt;/th>
 &lt;th>Stored as&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>00000000000000000000000000000001&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>8&amp;rsquo;hAA&lt;/td>
 &lt;td>10101010&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6&amp;rsquo;b10_0011&lt;/td>
 &lt;td>100011&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;lsquo;hF&lt;/td>
 &lt;td>00000000000000000000000000001111&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="real-numbers">Real Numbers&lt;/h4>
&lt;ul>
&lt;li>Syntax : &lt;!-- raw HTML omitted -->.&lt;!-- raw HTML omitted -->, &lt;!-- raw HTML omitted -->E&lt;!-- raw HTML omitted -->&lt;/li>
&lt;/ul>
&lt;h3 id="modules">Modules&lt;/h3>
&lt;h4 id="ports">Ports&lt;/h4>
&lt;ul>
&lt;li>Syntax&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>input [range_val:range_var] list_of_identifier;
output [range_val:range_var] list_of_identifier;
inout [range_val:range_var] list_of_identifier;&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;ul>
&lt;li>Examples&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] data_in;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#f92672">&amp;amp;&lt;/span>;&lt;span style="color:#ae81ff">0&lt;/span>] count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">inout&lt;/span> data_bi;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20addbit%28%0aa,%0ab,%0aci,%20sum,%0aco%0a%29;%0ainput%20a;%0ainput%20b;%0ainput%20ci;%0aoutput%20sum;%0aoutput%20co;%0a%0awire%20a;%0awire%20b;%0awire%20ci;%0awire%20sum;%0awire%20co;%0a%0aassign%20%7bco,%20sum%7d%20=%20a%20&amp;#43;%20b%20&amp;#43;%20ci;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> addbit(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci, sum,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>co
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> co;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> {co, sum} &lt;span style="color:#f92672">=&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b &lt;span style="color:#f92672">+&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="modules-connected-by-port-order-implicit">Modules connected by port order (implicit)&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> adder_implicit (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> crarry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u1 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">1&lt;/span>] ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">1&lt;/span>] ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u2 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">2&lt;/span>] ,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">2&lt;/span>], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u3(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1[&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2[&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c3,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result[&lt;span style="color:#ae81ff">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="modules-connected-by-name">Modules connected by name&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> adder_explicit (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (ci),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">0&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>co (c1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u1 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">1&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">1&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (c1),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">1&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.co (c2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u2 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">2&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">2&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (c2),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">2&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.co (&lt;span style="color:#ae81ff">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u3 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.a (r1[&lt;span style="color:#ae81ff">3&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.b (r2[&lt;span style="color:#ae81ff">3&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.ci (c3),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.sum (result[&lt;span style="color:#ae81ff">3&lt;/span>]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.co (carry)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="instantiating-a-module">Instantiating a module&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20parity%20%28%0aa,%0ab,%0ac,%0ad,%0ay%0a%29;%0a%0ainput%20a;%0ainput%20b;%0ainput%20c;%0ainput%20d;%0a%0aouput%20y;%0a%0awire%20a;%0awire%20b;%0awire%20c;%0awire%20d;%0awire%20y;%0a%0awire%20out_0;%0awire%20out_1;%0a%0axor%20u0%20%28out_0,%20a,%20b%29;%0axor%20u1%20%28out_1,%20c,%20d%29;%0a%0axor%20u2%20%28y,%20out_0,%20out_1%29;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> parity (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> y;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out_0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out_1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> u0 (out_0, a, b);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> u1 (out_1, c, d);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> u2 (y, out_0, out_1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="port-connection-rules">Port Connection Rules&lt;/h4>
&lt;ul>
&lt;li>Inputs : internally must always be of type net, externally the inputs can be connected to a variable of type reg or net.&lt;/li>
&lt;li>Outputs : internally can be of type net or reg, externally the outputs must be connected to a variable of type net.&lt;/li>
&lt;li>Inouts : internally or externally must always be type net, can only be connected to a variable net type.&lt;/li>
&lt;li>Width matching : it is legal to connect internal and external ports of different sizes. But beware, synthesis tools could report problems.&lt;/li>
&lt;li>Unconnected ports : unconnected ports are allowed by using a &amp;ldquo;,&amp;rdquo;.&lt;/li>
&lt;li>The net data types are used to connect structure.&lt;/li>
&lt;li>A net data type is required if a signal can be driven a structural connection.&lt;/li>
&lt;/ul>
&lt;h5 id="example---implicit-unconnected-port">Example - Implicit Unconnected Port&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20implicit%28%29;%0areg%20clk,%20d,%20rst,%20pre;%0awire%20q;%0a%0adff%20u0%20%28q,,%20clk,%20d,%20rst,%20pre%29;%0a%0aend%20module%0a%0amodule%20dff%20%28q,%20q_bar,%20clk,%20d,%20rst,%20pre%29;%0ainput%20clk,%20d,%20rst,%20pre;%0aoutput%20q,%20q_bar;%0areg%20q;%0a%0aassign%20a_bar%20=%20~q;%0a%0aalways%20@%20%28posedge%20clk%29%0a%0aif%209rst%20==1%27b1%29%20gegin%0a%20%20q%20%3c=%200;%0aend%20else%20if%20%28pre%20==%201%27b1%29%20begin%0a%20%20q%20%3c=%201;%0aend%20else%20being%0a%20%20q%20%3c=%20d;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> implicit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clk, d, rst, pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dff u0 (q,, clk, d, rst, pre);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">module&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> dff (q, q_bar, clk, d, rst, pre);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk, d, rst, pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> q, q_bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> a_bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#ae81ff">9&lt;/span>rst &lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) gegin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (pre &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> being
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="example---explicit-unconnected-port">Example - Explicit Unconnected Port&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20explicit%28%29;%0areg%20clk,%20d,%20rst,%20pre;%0awire%20q;%0a%0adff%20u0%20%28%0a.q%20%28q%29,%0a.d%20%28d%29,%0a.clk%20%28clk%29,%0a.q_bar%20%28%29,%0a.rst%20%28rst%29,%0a.pre%20%28pre%29%0a%29;%0a%0aendmodule%0a%0a%0amodule%20dff%20%28q,%20q_bar,%20clk,%20d,%20rst,%20pre%29;%0ainput%20clk,%20d,%20rst,%20pe;%0aoutput%20q,%20q-bar;%0areg%20q;%0a%0aassign%20q_bar%20=%20~q;%0a%0aalways%20@%20%28posedge%20clk%29%0a%0aif%20%28rst%20==%201%27b1%29%20begin%0a%20%20q%20%3c=%200;%0aend%20else%20if%20%28pre%20==%201%27b1%29%20begin%0a%20%20q%20%3c=%201;%0aend%20else%20begin%0a%20%20q%20%3c=%20d;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> explicit();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clk, d, rst, pre;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dff u0 (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.q (q),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.d (d),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.clk (clk),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.q_bar (),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.rst (rst),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.pre (pre)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> dff (q, q_bar, clk, d, rst, pre);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> clk, d, rst, pe;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> q, q&lt;span style="color:#f92672">-&lt;/span>bar;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> q_bar &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clk)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (rst &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (pre &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#ae81ff">&amp;#39;b1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q &lt;span style="color:#f92672">&amp;lt;=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="hierarchical-identifiers">Hierarchical Identifiers&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;addbit.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> adder_hier (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>carry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r1,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r2,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ci
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> c3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u0 (r1[&lt;span style="color:#ae81ff">0&lt;/span>], r2[&lt;span style="color:#ae81ff">0&lt;/span>],ci,result[&lt;span style="color:#ae81ff">0&lt;/span>],c1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u1 (r1[&lt;span style="color:#ae81ff">1&lt;/span>], r2[&lt;span style="color:#ae81ff">1&lt;/span>],c1,result[&lt;span style="color:#ae81ff">1&lt;/span>],c2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u2 (r1[&lt;span style="color:#ae81ff">2&lt;/span>], r2[&lt;span style="color:#ae81ff">2&lt;/span>],c2,result[&lt;span style="color:#ae81ff">2&lt;/span>],c3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>addbit u3 (r1[&lt;span style="color:#ae81ff">3&lt;/span>], r2[&lt;span style="color:#ae81ff">3&lt;/span>],c3,result[&lt;span style="color:#ae81ff">3&lt;/span>],carry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> tb();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] r1, r2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> ci;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> carry;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ci &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> r1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> r2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> ci &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> $display(&lt;span style="color:#e6db74">&amp;#34;+-----------------+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adder_hier U (result, carry, r1, r2, ci);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;+---------------+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;|r1|r2|ci|u0.sum|u1.sum|u2.sum|u3.sum|&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;+---------------+&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitoer(&lt;span style="color:#e6db74">&amp;#34;|%h|%h|%h|%h|h|%h|%h|&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r1, r2, ci, tb.U.u0.sum, tb.U.u1.sum, tb.U.u2.sum, tb.U.u3.sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="data-types">Data Types&lt;/h4>
&lt;ul>
&lt;li>Verilog Language has two primary data types:
&lt;ul>
&lt;li>Nets - Present structural connections between components.&lt;/li>
&lt;li>Registers - represent variables used to store data.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Every signal has a data type associated with it:
&lt;ul>
&lt;li>Explicitly declared with a declaration in your Verilog code.&lt;/li>
&lt;li>Implicitly declared with no declaration when used to connect structural building blocks in your code. Implicit declaration is always a net type &amp;ldquo;wire&amp;rdquo; and is one bit wide.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h5 id="types-of-nets">Types of Nets&lt;/h5>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Net Data Type&lt;/th>
 &lt;th>Functionality&lt;/th>
 &lt;th>간략 번역&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>wire, tri&lt;/td>
 &lt;td>Interconnecting wire - nospecial resolution function&lt;/td>
 &lt;td>상호 연결&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>wor, trior&lt;/td>
 &lt;td>Wired outputs Or together (models ECL)&lt;/td>
 &lt;td>연결된 것들끼리 or한 값&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>wand, triand&lt;/td>
 &lt;td>Wired outputs And together (models open-collector)&lt;/td>
 &lt;td>연결된 것들끼리 and 한 값&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>tri0, tri1&lt;/td>
 &lt;td>Net pulls-down or pulls-up when not driven&lt;/td>
 &lt;td>tri와 동일한데, z 일때 0이거나 1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>supply0, supply1&lt;/td>
 &lt;td>Net has a constant logic 0 or logic 1 (supply strenth)&lt;/td>
 &lt;td>상수 ground, vdd&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>trireg&lt;/td>
 &lt;td>Retains last value, when driven by z(tristate).&lt;/td>
 &lt;td>z일때 예전 값을 기억&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h5 id="example---wor">Example - wor&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20test_wor%28%29;%0awor%20a;%0areg%20b,%20c;%0aassign%20a%20=%20b;%0aassign%20a%20=%20c;%0a%0ainitial%20begin%0a%20%20$monitor%28%22%25g%20a%20=%20%25b%20b%20=%20%25b%20c%20=%20%25b%22,%20$time,%20a,%20b,%20c%29;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20c%20=%200;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20c%20=%201;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20$finish;%0aend%0a%0aendmoudle">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;pre>&lt;code>module test_wor();
wor a;
reg b, c;
assign a = b;
assign a = c;

initial begin
 $monitor(&amp;#34;%g a = %b b = %b c = %b&amp;#34;, $time, a, b, c);
 #1 b = 0;
 #1 c = 0;
 #1 b = 1;
 #1 b = 0;
 #1 c = 1;
 #1 b = 1;
 #1 b = 0;
 #1 $finish;
end

endmoudle&lt;/code>&lt;/pre>
 
&lt;/div>
&lt;h5 id="example---tri">Example - tri&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> test_tri();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">tri&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> b, c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> (b) &lt;span style="color:#f92672">?&lt;/span> c &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bz;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;%g a = %b b = %b c= %b&amp;#34;&lt;/span>, $time, a, b, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h5 id="example---trireg">Example - trireg&lt;/h5>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="#ZgotmplZ">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> test_trireg();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">trireg&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> b, c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">assign&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> (b) &lt;span style="color:#f92672">?&lt;/span> c &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bz;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;%g a = %b b = %b c= %b&amp;#34;&lt;/span>, $time, a, b, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="register-data-types">Register Data Types&lt;/h4>
&lt;ul>
&lt;li>Registers store the last value assigned to them until another assignment statement changes their value. (새로운 할당 전까지 그 값이 변하지 않고 저장한다.)&lt;/li>
&lt;li>Registers represent data storage constructs. (register는 data구성을 표현한다?)&lt;/li>
&lt;li>You can create regs arrays called memories. (memories 라고도 불리는 regs array를 만들수도 있다.)&lt;/li>
&lt;li>register data types are used as variables in procedural blocks. (register의 data type은 procedural block들 에서 변수로써 쓰인다.)&lt;/li>
&lt;li>A register data type is required if a signal is assigned a value within a procedural block (procedural block에서 변수의 값을 할당하려면 register의 data type이 필요하다.)&lt;/li>
&lt;li>Procedural blocks begin with keyword initial and always. (Procedural block 은 initial 과 always 키워드로 시작한다.)&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Data types&lt;/th>
 &lt;th>Functionality&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>reg&lt;/td>
 &lt;td>Unsigned variable&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>integer&lt;/td>
 &lt;td>Signed variable - 32 bits&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>time&lt;/td>
 &lt;td>Unsigned integer - 64 bits&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>real&lt;/td>
 &lt;td>Double precision floating point variable&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h4 id="strings">Strings&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Character&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>\n&lt;/td>
 &lt;td>New line character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>\t&lt;/td>
 &lt;td>Tab character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>\&lt;/td>
 &lt;td>Backslash () character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&amp;quot;&lt;/td>
 &lt;td>Double quote (&amp;quot;) Character&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>\ddd&lt;/td>
 &lt;td>A character specified in 1-3 octal digits (0 &amp;lt;= d &amp;lt;= 7)&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>%%&lt;/td>
 &lt;td>Percent (%) character&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="gate-primitives">Gate Primitives&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20gates%28%29;%0a%0awire%20out0;%0awire%20out1;%0awire%20out2;%0areg%20in1,%20in2,%20in3,%20in4;%0a%0anot%20U1%28out0,%20in1%29;%0aand%20U2%28out1,%20in1,%20in2,%20in3,%20in4%29;%0axor%20U3%28out2,%20in1,%20in2,%20in3%29;%0a%0ainitial%20begin%0a%20%20$monitor%28%22in1%20=%20%25b%20in2=%20%25b%20in3=%25b%20out0=%25b%20out1=%25b%20out2=%25b%22,%0a%20%20%20%20in1,%20in2,%20in3,%20in4,%20out0,%20out1,%20out2%29;%0a%20%20in1%20=%200;%0a%20%20in2%20=%200;%0a%20%20in3%20=%200;%0a%20%20in4%20=%200;%0a%20%20%0a%20%20#1%20in1%20=%201;%0a%20%20#1%20in2%20=%201;%0a%20%20#1%20in3%20=%201;%0a%20%20#1%20in4%20=%201;%0a%20%20#1%20$finish;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> gates();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> out2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> in1, in2, in3, in4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">not&lt;/span> U1(out0, in1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">and&lt;/span> U2(out1, in1, in2, in3, in4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">xor&lt;/span> U3(out2, in1, in2, in3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;in1 = %b in2= %b in3=%b out0=%b out1=%b out2=%b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in1, in2, in3, in4, out0, out1, out2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in3 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> in4 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="transmission-gate-primitives">Transmission Gate Primitives&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20transmission_gates%28%29;%0a%0areg%20data_enable_low,%20in;%0awire%20data_bus,%20out1,%20out2;%0a%0abufif0%20u1%28data_bus,%20in,%20data_enable_low%29;%0abuf%20U2%28out1,%20in%29;%0anot%20U3%28out2,%20in%29;%0a%0ainitial%20begin%0a%20%20$monitor%28%0a%20%20%20%20%22@%25g%20in%20=%20%25b%20data_enable_low=%25b%20out1=%25b%20out2=%25b%20data_bus=%25b%22,%0a%20%20%20%20$time,%20in,%20data_enable_low,%20out1,%20out2,%20data_bus%29;%0a%20%20data_enable_low%20=%200;%0a%20%20in%20=%200;%0a%20%20#4%20data_enable_low%20=%201;%0a%20%20#8%20$finish;%0aend%0a%0aalways%20#2%20in%20=%20~in;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> transmission_gates();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> data_enable_low, in;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> data_bus, out1, out2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">bufif0&lt;/span> u1(data_bus, in, data_enable_low);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">buf&lt;/span> U2(out1, in);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">not&lt;/span> U3(out2, in);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;@%g in = %b data_enable_low=%b out1=%b out2=%b data_bus=%b&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $time, in, data_enable_low, out1, out2, data_bus);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data_enable_low &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">4&lt;/span> data_enable_low &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">8&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> #&lt;span style="color:#ae81ff">2&lt;/span> in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>in;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="switch-primitives">Switch Primitives&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="module%20switch_primitives%28%29;%0a%0awire%20net1,%20net2,%20net3;%0awire%20n4,%20net5,%20net6;%0a%0atranif0%20my_gate1%20%28net1,%20net2,%20net3%29;%0artranif1%20my_gate2%20%28net4,%20net5,%20net6%29;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> switch_primitives();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> net1, net2, net3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> n4, net5, net6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">tranif0&lt;/span> my_gate1 (net1, net2, net3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">rtranif1&lt;/span> my_gate2 (net4, net5, net6);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="logic-values-and-signal-strengths">Logic Values and signal Strengths&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Logic Value&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>0&lt;/td>
 &lt;td>zero, low, false&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>1&lt;/td>
 &lt;td>one, high, true&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>z or Z&lt;/td>
 &lt;td>high impedance, floating&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>x or X&lt;/td>
 &lt;td>unknown, uninitialized, contention&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="verilog-strength-levels">Verilog Strength Levels&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Strengtth Level&lt;/th>
 &lt;th>Specification Keyword&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>7 Supply Drive&lt;/td>
 &lt;td>supply0 supply1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>6 Strong Pull&lt;/td>
 &lt;td>strong0 strong1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>5 Pull Drive&lt;/td>
 &lt;td>pull0 pull1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>4 Large Capacitance&lt;/td>
 &lt;td>large&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>3 Weak Drive&lt;/td>
 &lt;td>weak0 weak1&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>2 Medium Capacitance&lt;/td>
 &lt;td>medium&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>1 Small Capacitance&lt;/td>
 &lt;td>small&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>0 Hi Impedance&lt;/td>
 &lt;td>highz0 highz1&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="user-defined-primitives">User Defined Primitives&lt;/h3>
&lt;h4 id="syntax">Syntax&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="primitive%20udp_syntax%20%28%0aa,%0ab,%0ac,%0ad%0a%29;%0aoutput%20a;%0ainput%20b,c,d;%0a%0aendprimitive">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">primitive&lt;/span> udp_syntax (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b,c,d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endprimitive&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="udp-ports-rules">UDP ports rules&lt;/h4>
&lt;ul>
&lt;li>An UDP can contain only one output and up to 10 inputs.&lt;/li>
&lt;li>Output port should be the first port followed by one or more input ports.&lt;/li>
&lt;li>All UDP ports are scalar, i.e. Vector ports are not allowed.&lt;/li>
&lt;li>UDPs can not have bidirectional ports.&lt;/li>
&lt;li>The output terminal of a sequetial UDP requires an additional declaration as type reg.&lt;/li>
&lt;li>It is illegal to declare a reg for the output terminal of a combinational UDP&lt;/li>
&lt;/ul>
&lt;h4 id="body">Body&lt;/h4>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="primitive%20udp_body%20%28%0aa,%0ab,%0ac%0a%29;%0a%0aouput%20a;%0ainput%20b,%20c;%0a%0a//%20A%20=%20B%20%7c%20C;%0atable%0a%20%20?%201%20:%201;%0a%20%201%20?%20:%201;%0a%20%200%200%20:%200;%0aendtable%0a%0aendprimitive">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">primitive&lt;/span> udp_body (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>c
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ouput a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> b, c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// A = B | C;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">table&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endtable&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endprimitive&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="%60include%20%22udp_body.v%22%0amodule%20udp_body_tb%28%29;%0a%0areg%20b,c;%0awire%20a;%0a%0audp_body%20udp%20%28a,%20b,%20c%29;%0a%0ainitial%20begin%0a%20%20$monitor%28%22%20B%20=%20%25b%20C%20=%20%25b%20A%20=%20%25b%22,%20b,%20c,%20a%29;%0a%20%20b%20=%200;%0a%20%20c%20=%200;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20c%20=%201;%0a%20%20#1%20b%20=%201%27bx;%0a%20%20#1%20c%20=%200;%0a%20%20#1%20b%20=%201;%0a%20%20#1%20c%20=%201%27bx;%0a%20%20#1%20b%20=%200;%0a%20%20#1%20$finish;%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;udp_body.v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> udp_body_tb();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> b,c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>udp_body udp (a, b, c);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34; B = %b C = %b A = %b&amp;#34;&lt;/span>, b, c, a);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&amp;#39;bx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">1&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h4 id="symbols">Symbols&lt;/h4>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Symbol&lt;/th>
 &lt;th>interpretation&lt;/th>
 &lt;th>Explanation&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>?&lt;/td>
 &lt;td>0 or 1 or X&lt;/td>
 &lt;td>? means the variable can be 0 or 1 or x&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>b&lt;/td>
 &lt;td>0 or 1&lt;/td>
 &lt;td>Same as ?, but x is not included&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>f&lt;/td>
 &lt;td>(10)&lt;/td>
 &lt;td>Falling edge on an input&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>r&lt;/td>
 &lt;td>(01)&lt;/td>
 &lt;td>Rising edge on an input&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>p&lt;/td>
 &lt;td>(01) or (0x) or (x1) or (1z0 or (z1))&lt;/td>
 &lt;td>Rising edge including x and z&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>n&lt;/td>
 &lt;td>(10) or (1x) or (x0) or (0z) or (z0)&lt;/td>
 &lt;td>Falling edge including x and z&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>*&lt;/td>
 &lt;td>(??)&lt;/td>
 &lt;td>All transitions&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>-&lt;/td>
 &lt;td>No change&lt;/td>
 &lt;td>No Change&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="system-task-and-function">System Task and Function&lt;/h3>
&lt;ul>
&lt;li>&lt;code>$display(&amp;quot;format_string&amp;quot;, par_1, par_2, ...);&lt;/code>&lt;/li>
&lt;li>&lt;code>$strobe(&amp;quot;format_string&amp;quot;, par_1, par2, ...);&lt;/code>&lt;/li>
&lt;li>&lt;code>$monitor(&amp;quot;format_string&amp;quot;, par_1, par_2, ...);&lt;/code>&lt;/li>
&lt;li>&lt;code>$displayb (as above but defaults to binary..);&lt;/code>&lt;/li>
&lt;li>&lt;code>$strobeh (as above but defaults to hex..);&lt;/code>&lt;/li>
&lt;li>&lt;code>$monitoro (as above but defaults to octal..);&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>$time&lt;/code>, &lt;code>$stime&lt;/code>, &lt;code>$realtime&lt;/code> : the current simulation time as a 64-bit integer, a 32-bit integer, and a real number&lt;/li>
&lt;li>&lt;code>$reset&lt;/code>, &lt;code>$stop&lt;/code>, &lt;code>$finish&lt;/code> : &lt;code>$reset&lt;/code> resets the simulation back to time 0; &lt;code>$stop&lt;/code> halts the simulator and puts it in interactive mode where the user can enter commands; &lt;code>$finish&lt;/code> exits the simulator back to the operating system.&lt;/li>
&lt;li>&lt;code>$scope&lt;/code>, &lt;code>$showscope&lt;/code> : &lt;code>$scope(hierarchy_name)&lt;/code> sets the current hierarchical scope to hierarchy_name. &lt;code>$showscopes(n)&lt;/code> lists all modules, tasks and block names in (and below, if n is set to 1) the current scope.&lt;/li>
&lt;li>&lt;code>$random&lt;/code> generates a random integer every tie it is called. If the sequence is to be repeatable, teh first time one invokes random giving it a numerical argument (a seed). Otherwise the seed is derived from the computer clock.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>$dumpfile&lt;/code>, &lt;code>$dumpvar&lt;/code>, &lt;code>$dumpon&lt;/code>, &lt;code>$dumpoff&lt;/code>, &lt;code>$dumpall&lt;/code>&lt;/li>
&lt;li>&lt;code>$dumpfile(&amp;quot;filename.vcd&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>$dumpvar&lt;/code> : dumps all variables in the design.&lt;/li>
&lt;li>&lt;code>$dumpvar(1, top)&lt;/code> : dumps all the varaibles in module top and below, but not modules instantiated in top.&lt;/li>
&lt;li>&lt;code>$dumpvar(2, top)&lt;/code> : dumps all the variables in module top and 1 level below.&lt;/li>
&lt;li>&lt;code>$dumpvar(n, top)&lt;/code> : dumps all the variables in module top and n-1 levels below.&lt;/li>
&lt;li>&lt;code>$dumpvar(0, top)&lt;/code> : dumps all the variables in module top and all level below.&lt;/li>
&lt;li>&lt;code>$dumpon&lt;/code> : initiates the dump.&lt;/li>
&lt;li>&lt;code>$dumpoff&lt;/code> : stop dumping.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>$fopen&lt;/code>, &lt;code>$fdisplay&lt;/code>, &lt;code>$fstrobe&lt;/code>, &lt;code>$fmonitor&lt;/code> and &lt;code>$fwrite&lt;/code>&lt;/li>
&lt;li>&lt;code>$fopen&lt;/code> opens an output file and gives the open file a handle for use by the other commands.&lt;/li>
&lt;li>&lt;code>$fclose&lt;/code> : closes the file and lests other programs access it.&lt;/li>
&lt;li>&lt;code>$fdisplay&lt;/code> and &lt;code>$fwrite&lt;/code> write formatted data to a file whenever they are executed. They are the same except &lt;code>$fdisplay&lt;/code> inserts a new line after every execution and &lt;code>$write&lt;/code> does not.&lt;/li>
&lt;li>&lt;code>$disrobe&lt;/code> also writes to file when executed, but its waits until all other operations in the time step are complete before writing. Thus initial &lt;code>#1 a = 1; b= 0; $fstrobe(hand1, a,b); b=1;&lt;/code> will write write 1 1 for a and b.&lt;/li>
&lt;li>&lt;code>$fmonitor&lt;/code> writes to a file whenever any of tis arguments changes.&lt;/li>
&lt;li>&lt;code>handle1 = $fopen(&amp;quot;filenam1.suffix&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>handle2=$fopen(&amp;quot;filename2.suffix&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>$fstrobe(handle1, format, variable list)&lt;/code>&lt;/li>
&lt;li>&lt;code>$fdisplay(handle2, format, variable list)&lt;/code>&lt;/li>
&lt;li>&lt;code>$fwrite(handle2, format, variable list)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="실습">실습&lt;/h2>
&lt;ul>
&lt;li>단순히 문법만 배우니까 먼가 언어를 배우는 느낌이 안나서 코딩해보기로 했다.&lt;/li>
&lt;li>해보니까 새롭게 알게 된게 있어서 해보길 잘했다고 생각한다.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20heap.v%20*/%0amodule%20heap%20%28%0a%20%20d,%0a%20%20is_insert,%0a%20%20ret,%0a%20%20enable,%0a%20%20clock,%0a%20%20reset%0a%29;%0a%0aparameter%20MAX_SIZE%20=%20128;%0a%0ainput%20wire%20[31:0]%20d;%0ainput%20wire%20is_insert;%0ainput%20wire%20enable;%0ainput%20wire%20clock;%0ainput%20wire%20reset;%0a%0aoutput%20reg%20signed%20[31:0]%20ret;%0a%0ainteger%20node[MAX_SIZE%20-%201:0];%0ainteger%20count;%0ainteger%20tmp1,%20tmp2,%20tmp3;%0ainteger%20i;%0a%0ainitial%0abegin%0a%20%20for%20%28i%20=%200;%20i%20%3c%20MAX_SIZE;%20i%20=%20i%20&amp;#43;%201%29%20begin%0a%20%20%20%20node[i]%20=%200;%0a%20%20end%0a%20%20$display%28%22time%20%7c%201%20%7c%202%20%7c%203%20%7c%204%20%7c%205%20%7c%206%20%7c%207%20%7c%208%20%22%29;%0a%20%20$monitor%28%22%25g%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%20%7c%20%25d%22,%0a%20%20%20%20%20%20$time,%20node[1],%20node[2],%20node[3],%20node[4],%20node[5],%20node[6],%20node[7],%20node[8]%29;%0a%20%20count%20=%200;%0aend%0a%0aalways%20@%20%28posedge%20clock%29%0abegin%0a%20%20if%20%28enable%29%20begin%0a%20%20%20%20/*%20insert%20*/%0a%20%20%20%20if%20%28is_insert%29%20begin%0a%20%20%20%20%20%20count%20=%20count%20&amp;#43;%201;%0a%20%20%20%20%20%20node[count]%20=%20d;%0a%20%20%20%20%20%20%0a%20%20%20%20%20%20tmp1%20=%20count;%0a%20%20%20%20%20%20while%20%28tmp1%20%3e%201%20&amp;amp;&amp;amp;%20node[tmp1%20/%202]%20%3c%20node[tmp1]%29%20begin%0a%20%20%20%20%20%20%20%20tmp2%20=%20node%20[tmp1/2];%0a%20%20%20%20%20%20%20%20node%20[tmp1/2]%20=%20node[tmp1];%0a%20%20%20%20%20%20%20%20node%20[tmp1]%20=%20tmp2;%0a%0a%20%20%20%20%20%20%20%20tmp1%20=%20tmp1%20/%202;%0a%20%20%20%20%20%20end%0a%20%20%20%20end%0a%20%20%20%20/*%20pop%20*/%0a%20%20%20%20else%20begin%0a%20%20%20%20%20%20ret%20=%20node[1];%0a%20%20%20%20%20%20%0a%20%20%20%20%20%20node[1]%20=%20node[count];%0a%20%20%20%20%20%20node[count]%20=%20node[1];%0a%20%20%20%20%20%20count%20=%20count%20-%201;%0a%0a%20%20%20%20%20%20tmp1%20=%201;%0a%20%20%20%20%20%20tmp2%20=%20tmp1%20*%202;%0a%20%20%20%20%20%20if%20%28tmp2%20&amp;#43;%201%20%3c=%20count%29%20begin%0a%20%20%20%20%20%20tmp2%20=%20%28node[tmp2]%20%3e%20node[tmp2%20&amp;#43;%201]%29%20?%20tmp2%20:%20tmp2%20&amp;#43;%201;%0a%20%20%20%20%20%20end%0a%0a%20%20%20%20%20%20while%20%28tmp2%20%3c=%20count%20&amp;amp;&amp;amp;%20node[tmp1]%20%3c%20node[tmp2]%29%20begin%0a%20%20%20%20%20%20%20%20tmp3%20=%20node[tmp1];%0a%20%20%20%20%20%20%20%20node[tmp1]%20=%20node[tmp2];%0a%20%20%20%20%20%20%20%20node[tmp2]%20=%20tmp3;%0a%0a%20%20%20%20%20%20%20%20tmp1%20=%20tmp2;%0a%20%20%20%20%20%20%20%20tmp2%20=%20tmp2%20*%202;%0a%0a%20%20%20%20%20%20%20%20if%20%28tmp2%20&amp;#43;%201%20%3c=%20count%29%20begin%0a%20%20%20%20%20%20%20%20%20%20tmp2%20=%20%28node[tmp2]%20%3e%20node[tmp2%20&amp;#43;1]%29%20?%20tmp2%20:%20tmp2%20&amp;#43;%201;%0a%20%20%20%20%20%20%20%20end%0a%20%20%20%20%20%20end%0a%0a%20%20%20%20%20%20node[count%20&amp;#43;%201]%20=%200;%20/*%20to%20display%20*/%0a%20%20%20%20end%0a%20%20end%0aend%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* heap.v */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> heap (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_insert,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">parameter&lt;/span> MAX_SIZE &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">128&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> is_insert;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> enable;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">input&lt;/span> &lt;span style="color:#66d9ef">wire&lt;/span> reset;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">output&lt;/span> &lt;span style="color:#66d9ef">reg&lt;/span> &lt;span style="color:#66d9ef">signed&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> node[MAX_SIZE &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> tmp1, tmp2, tmp3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> MAX_SIZE; i &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[i] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $display(&lt;span style="color:#e6db74">&amp;#34;time | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $monitor(&lt;span style="color:#e6db74">&amp;#34;%g | %d | %d | %d | %d | %d | %d | %d | %d&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $time, node[&lt;span style="color:#ae81ff">1&lt;/span>], node[&lt;span style="color:#ae81ff">2&lt;/span>], node[&lt;span style="color:#ae81ff">3&lt;/span>], node[&lt;span style="color:#ae81ff">4&lt;/span>], node[&lt;span style="color:#ae81ff">5&lt;/span>], node[&lt;span style="color:#ae81ff">6&lt;/span>], node[&lt;span style="color:#ae81ff">7&lt;/span>], node[&lt;span style="color:#ae81ff">8&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> @ (&lt;span style="color:#66d9ef">posedge&lt;/span> clock)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (enable) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* insert */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (is_insert) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> count &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[count] &lt;span style="color:#f92672">=&lt;/span> d;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (tmp1 &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> node[tmp1 &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">&amp;lt;&lt;/span> node[tmp1]) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> node [tmp1&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node [tmp1&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> node[tmp1];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node [tmp1] &lt;span style="color:#f92672">=&lt;/span> tmp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> tmp1 &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">/* pop */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ret &lt;span style="color:#f92672">=&lt;/span> node[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> node[count];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[count] &lt;span style="color:#f92672">=&lt;/span> node[&lt;span style="color:#ae81ff">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#f92672">=&lt;/span> count &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> tmp1 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> (node[tmp2] &lt;span style="color:#f92672">&amp;gt;&lt;/span> node[tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">?&lt;/span> tmp2 &lt;span style="color:#f92672">:&lt;/span> tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (tmp2 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> node[tmp1] &lt;span style="color:#f92672">&amp;lt;&lt;/span> node[tmp2]) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp3 &lt;span style="color:#f92672">=&lt;/span> node[tmp1];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[tmp1] &lt;span style="color:#f92672">=&lt;/span> node[tmp2];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[tmp2] &lt;span style="color:#f92672">=&lt;/span> tmp3;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp1 &lt;span style="color:#f92672">=&lt;/span> tmp2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> tmp2 &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> count) &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp2 &lt;span style="color:#f92672">=&lt;/span> (node[tmp2] &lt;span style="color:#f92672">&amp;gt;&lt;/span> node[tmp2 &lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]) &lt;span style="color:#f92672">?&lt;/span> tmp2 &lt;span style="color:#f92672">:&lt;/span> tmp2 &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node[count &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#75715e">/* to display */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="/*%20test.v%20*/%0a%60include%20%22heap.v%22%20//%20to%20fix%20syntax%20highlight%60%0a%0amodule%20heap_test%28%29;%0a%0areg%20clock,%20reset,%20enable,%20is_insert;%0ainteger%20data;%0awire%20[31:0]%20ret;%0a%0ainitial%20begin%0a%20%20clock%20=%200;%0a%20%20reset%20=%200;%0a%20%20enable%20=%201;%0a%20%20is_insert%20=%201;%0a%20%20data%20=%200;%0a%20%20#5%20data%20=%205;%0a%20%20#10%20data%20=%2010;%0a%20%20#10%20data%20=%207;%0a%20%20#10%20is_insert%20=%200;%0a%20%20#5%20$finish;%0aend%0a%0aalways%20begin%20%0a%20%20#5%20clock%20=%20~clock;%0aend%0a%0aheap%20U%28data,%20is_insert,%20ret,%20enable,%20clock,%20reset%29;%0a%0aendmodule">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-verilog" data-lang="verilog">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* test.v */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">`include&lt;/span> &lt;span style="color:#e6db74">&amp;#34;heap.v&amp;#34;&lt;/span> &lt;span style="color:#75715e">// to fix syntax highlight`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">module&lt;/span> heap_test();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">reg&lt;/span> clock, reset, enable, is_insert;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">integer&lt;/span> data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">wire&lt;/span> [&lt;span style="color:#ae81ff">31&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>] ret;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">initial&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reset &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enable &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_insert &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">10&lt;/span> is_insert &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> $finish;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">always&lt;/span> &lt;span style="color:#66d9ef">begin&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> #&lt;span style="color:#ae81ff">5&lt;/span> clock &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">~&lt;/span>clock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heap U(data, is_insert, ret, enable, clock, reset);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">endmodule&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;ul>
&lt;li>여기서 배운건 assign 할때 async하게 도는 것과 sync 하게 만드는 것 2개가 있다는 것을 알게 되었다. 일단 heap을 짤때 sync하게 짯는데 async 하게 짤수 있는 부분이 있는지 알아봐야겠다.&lt;/li>
&lt;li>&lt;a href="http://aboutmadlife.blogspot.com/2015/01/verilog-blocking-non-blocking.html">http://aboutmadlife.blogspot.com/2015/01/verilog-blocking-non-blocking.html&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>