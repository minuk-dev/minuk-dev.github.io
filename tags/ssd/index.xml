<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ssd on MD98 page</title><link>http://makerdark98.dev/tags/ssd/</link><description>Recent content in ssd on MD98 page</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 14 Jul 2020 19:32:21 +0900</lastBuildDate><atom:link href="http://makerdark98.dev/tags/ssd/index.xml" rel="self" type="application/rss+xml"/><item><title>Flash Translation Layer</title><link>http://makerdark98.dev/wiki/ftl/</link><pubDate>Tue, 14 Jul 2020 19:32:21 +0900</pubDate><guid>http://makerdark98.dev/wiki/ftl/</guid><description>FTL ? Flash Translation Layer의 약자. SSD를 Disk 처럼 사용할 수 있게 변환하는 Layer 구성요소 STL (Sector Translation Layer) Address Mapping : Logical Address 를 Physical Address 로 변환 Garbage Collection : 안 쓰는 NAND Memory를 초기화하여 쓰기 가능한 상태로 바꾸는 것. Wear Leveling : 특정한 NAND Memory에 쓰기가 몰리지 않게 하여, 전체적인 수명을 관리하는 것. BML (Bad-Block Management Layer) BBM(Bad Block Management) : NAND 특성상, 새 NAND 조차 불량 블록이 있을수 있으며, 이런 블록을 관리.</description></item><item><title>PPN(Physical Page Number)</title><link>http://makerdark98.dev/wiki/ppn/</link><pubDate>Tue, 14 Jul 2020 19:29:54 +0900</pubDate><guid>http://makerdark98.dev/wiki/ppn/</guid><description>같이 볼거리 [[FTL]] [[LPN]] 요약 FTL에 의해 변환된 주소를 Page 단위에 따라서 나누고 여기에 번호를 붙인것. PBN(Page Block Number)의 변화와 상관없이 연속적으로 붙여진다. 예시 : Page Block에 4개의 Page가 들어갈 경우 0번 Page Block 은 PPN이 0~3, 1번 Page Block은 4~7을 가지고 있다.</description></item><item><title>LPN(Logical Page Number)</title><link>http://makerdark98.dev/wiki/lpn/</link><pubDate>Tue, 14 Jul 2020 19:28:19 +0900</pubDate><guid>http://makerdark98.dev/wiki/lpn/</guid><description>같이 볼거리 [[FTL]] [[PPN]] 요약 Logical Page Number 이며, [[FTL]]에 의해 변환되기 전 논리적 Page 주소를 Page 단위로 나누고, 이 Page에 번호를 붙인것</description></item><item><title>open-nvm</title><link>http://makerdark98.dev/wiki/open-nvm/</link><pubDate>Mon, 06 Jul 2020 19:38:43 +0900</pubDate><guid>http://makerdark98.dev/wiki/open-nvm/</guid><description>기본 용어 정리 [[FSM]] [[VHDCI]] [[UART]] 공식 홈페이지 http://open-fpga-nvm.github.io/home/ 나름 정리 최근 몇년간, 여러 nvm 기술들이 현대 메모리 시스템들의 결정적인 문제(집적, 지연시간, 전력) 의 문제를 해결할 가능성이 있다는 것을 보여주었다. 이런 최첨단 NVMs 은 높은 저장 용량과 신뢰할만한 성능을 적은 전력 소모에서 보여주는 동안, 광범위한 연구가 이러한 NVMs 을 기존에 존재하던 다른 메모리 조직 층에 맞출려고 하고 있다. 기존 연구들이 이론적인 NVM의 가능성을 을 탐구하고 NVM 시스템을 위한 메모리 관리 기술에서 전례없는 관점을 제공했음에도 불구하고 누구나 접근할수 있는 데이터들은 간단한 분석 모델 또는 검증되지 않은 현실 장비들로부터 생성된다.</description></item><item><title>MRAM (Magnetic Random Access Memory)</title><link>http://makerdark98.dev/wiki/mram/</link><pubDate>Mon, 06 Jul 2020 19:19:38 +0900</pubDate><guid>http://makerdark98.dev/wiki/mram/</guid><description>출처 https://www.samsungsemiconstory.com/1992 https://en.wikipedia.org/wiki/Magnetoresistive_random-access_memory 간단 요약 자성체 소자를 이용한 비휘발성 메모리, Flash Memory 대비 쓰기 속도가 약 1000배 빠르고 전력 소모가 적은 특징이 있다. 위키피디아 번역 일반적인 RAM chip 기술과는 다르게, MRAM은 데이터를 전기 충전이나 흐름으로 저장하지 않고 자기 저장 요소를 사용한다. 이 자기 저장 요소는 2가지 강자성 판들로 구성되며, 각자 자기화 되어 있으며 얇은 절연판에 의해 분리되어 있다. 한 판은 영구적으로 구성되어 있으며, 다른 한판은 메모리를 저장하기 위한 외부 장에 맞추어 바뀌게 된다.</description></item><item><title>nvme</title><link>http://makerdark98.dev/wiki/nvme/</link><pubDate>Mon, 15 Jun 2020 20:13:59 +0900</pubDate><guid>http://makerdark98.dev/wiki/nvme/</guid><description>시작 아무것도 모르고 SSD 에 대해서 아는거라곤, 개발자를 위한 SSD 라는 카카오에서 올린 글(https://tech.kakao.com/2016/07/13/coding-for-ssd-part-1/) 와 [[simplessd]] 논문만 보고 무턱대고 시작한 공부 Linux NVMe 공부 [[workqueue]] [[block layer]] [[IO mapping]] [[blk_mq]] [[IOMMU]] [[SGL]]{Scatter-Gatter List} nvme 자료구조 https://testkernel.tistory.com/3 의문점 linux/drivers/nvme/host 에 있는 nvme 함수들은 어떻게 호출되는가? -&amp;gt; scsi interface 를 사용해서 -&amp;gt; 그러면 어디에 있지? source code를 찾아보고 싶다. -&amp;gt; 일단 request 는 찾았다. block device 에 접근 하려면 (실제로 block device는 아닐수도 있지만 SSD를 일단 Block 으로 사용하고 FTL 로 처리?</description></item><item><title>simple-ssd</title><link>http://makerdark98.dev/wiki/simplessd/</link><pubDate>Wed, 10 Jun 2020 19:39:41 +0900</pubDate><guid>http://makerdark98.dev/wiki/simplessd/</guid><description>새롭게 알게된 것 [[gem5]] 다운로드 simplessd 공홈 하라는 대로 하면 된다. (FullSystem은 example 을 실행해도 그대로 안되서, 그냥 standalone 을 먼저 봐보기로 했다.) 문서 읽기 그냥 홈페이지에 있는 문서를 읽어보자. 중요하니까 정리해놨겠지 그림으로 그려보기 Host Interface Layer HIL 이라고도 불리는 Host Interface Layer에 대한 설명이다. HIL 은 host side에 있는 host controller, host controller 에게 추상화된 API를 제공해주는 SSD Interface Host Controller NVMe, SATA and UFS를 구현해 놓았으며, Open-Channel SSD 는 NVMe 를 상속받음.</description></item><item><title>SSD</title><link>http://makerdark98.dev/wiki/ssd/</link><pubDate>Tue, 28 Apr 2020 21:46:46 +0900</pubDate><guid>http://makerdark98.dev/wiki/ssd/</guid><description>다른 링크 [[SSD 공부자료 모음]] [[SSD(Solid-State Drive)]] [[simplessd]] [[nvme]] [[verilog]] [[MRAM]] [[open-nvm]] 용어 [[FTL]] [[LPN]] [[PPN]]</description></item><item><title>SSD(Solid-State Drive)</title><link>http://makerdark98.dev/wiki/ssdsolid-state-drive/</link><pubDate>Tue, 07 Apr 2020 20:21:10 +0900</pubDate><guid>http://makerdark98.dev/wiki/ssdsolid-state-drive/</guid><description>1. SSD의 구조 1.1. SSD(Solid-State Drive) Flash Memory를 기반으로 한 저장 매체 비트들은 Floating-Gate Transistor로 구성된 Cell에 저장됨. 모든 컴포넌트가 전기 장치 대부분 NAND사용 (cf. NOR VS NAND) 1.1.1. NAND Flash Memory Property Lifecycle is wearing-off(수명이 제한적이다.) 이유 : P/E(Program &amp;amp; Erase) 사이클마다 일부 전자가 오류로 인해 쌓이게 되어 트랜지스터에 갇힘. 이로 인해 갇힌 전자가 일정 수준을 넘어가면 사용 불가해짐. 1.1.2. Cell의 종류 SLC(Single Level Cell) : 하나의 비트만 저장 가능, 긴 수명 MLC(Multiple Level Cell) : 2비트, 레이턴시가 높고 짧은 수명 TLC(Triple Level Cell) : 3비트, 레이턴시가 매우 높고 더 짧은 수명 쓰기가 많을 수록 SLC가 좋고, 읽기가 많을 수록 TLC가 좋음.</description></item><item><title>SSD 공부 자료 모음</title><link>http://makerdark98.dev/wiki/ssd-%EA%B3%B5%EB%B6%80%EC%9E%90%EB%A3%8C-%EB%AA%A8%EC%9D%8C/</link><pubDate>Tue, 07 Apr 2020 20:14:30 +0900</pubDate><guid>http://makerdark98.dev/wiki/ssd-%EA%B3%B5%EB%B6%80%EC%9E%90%EB%A3%8C-%EB%AA%A8%EC%9D%8C/</guid><description>An In-Depth Study of Next Generation Interface for Emerging Non-Volatile Memories
F2FS: A New File System for Flash Storage
The new ext4 filesystem: current status and future plans
개발자를 위한 SSD (Coding for SSD) – Part 5 : 접근 방법과 시스템 최적화
개발자를 위한 SSD (Coding for SSD) - Part 5 : 접근 방법과 시스템 최적화
개발자를 위한 SSD (Coding for SSD) – Part 6 : A Summary – What every programmer should know about solid-state drives</description></item></channel></rss>