<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>decorator on MD98 page</title><link>http://makerdark98.dev/tags/decorator/</link><description>Recent content in decorator on MD98 page</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 07 Apr 2020 20:44:17 +0900</lastBuildDate><atom:link href="http://makerdark98.dev/tags/decorator/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern C++ Design Pattern/Chatper 9. 데코레이터</title><link>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-9-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-9-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/</guid><description>Decorator Dynamic Composition Static Composition Dynamic Decorator struct ColoredShape : Shape { Shape&amp;amp; shape; string color; ColoredShape(Shape&amp;amp; shape, const string&amp;amp; color) : shape{shape}, color{color} {} stinrg str() const override { ostringstream oss; oss &amp;lt;&amp;lt; shape.str() &amp;lt;, &amp;#34; Has the color &amp;#34; &amp;lt;&amp;lt; color; return oss.str(); } }; // Example Code Circle circle{0.5f}; ColoredShape redCircle{circle, &amp;#34;red&amp;#34;}; cout &amp;lt;&amp;lt; redCircle.str(); struct TransparentShape : Shape { Shape&amp;amp; shape; uint8_t transparency; TransparentShape(Shape&amp;amp; shape, const uint8_t transparency) : shape{shape}, transparency{transparency} {} string str() const override { ostringstream oss; oss &amp;lt;&amp;lt; shape.</description></item></channel></rss>