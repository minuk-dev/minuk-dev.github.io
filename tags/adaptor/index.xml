<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>adaptor on MD98 page</title><link>http://makerdark98.dev/tags/adaptor/</link><description>Recent content in adaptor on MD98 page</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 07 Apr 2020 20:44:17 +0900</lastBuildDate><atom:link href="http://makerdark98.dev/tags/adaptor/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern C++ Design Pattern/Chatper 6. 어댑터</title><link>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-6-%EC%96%B4%EB%8C%91%ED%84%B0/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-6-%EC%96%B4%EB%8C%91%ED%84%B0/</guid><description>Adapter Pattern We use a example case, drawiing geometric shape. struct Point { int x, y; }; struct Line{ Point start, end; }; struct VectorObject { virtual std::vector&amp;lt;Line&amp;gt;::iterator begin() = 0; virtual std::vector&amp;lt;Line&amp;gt;::iterator end() = 0; }; struct VectorRectangle : VectorObject { VectorRectangle(int x, int y, int width, int height) { lines.emplace_back(Line{ Point{x, y}, Point{x + width, y} }); lines.emplace_back(Line{ Point{x + width, y}, Point {x + width, y + height} }); lines.</description></item></channel></rss>