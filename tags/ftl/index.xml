<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ftl on minuk.dev</title><link>https://minuk.dev/tags/ftl/</link><description>Recent content in Ftl on minuk.dev</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Tue, 14 Jul 2020 20:11:56 +0900</lastBuildDate><atom:link href="https://minuk.dev/tags/ftl/index.xml" rel="self" type="application/rss+xml"/><item><title>Flash Translation Layer</title><link>https://minuk.dev/wiki/ftl/</link><pubDate>Tue, 14 Jul 2020 19:32:21 +0900</pubDate><guid>https://minuk.dev/wiki/ftl/</guid><description>&lt;h2 id="ftl-">FTL ?&lt;/h2>
&lt;ul>
&lt;li>Flash Translation Layer의 약자.&lt;/li>
&lt;li>SSD를 Disk 처럼 사용할 수 있게 변환하는 Layer&lt;/li>
&lt;/ul>
&lt;h2 id="구성요소">구성요소&lt;/h2>
&lt;ul>
&lt;li>STL (Sector Translation Layer)
&lt;ul>
&lt;li>Address Mapping : Logical Address 를 Physical Address 로 변환&lt;/li>
&lt;li>Garbage Collection : 안 쓰는 NAND Memory를 초기화하여 쓰기 가능한 상태로 바꾸는 것.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Wear Leveling : 특정한 NAND Memory에 쓰기가 몰리지 않게 하여, 전체적인 수명을 관리하는 것.&lt;/li>
&lt;li>BML (Bad-Block Management Layer)
&lt;ul>
&lt;li>BBM(Bad Block Management) : NAND 특성상, 새 NAND 조차 불량 블록이 있을수 있으며, 이런 블록을 관리.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>LLD (Low Level Driver)
&lt;ul>
&lt;li>NAND Flash를 위한 Driver&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="address-mapping-in-ftl">Address Mapping in FTL&lt;/h2>
&lt;h3 id="page-level-maping">Page-level Maping&lt;/h3>
&lt;ul>
&lt;li>Page 단위 모든 Maping을 Mapping Table에 두는것&lt;/li>
&lt;li>Mapping Table 안에는 [[LPN]]과 [[PPN]]이 들어있다.&lt;/li>
&lt;li>장점
&lt;ul>
&lt;li>새로운 쓰기 요청을 사용중이 아닌 페이지라면 어디에든 쓸수 있다. 이는 랜덤 쓰기에서 높은 성능을 보여준다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>NAND Flash Memory 특성상, 쓰기는 페이지 단위로 할 수 있어도, 지우기는 Block 단위로 밖에 안되기 때문에, Free Space가 부족하게 될 경우, 공간을 확보하기 위해서 Copy를 통해 데이터를 모으게 되고, 이 과정에서 쓰기 성능이 매우 떨어지게 된다.&lt;/li>
&lt;li>Mapping Table의 크기가 상대적으로 커서 RAM영역을 많이 차지하게 된다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="block-level-mapping">Block-level Mapping&lt;/h3>
&lt;ul>
&lt;li>Erase 의 단위인 Block단위로 관리하는 방법&lt;/li>
&lt;li>Maping Table에는 LBN(Logical Block Number)와 PBN(Physical Block Number)가 존재하며, 접근할때 PBN으로 Block을 찾은뒤, Page Offset을 통해서 접근한다.&lt;/li>
&lt;li>장점
&lt;ul>
&lt;li>Mapping Table의 크기가 작으며 순차쓰기에서 성능이 좋다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>단점
&lt;ul>
&lt;li>랜덤 쓰기에서 Block Copy로 인해 성능이 떨어진다.&lt;/li>
&lt;li>(이건 개인적 생각) 수명 관리 측면에서도 좋지는 않을 듯&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="hybrid-mapping">Hybrid Mapping&lt;/h3>
&lt;ul>
&lt;li>위 방법 둘을 혼합한 것으로. 쓰기에 대해서 Log Block을 사용한다.&lt;/li>
&lt;/ul></description></item><item><title>LPN(Logical Page Number)</title><link>https://minuk.dev/wiki/lpn/</link><pubDate>Tue, 14 Jul 2020 19:28:19 +0900</pubDate><guid>https://minuk.dev/wiki/lpn/</guid><description>&lt;h2 id="같이-볼거리">같이 볼거리&lt;/h2>
&lt;ul>
&lt;li>[[FTL]]&lt;/li>
&lt;li>[[PPN]]&lt;/li>
&lt;/ul>
&lt;h2 id="요약">요약&lt;/h2>
&lt;ul>
&lt;li>Logical Page Number 이며, [[FTL]]에 의해 변환되기 전 논리적 Page 주소를 Page 단위로 나누고, 이 Page에 번호를 붙인것&lt;/li>
&lt;/ul></description></item></channel></rss>