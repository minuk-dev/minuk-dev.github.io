<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>singleton on MD98 page</title><link>http://makerdark98.dev/tags/singleton/</link><description>Recent content in singleton on MD98 page</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Tue, 07 Apr 2020 20:44:17 +0900</lastBuildDate><atom:link href="http://makerdark98.dev/tags/singleton/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern C++ Design Pattern/Chatper 5. 싱글턴</title><link>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-5-%EC%8B%B1%EA%B8%80%ED%84%B4/</link><pubDate>Tue, 07 Apr 2020 20:44:17 +0900</pubDate><guid>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-5-%EC%8B%B1%EA%B8%80%ED%84%B4/</guid><description>Singleton static Database database{}; /* not recommended */ /** * This method is only secured about MT(Multi Thread)-Safe on C++11 or Higher. */ Database&amp;amp; get_database() { static Database databse; return database; } Traditional Implementation struct Database { protected: Database() { /* Do something */ } public: static Database&amp;amp; get() { // MT-Safe on C++11 or Higher static Database database; return database; } Database(Database const&amp;amp;) = delete; Database(Database &amp;amp;&amp;amp;) = delete; Database&amp;amp; operator=(Database const&amp;amp;) = delete; Database&amp;amp; operator=(Database &amp;amp;&amp;amp;) = delete; }; You can think over inheritance of boost::noncopyable class if you don&amp;rsquo;t perfer to this by your hands.</description></item></channel></rss>