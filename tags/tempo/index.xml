<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tempo on minuk.dev</title><link>https://minuk.dev/tags/tempo/</link><description>Recent content in Tempo on minuk.dev</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Mon, 06 Mar 2023 02:56:19 +0900</lastBuildDate><atom:link href="https://minuk.dev/tags/tempo/index.xml" rel="self" type="application/rss+xml"/><item><title>Beyond Tracing - What do we do with all this data</title><link>https://minuk.dev/wiki/beyond-tracing-what-do-we-do-with-all-this-data/</link><pubDate>Mon, 06 Mar 2023 02:28:31 +0900</pubDate><guid>https://minuk.dev/wiki/beyond-tracing-what-do-we-do-with-all-this-data/</guid><description>&lt;h2 id="links">Links&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=zVHHeO8tAWQ">https://www.youtube.com/watch?v=zVHHeO8tAWQ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;ul>
&lt;li>Metrics-generator&lt;/li>
&lt;li>Parquet&lt;/li>
&lt;li>TraceQL&lt;/li>
&lt;/ul>
&lt;h2 id="matrics-generator">Matrics-generator&lt;/h2>
&lt;h3 id="why-metrics-if-you-have-traces">Why metrics if you have traces?&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Transcation-oriented : Highly structured&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Service-oriented : Aggregated, historical&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Span metrics:&lt;/p>
&lt;ul>
&lt;li>Rate, Error, Duration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Service graph metrics:&lt;/p>
&lt;ul>
&lt;li>Extract service topology&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Tempo Launched at Oct 2022&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tempo 1.0 Jun 2021&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Search over recent data Nov 2021&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Full backend search Jan 2022&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Parquet storage format Dec 2021&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-parquet">What is Parquet?&lt;/h2>
&lt;ul>
&lt;li>Apache Parquet is an opensource, column-oriented data file format designed for efficient data storage and retrieval.&lt;/li>
&lt;li>What dos this mean?:
&lt;ul>
&lt;li>Tempo can store and access data more efficiently&lt;/li>
&lt;li>So can you - arege ecosystem of tools&lt;/li>
&lt;li>No new infrastructure - just a new file format&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="schema">Schema&lt;/h3>
&lt;pre tabindex="0">&lt;code>TraceID
Duration
 Span #1
 Name
 ServiceName
 Tag #1
 Tag #2
 .
 Duration
 Span #2
 Name
 ServiceName
 Tag #1
 Event#1
 .
 Duration
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;ol>
&lt;li>Encodings:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>traceID into dictionary&lt;/li>
&lt;li>duration into delta&lt;/li>
&lt;li>tags into dictionary&lt;/li>
&lt;li>events into snappy&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>FindTraceByID&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>Attribute search:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;code>cluster=&amp;quot;foo&amp;quot;, namespace=&amp;quot;bar&amp;quot;&lt;/code>&lt;/li>
&lt;li>It uses their tags&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ol start="4">
&lt;li>Felxible schema:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>easily add new column (e.g. cluster, http.url)&lt;/li>
&lt;li>This feature makes us easily find tracing data using custom columns.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="inside-a-block">Inside a block&lt;/h3>
&lt;ul>
&lt;li>Parquet:
&lt;ul>
&lt;li>Open file format - use existing tools&lt;/li>
&lt;li>&lt;code>parquet-tools head data.parquet&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="traceql">TraceQL&lt;/h2>
&lt;h3 id="selecting-traces---basics">Selecting Traces - Basics&lt;/h3>
&lt;pre tabindex="0">&lt;code>{ duration &amp;gt; 2s }
{ name = &amp;#34;GET /:endpoint&amp;#34; }
{ .http.status = 200 }
{ span.http.url =~ &amp;#34;/api/v1/.*&amp;#34; }
{ resource.namespace = &amp;#34;prod&amp;#34; }
{ .http.url=&amp;#34;/:endpoint&amp;#34; &amp;amp;&amp;amp; .http.status = 200 }
&lt;/code>&lt;/pre>&lt;h3 id="traceql---aggregates">TraceQL - Aggregates&lt;/h3>
&lt;pre tabindex="0">&lt;code>{ .db.system = &amp;#34;postgres&amp;#34; } | cound() &amp;gt; 3 }
{ name = &amp;#34;dns.lookup&amp;#34; } | avg(duration) &amp;gt; 500ms }
&lt;/code>&lt;/pre>&lt;h3 id="traceql---pipelines-of-spansets">TraceQL - Pipelines of Spansets&lt;/h3>
&lt;h3 id="selecting-traces---structural">Selecting Traces - Structural&lt;/h3>
&lt;h3 id="traceql---structural">TraceQL - Structural&lt;/h3>
&lt;pre tabindex="0">&lt;code>{ .service.name = &amp;#34;foo&amp;#34; } &amp;gt;&amp;gt; {.service.name = &amp;#34;bar&amp;#34; }
{ name = &amp;#34;tcp.connect&amp;#34; } ~ { name = &amp;#34;dns.lookup&amp;#34; }
{ .service.name != parent.service.name }
&lt;/code>&lt;/pre>&lt;h2 id="personal-notes">Personal Notes&lt;/h2>
&lt;ul>
&lt;li>How to connect metircs and tracing graph? Is only the traceId enough to do it?:
&lt;ul>
&lt;li>For now, prometheus is well known as a troublesome because of its structure which cannot be horizontally scaled.&lt;/li>
&lt;li>To solve this problem, lots of companies use Thanos with low resolution.&lt;/li>
&lt;li>In this situation, tracing information is newly occurred data to save it.&lt;/li>
&lt;li>In my opinion, it is needed to be examined especially in the sight of storage like retention &amp;amp; resolution. Because it is linked to metrics which can be stored with short retention and low resolution.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>