<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sre on</title><link>https://minuk.dev/tags/sre/</link><description>Recent content in Sre on</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Sun, 03 Dec 2023 22:26:48 +0900</lastBuildDate><atom:link href="https://minuk.dev/tags/sre/index.xml" rel="self" type="application/rss+xml"/><item><title>사이트 신뢰성 엔지니어링</title><link>https://minuk.dev/wiki/site-reliability-engineering/</link><pubDate>Sun, 16 Oct 2022 17:00:35 +0900</pubDate><guid>https://minuk.dev/wiki/site-reliability-engineering/</guid><description>&lt;h2 id="1-소개">1. 소개&lt;/h2>
&lt;ul>
&lt;li>직접 비용, 간접 비용&lt;/li>
&lt;/ul>
&lt;h3 id="서비스-관리에-대한-구글의-해법-사이트-신뢰성-엔지니어링">서비스 관리에 대한 구글의 해법: 사이트 신뢰성 엔지니어링&lt;/h3>
&lt;ul>
&lt;li>SRE 중 50~60% 는 구글의 소프트웨어 엔지니어다.&lt;/li>
&lt;li>SRE팀은 반드시 50%의 시간을 오롯이 개발을 위해 활용해야한다.:
&lt;ul>
&lt;li>만약 이에 미치지 못한다면, 운영에 대한 부담이 개발팀에 전가되거나 혹은 운영 책임이 없음에도 새로운 팀원이 팀에 배정되는 현상이 발생하고 있음을 암시하고 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="sre의-신조">SRE의 신조&lt;/h3>
&lt;ul>
&lt;li>Availability, Latency, Performance, Efficiency, Change Management, Monitoring, Emergency response, capacity planning&lt;/li>
&lt;/ul>
&lt;h4 id="지속적으로-엔지니어링에-집중한다">지속적으로 엔지니어링에 집중한다.&lt;/h4>
&lt;ul>
&lt;li>모든 심각한 장애에 대해서는 알림 여부를 떠나 반드시 포스트모텀을 작성해야한다.:
&lt;ul>
&lt;li>모니터링되지 않고 있는 부분을 알 수 있기 때문이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="서비스의-안정성을-유지하면서-변화를-최대한-수용한다">서비스의 안정성을 유지하면서 변화를 최대한 수용한다.&lt;/h4>
&lt;ul>
&lt;li>에러 예산:
&lt;ul>
&lt;li>더 이상 무정지 시스템 같은 목표를 세우지 않는다.&lt;/li>
&lt;li>예측 가능한 시스템 정지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="모니터링">모니터링&lt;/h4>
&lt;ul>
&lt;li>알림(alert) : 어떤 문제가 발생했거나 발생하려고 할 때 상황을 개선하기 위해 사람이 즉각적으로 어떤 대응을 취해야 한다는 것을 알린다.&lt;/li>
&lt;li>티켓(tickets) : 사람의 대응이 필요하지만 즉가적인 대응이 필요하지는 않는 상황을 의미한다.&lt;/li>
&lt;li>로깅(logging) : 누군가 이 정보를 반드시 확인해야 할 필요는 없지만 향후 분석이나 조사를 위해 기록되는 내용이다.&lt;/li>
&lt;/ul>
&lt;h4 id="긴급-대응">긴급 대응&lt;/h4>
&lt;ul>
&lt;li>MTTF(Mean Time To Failure)&lt;/li>
&lt;li>MTTR(Mean Time To Repair)&lt;/li>
&lt;li>MTTR을 줄이기 위해서는 잘 정리된 포괄적인 행동 지침이 큰 역할을 할 수 있다. (장애 대응 지침)&lt;/li>
&lt;/ul>
&lt;h4 id="변화-관리">변화 관리&lt;/h4>
&lt;ul>
&lt;li>제품의 단계적 출시&lt;/li>
&lt;li>문제를 빠르고 정확하게 도출하기&lt;/li>
&lt;li>문제 발생 시 안전하게 이전 버전으로 되돌리기&lt;/li>
&lt;/ul>
&lt;h4 id="수요-예측과-수용-계획">수요 예측과 수용 계획&lt;/h4>
&lt;ul>
&lt;li>자연적 수요에 대한 정확한 예측. 필요한 수용력을 확보하기까지의 시간에 대한 예측을 이끌어낼 수 있다.&lt;/li>
&lt;li>자연적 수요와 인위적 수요를 정확하게 합산하기&lt;/li>
&lt;li>원천적인 수용력(서버, 디스크 등)을 바탕으로 서비스의 수용력을 측정하기 위한 통상의 시스템 부하 테스트&lt;/li>
&lt;/ul>
&lt;h4 id="프로비저닝">프로비저닝&lt;/h4>
&lt;ul>
&lt;li>프로비저닝 : 변화 관리와 수용 계획을 합한 개념&lt;/li>
&lt;/ul>
&lt;h4 id="효율성과-성능">효율성과 성능&lt;/h4>
&lt;ul>
&lt;li>서비스의 효율성을 결정짓는 중요한 요소들 : 수요(부하), 수용력, 소프트웨어의 효율성&lt;/li>
&lt;/ul>
&lt;h2 id="2-sre-관점에서-바라본-구글의-프로덕션-환경">2. SRE 관점에서 바라본 구글의 프로덕션 환경&lt;/h2>
&lt;h3 id="하드웨어">하드웨어&lt;/h3>
&lt;ul>
&lt;li>머신(Machine) : 하드웨어(혹은 가상머신, Virtual Machine)을 의미한다.&lt;/li>
&lt;li>서버(server) : 서비스를 구현하는 소프트웨어를 의미한다.&lt;/li>
&lt;/ul>
&lt;h3 id="하드웨어를-조율하는-시스템-소프트웨어">하드웨어를 조율하는 시스템 소프트웨어&lt;/h3>
&lt;ul>
&lt;li>하드웨어 결함도 소프트웨어로 관리할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="머신-관리하기">머신 관리하기&lt;/h4>
&lt;ul>
&lt;li>보그(Borg) : 오늘날의 쿠버네티스&lt;/li>
&lt;/ul>
&lt;h4 id="저장소">저장소&lt;/h4>
&lt;ul>
&lt;li>저장소는 여러 계층으로 구성된다.:
&lt;ul>
&lt;li>가장 낮은 계층은 D 계층&lt;/li>
&lt;li>Colossus, 구글 파일 시스템의 후속 제품이다.&lt;/li>
&lt;li>콜로서스를 바탕으로 데이터베이스와 유사한 서비스들이 존재한다.:
&lt;ul>
&lt;li>Spanner, Bigtable, Blobstore&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="네트워킹">네트워킹&lt;/h4>
&lt;ul>
&lt;li>GSLB(Global Software Load Balancer):
&lt;ul>
&lt;li>DNS 요청에 대한 지역적 로드밸렁싱&lt;/li>
&lt;li>사용자 서비스 수준에서의 로드밸런싱&lt;/li>
&lt;li>원격 프로시저 호출(RPC) 수준에서의 로드밸런싱&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="기타-시스템-소프트웨어">기타 시스템 소프트웨어&lt;/h3>
&lt;h4 id="잠금-서비스">잠금 서비스&lt;/h4>
&lt;ul>
&lt;li>처비(Chubby), Paxos 프로토콜&lt;/li>
&lt;li>요즘 널리사용되는 오픈소스(k8s, kafka 등)은 etcd, zookeeper를 사용하고 이들은 raft 알고리즘으로 동작한다.&lt;/li>
&lt;/ul>
&lt;h4 id="모니터링과-알림">모니터링과 알림&lt;/h4>
&lt;ul>
&lt;li>치명적인 문제점에 대한 알림 설정&lt;/li>
&lt;li>행동 비교: 소프트웨어 업데이트 이후 서버가 빨라졌는가?&lt;/li>
&lt;li>수용 계획을 위한 가장 기본적인 지표인 시간의 흐름에 따른 자원 소비 행위의 개선 여부 확인하기&lt;/li>
&lt;/ul>
&lt;h3 id="소프트웨어-인프라스트럭처">소프트웨어 인프라스트럭처&lt;/h3>
&lt;ul>
&lt;li>Protocol buffers:
&lt;ul>
&lt;li>오늘날에는 gRPC를 사용하고 gRPC 는 대부분 Protocol Buffers 를 사용한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="개발-환경">개발 환경&lt;/h3>
&lt;ul>
&lt;li>구글에서의 업무 흐름 중 중요한 암묵적인 합의:
&lt;ul>
&lt;li>프로젝트 외부의 컴포넌트에서 문제가 발생하면 엔지니어는 문제를 해결하고, 변경사항(cahgnelist, CL)을 소유자에게 보내서 리뷰를 요청한 후 변경된 코드를 제출할 수 있다.&lt;/li>
&lt;li>엔지니어가 소속된 프로젝트의 소스 코드 변경은 반드시 리뷰를 거쳐야 한다. 모든 소프트웨어는 제출되기 전에 리뷰를 받아야 한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="ii-원리와-원칙들">II. 원리와 원칙들&lt;/h1>
&lt;h2 id="3-위험-요소-수용하기">3. 위험 요소 수용하기&lt;/h2>
&lt;ul>
&lt;li>사용자의 스마트폰이 99% 의 신뢰성을 가진다면, 99.99%와 99.999% 서비스는 사용자가 구별할수 없다.&lt;/li>
&lt;li>SRE는 이 점을 이용해서 위험요소, 빠른 혁신, 효과적인 서비스 운영의 균형을 잡는다. (기능, 서비스, 성능)&lt;/li>
&lt;/ul>
&lt;h3 id="위험-요소-관리하기">위험 요소 관리하기&lt;/h3>
&lt;ul>
&lt;li>신뢰성을 향상시킬수는 있지만 비용이 증가하는 요소들:
&lt;ul>
&lt;li>여분의 머신/컴퓨트 자원 비용&lt;/li>
&lt;li>기회 비용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>가용성 목표치를 초과 달성하려고 노력은 하되, 넘치게 초과하려고는 하지 않는다.&lt;/li>
&lt;li>가용성 목표치를 초과 달성했다면, 기술부채를 줄이거나 윤영비용을 줄이려고 시도해야한다.&lt;/li>
&lt;/ul>
&lt;h3 id="서비스-위험-측정하기">서비스 위험 측정하기&lt;/h3>
&lt;ul>
&lt;li>시간 기준 가용성 : 가용성 = 업타임 / (업타임 + 다운타임)&lt;/li>
&lt;li>종합 가용성 : 가용성 = 성공한 요청 수 / 전체 요청수&lt;/li>
&lt;li>널리 사용되는 가용성 지표를 측정하는 방법:
&lt;ul>
&lt;li>주 단위 혹은 일 단위로 목표치에 대한 성능을 측정한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="서비스의-위험-수용도">서비스의 위험 수용도&lt;/h3>
&lt;h4 id="소비자-대상-서비스의-위험-수용도-정의하기">소비자 대상 서비스의 위험 수용도 정의하기&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>위험 수용도를 결정하기 위해서 고려해야 하는 요소:&lt;/p></description></item></channel></rss>