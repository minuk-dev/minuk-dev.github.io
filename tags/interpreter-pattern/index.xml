<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>interpreter pattern on MD98 page</title><link>http://makerdark98.dev/tags/interpreter-pattern/</link><description>Recent content in interpreter pattern on MD98 page</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 20 Apr 2020 22:46:23 +0900</lastBuildDate><atom:link href="http://makerdark98.dev/tags/interpreter-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern C++ Design Pattern/Chatper 15. 인터프리터</title><link>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-15.-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/</link><pubDate>Mon, 20 Apr 2020 22:46:23 +0900</pubDate><guid>http://makerdark98.dev/wiki/modern-c++-design-pattern/chapter-15.-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/</guid><description>인터프리터 디자인 패턴? 입력 데이터를 해석하는 것 대부분 텍스트이지만 텍스트에 한정되지는 않음. 요약 &amp;hellip; 이책에서 굳이 이 내용을 다루는 이유를 모르겠다. 차라리 Lex/Yacc를 보는게 좋다고 생각한다. 아마도 Boost.Spirit을 알려주고 싶어서 굳이 끼워넣은 느낌? 키워드만 정리하자면, AST, Lex/Yacc</description></item></channel></rss>