<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>workqueue on MD98 page</title><link>http://makerdark98.dev/tags/workqueue/</link><description>Recent content in workqueue on MD98 page</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Mon, 15 Jun 2020 20:14:50 +0900</lastBuildDate><atom:link href="http://makerdark98.dev/tags/workqueue/index.xml" rel="self" type="application/rss+xml"/><item><title>workqueue</title><link>http://makerdark98.dev/wiki/workqueue/</link><pubDate>Mon, 15 Jun 2020 20:14:50 +0900</pubDate><guid>http://makerdark98.dev/wiki/workqueue/</guid><description>참조 사이트 https://m.blog.naver.com/PostView.nhn?blogId=leojesus&amp;amp;logNo=80172478497&amp;amp;proxyReferer=https:%2F%2Fwww.google.com%2F workqueue 사용법 : https://selfish-developer.com/entry/workqueue-%EC%82%AC%EC%9A%A9%EB%B2%95 workqueue 지연처리를 하기 위해서 사용하는 자료구조 (다른 걸로는 SOFTIRQ, TASKLET 이 있음) 사용방법 출처 1: http://egloos.zum.com/rousalome/v/9982311 출처 2: http://egloos.zum.com/rousalome/v/9982570 INIT_WORK() 나 DECLARE_WORK()를 사용해서 초기화 INIT_WORK() : 커널이 실제로 INIT_WORK() 함수를 실행할때 워크를 초기화 DELCARE_WORK() : 커널이 컴파일 될때 세부정보가 포함된 전역 변수 생성 INIT_WORK(&amp;amp;work, handler); schedule_work(&amp;amp;work); /* enqueue work into system queue */ queue_work(&amp;amp;workqueue, &amp;amp;work) /* enqueue work */ queue_work_on(cpu, &amp;amp;workqueue, &amp;amp;work) /* enqueue work with exception handling */ 같이보기 좋은 자료 [[delayed_work]]</description></item></channel></rss>