<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cs on</title><link>https://minuk.dev/tags/cs/</link><description>Recent content in Cs on</description><generator>Hugo</generator><language>ko-kr</language><lastBuildDate>Fri, 30 Sep 2022 19:46:40 +0900</lastBuildDate><atom:link href="https://minuk.dev/tags/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>cs 기본</title><link>https://minuk.dev/wiki/cs/</link><pubDate>Wed, 28 Sep 2022 17:27:10 +0900</pubDate><guid>https://minuk.dev/wiki/cs/</guid><description>&lt;h2 id="정리-동기">정리 동기&lt;/h2>
&lt;ul>
&lt;li>적으면서 공부하려고&lt;/li>
&lt;li>&lt;a href="https://github.com/WooVictory/Ready-For-Tech-Interview">출처&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="algorithm">Algorithm&lt;/h2>
&lt;h3 id="selection-sort">Selection Sort&lt;/h3>
&lt;ul>
&lt;li>Unstable sort&lt;/li>
&lt;li>O(N^2)&lt;/li>
&lt;li>단순한 알고리즘&lt;/li>
&lt;li>적은 교환 횟수&lt;/li>
&lt;li>추가 메모리 공간 필요 없음&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20sort%28int[]%20arr%29%20%7b%0a%20%20for%20%28int%20i%20=%200;%20i%20%3c%20arr.length;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20int%20standard%20=%20i;%0a%20%20%20%20for%20%28int%20j%20=%20i%20&amp;#43;%201;%20j%20%3c%20arr.length;%20j&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20%20%20if%20%28arr[j]%20%3c%20arr[standard]%29%0a%20%20%20%20%20%20%20%20standard%20=%20j;%0a%20%20%20%20%7d%0a%0a%20%20%20%20int%20temp%20=%20arr[standard];%0a%20%20%20%20arr[standard]%20=%20arr[i];%0a%20%20%20%20arr[i]%20=%20temp;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> standard &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">+&lt;/span> 1; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; j&lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>standard&lt;span style="color:#f92672">]&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> standard &lt;span style="color:#f92672">=&lt;/span> j;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>standard&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>standard&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="bubble-sort">Bubble Sort&lt;/h3>
&lt;ul>
&lt;li>구현이 단순&lt;/li>
&lt;li>이미 정렬된 데이터를 정렬할때, 가장 빠르다.&lt;/li>
&lt;li>배열 안에서 정렬하는 방식으로 다른 메모리 공간 필요 없음.&lt;/li>
&lt;li>stable sort&lt;/li>
&lt;li>O(n^2)&lt;/li>
&lt;li>교환 횟수가 많다.&lt;/li>
&lt;li>역순 정렬시 가장 느림.&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20sort%28int[]%20arr%29%20%7b%0a%20%20for%20%28int%20i%20=%200;%20i%20%3c%20arr.length;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20for%20%28int%20j%20=%200;%20j%20%3c%20arr.length%20-%20i%20-%201;%20j%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20%20%20if%20%28arr[j]%20%3e%20arr[j%20&amp;#43;%201]%29%20%7b%0a%20%20%20%20%20%20%20%20int%20temp%20=%20arr[j];%0a%20%20%20%20%20%20%20%20arr[j]%20=%20arr[j%20&amp;#43;%201];%0a%20%20%20%20%20%20%20%20arr[j%20&amp;#43;%201]%20=%20temp;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%7d%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> 0; j &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">-&lt;/span> i &lt;span style="color:#f92672">-&lt;/span> 1; j &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> temp &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>j &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="merge-sort">Merge Sort&lt;/h3>
&lt;ul>
&lt;li>Stable stort&lt;/li>
&lt;li>추가 메모리가 필요하다.&lt;/li>
&lt;li>데이터 분포에 영향을 덜 받는다.&lt;/li>
&lt;li>LinkedList 에서 효율적이다.&lt;/li>
&lt;li>O(nlgn)&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20mergeSort%28int[]%20a,%20int%20left,%20int%20right%29%20%7b%0a%20%20if%20%28left%20%3c%20right%29%20%7b%0a%20%20%20%20int%20mid%20=%20%28left%20&amp;#43;%20right%29%20/%202;%0a%20%20%20%20mergeSort%28a,%20left,%20mid%29;%0a%20%20%20%20mergeSort%28a,%20mid%20&amp;#43;%201,%20right%29;%0a%20%20%20%20merge%28a,%20left,%20mid,%20right%29;%0a%20%20%7d%0a%7d%0a%0aprivate%20static%20void%20merge%28int[]%20a,%20int%20left,%20int%20mid,%20int%20right%29%20%7b%0a%20%20int%20i,%20j,%20k;%0a%20%20i%20=%20left;%0a%20%20j%20=%20%28mid%20&amp;#43;%201%29;%0a%20%20k%20=%200;%0a%20%20int[]%20sorted%20=%20new%28int[],%20right%20-%20left%20&amp;#43;%201%29;%0a%20%20while%20%28i%20%3c=%20mid%20&amp;amp;&amp;amp;%20j%20%3c=%20right%29%20%7b%0a%20%20%20%20if%20%28a[i]%20%3c%20a[j]%29%20sorted[k&amp;#43;&amp;#43;]%20=%20a[i&amp;#43;&amp;#43;];%0a%20%20%20%20else%20sorted[k&amp;#43;&amp;#43;]%20=%20a[j&amp;#43;&amp;#43;];%0a%20%20%7d%0a%20%20while%20%28i%20%3c=%20mid%29%20%7b%0a%20%20%20%20sorted[k&amp;#43;&amp;#43;]%20=%20a[i&amp;#43;&amp;#43;];%0a%20%20%7d%0a%20%20while%20%28j%20%3c=%20right%29%20%7b%0a%20%20%20%20sorted[k&amp;#43;&amp;#43;]%20=%20a[j&amp;#43;&amp;#43;];%0a%20%20%7d%0a%20%20for%20%28k%20=%200;%20i%20%3c%20right%20-%20left%20&amp;#43;%201;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20a[left%20&amp;#43;%20k]%20=%20sorted[k];%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> left, &lt;span style="color:#66d9ef">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (left &lt;span style="color:#f92672">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> mid &lt;span style="color:#f92672">=&lt;/span> (left &lt;span style="color:#f92672">+&lt;/span> right) &lt;span style="color:#f92672">/&lt;/span> 2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mergeSort(a, left, mid);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mergeSort(a, mid &lt;span style="color:#f92672">+&lt;/span> 1, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> merge(a, left, mid, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> left, &lt;span style="color:#66d9ef">int&lt;/span> mid, &lt;span style="color:#66d9ef">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> i, j, k;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#f92672">=&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#f92672">=&lt;/span> (mid &lt;span style="color:#f92672">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> k &lt;span style="color:#f92672">=&lt;/span> 0;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> sorted &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span>, right &lt;span style="color:#f92672">-&lt;/span> left &lt;span style="color:#f92672">+&lt;/span> 1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> mid &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">]&lt;/span>) sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> mid) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">++]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> a&lt;span style="color:#f92672">[&lt;/span>j&lt;span style="color:#f92672">++]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (k &lt;span style="color:#f92672">=&lt;/span> 0; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> right &lt;span style="color:#f92672">-&lt;/span> left &lt;span style="color:#f92672">+&lt;/span> 1; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a&lt;span style="color:#f92672">[&lt;/span>left &lt;span style="color:#f92672">+&lt;/span> k&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> sorted&lt;span style="color:#f92672">[&lt;/span>k&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="insertion-sort">Insertion Sort&lt;/h3>
&lt;ul>
&lt;li>O(n^2) (평균, 최악), O(n) (최선)&lt;/li>
&lt;li>추가 공간 필요 없음.&lt;/li>
&lt;li>단순한 알고리즘&lt;/li>
&lt;li>이미 정렬되어있는 경우 효율적&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20sort%28int[]%20arr%29%20%7b%0a%20%20for%20%28int%20i%20=%201;%20i%20%3c%20arr.length;%20i%20&amp;#43;&amp;#43;%29%20%7b%0a%20%20%20%20int%20standard%20=%20arr[i];%0a%20%20%20%20int%20idx%20=%20i%20-%201;%0a%20%20%20%20while%20%280%20%3c=%20idx%20&amp;amp;&amp;amp;%20standard%20%3c%20arr[idx]%29%20%7b%0a%20%20%20%20%20%20arr[idx%20&amp;#43;%201]%20=%20arr[idx];%0a%20%20%20%20%20%20idx%20--;%0a%20%20%20%20%7d%0a%20%20%20%20arr[idx%20&amp;#43;%201]%20=%20standard;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">sort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 1; i &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>; i &lt;span style="color:#f92672">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> standard &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> idx &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">-&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (0 &lt;span style="color:#f92672">&amp;lt;=&lt;/span> idx &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> standard &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>idx&lt;span style="color:#f92672">]&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>idx &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>idx&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx &lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#f92672">[&lt;/span>idx &lt;span style="color:#f92672">+&lt;/span> 1&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> standard;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="quick-sort">Quick Sort&lt;/h3>
&lt;ul>
&lt;li>Unstable sort&lt;/li>
&lt;li>평균적으로 가장 빠른 구현&lt;/li>
&lt;li>피벗 선정하는게 중요&lt;/li>
&lt;/ul>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20quickSort%28int[]%20arr,%20int%20left,%20int%20right%29%20%7b%0a%20%20int%20L%20=%20left;%0a%20%20int%20R%20=%20right;%0a%20%20int%20pivot%20=%20arr[%28left%20&amp;#43;%20right%29%20/%202];%0a%20%20while%20%28L%20%3c=%20R%29%20%7b%0a%20%20%20%20while%20%28arr[L]%20%3c%20pivot%29%20L%20&amp;#43;&amp;#43;;%0a%20%20%20%20while%20%28pivot%20%3c%20arr[R]%29%20R%20--;%0a%20%20%20%20if%20%28L%20%3c=%20R%29%20%7b%0a%20%20%20%20%20%20if%20%28L%20!=%20R%29%20%7b%0a%20%20%20%20%20%20%20%20swap%28arr,%20L,%20R%29;%0a%20%20%20%20%20%20%7d%0a%20%20%20%20%20%20L%20&amp;#43;&amp;#43;;%0a%20%20%20%20%20%20R%20--;%0a%20%20%20%20%7d%0a%20%20%20%20if%20%28left%20%3c%20R%29%20quickSort%28arr,%20left,%20R%29;%0a%20%20%20%20if%20%28L%20%3c%20right%29%20quickSort%28arr,%20L,%20right%29;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">quickSort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr, &lt;span style="color:#66d9ef">int&lt;/span> left, &lt;span style="color:#66d9ef">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> L &lt;span style="color:#f92672">=&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> R &lt;span style="color:#f92672">=&lt;/span> right;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> pivot &lt;span style="color:#f92672">=&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>(left &lt;span style="color:#f92672">+&lt;/span> right) &lt;span style="color:#f92672">/&lt;/span> 2&lt;span style="color:#f92672">]&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (L &lt;span style="color:#f92672">&amp;lt;=&lt;/span> R) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (arr&lt;span style="color:#f92672">[&lt;/span>L&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> pivot) L &lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (pivot &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>R&lt;span style="color:#f92672">]&lt;/span>) R &lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (L &lt;span style="color:#f92672">&amp;lt;=&lt;/span> R) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (L &lt;span style="color:#f92672">!=&lt;/span> R) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap(arr, L, R);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> L &lt;span style="color:#f92672">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> R &lt;span style="color:#f92672">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (left &lt;span style="color:#f92672">&amp;lt;&lt;/span> R) quickSort(arr, left, R);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (L &lt;span style="color:#f92672">&amp;lt;&lt;/span> right) quickSort(arr, L, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="heap-sort">Heap Sort&lt;/h3>







&lt;div class="codeblock">
 
 &lt;div class="copy-button-box">
 &lt;button class="copy-button" state="copy" data="private%20static%20void%20heapSort%28int[]%20arr%29%20%7b%0a%20%20int%20n%20=%20arr.length;%0a%20%20for%20%28int%20i%20=%20%28n%20/%202%29%20-%201;%20i%20%3e=%200;%20i%20--%29%20%7b%0a%20%20%20%20heapify%28arr,%20n,%20i%29;%0a%20%20%7d%0a%20%20for%20%28int%20i%20=%20n%20-%201;%20i%20%3e%200;%20i%20--%29%20%7b%0a%20%20%20%20swap%28arr,%200,%20i%29;%0a%20%20%20%20heapify%28arr,%20i,%200%29;%0a%20%20%7d%0a%7d%0a%0aprivate%20static%20void%20heapify%28int[]%20arr,%20int%20n,%20int%20i%29%20%7b%0a%20%20int%20p%20=%20i;%0a%20%20int%20l%20=%20i%20*%202%20&amp;#43;%201;%0a%20%20int%20r%20=%20i%20*%202%20&amp;#43;%202;%0a%20%20if%20%28l%20%3c%20n%20&amp;amp;&amp;amp;%20arr[p]%20%3c%20arr[l]%29%20p%20=%20l;%0a%20%20if%20%28r%20%3c%20n%20&amp;amp;&amp;amp;%20arr[p]%20%3c%20arr[r]%29%20p%20=%20r;%0a%20%20if%20%28i%20!=%20p%29%20%7b%0a%20%20%20%20swap%28arr,%20p,%20i%29;%0a%20%20%20%20heapify%28arr,%20n,%20p%29;%0a%20%20%7d%0a%7d">
 &lt;i class="bi bi-copy">&lt;/i>
 &lt;/button>
 &lt;/div>
 

 
 &lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">heapSort&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> arr.&lt;span style="color:#a6e22e">length&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> (n &lt;span style="color:#f92672">/&lt;/span> 2) &lt;span style="color:#f92672">-&lt;/span> 1; i &lt;span style="color:#f92672">&amp;gt;=&lt;/span> 0; i &lt;span style="color:#f92672">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify(arr, n, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> n &lt;span style="color:#f92672">-&lt;/span> 1; i &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0; i &lt;span style="color:#f92672">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap(arr, 0, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify(arr, i, 0);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">heapify&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> arr, &lt;span style="color:#66d9ef">int&lt;/span> n, &lt;span style="color:#66d9ef">int&lt;/span> i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> p &lt;span style="color:#f92672">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> l &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> 2 &lt;span style="color:#f92672">+&lt;/span> 1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> r &lt;span style="color:#f92672">=&lt;/span> i &lt;span style="color:#f92672">*&lt;/span> 2 &lt;span style="color:#f92672">+&lt;/span> 2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (l &lt;span style="color:#f92672">&amp;lt;&lt;/span> n &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>l&lt;span style="color:#f92672">]&lt;/span>) p &lt;span style="color:#f92672">=&lt;/span> l;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (r &lt;span style="color:#f92672">&amp;lt;&lt;/span> n &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>p&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> arr&lt;span style="color:#f92672">[&lt;/span>r&lt;span style="color:#f92672">]&lt;/span>) p &lt;span style="color:#f92672">=&lt;/span> r;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (i &lt;span style="color:#f92672">!=&lt;/span> p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> swap(arr, p, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapify(arr, n, p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 
&lt;/div>
&lt;h3 id="lru-cache-least-recently-used">LRU Cache (Least Recently Used)&lt;/h3>
&lt;ul>
&lt;li>가장 오랫동안 사용하지 않은 페이지를 교체하는 알고리즘&lt;/li>
&lt;li>자세한건 Demand Paging (페이지 요청 기법) 참고&lt;/li>
&lt;/ul>
&lt;h2 id="operating-system">Operating System&lt;/h2>
&lt;h3 id="프로세스-쓰레드">프로세스, 쓰레드&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Process:&lt;/p></description></item></channel></rss>